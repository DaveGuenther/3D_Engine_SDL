<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="950.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="933" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="933" > </text>
<g id="frames">
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.28%)</title><rect x="1079.4" y="629" width="3.3" height="15.0" fill="rgb(223,15,16)" rx="2" ry="2" />
<text  x="1082.38" y="639.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000075ff0&gt; (25 samples, 7.10%)</title><rect x="1096.1" y="805" width="83.8" height="15.0" fill="rgb(245,99,4)" rx="2" ry="2" />
<text  x="1099.14" y="815.5" >Mesh_Pipe..</text>
</g>
<g >
<title>~_Hashtable (1 samples, 0.28%)</title><rect x="1112.9" y="549" width="3.3" height="15.0" fill="rgb(252,177,21)" rx="2" ry="2" />
<text  x="1115.90" y="559.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (6 samples, 1.70%)</title><rect x="543.0" y="741" width="20.1" height="15.0" fill="rgb(213,27,47)" rx="2" ry="2" />
<text  x="546.01" y="751.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (2 samples, 0.57%)</title><rect x="120.6" y="661" width="6.7" height="15.0" fill="rgb(211,138,26)" rx="2" ry="2" />
<text  x="123.62" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.28%)</title><rect x="1086.1" y="757" width="3.3" height="15.0" fill="rgb(218,30,43)" rx="2" ry="2" />
<text  x="1089.08" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1092.8" y="629" width="3.3" height="15.0" fill="rgb(250,217,43)" rx="2" ry="2" />
<text  x="1095.78" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (1 samples, 0.28%)</title><rect x="1186.6" y="469" width="3.4" height="15.0" fill="rgb(238,29,21)" rx="2" ry="2" />
<text  x="1189.65" y="479.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sgetc()[inline] (1 samples, 0.28%)</title><rect x="1176.6" y="725" width="3.3" height="15.0" fill="rgb(210,207,6)" rx="2" ry="2" />
<text  x="1179.59" y="735.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn(char*, long)[inline] (1 samples, 0.28%)</title><rect x="1176.6" y="661" width="3.3" height="15.0" fill="rgb(225,178,47)" rx="2" ry="2" />
<text  x="1179.59" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned int)&lt;0000000000029b80&gt; (1 samples, 0.28%)</title><rect x="1179.9" y="165" width="3.4" height="15.0" fill="rgb(206,20,5)" rx="2" ry="2" />
<text  x="1182.94" y="175.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000064250&gt; (84 samples, 23.86%)</title><rect x="315.1" y="757" width="281.5" height="15.0" fill="rgb(252,20,1)" rx="2" ry="2" />
<text  x="318.06" y="767.5" >TexturemapRasterizer::drawFlatBottomT..</text>
</g>
<g >
<title>nouveau_bufctx_refn&lt;0000000000005d80&gt; (3 samples, 0.85%)</title><rect x="871.5" y="709" width="10.1" height="15.0" fill="rgb(248,226,50)" rx="2" ry="2" />
<text  x="874.53" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.28%)</title><rect x="1086.1" y="773" width="3.3" height="15.0" fill="rgb(216,58,48)" rx="2" ry="2" />
<text  x="1089.08" y="783.5" ></text>
</g>
<g >
<title>int&amp; std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt;(int&amp;&amp;) (1 samples, 0.28%)</title><rect x="1102.8" y="693" width="3.4" height="15.0" fill="rgb(233,223,16)" rx="2" ry="2" />
<text  x="1105.84" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (10 samples, 2.84%)</title><rect x="351.9" y="741" width="33.6" height="15.0" fill="rgb(247,78,37)" rx="2" ry="2" />
<text  x="354.93" y="751.5" >SD..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.28%)</title><rect x="1079.4" y="613" width="3.3" height="15.0" fill="rgb(243,90,39)" rx="2" ry="2" />
<text  x="1082.38" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*, unsigned long) (1 samples, 0.28%)</title><rect x="1133.0" y="309" width="3.4" height="15.0" fill="rgb(215,163,32)" rx="2" ry="2" />
<text  x="1136.01" y="319.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.28%)</title><rect x="616.8" y="725" width="3.3" height="15.0" fill="rgb(253,183,11)" rx="2" ry="2" />
<text  x="619.76" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.57%)</title><rect x="1179.9" y="437" width="6.7" height="15.0" fill="rgb(240,6,50)" rx="2" ry="2" />
<text  x="1182.94" y="447.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1099.5" y="661" width="3.3" height="15.0" fill="rgb(210,180,47)" rx="2" ry="2" />
<text  x="1102.49" y="671.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (5 samples, 1.42%)</title><rect x="1123.0" y="421" width="16.7" height="15.0" fill="rgb(246,103,45)" rx="2" ry="2" />
<text  x="1125.95" y="431.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.57%)</title><rect x="1179.9" y="709" width="6.7" height="15.0" fill="rgb(218,69,29)" rx="2" ry="2" />
<text  x="1182.94" y="719.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn(char*, long) (1 samples, 0.28%)</title><rect x="1176.6" y="677" width="3.3" height="15.0" fill="rgb(209,165,9)" rx="2" ry="2" />
<text  x="1179.59" y="687.5" ></text>
</g>
<g >
<title>vector (17 samples, 4.83%)</title><rect x="1112.9" y="613" width="57.0" height="15.0" fill="rgb(232,192,51)" rx="2" ry="2" />
<text  x="1115.90" y="623.5" >vector</text>
</g>
<g >
<title>0x00007f03803e1f6c (1 samples, 0.28%)</title><rect x="50.2" y="709" width="3.4" height="15.0" fill="rgb(247,171,45)" rx="2" ry="2" />
<text  x="53.23" y="719.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::max_size() const (1 samples, 0.28%)</title><rect x="1109.5" y="693" width="3.4" height="15.0" fill="rgb(222,11,50)" rx="2" ry="2" />
<text  x="1112.55" y="703.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1066.0" y="709" width="3.3" height="15.0" fill="rgb(249,149,16)" rx="2" ry="2" />
<text  x="1068.97" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.28%)</title><rect x="1092.8" y="645" width="3.3" height="15.0" fill="rgb(248,107,32)" rx="2" ry="2" />
<text  x="1095.78" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.28%)</title><rect x="630.2" y="741" width="3.3" height="15.0" fill="rgb(250,164,31)" rx="2" ry="2" />
<text  x="633.17" y="751.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.28%)</title><rect x="60.3" y="693" width="3.3" height="15.0" fill="rgb(247,227,14)" rx="2" ry="2" />
<text  x="63.28" y="703.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.28%)</title><rect x="40.2" y="645" width="3.3" height="15.0" fill="rgb(233,182,26)" rx="2" ry="2" />
<text  x="43.17" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.28%)</title><rect x="1089.4" y="757" width="3.4" height="15.0" fill="rgb(241,164,38)" rx="2" ry="2" />
<text  x="1092.43" y="767.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.28%)</title><rect x="1066.0" y="661" width="3.3" height="15.0" fill="rgb(221,113,47)" rx="2" ry="2" />
<text  x="1068.97" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (161 samples, 45.74%)</title><rect x="63.6" y="773" width="539.8" height="15.0" fill="rgb(218,179,21)" rx="2" ry="2" />
<text  x="66.64" y="783.5" >TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="741" width="3.4" height="15.0" fill="rgb(217,118,41)" rx="2" ry="2" />
<text  x="629.82" y="751.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051770&gt; (1 samples, 0.28%)</title><rect x="1102.8" y="725" width="3.4" height="15.0" fill="rgb(234,85,53)" rx="2" ry="2" />
<text  x="1105.84" y="735.5" ></text>
</g>
<g >
<title>_Vector_impl (1 samples, 0.28%)</title><rect x="419.0" y="725" width="3.3" height="15.0" fill="rgb(233,15,8)" rx="2" ry="2" />
<text  x="421.98" y="735.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (6 samples, 1.70%)</title><rect x="1066.0" y="773" width="20.1" height="15.0" fill="rgb(219,155,6)" rx="2" ry="2" />
<text  x="1068.97" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.28%)</title><rect x="1186.6" y="661" width="3.4" height="15.0" fill="rgb(222,112,48)" rx="2" ry="2" />
<text  x="1189.65" y="671.5" ></text>
</g>
<g >
<title>lseek64 (1 samples, 0.28%)</title><rect x="1173.2" y="661" width="3.4" height="15.0" fill="rgb(240,76,43)" rx="2" ry="2" />
<text  x="1176.24" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 1.42%)</title><rect x="294.9" y="725" width="16.8" height="15.0" fill="rgb(231,22,21)" rx="2" ry="2" />
<text  x="297.94" y="735.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (2 samples, 0.57%)</title><rect x="23.4" y="629" width="6.7" height="15.0" fill="rgb(244,196,42)" rx="2" ry="2" />
<text  x="26.41" y="639.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e2c0&gt; (17 samples, 4.83%)</title><rect x="1112.9" y="741" width="57.0" height="15.0" fill="rgb(220,36,24)" rx="2" ry="2" />
<text  x="1115.90" y="751.5" >Textur..</text>
</g>
<g >
<title>std::iterator_traits&lt;char const*&gt;::difference_type std::distance&lt;char const*&gt;(char const*, char const*) (1 samples, 0.28%)</title><rect x="1102.8" y="629" width="3.4" height="15.0" fill="rgb(248,108,24)" rx="2" ry="2" />
<text  x="1105.84" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.28%)</title><rect x="1069.3" y="709" width="3.4" height="15.0" fill="rgb(220,146,29)" rx="2" ry="2" />
<text  x="1072.32" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.28%)</title><rect x="603.4" y="725" width="3.3" height="15.0" fill="rgb(253,199,40)" rx="2" ry="2" />
<text  x="606.35" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.28%)</title><rect x="1186.6" y="533" width="3.4" height="15.0" fill="rgb(212,124,8)" rx="2" ry="2" />
<text  x="1189.65" y="543.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003aca0&gt; (1 samples, 0.28%)</title><rect x="1096.1" y="757" width="3.4" height="15.0" fill="rgb(231,30,4)" rx="2" ry="2" />
<text  x="1099.14" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (4 samples, 1.14%)</title><rect x="546.4" y="677" width="13.4" height="15.0" fill="rgb(206,33,11)" rx="2" ry="2" />
<text  x="549.36" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.28%)</title><rect x="1186.6" y="581" width="3.4" height="15.0" fill="rgb(208,222,34)" rx="2" ry="2" />
<text  x="1189.65" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.57%)</title><rect x="1179.9" y="245" width="6.7" height="15.0" fill="rgb(237,62,9)" rx="2" ry="2" />
<text  x="1182.94" y="255.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="629" width="57.0" height="15.0" fill="rgb(245,79,13)" rx="2" ry="2" />
<text  x="1115.90" y="639.5" >void s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char const*, char const*) (1 samples, 0.28%)</title><rect x="1102.8" y="613" width="3.4" height="15.0" fill="rgb(206,69,48)" rx="2" ry="2" />
<text  x="1105.84" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.28%)</title><rect x="1133.0" y="357" width="3.4" height="15.0" fill="rgb(231,195,32)" rx="2" ry="2" />
<text  x="1136.01" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 1.42%)</title><rect x="271.5" y="709" width="16.7" height="15.0" fill="rgb(211,183,6)" rx="2" ry="2" />
<text  x="274.48" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.28%)</title><rect x="1096.1" y="661" width="3.4" height="15.0" fill="rgb(233,72,44)" rx="2" ry="2" />
<text  x="1099.14" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (3 samples, 0.85%)</title><rect x="53.6" y="757" width="10.0" height="15.0" fill="rgb(216,199,53)" rx="2" ry="2" />
<text  x="56.58" y="767.5" ></text>
</g>
<g >
<title>0x00007f03803e1b4e (1 samples, 0.28%)</title><rect x="43.5" y="741" width="3.4" height="15.0" fill="rgb(251,116,32)" rx="2" ry="2" />
<text  x="46.52" y="751.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (11 samples, 3.12%)</title><rect x="90.5" y="725" width="36.8" height="15.0" fill="rgb(224,95,36)" rx="2" ry="2" />
<text  x="93.45" y="735.5" >SDL..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.28%)</title><rect x="1106.2" y="661" width="3.3" height="15.0" fill="rgb(238,16,32)" rx="2" ry="2" />
<text  x="1109.19" y="671.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (1 samples, 0.28%)</title><rect x="40.2" y="757" width="3.3" height="15.0" fill="rgb(231,117,42)" rx="2" ry="2" />
<text  x="43.17" y="767.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.28%)</title><rect x="40.2" y="629" width="3.3" height="15.0" fill="rgb(210,217,23)" rx="2" ry="2" />
<text  x="43.17" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.57%)</title><rect x="1179.9" y="517" width="6.7" height="15.0" fill="rgb(220,82,37)" rx="2" ry="2" />
<text  x="1182.94" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.57%)</title><rect x="1179.9" y="693" width="6.7" height="15.0" fill="rgb(250,57,30)" rx="2" ry="2" />
<text  x="1182.94" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.28%)</title><rect x="1072.7" y="677" width="3.3" height="15.0" fill="rgb(218,97,29)" rx="2" ry="2" />
<text  x="1075.67" y="687.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (2 samples, 0.57%)</title><rect x="814.5" y="645" width="6.7" height="15.0" fill="rgb(236,1,28)" rx="2" ry="2" />
<text  x="817.55" y="655.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.28%)</title><rect x="1106.2" y="645" width="3.3" height="15.0" fill="rgb(206,222,40)" rx="2" ry="2" />
<text  x="1109.19" y="655.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_seek(long, std::_Ios_Seekdir, __mbstate_t) (1 samples, 0.28%)</title><rect x="1173.2" y="677" width="3.4" height="15.0" fill="rgb(205,174,24)" rx="2" ry="2" />
<text  x="1176.24" y="687.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (1 samples, 0.28%)</title><rect x="1176.6" y="741" width="3.3" height="15.0" fill="rgb(211,172,4)" rx="2" ry="2" />
<text  x="1179.59" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.28%)</title><rect x="1186.6" y="437" width="3.4" height="15.0" fill="rgb(214,170,54)" rx="2" ry="2" />
<text  x="1189.65" y="447.5" ></text>
</g>
<g >
<title>0x00007f03803ed13e (1 samples, 0.28%)</title><rect x="50.2" y="645" width="3.4" height="15.0" fill="rgb(236,20,18)" rx="2" ry="2" />
<text  x="53.23" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1099.5" y="677" width="3.3" height="15.0" fill="rgb(225,7,44)" rx="2" ry="2" />
<text  x="1102.49" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 1.14%)</title><rect x="23.4" y="725" width="13.4" height="15.0" fill="rgb(213,175,13)" rx="2" ry="2" />
<text  x="26.41" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000025490&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="101" width="3.3" height="15.0" fill="rgb(235,163,49)" rx="2" ry="2" />
<text  x="1186.30" y="111.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000258c0&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="133" width="3.3" height="15.0" fill="rgb(226,188,47)" rx="2" ry="2" />
<text  x="1186.30" y="143.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (4 samples, 1.14%)</title><rect x="576.5" y="741" width="13.4" height="15.0" fill="rgb(252,167,39)" rx="2" ry="2" />
<text  x="579.53" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.57%)</title><rect x="1179.9" y="341" width="6.7" height="15.0" fill="rgb(244,208,30)" rx="2" ry="2" />
<text  x="1182.94" y="351.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 1.42%)</title><rect x="23.4" y="773" width="16.8" height="15.0" fill="rgb(227,0,7)" rx="2" ry="2" />
<text  x="26.41" y="783.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.28%)</title><rect x="40.2" y="677" width="3.3" height="15.0" fill="rgb(248,187,4)" rx="2" ry="2" />
<text  x="43.17" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1062.6" y="725" width="3.4" height="15.0" fill="rgb(233,7,17)" rx="2" ry="2" />
<text  x="1065.61" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.57%)</title><rect x="1179.9" y="533" width="6.7" height="15.0" fill="rgb(217,0,41)" rx="2" ry="2" />
<text  x="1182.94" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1092.8" y="773" width="3.3" height="15.0" fill="rgb(247,214,9)" rx="2" ry="2" />
<text  x="1095.78" y="783.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (4 samples, 1.14%)</title><rect x="801.1" y="645" width="13.4" height="15.0" fill="rgb(247,127,17)" rx="2" ry="2" />
<text  x="804.14" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.57%)</title><rect x="53.6" y="741" width="6.7" height="15.0" fill="rgb(224,180,22)" rx="2" ry="2" />
<text  x="56.58" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="645" width="3.4" height="15.0" fill="rgb(205,202,43)" rx="2" ry="2" />
<text  x="629.82" y="655.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000023a00&gt; (308 samples, 87.50%)</title><rect x="63.6" y="821" width="1032.5" height="15.0" fill="rgb(254,169,6)" rx="2" ry="2" />
<text  x="66.64" y="831.5" >Engine_3D::engine_update()&lt;0000000000023a00&gt;</text>
</g>
<g >
<title>readlinkat@@GLIBC_2.4&lt;00000000000f86b0&gt; (1 samples, 0.28%)</title><rect x="46.9" y="645" width="3.3" height="15.0" fill="rgb(230,131,14)" rx="2" ry="2" />
<text  x="49.88" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 1.70%)</title><rect x="543.0" y="709" width="20.1" height="15.0" fill="rgb(247,103,7)" rx="2" ry="2" />
<text  x="546.01" y="719.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.28%)</title><rect x="382.1" y="693" width="3.4" height="15.0" fill="rgb(248,218,15)" rx="2" ry="2" />
<text  x="385.10" y="703.5" ></text>
</g>
<g >
<title>~vector (6 samples, 1.70%)</title><rect x="543.0" y="725" width="20.1" height="15.0" fill="rgb(214,215,50)" rx="2" ry="2" />
<text  x="546.01" y="735.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.28%)</title><rect x="1066.0" y="693" width="3.3" height="15.0" fill="rgb(210,24,21)" rx="2" ry="2" />
<text  x="1068.97" y="703.5" ></text>
</g>
<g >
<title>0x00007f03803e675a (1 samples, 0.28%)</title><rect x="53.6" y="693" width="3.3" height="15.0" fill="rgb(234,166,43)" rx="2" ry="2" />
<text  x="56.58" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (4 samples, 1.14%)</title><rect x="1149.8" y="325" width="13.4" height="15.0" fill="rgb(242,166,49)" rx="2" ry="2" />
<text  x="1152.77" y="335.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.28%)</title><rect x="53.6" y="597" width="3.3" height="15.0" fill="rgb(222,4,23)" rx="2" ry="2" />
<text  x="56.58" y="607.5" ></text>
</g>
<g >
<title>Engine_3D::Engine_3D() (12 samples, 3.41%)</title><rect x="23.4" y="821" width="40.2" height="15.0" fill="rgb(250,225,8)" rx="2" ry="2" />
<text  x="26.41" y="831.5" >Eng..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.28%)</title><rect x="157.5" y="709" width="3.4" height="15.0" fill="rgb(210,184,5)" rx="2" ry="2" />
<text  x="160.50" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.57%)</title><rect x="1179.9" y="405" width="6.7" height="15.0" fill="rgb(249,32,15)" rx="2" ry="2" />
<text  x="1182.94" y="415.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.28%)</title><rect x="1186.6" y="565" width="3.4" height="15.0" fill="rgb(208,27,53)" rx="2" ry="2" />
<text  x="1189.65" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1076.0" y="629" width="3.4" height="15.0" fill="rgb(217,203,36)" rx="2" ry="2" />
<text  x="1079.02" y="639.5" ></text>
</g>
<g >
<title>operator new(unsigned long)[inline] (3 samples, 0.85%)</title><rect x="1139.7" y="357" width="10.1" height="15.0" fill="rgb(248,50,7)" rx="2" ry="2" />
<text  x="1142.72" y="367.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.57%)</title><rect x="23.4" y="501" width="6.7" height="15.0" fill="rgb(236,199,27)" rx="2" ry="2" />
<text  x="26.41" y="511.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.28%)</title><rect x="791.1" y="645" width="3.3" height="15.0" fill="rgb(227,185,17)" rx="2" ry="2" />
<text  x="794.08" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (32 samples, 9.09%)</title><rect x="714.0" y="693" width="107.2" height="15.0" fill="rgb(250,109,33)" rx="2" ry="2" />
<text  x="716.98" y="703.5" >__driDriverGe..</text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (7 samples, 1.99%)</title><rect x="1139.7" y="421" width="23.5" height="15.0" fill="rgb(245,5,7)" rx="2" ry="2" />
<text  x="1142.72" y="431.5" >s..</text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.57%)</title><rect x="1179.9" y="661" width="6.7" height="15.0" fill="rgb(236,131,46)" rx="2" ry="2" />
<text  x="1182.94" y="671.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (8 samples, 2.27%)</title><rect x="794.4" y="677" width="26.8" height="15.0" fill="rgb(235,18,8)" rx="2" ry="2" />
<text  x="797.43" y="687.5" >n..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (2 samples, 0.57%)</title><rect x="120.6" y="581" width="6.7" height="15.0" fill="rgb(234,78,34)" rx="2" ry="2" />
<text  x="123.62" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.28%)</title><rect x="1106.2" y="709" width="3.3" height="15.0" fill="rgb(213,31,27)" rx="2" ry="2" />
<text  x="1109.19" y="719.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (1 samples, 0.28%)</title><rect x="1022.4" y="645" width="3.3" height="15.0" fill="rgb(211,53,0)" rx="2" ry="2" />
<text  x="1025.39" y="655.5" ></text>
</g>
<g >
<title>std::istream::seekg(std::fpos&lt;__mbstate_t&gt;)&lt;000000000011fb30&gt; (1 samples, 0.28%)</title><rect x="1173.2" y="725" width="3.4" height="15.0" fill="rgb(216,13,22)" rx="2" ry="2" />
<text  x="1176.24" y="735.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (128 samples, 36.36%)</title><rect x="633.5" y="757" width="429.1" height="15.0" fill="rgb(208,85,54)" rx="2" ry="2" />
<text  x="636.52" y="767.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>nouveau_drm_screen_create (69 samples, 19.60%)</title><rect x="831.3" y="725" width="231.3" height="15.0" fill="rgb(237,16,11)" rx="2" ry="2" />
<text  x="834.31" y="735.5" >nouveau_drm_screen_create</text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (16 samples, 4.55%)</title><rect x="1116.2" y="517" width="53.7" height="15.0" fill="rgb(219,63,38)" rx="2" ry="2" />
<text  x="1119.25" y="527.5" >std::..</text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1072.7" y="645" width="3.3" height="15.0" fill="rgb(221,94,50)" rx="2" ry="2" />
<text  x="1075.67" y="655.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 1.14%)</title><rect x="23.4" y="693" width="13.4" height="15.0" fill="rgb(214,128,4)" rx="2" ry="2" />
<text  x="26.41" y="703.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.28%)</title><rect x="382.1" y="645" width="3.4" height="15.0" fill="rgb(211,227,46)" rx="2" ry="2" />
<text  x="385.10" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (4 samples, 1.14%)</title><rect x="1149.8" y="341" width="13.4" height="15.0" fill="rgb(219,68,9)" rx="2" ry="2" />
<text  x="1152.77" y="351.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_space&lt;0000000000005630&gt; (5 samples, 1.42%)</title><rect x="1042.5" y="677" width="16.8" height="15.0" fill="rgb(244,1,19)" rx="2" ry="2" />
<text  x="1045.50" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (1 samples, 0.28%)</title><rect x="83.8" y="725" width="3.3" height="15.0" fill="rgb(206,77,16)" rx="2" ry="2" />
<text  x="86.75" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (16 samples, 4.55%)</title><rect x="1116.2" y="533" width="53.7" height="15.0" fill="rgb(220,30,54)" rx="2" ry="2" />
<text  x="1119.25" y="543.5" >std::..</text>
</g>
<g >
<title>int&amp; std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt;(int&amp;&amp;) (1 samples, 0.28%)</title><rect x="1102.8" y="677" width="3.4" height="15.0" fill="rgb(220,208,46)" rx="2" ry="2" />
<text  x="1105.84" y="687.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.28%)</title><rect x="606.7" y="725" width="3.4" height="15.0" fill="rgb(220,145,53)" rx="2" ry="2" />
<text  x="609.70" y="735.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 1.14%)</title><rect x="23.4" y="709" width="13.4" height="15.0" fill="rgb(234,41,26)" rx="2" ry="2" />
<text  x="26.41" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.28%)</title><rect x="1112.9" y="469" width="3.3" height="15.0" fill="rgb(235,117,19)" rx="2" ry="2" />
<text  x="1115.90" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (4 samples, 1.14%)</title><rect x="422.3" y="725" width="13.4" height="15.0" fill="rgb(214,178,28)" rx="2" ry="2" />
<text  x="425.33" y="735.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (3 samples, 0.85%)</title><rect x="1032.4" y="677" width="10.1" height="15.0" fill="rgb(225,124,38)" rx="2" ry="2" />
<text  x="1035.44" y="687.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.28%)</title><rect x="573.2" y="709" width="3.3" height="15.0" fill="rgb(218,154,17)" rx="2" ry="2" />
<text  x="576.18" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.57%)</title><rect x="640.2" y="741" width="6.7" height="15.0" fill="rgb(236,52,26)" rx="2" ry="2" />
<text  x="643.23" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.57%)</title><rect x="1179.9" y="629" width="6.7" height="15.0" fill="rgb(253,122,19)" rx="2" ry="2" />
<text  x="1182.94" y="639.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (2 samples, 0.57%)</title><rect x="23.4" y="533" width="6.7" height="15.0" fill="rgb(221,197,1)" rx="2" ry="2" />
<text  x="26.41" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.57%)</title><rect x="1179.9" y="485" width="6.7" height="15.0" fill="rgb(217,45,6)" rx="2" ry="2" />
<text  x="1182.94" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.28%)</title><rect x="1186.6" y="693" width="3.4" height="15.0" fill="rgb(249,75,33)" rx="2" ry="2" />
<text  x="1189.65" y="703.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (2 samples, 0.57%)</title><rect x="30.1" y="629" width="6.7" height="15.0" fill="rgb(246,212,1)" rx="2" ry="2" />
<text  x="33.11" y="639.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.28%)</title><rect x="1096.1" y="693" width="3.4" height="15.0" fill="rgb(218,18,32)" rx="2" ry="2" />
<text  x="1099.14" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end() (1 samples, 0.28%)</title><rect x="1166.5" y="421" width="3.4" height="15.0" fill="rgb(237,212,8)" rx="2" ry="2" />
<text  x="1169.53" y="431.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (11 samples, 3.12%)</title><rect x="227.9" y="693" width="36.9" height="15.0" fill="rgb(209,163,49)" rx="2" ry="2" />
<text  x="230.90" y="703.5" >_Pa..</text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.57%)</title><rect x="1179.9" y="213" width="6.7" height="15.0" fill="rgb(242,57,36)" rx="2" ry="2" />
<text  x="1182.94" y="223.5" ></text>
</g>
<g >
<title>0x00007f03803ed2ec (1 samples, 0.28%)</title><rect x="53.6" y="629" width="3.3" height="15.0" fill="rgb(227,100,5)" rx="2" ry="2" />
<text  x="56.58" y="639.5" ></text>
</g>
<g >
<title>llvm::cl::AddLiteralOption(llvm::cl::Option&amp;, llvm::StringRef)@@LLVM_14&lt;0000000000bb3f40&gt; (1 samples, 0.28%)</title><rect x="23.4" y="389" width="3.4" height="15.0" fill="rgb(245,160,28)" rx="2" ry="2" />
<text  x="26.41" y="399.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (348 samples, 98.86%)</title><rect x="23.4" y="853" width="1166.6" height="15.0" fill="rgb(216,135,21)" rx="2" ry="2" />
<text  x="26.41" y="863.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="773" width="3.4" height="15.0" fill="rgb(227,78,8)" rx="2" ry="2" />
<text  x="629.82" y="783.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047d40&gt; (39 samples, 11.08%)</title><rect x="137.4" y="741" width="130.7" height="15.0" fill="rgb(213,54,41)" rx="2" ry="2" />
<text  x="140.39" y="751.5" >TexturePNG::getP..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.28%)</title><rect x="630.2" y="757" width="3.3" height="15.0" fill="rgb(222,37,6)" rx="2" ry="2" />
<text  x="633.17" y="767.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.28%)</title><rect x="1092.8" y="741" width="3.3" height="15.0" fill="rgb(232,21,47)" rx="2" ry="2" />
<text  x="1095.78" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1062.6" y="757" width="3.4" height="15.0" fill="rgb(216,67,45)" rx="2" ry="2" />
<text  x="1065.61" y="767.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="581" width="57.0" height="15.0" fill="rgb(234,184,41)" rx="2" ry="2" />
<text  x="1115.90" y="591.5" >std::_..</text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1092.8" y="677" width="3.3" height="15.0" fill="rgb(219,94,54)" rx="2" ry="2" />
<text  x="1095.78" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.28%)</title><rect x="1086.1" y="725" width="3.3" height="15.0" fill="rgb(239,162,10)" rx="2" ry="2" />
<text  x="1089.08" y="735.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;0000000000053620&gt; (2 samples, 0.57%)</title><rect x="1173.2" y="757" width="6.7" height="15.0" fill="rgb(205,150,14)" rx="2" ry="2" />
<text  x="1176.24" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.28%)</title><rect x="1072.7" y="693" width="3.3" height="15.0" fill="rgb(241,55,0)" rx="2" ry="2" />
<text  x="1075.67" y="703.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000056310&gt; (2 samples, 0.57%)</title><rect x="1179.9" y="613" width="6.7" height="15.0" fill="rgb(207,196,46)" rx="2" ry="2" />
<text  x="1182.94" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (4 samples, 1.14%)</title><rect x="160.9" y="709" width="13.4" height="15.0" fill="rgb(239,217,30)" rx="2" ry="2" />
<text  x="163.85" y="719.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 1.14%)</title><rect x="23.4" y="677" width="13.4" height="15.0" fill="rgb(238,201,6)" rx="2" ry="2" />
<text  x="26.41" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (3 samples, 0.85%)</title><rect x="1129.7" y="405" width="10.0" height="15.0" fill="rgb(211,84,52)" rx="2" ry="2" />
<text  x="1132.66" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 1.14%)</title><rect x="576.5" y="725" width="13.4" height="15.0" fill="rgb(243,51,23)" rx="2" ry="2" />
<text  x="579.53" y="735.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.28%)</title><rect x="382.1" y="661" width="3.4" height="15.0" fill="rgb(224,166,20)" rx="2" ry="2" />
<text  x="385.10" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (7 samples, 1.99%)</title><rect x="1139.7" y="389" width="23.5" height="15.0" fill="rgb(242,93,2)" rx="2" ry="2" />
<text  x="1142.72" y="399.5" >s..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (12 samples, 3.41%)</title><rect x="499.4" y="709" width="40.3" height="15.0" fill="rgb(217,141,33)" rx="2" ry="2" />
<text  x="502.43" y="719.5" >std..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.28%)</title><rect x="1079.4" y="677" width="3.3" height="15.0" fill="rgb(225,188,47)" rx="2" ry="2" />
<text  x="1082.38" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.28%)</title><rect x="36.8" y="597" width="3.4" height="15.0" fill="rgb(246,222,10)" rx="2" ry="2" />
<text  x="39.82" y="607.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.28%)</title><rect x="1106.2" y="693" width="3.3" height="15.0" fill="rgb(207,103,51)" rx="2" ry="2" />
<text  x="1109.19" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1092.8" y="661" width="3.3" height="15.0" fill="rgb(243,68,47)" rx="2" ry="2" />
<text  x="1095.78" y="671.5" ></text>
</g>
<g >
<title>~vector (5 samples, 1.42%)</title><rect x="271.5" y="725" width="16.7" height="15.0" fill="rgb(215,54,42)" rx="2" ry="2" />
<text  x="274.48" y="735.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.28%)</title><rect x="150.8" y="709" width="3.3" height="15.0" fill="rgb(250,153,33)" rx="2" ry="2" />
<text  x="153.80" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.28%)</title><rect x="1112.9" y="421" width="3.3" height="15.0" fill="rgb(219,94,41)" rx="2" ry="2" />
<text  x="1115.90" y="431.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.28%)</title><rect x="586.6" y="693" width="3.3" height="15.0" fill="rgb(223,87,34)" rx="2" ry="2" />
<text  x="589.59" y="703.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.57%)</title><rect x="23.4" y="517" width="6.7" height="15.0" fill="rgb(235,12,28)" rx="2" ry="2" />
<text  x="26.41" y="527.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003a70&gt; (1 samples, 0.28%)</title><rect x="40.2" y="549" width="3.3" height="15.0" fill="rgb(224,4,23)" rx="2" ry="2" />
<text  x="43.17" y="559.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000054830&gt; (22 samples, 6.25%)</title><rect x="1099.5" y="757" width="73.7" height="15.0" fill="rgb(213,154,41)" rx="2" ry="2" />
<text  x="1102.49" y="767.5" >OBJ::ass..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.28%)</title><rect x="616.8" y="757" width="3.3" height="15.0" fill="rgb(236,113,6)" rx="2" ry="2" />
<text  x="619.76" y="767.5" ></text>
</g>
<g >
<title>0x00007f03803e66ee (1 samples, 0.28%)</title><rect x="46.9" y="725" width="3.3" height="15.0" fill="rgb(234,7,43)" rx="2" ry="2" />
<text  x="49.88" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.28%)</title><rect x="603.4" y="741" width="3.3" height="15.0" fill="rgb(217,183,21)" rx="2" ry="2" />
<text  x="606.35" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (16 samples, 4.55%)</title><rect x="1116.2" y="501" width="53.7" height="15.0" fill="rgb(245,163,40)" rx="2" ry="2" />
<text  x="1119.25" y="511.5" >std::..</text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (1 samples, 0.28%)</title><rect x="60.3" y="725" width="3.3" height="15.0" fill="rgb(251,124,8)" rx="2" ry="2" />
<text  x="63.28" y="735.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.28%)</title><rect x="1096.1" y="725" width="3.4" height="15.0" fill="rgb(253,107,36)" rx="2" ry="2" />
<text  x="1099.14" y="735.5" ></text>
</g>
<g >
<title>0x00007f03803e1355 (1 samples, 0.28%)</title><rect x="46.9" y="693" width="3.3" height="15.0" fill="rgb(248,163,21)" rx="2" ry="2" />
<text  x="49.88" y="703.5" ></text>
</g>
<g >
<title>0x00007f03803e1b4e (1 samples, 0.28%)</title><rect x="46.9" y="709" width="3.3" height="15.0" fill="rgb(219,216,32)" rx="2" ry="2" />
<text  x="49.88" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New(unsigned long)&lt;0000000000027cb0&gt; (1 samples, 0.28%)</title><rect x="1159.8" y="293" width="3.4" height="15.0" fill="rgb(206,4,40)" rx="2" ry="2" />
<text  x="1162.83" y="303.5" ></text>
</g>
<g >
<title>nouveau_bufctx_refn&lt;0000000000005d80&gt; (8 samples, 2.27%)</title><rect x="988.9" y="677" width="26.8" height="15.0" fill="rgb(232,185,23)" rx="2" ry="2" />
<text  x="991.86" y="687.5" >n..</text>
</g>
<g >
<title>0x00007f03803f13a5 (1 samples, 0.28%)</title><rect x="46.9" y="677" width="3.3" height="15.0" fill="rgb(229,39,44)" rx="2" ry="2" />
<text  x="49.88" y="687.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (25 samples, 7.10%)</title><rect x="1096.1" y="773" width="83.8" height="15.0" fill="rgb(208,131,16)" rx="2" ry="2" />
<text  x="1099.14" y="783.5" >OBJ::spli..</text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.57%)</title><rect x="1179.9" y="389" width="6.7" height="15.0" fill="rgb(227,52,28)" rx="2" ry="2" />
<text  x="1182.94" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList(tcmalloc::Span*)&lt;00000000000272a0&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="69" width="3.3" height="15.0" fill="rgb(243,115,12)" rx="2" ry="2" />
<text  x="1186.30" y="79.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.57%)</title><rect x="1179.9" y="581" width="6.7" height="15.0" fill="rgb(215,68,25)" rx="2" ry="2" />
<text  x="1182.94" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.28%)</title><rect x="1112.9" y="533" width="3.3" height="15.0" fill="rgb(220,83,3)" rx="2" ry="2" />
<text  x="1115.90" y="543.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000023880&gt; (25 samples, 7.10%)</title><rect x="1096.1" y="821" width="83.8" height="15.0" fill="rgb(239,149,34)" rx="2" ry="2" />
<text  x="1099.14" y="831.5" >Engine_3D..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.57%)</title><rect x="1179.9" y="773" width="6.7" height="15.0" fill="rgb(220,191,26)" rx="2" ry="2" />
<text  x="1182.94" y="783.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Carve(tcmalloc::Span*, unsigned long)&lt;00000000000271a0&gt; (1 samples, 0.28%)</title><rect x="1159.8" y="277" width="3.4" height="15.0" fill="rgb(253,200,4)" rx="2" ry="2" />
<text  x="1162.83" y="287.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;0000000000082330&gt; (1 samples, 0.28%)</title><rect x="610.1" y="741" width="3.3" height="15.0" fill="rgb(223,208,42)" rx="2" ry="2" />
<text  x="613.06" y="751.5" ></text>
</g>
<g >
<title>tuple (1 samples, 0.28%)</title><rect x="1096.1" y="613" width="3.4" height="15.0" fill="rgb(219,84,0)" rx="2" ry="2" />
<text  x="1099.14" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (2 samples, 0.57%)</title><rect x="1179.9" y="725" width="6.7" height="15.0" fill="rgb(212,131,42)" rx="2" ry="2" />
<text  x="1182.94" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (2 samples, 0.57%)</title><rect x="120.6" y="597" width="6.7" height="15.0" fill="rgb(249,199,8)" rx="2" ry="2" />
<text  x="123.62" y="607.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (2 samples, 0.57%)</title><rect x="16.7" y="885" width="6.7" height="15.0" fill="rgb(250,139,38)" rx="2" ry="2" />
<text  x="19.70" y="895.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[](unsigned long) (1 samples, 0.28%)</title><rect x="1169.9" y="725" width="3.3" height="15.0" fill="rgb(248,43,9)" rx="2" ry="2" />
<text  x="1172.89" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.28%)</title><rect x="1062.6" y="773" width="3.4" height="15.0" fill="rgb(232,108,0)" rx="2" ry="2" />
<text  x="1065.61" y="783.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sgetc()[inline] (1 samples, 0.28%)</title><rect x="1176.6" y="709" width="3.3" height="15.0" fill="rgb(226,22,31)" rx="2" ry="2" />
<text  x="1179.59" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.28%)</title><rect x="1112.9" y="453" width="3.3" height="15.0" fill="rgb(211,19,0)" rx="2" ry="2" />
<text  x="1115.90" y="463.5" ></text>
</g>
<g >
<title>VectorMathService::getVectorLength(Vec3d const&amp;) (1 samples, 0.28%)</title><rect x="610.1" y="725" width="3.3" height="15.0" fill="rgb(209,59,23)" rx="2" ry="2" />
<text  x="613.06" y="735.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (348 samples, 98.86%)</title><rect x="23.4" y="885" width="1166.6" height="15.0" fill="rgb(221,224,18)" rx="2" ry="2" />
<text  x="26.41" y="895.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.28%)</title><rect x="170.9" y="693" width="3.4" height="15.0" fill="rgb(243,95,6)" rx="2" ry="2" />
<text  x="173.91" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.57%)</title><rect x="1179.9" y="565" width="6.7" height="15.0" fill="rgb(251,72,0)" rx="2" ry="2" />
<text  x="1182.94" y="575.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (21 samples, 5.97%)</title><rect x="955.3" y="693" width="70.4" height="15.0" fill="rgb(222,85,34)" rx="2" ry="2" />
<text  x="958.34" y="703.5" >nouveau..</text>
</g>
<g >
<title>tcmalloc::PageHeap::CheckAndHandlePreMerge(tcmalloc::Span*, tcmalloc::Span*)&lt;0000000000026530&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="53" width="3.3" height="15.0" fill="rgb(209,78,21)" rx="2" ry="2" />
<text  x="1186.30" y="63.5" ></text>
</g>
<g >
<title>read@@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="1176.6" y="645" width="3.3" height="15.0" fill="rgb(212,191,51)" rx="2" ry="2" />
<text  x="1179.59" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1112.9" y="565" width="3.3" height="15.0" fill="rgb(205,47,21)" rx="2" ry="2" />
<text  x="1115.90" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.85%)</title><rect x="1076.0" y="741" width="10.1" height="15.0" fill="rgb(213,208,17)" rx="2" ry="2" />
<text  x="1079.02" y="751.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.28%)</title><rect x="36.8" y="693" width="3.4" height="15.0" fill="rgb(228,95,26)" rx="2" ry="2" />
<text  x="39.82" y="703.5" ></text>
</g>
<g >
<title>0x00007f03803e1f9d (1 samples, 0.28%)</title><rect x="53.6" y="677" width="3.3" height="15.0" fill="rgb(231,224,46)" rx="2" ry="2" />
<text  x="56.58" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="725" width="3.4" height="15.0" fill="rgb(237,136,49)" rx="2" ry="2" />
<text  x="629.82" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.28%)</title><rect x="1082.7" y="629" width="3.4" height="15.0" fill="rgb(205,45,19)" rx="2" ry="2" />
<text  x="1085.73" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (1 samples, 0.28%)</title><rect x="620.1" y="773" width="3.4" height="15.0" fill="rgb(210,168,48)" rx="2" ry="2" />
<text  x="623.11" y="783.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.28%)</title><rect x="150.8" y="725" width="3.3" height="15.0" fill="rgb(231,219,18)" rx="2" ry="2" />
<text  x="153.80" y="735.5" ></text>
</g>
<g >
<title>0x00007f03803e1355 (1 samples, 0.28%)</title><rect x="56.9" y="645" width="3.4" height="15.0" fill="rgb(246,127,42)" rx="2" ry="2" />
<text  x="59.93" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.28%)</title><rect x="1086.1" y="645" width="3.3" height="15.0" fill="rgb(227,85,44)" rx="2" ry="2" />
<text  x="1089.08" y="655.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (7 samples, 1.99%)</title><rect x="40.2" y="805" width="23.4" height="15.0" fill="rgb(218,173,22)" rx="2" ry="2" />
<text  x="43.17" y="815.5" >S..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.28%)</title><rect x="573.2" y="725" width="3.3" height="15.0" fill="rgb(243,40,46)" rx="2" ry="2" />
<text  x="576.18" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1066.0" y="677" width="3.3" height="15.0" fill="rgb(208,93,23)" rx="2" ry="2" />
<text  x="1068.97" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.28%)</title><rect x="1092.8" y="725" width="3.3" height="15.0" fill="rgb(211,157,41)" rx="2" ry="2" />
<text  x="1095.78" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="709" width="3.4" height="15.0" fill="rgb(252,110,48)" rx="2" ry="2" />
<text  x="629.82" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::get_allocator() const (1 samples, 0.28%)</title><rect x="1136.4" y="389" width="3.3" height="15.0" fill="rgb(236,162,21)" rx="2" ry="2" />
<text  x="1139.36" y="399.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (5 samples, 1.42%)</title><rect x="1123.0" y="437" width="16.7" height="15.0" fill="rgb(207,118,30)" rx="2" ry="2" />
<text  x="1125.95" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (2 samples, 0.57%)</title><rect x="120.6" y="565" width="6.7" height="15.0" fill="rgb(218,199,2)" rx="2" ry="2" />
<text  x="123.62" y="575.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (3 samples, 0.85%)</title><rect x="1179.9" y="821" width="10.1" height="15.0" fill="rgb(207,197,18)" rx="2" ry="2" />
<text  x="1182.94" y="831.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_istream()[inline] (1 samples, 0.28%)</title><rect x="1106.2" y="677" width="3.3" height="15.0" fill="rgb(245,119,2)" rx="2" ry="2" />
<text  x="1109.19" y="687.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (3 samples, 0.85%)</title><rect x="821.2" y="693" width="10.1" height="15.0" fill="rgb(238,187,45)" rx="2" ry="2" />
<text  x="824.25" y="703.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.57%)</title><rect x="1179.9" y="309" width="6.7" height="15.0" fill="rgb(248,204,13)" rx="2" ry="2" />
<text  x="1182.94" y="319.5" ></text>
</g>
<g >
<title>0x00007f03803ed150 (1 samples, 0.28%)</title><rect x="56.9" y="613" width="3.4" height="15.0" fill="rgb(238,138,30)" rx="2" ry="2" />
<text  x="59.93" y="623.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_refn&lt;00000000000059a0&gt; (10 samples, 2.84%)</title><rect x="1025.7" y="693" width="33.6" height="15.0" fill="rgb(237,3,43)" rx="2" ry="2" />
<text  x="1028.74" y="703.5" >no..</text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.28%)</title><rect x="1099.5" y="645" width="3.3" height="15.0" fill="rgb(212,181,2)" rx="2" ry="2" />
<text  x="1102.49" y="655.5" ></text>
</g>
<g >
<title>TexturePNG::operator=(TexturePNG const&amp;) (1 samples, 0.28%)</title><rect x="1129.7" y="357" width="3.3" height="15.0" fill="rgb(211,136,30)" rx="2" ry="2" />
<text  x="1132.66" y="367.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 1.99%)</title><rect x="103.9" y="709" width="23.4" height="15.0" fill="rgb(219,103,5)" rx="2" ry="2" />
<text  x="106.86" y="719.5" >S..</text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.28%)</title><rect x="1092.8" y="709" width="3.3" height="15.0" fill="rgb(223,57,13)" rx="2" ry="2" />
<text  x="1095.78" y="719.5" ></text>
</g>
<g >
<title>~_Safe_unordered_container_base (15 samples, 4.26%)</title><rect x="1119.6" y="485" width="50.3" height="15.0" fill="rgb(230,109,34)" rx="2" ry="2" />
<text  x="1122.60" y="495.5" >~_Saf..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.28%)</title><rect x="1173.2" y="741" width="3.4" height="15.0" fill="rgb(218,48,10)" rx="2" ry="2" />
<text  x="1176.24" y="751.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063370&gt; (2 samples, 0.57%)</title><rect x="596.6" y="757" width="6.8" height="15.0" fill="rgb(215,203,14)" rx="2" ry="2" />
<text  x="599.65" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.28%)</title><rect x="1086.1" y="629" width="3.3" height="15.0" fill="rgb(212,121,29)" rx="2" ry="2" />
<text  x="1089.08" y="639.5" ></text>
</g>
<g >
<title>do_malloc[inline] (2 samples, 0.57%)</title><rect x="120.6" y="645" width="6.7" height="15.0" fill="rgb(208,147,31)" rx="2" ry="2" />
<text  x="123.62" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.28%)</title><rect x="1186.6" y="389" width="3.4" height="15.0" fill="rgb(253,170,39)" rx="2" ry="2" />
<text  x="1189.65" y="399.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (51 samples, 14.49%)</title><rect x="660.3" y="725" width="171.0" height="15.0" fill="rgb(218,201,9)" rx="2" ry="2" />
<text  x="663.34" y="735.5" >__driDriverGetExtensio..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.28%)</title><rect x="1086.1" y="661" width="3.3" height="15.0" fill="rgb(216,50,14)" rx="2" ry="2" />
<text  x="1089.08" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1106.2" y="725" width="3.3" height="15.0" fill="rgb(229,23,8)" rx="2" ry="2" />
<text  x="1109.19" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (7 samples, 1.99%)</title><rect x="1139.7" y="405" width="23.5" height="15.0" fill="rgb(219,169,48)" rx="2" ry="2" />
<text  x="1142.72" y="415.5" >_..</text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.28%)</title><rect x="1019.0" y="677" width="3.4" height="15.0" fill="rgb(251,71,39)" rx="2" ry="2" />
<text  x="1022.03" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.85%)</title><rect x="576.5" y="693" width="10.1" height="15.0" fill="rgb(210,99,2)" rx="2" ry="2" />
<text  x="579.53" y="703.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047d40&gt; (47 samples, 13.35%)</title><rect x="385.5" y="741" width="157.5" height="15.0" fill="rgb(206,153,16)" rx="2" ry="2" />
<text  x="388.45" y="751.5" >TexturePNG::getPixel..</text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1062.6" y="789" width="3.4" height="15.0" fill="rgb(224,87,45)" rx="2" ry="2" />
<text  x="1065.61" y="799.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (2 samples, 0.57%)</title><rect x="1129.7" y="389" width="6.7" height="15.0" fill="rgb(212,101,23)" rx="2" ry="2" />
<text  x="1132.66" y="399.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 1.42%)</title><rect x="23.4" y="789" width="16.8" height="15.0" fill="rgb(248,0,50)" rx="2" ry="2" />
<text  x="26.41" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.28%)</title><rect x="1163.2" y="453" width="3.3" height="15.0" fill="rgb(218,53,8)" rx="2" ry="2" />
<text  x="1166.18" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1079.4" y="693" width="3.3" height="15.0" fill="rgb(224,118,11)" rx="2" ry="2" />
<text  x="1082.38" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.57%)</title><rect x="1179.9" y="757" width="6.7" height="15.0" fill="rgb(237,193,36)" rx="2" ry="2" />
<text  x="1182.94" y="767.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (7 samples, 1.99%)</title><rect x="516.2" y="693" width="23.5" height="15.0" fill="rgb(244,188,43)" rx="2" ry="2" />
<text  x="519.19" y="703.5" >_..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1076.0" y="709" width="3.4" height="15.0" fill="rgb(217,126,50)" rx="2" ry="2" />
<text  x="1079.02" y="719.5" ></text>
</g>
<g >
<title>0x00007f03803e7791 (1 samples, 0.28%)</title><rect x="53.6" y="725" width="3.3" height="15.0" fill="rgb(216,41,35)" rx="2" ry="2" />
<text  x="56.58" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.28%)</title><rect x="1112.9" y="485" width="3.3" height="15.0" fill="rgb(212,129,24)" rx="2" ry="2" />
<text  x="1115.90" y="495.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (9 samples, 2.56%)</title><rect x="187.7" y="709" width="30.1" height="15.0" fill="rgb(212,127,21)" rx="2" ry="2" />
<text  x="190.67" y="719.5" >_P..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.28%)</title><rect x="1186.6" y="709" width="3.4" height="15.0" fill="rgb(230,37,40)" rx="2" ry="2" />
<text  x="1189.65" y="719.5" ></text>
</g>
<g >
<title>ioctl@@GLIBC_2.2.5&lt;00000000000fc9b0&gt; (1 samples, 0.28%)</title><rect x="1022.4" y="597" width="3.3" height="15.0" fill="rgb(252,82,1)" rx="2" ry="2" />
<text  x="1025.39" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.28%)</title><rect x="382.1" y="597" width="3.4" height="15.0" fill="rgb(249,111,19)" rx="2" ry="2" />
<text  x="385.10" y="607.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.28%)</title><rect x="264.8" y="709" width="3.3" height="15.0" fill="rgb(249,223,10)" rx="2" ry="2" />
<text  x="267.77" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.28%)</title><rect x="40.2" y="773" width="3.3" height="15.0" fill="rgb(206,75,51)" rx="2" ry="2" />
<text  x="43.17" y="783.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;0000000000026230&gt; (1 samples, 0.28%)</title><rect x="1186.6" y="725" width="3.4" height="15.0" fill="rgb(226,53,48)" rx="2" ry="2" />
<text  x="1189.65" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (6 samples, 1.70%)</title><rect x="543.0" y="693" width="20.1" height="15.0" fill="rgb(215,139,7)" rx="2" ry="2" />
<text  x="546.01" y="703.5" ></text>
</g>
<g >
<title>_Safe_sequence (2 samples, 0.57%)</title><rect x="412.3" y="725" width="6.7" height="15.0" fill="rgb(211,3,26)" rx="2" ry="2" />
<text  x="415.27" y="735.5" ></text>
</g>
<g >
<title>_dl_debug_state@@GLIBC_PRIVATE&lt;0000000000002090&gt; (1 samples, 0.28%)</title><rect x="40.2" y="565" width="3.3" height="15.0" fill="rgb(218,173,14)" rx="2" ry="2" />
<text  x="43.17" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.28%)</title><rect x="1086.1" y="789" width="3.3" height="15.0" fill="rgb(251,170,47)" rx="2" ry="2" />
<text  x="1089.08" y="799.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.28%)</title><rect x="1096.1" y="677" width="3.4" height="15.0" fill="rgb(206,185,27)" rx="2" ry="2" />
<text  x="1099.14" y="687.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (1 samples, 0.28%)</title><rect x="83.8" y="741" width="3.3" height="15.0" fill="rgb(241,33,52)" rx="2" ry="2" />
<text  x="86.75" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="709" width="57.0" height="15.0" fill="rgb(209,186,42)" rx="2" ry="2" />
<text  x="1115.90" y="719.5" >std::s..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (128 samples, 36.36%)</title><rect x="633.5" y="789" width="429.1" height="15.0" fill="rgb(220,88,1)" rx="2" ry="2" />
<text  x="636.52" y="799.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::pubseekpos(std::fpos&lt;__mbstate_t&gt;, std::_Ios_Openmode)[inline] (1 samples, 0.28%)</title><rect x="1173.2" y="709" width="3.4" height="15.0" fill="rgb(253,73,36)" rx="2" ry="2" />
<text  x="1176.24" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_node(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.28%)</title><rect x="1112.9" y="517" width="3.3" height="15.0" fill="rgb(225,163,9)" rx="2" ry="2" />
<text  x="1115.90" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.57%)</title><rect x="1179.9" y="421" width="6.7" height="15.0" fill="rgb(218,102,30)" rx="2" ry="2" />
<text  x="1182.94" y="431.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.28%)</title><rect x="1092.8" y="805" width="3.3" height="15.0" fill="rgb(253,27,23)" rx="2" ry="2" />
<text  x="1095.78" y="815.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.57%)</title><rect x="1079.4" y="725" width="6.7" height="15.0" fill="rgb(241,43,9)" rx="2" ry="2" />
<text  x="1082.38" y="735.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (2 samples, 0.57%)</title><rect x="1179.9" y="789" width="6.7" height="15.0" fill="rgb(208,111,13)" rx="2" ry="2" />
<text  x="1182.94" y="799.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.28%)</title><rect x="1116.2" y="469" width="3.4" height="15.0" fill="rgb(237,228,23)" rx="2" ry="2" />
<text  x="1119.25" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="693" width="57.0" height="15.0" fill="rgb(216,167,38)" rx="2" ry="2" />
<text  x="1115.90" y="703.5" >std::_..</text>
</g>
<g >
<title>0x00007f03803e1b4e (1 samples, 0.28%)</title><rect x="53.6" y="661" width="3.3" height="15.0" fill="rgb(251,64,0)" rx="2" ry="2" />
<text  x="56.58" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.28%)</title><rect x="1186.6" y="597" width="3.4" height="15.0" fill="rgb(207,24,12)" rx="2" ry="2" />
<text  x="1189.65" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (2 samples, 0.57%)</title><rect x="120.6" y="549" width="6.7" height="15.0" fill="rgb(213,207,6)" rx="2" ry="2" />
<text  x="123.62" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (12 samples, 3.41%)</title><rect x="87.1" y="741" width="40.2" height="15.0" fill="rgb(207,203,52)" rx="2" ry="2" />
<text  x="90.10" y="751.5" >SDL..</text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (2 samples, 0.57%)</title><rect x="23.4" y="565" width="6.7" height="15.0" fill="rgb(240,24,30)" rx="2" ry="2" />
<text  x="26.41" y="575.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (25 samples, 7.10%)</title><rect x="1096.1" y="789" width="83.8" height="15.0" fill="rgb(210,63,18)" rx="2" ry="2" />
<text  x="1099.14" y="799.5" >OBJ::OBJ(..</text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.28%)</title><rect x="1086.1" y="709" width="3.3" height="15.0" fill="rgb(236,156,1)" rx="2" ry="2" />
<text  x="1089.08" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.28%)</title><rect x="1096.1" y="629" width="3.4" height="15.0" fill="rgb(222,14,24)" rx="2" ry="2" />
<text  x="1099.14" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (2 samples, 0.57%)</title><rect x="1129.7" y="373" width="6.7" height="15.0" fill="rgb(209,90,8)" rx="2" ry="2" />
<text  x="1132.66" y="383.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (4 samples, 1.14%)</title><rect x="576.5" y="709" width="13.4" height="15.0" fill="rgb(212,103,43)" rx="2" ry="2" />
<text  x="579.53" y="719.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005d6e0&gt; (1 samples, 0.28%)</title><rect x="1092.8" y="789" width="3.3" height="15.0" fill="rgb(241,117,6)" rx="2" ry="2" />
<text  x="1095.78" y="799.5" ></text>
</g>
<g >
<title>llvm::orc::ELFNixPlatform::notifyRemoving(llvm::orc::ResourceTracker&amp;)@@LLVM_14&lt;0000000000a61e56&gt; (1 samples, 0.28%)</title><rect x="23.4" y="421" width="3.4" height="15.0" fill="rgb(236,170,29)" rx="2" ry="2" />
<text  x="26.41" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.85%)</title><rect x="298.3" y="693" width="10.1" height="15.0" fill="rgb(235,100,32)" rx="2" ry="2" />
<text  x="301.30" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (39 samples, 11.08%)</title><rect x="700.6" y="709" width="130.7" height="15.0" fill="rgb(224,62,47)" rx="2" ry="2" />
<text  x="703.57" y="719.5" >__driDriverGetEx..</text>
</g>
<g >
<title>tcmalloc::SizeMap::ByteSizeForClass(unsigned int)[inline] (2 samples, 0.57%)</title><rect x="1143.1" y="341" width="6.7" height="15.0" fill="rgb(251,216,7)" rx="2" ry="2" />
<text  x="1146.07" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.28%)</title><rect x="1186.6" y="453" width="3.4" height="15.0" fill="rgb(222,37,39)" rx="2" ry="2" />
<text  x="1189.65" y="463.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (4 samples, 1.14%)</title><rect x="23.4" y="645" width="13.4" height="15.0" fill="rgb(208,157,33)" rx="2" ry="2" />
<text  x="26.41" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.57%)</title><rect x="1179.9" y="261" width="6.7" height="15.0" fill="rgb(241,210,23)" rx="2" ry="2" />
<text  x="1182.94" y="271.5" ></text>
</g>
<g >
<title>0x00007f03803e16df (1 samples, 0.28%)</title><rect x="43.5" y="725" width="3.4" height="15.0" fill="rgb(220,61,13)" rx="2" ry="2" />
<text  x="46.52" y="735.5" ></text>
</g>
<g >
<title>__close@@GLIBC_2.2.5&lt;00000000000f7540&gt; (1 samples, 0.28%)</title><rect x="43.5" y="693" width="3.4" height="15.0" fill="rgb(253,71,23)" rx="2" ry="2" />
<text  x="46.52" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1082.7" y="693" width="3.4" height="15.0" fill="rgb(211,118,35)" rx="2" ry="2" />
<text  x="1085.73" y="703.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (5 samples, 1.42%)</title><rect x="881.6" y="709" width="16.8" height="15.0" fill="rgb(245,200,45)" rx="2" ry="2" />
<text  x="884.59" y="719.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.28%)</title><rect x="308.4" y="693" width="3.3" height="15.0" fill="rgb(206,100,4)" rx="2" ry="2" />
<text  x="311.35" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::DLL_Remove(tcmalloc::Span*)&lt;0000000000028300&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="37" width="3.3" height="15.0" fill="rgb(206,211,39)" rx="2" ry="2" />
<text  x="1186.30" y="47.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (1 samples, 0.28%)</title><rect x="1186.6" y="373" width="3.4" height="15.0" fill="rgb(238,6,18)" rx="2" ry="2" />
<text  x="1189.65" y="383.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (16 samples, 4.55%)</title><rect x="445.8" y="709" width="53.6" height="15.0" fill="rgb(217,110,1)" rx="2" ry="2" />
<text  x="448.80" y="719.5" >_Para..</text>
</g>
<g >
<title>0x00007f03803e9d2a (1 samples, 0.28%)</title><rect x="46.9" y="661" width="3.3" height="15.0" fill="rgb(229,118,40)" rx="2" ry="2" />
<text  x="49.88" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.28%)</title><rect x="626.8" y="661" width="3.4" height="15.0" fill="rgb(209,34,14)" rx="2" ry="2" />
<text  x="629.82" y="671.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.28%)</title><rect x="382.1" y="677" width="3.4" height="15.0" fill="rgb(209,22,3)" rx="2" ry="2" />
<text  x="385.10" y="687.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (348 samples, 98.86%)</title><rect x="23.4" y="837" width="1166.6" height="15.0" fill="rgb(205,195,23)" rx="2" ry="2" />
<text  x="26.41" y="847.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.28%)</title><rect x="1186.6" y="357" width="3.4" height="15.0" fill="rgb(239,105,49)" rx="2" ry="2" />
<text  x="1189.65" y="367.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.28%)</title><rect x="1186.6" y="613" width="3.4" height="15.0" fill="rgb(236,90,14)" rx="2" ry="2" />
<text  x="1189.65" y="623.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.28%)</title><rect x="539.7" y="725" width="3.3" height="15.0" fill="rgb(206,47,34)" rx="2" ry="2" />
<text  x="542.66" y="735.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.28%)</title><rect x="40.2" y="613" width="3.3" height="15.0" fill="rgb(215,74,22)" rx="2" ry="2" />
<text  x="43.17" y="623.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.28%)</title><rect x="40.2" y="581" width="3.3" height="15.0" fill="rgb(223,114,49)" rx="2" ry="2" />
<text  x="43.17" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.57%)</title><rect x="1179.9" y="645" width="6.7" height="15.0" fill="rgb(248,74,46)" rx="2" ry="2" />
<text  x="1182.94" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::NewSpan(unsigned long, unsigned long)&lt;00000000000281e0&gt; (1 samples, 0.28%)</title><rect x="1159.8" y="261" width="3.4" height="15.0" fill="rgb(238,174,9)" rx="2" ry="2" />
<text  x="1162.83" y="271.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.28%)</title><rect x="36.8" y="709" width="3.4" height="15.0" fill="rgb(228,188,8)" rx="2" ry="2" />
<text  x="39.82" y="719.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1066.0" y="725" width="3.3" height="15.0" fill="rgb(214,217,1)" rx="2" ry="2" />
<text  x="1068.97" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy(char*, char const*, unsigned long) (1 samples, 0.28%)</title><rect x="1102.8" y="645" width="3.4" height="15.0" fill="rgb(246,185,11)" rx="2" ry="2" />
<text  x="1105.84" y="655.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (2 samples, 0.57%)</title><rect x="1179.9" y="197" width="6.7" height="15.0" fill="rgb(206,195,17)" rx="2" ry="2" />
<text  x="1182.94" y="207.5" ></text>
</g>
<g >
<title>SpinLock::Unlock()[inline] (1 samples, 0.28%)</title><rect x="1179.9" y="69" width="3.4" height="15.0" fill="rgb(231,76,53)" rx="2" ry="2" />
<text  x="1182.94" y="79.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (2 samples, 0.57%)</title><rect x="345.2" y="741" width="6.7" height="15.0" fill="rgb(234,208,42)" rx="2" ry="2" />
<text  x="348.23" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.28%)</title><rect x="36.8" y="613" width="3.4" height="15.0" fill="rgb(238,13,21)" rx="2" ry="2" />
<text  x="39.82" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.28%)</title><rect x="382.1" y="629" width="3.4" height="15.0" fill="rgb(247,78,42)" rx="2" ry="2" />
<text  x="385.10" y="639.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.57%)</title><rect x="23.4" y="613" width="6.7" height="15.0" fill="rgb(246,220,7)" rx="2" ry="2" />
<text  x="26.41" y="623.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (75 samples, 21.31%)</title><rect x="63.6" y="757" width="251.5" height="15.0" fill="rgb(210,185,21)" rx="2" ry="2" />
<text  x="66.64" y="767.5" >ScanlineRasterizer::drawFlatTopTr..</text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.28%)</title><rect x="1086.1" y="741" width="3.3" height="15.0" fill="rgb(210,151,9)" rx="2" ry="2" />
<text  x="1089.08" y="751.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.28%)</title><rect x="952.0" y="677" width="3.3" height="15.0" fill="rgb(224,71,40)" rx="2" ry="2" />
<text  x="954.99" y="687.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (1 samples, 0.28%)</title><rect x="1133.0" y="341" width="3.4" height="15.0" fill="rgb(211,78,46)" rx="2" ry="2" />
<text  x="1136.01" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.28%)</title><rect x="1186.6" y="757" width="3.4" height="15.0" fill="rgb(244,31,33)" rx="2" ry="2" />
<text  x="1189.65" y="767.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (16 samples, 4.55%)</title><rect x="1116.2" y="565" width="53.7" height="15.0" fill="rgb(249,204,45)" rx="2" ry="2" />
<text  x="1119.25" y="575.5" >std::..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.57%)</title><rect x="1179.9" y="277" width="6.7" height="15.0" fill="rgb(215,52,0)" rx="2" ry="2" />
<text  x="1182.94" y="287.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="693" width="3.4" height="15.0" fill="rgb(222,130,53)" rx="2" ry="2" />
<text  x="629.82" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (9 samples, 2.56%)</title><rect x="355.3" y="725" width="30.2" height="15.0" fill="rgb(243,131,7)" rx="2" ry="2" />
<text  x="358.28" y="735.5" >SD..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1099.5" y="709" width="3.3" height="15.0" fill="rgb(233,210,50)" rx="2" ry="2" />
<text  x="1102.49" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.28%)</title><rect x="36.8" y="741" width="3.4" height="15.0" fill="rgb(245,58,20)" rx="2" ry="2" />
<text  x="39.82" y="751.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.28%)</title><rect x="603.4" y="773" width="3.3" height="15.0" fill="rgb(213,214,5)" rx="2" ry="2" />
<text  x="606.35" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (4 samples, 1.14%)</title><rect x="563.1" y="741" width="13.4" height="15.0" fill="rgb(229,113,39)" rx="2" ry="2" />
<text  x="566.12" y="751.5" ></text>
</g>
<g >
<title>0x00007f03803e7791 (1 samples, 0.28%)</title><rect x="56.9" y="709" width="3.4" height="15.0" fill="rgb(245,216,37)" rx="2" ry="2" />
<text  x="59.93" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.28%)</title><rect x="36.8" y="677" width="3.4" height="15.0" fill="rgb(221,215,23)" rx="2" ry="2" />
<text  x="39.82" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.28%)</title><rect x="1186.6" y="805" width="3.4" height="15.0" fill="rgb(250,144,30)" rx="2" ry="2" />
<text  x="1189.65" y="815.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.28%)</title><rect x="60.3" y="741" width="3.3" height="15.0" fill="rgb(252,102,52)" rx="2" ry="2" />
<text  x="63.28" y="751.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000082450&gt; (3 samples, 0.85%)</title><rect x="606.7" y="757" width="10.1" height="15.0" fill="rgb(211,76,39)" rx="2" ry="2" />
<text  x="609.70" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.28%)</title><rect x="1069.3" y="661" width="3.4" height="15.0" fill="rgb(240,223,44)" rx="2" ry="2" />
<text  x="1072.32" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (7 samples, 1.99%)</title><rect x="1139.7" y="437" width="23.5" height="15.0" fill="rgb(219,41,35)" rx="2" ry="2" />
<text  x="1142.72" y="447.5" >_..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.28%)</title><rect x="1166.5" y="437" width="3.4" height="15.0" fill="rgb(232,65,42)" rx="2" ry="2" />
<text  x="1169.53" y="447.5" ></text>
</g>
<g >
<title>llvm::cl::TokenizeWindowsCommandLineNoCopy(llvm::StringRef, llvm::StringSaver&amp;, llvm::SmallVectorImpl&lt;llvm::StringRef&gt;&amp;)@@LLVM_14&lt;0000000000bb3c50&gt; (1 samples, 0.28%)</title><rect x="23.4" y="373" width="3.4" height="15.0" fill="rgb(239,207,12)" rx="2" ry="2" />
<text  x="26.41" y="383.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.85%)</title><rect x="784.4" y="661" width="10.0" height="15.0" fill="rgb(211,73,29)" rx="2" ry="2" />
<text  x="787.38" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (8 samples, 2.27%)</title><rect x="767.6" y="677" width="26.8" height="15.0" fill="rgb(218,22,3)" rx="2" ry="2" />
<text  x="770.61" y="687.5" >_..</text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;!std::__are_same&lt;int, bool&gt;::__value, void&gt;::__type std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back&lt;int&gt;(int&amp;&amp;) (1 samples, 0.28%)</title><rect x="1102.8" y="709" width="3.4" height="15.0" fill="rgb(238,209,17)" rx="2" ry="2" />
<text  x="1105.84" y="719.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.28%)</title><rect x="1019.0" y="661" width="3.4" height="15.0" fill="rgb(225,167,44)" rx="2" ry="2" />
<text  x="1022.03" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.28%)</title><rect x="1186.6" y="405" width="3.4" height="15.0" fill="rgb(249,213,30)" rx="2" ry="2" />
<text  x="1189.65" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (4 samples, 1.14%)</title><rect x="1149.8" y="309" width="13.4" height="15.0" fill="rgb(230,53,0)" rx="2" ry="2" />
<text  x="1152.77" y="319.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (16 samples, 4.55%)</title><rect x="1116.2" y="549" width="53.7" height="15.0" fill="rgb(226,83,41)" rx="2" ry="2" />
<text  x="1119.25" y="559.5" >std::..</text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (27 samples, 7.67%)</title><rect x="174.3" y="725" width="90.5" height="15.0" fill="rgb(215,99,31)" rx="2" ry="2" />
<text  x="177.26" y="735.5" >std::__deb..</text>
</g>
<g >
<title>_Parameter (1 samples, 0.28%)</title><rect x="442.4" y="709" width="3.4" height="15.0" fill="rgb(249,32,2)" rx="2" ry="2" />
<text  x="445.44" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 1.70%)</title><rect x="43.5" y="789" width="20.1" height="15.0" fill="rgb(251,173,24)" rx="2" ry="2" />
<text  x="46.52" y="799.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.28%)</title><rect x="1126.3" y="405" width="3.4" height="15.0" fill="rgb(206,35,14)" rx="2" ry="2" />
<text  x="1129.31" y="415.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.57%)</title><rect x="1179.9" y="597" width="6.7" height="15.0" fill="rgb(241,0,10)" rx="2" ry="2" />
<text  x="1182.94" y="607.5" ></text>
</g>
<g >
<title>0x00007f03803e1bfe (1 samples, 0.28%)</title><rect x="43.5" y="757" width="3.4" height="15.0" fill="rgb(210,190,47)" rx="2" ry="2" />
<text  x="46.52" y="767.5" ></text>
</g>
<g >
<title>0x00007f03803ed1ee (1 samples, 0.28%)</title><rect x="50.2" y="661" width="3.4" height="15.0" fill="rgb(220,154,42)" rx="2" ry="2" />
<text  x="53.23" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1076.0" y="645" width="3.4" height="15.0" fill="rgb(228,166,10)" rx="2" ry="2" />
<text  x="1079.02" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.28%)</title><rect x="1166.5" y="453" width="3.4" height="15.0" fill="rgb(248,112,32)" rx="2" ry="2" />
<text  x="1169.53" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1076.0" y="725" width="3.4" height="15.0" fill="rgb(243,67,49)" rx="2" ry="2" />
<text  x="1079.02" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.57%)</title><rect x="1179.9" y="453" width="6.7" height="15.0" fill="rgb(218,87,3)" rx="2" ry="2" />
<text  x="1182.94" y="463.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 1.14%)</title><rect x="23.4" y="661" width="13.4" height="15.0" fill="rgb(208,214,28)" rx="2" ry="2" />
<text  x="26.41" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.28%)</title><rect x="623.5" y="757" width="3.3" height="15.0" fill="rgb(216,123,31)" rx="2" ry="2" />
<text  x="626.47" y="767.5" ></text>
</g>
<g >
<title>0x00007f03803e6b56 (1 samples, 0.28%)</title><rect x="53.6" y="709" width="3.3" height="15.0" fill="rgb(212,180,48)" rx="2" ry="2" />
<text  x="56.58" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1082.7" y="677" width="3.4" height="15.0" fill="rgb(224,155,23)" rx="2" ry="2" />
<text  x="1085.73" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="661" width="57.0" height="15.0" fill="rgb(242,96,6)" rx="2" ry="2" />
<text  x="1115.90" y="671.5" >std::_..</text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (1 samples, 0.28%)</title><rect x="26.8" y="437" width="3.3" height="15.0" fill="rgb(220,65,11)" rx="2" ry="2" />
<text  x="29.76" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.28%)</title><rect x="382.1" y="613" width="3.4" height="15.0" fill="rgb(243,228,2)" rx="2" ry="2" />
<text  x="385.10" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1116.2" y="485" width="3.4" height="15.0" fill="rgb(238,115,54)" rx="2" ry="2" />
<text  x="1119.25" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (2 samples, 0.57%)</title><rect x="1179.9" y="229" width="6.7" height="15.0" fill="rgb(242,166,4)" rx="2" ry="2" />
<text  x="1182.94" y="239.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (1 samples, 0.28%)</title><rect x="1186.6" y="501" width="3.4" height="15.0" fill="rgb(240,63,18)" rx="2" ry="2" />
<text  x="1189.65" y="511.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (2 samples, 0.57%)</title><rect x="1179.9" y="181" width="6.7" height="15.0" fill="rgb(217,129,50)" rx="2" ry="2" />
<text  x="1182.94" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.28%)</title><rect x="382.1" y="581" width="3.4" height="15.0" fill="rgb(245,52,32)" rx="2" ry="2" />
<text  x="385.10" y="591.5" ></text>
</g>
<g >
<title>~__scoped_lock (1 samples, 0.28%)</title><rect x="1166.5" y="405" width="3.4" height="15.0" fill="rgb(216,85,46)" rx="2" ry="2" />
<text  x="1169.53" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge()&lt;0000000000029ae0&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="165" width="3.3" height="15.0" fill="rgb(205,57,18)" rx="2" ry="2" />
<text  x="1186.30" y="175.5" ></text>
</g>
<g >
<title>drmIoctl&lt;0000000000007300&gt; (1 samples, 0.28%)</title><rect x="1022.4" y="613" width="3.3" height="15.0" fill="rgb(230,130,42)" rx="2" ry="2" />
<text  x="1025.39" y="623.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_validate&lt;0000000000005ba0&gt; (1 samples, 0.28%)</title><rect x="1059.3" y="693" width="3.3" height="15.0" fill="rgb(232,108,28)" rx="2" ry="2" />
<text  x="1062.26" y="703.5" ></text>
</g>
<g >
<title>fgetc (1 samples, 0.28%)</title><rect x="60.3" y="677" width="3.3" height="15.0" fill="rgb(222,127,51)" rx="2" ry="2" />
<text  x="63.28" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (2 samples, 0.57%)</title><rect x="120.6" y="629" width="6.7" height="15.0" fill="rgb(215,182,34)" rx="2" ry="2" />
<text  x="123.62" y="639.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.28%)</title><rect x="26.8" y="453" width="3.3" height="15.0" fill="rgb(220,211,21)" rx="2" ry="2" />
<text  x="29.76" y="463.5" ></text>
</g>
<g >
<title>0x00007f03803e127c (1 samples, 0.28%)</title><rect x="53.6" y="645" width="3.3" height="15.0" fill="rgb(243,81,11)" rx="2" ry="2" />
<text  x="56.58" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000025640&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="117" width="3.3" height="15.0" fill="rgb(231,116,20)" rx="2" ry="2" />
<text  x="1186.30" y="127.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1079.4" y="709" width="3.3" height="15.0" fill="rgb(225,101,12)" rx="2" ry="2" />
<text  x="1082.38" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1076.0" y="677" width="3.4" height="15.0" fill="rgb(217,38,37)" rx="2" ry="2" />
<text  x="1079.02" y="687.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1072.7" y="709" width="3.3" height="15.0" fill="rgb(250,94,38)" rx="2" ry="2" />
<text  x="1075.67" y="719.5" ></text>
</g>
<g >
<title>0x00007f03803eca20 (1 samples, 0.28%)</title><rect x="50.2" y="629" width="3.4" height="15.0" fill="rgb(222,91,53)" rx="2" ry="2" />
<text  x="53.23" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.28%)</title><rect x="36.8" y="645" width="3.4" height="15.0" fill="rgb(254,45,35)" rx="2" ry="2" />
<text  x="39.82" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.57%)</title><rect x="1179.9" y="549" width="6.7" height="15.0" fill="rgb(237,29,47)" rx="2" ry="2" />
<text  x="1182.94" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (1 samples, 0.28%)</title><rect x="1186.6" y="517" width="3.4" height="15.0" fill="rgb(234,227,36)" rx="2" ry="2" />
<text  x="1189.65" y="527.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.28%)</title><rect x="36.8" y="725" width="3.4" height="15.0" fill="rgb(253,24,25)" rx="2" ry="2" />
<text  x="39.82" y="735.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="606.7" y="741" width="3.4" height="15.0" fill="rgb(208,131,23)" rx="2" ry="2" />
<text  x="609.70" y="751.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1089.4" y="789" width="3.4" height="15.0" fill="rgb(206,164,0)" rx="2" ry="2" />
<text  x="1092.43" y="799.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000067450&gt; (162 samples, 46.02%)</title><rect x="63.6" y="789" width="543.1" height="15.0" fill="rgb(239,138,1)" rx="2" ry="2" />
<text  x="66.64" y="799.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000067450&gt;</text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (6 samples, 1.70%)</title><rect x="268.1" y="741" width="20.1" height="15.0" fill="rgb(241,159,18)" rx="2" ry="2" />
<text  x="271.12" y="751.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.28%)</title><rect x="56.9" y="725" width="3.4" height="15.0" fill="rgb(219,130,45)" rx="2" ry="2" />
<text  x="59.93" y="735.5" ></text>
</g>
<g >
<title>0x00007f03803f10b3 (1 samples, 0.28%)</title><rect x="50.2" y="693" width="3.4" height="15.0" fill="rgb(218,90,9)" rx="2" ry="2" />
<text  x="53.23" y="703.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (1 samples, 0.28%)</title><rect x="40.2" y="725" width="3.3" height="15.0" fill="rgb(205,21,9)" rx="2" ry="2" />
<text  x="43.17" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000025490&gt; (1 samples, 0.28%)</title><rect x="1179.9" y="101" width="3.4" height="15.0" fill="rgb(218,73,39)" rx="2" ry="2" />
<text  x="1182.94" y="111.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (6 samples, 1.70%)</title><rect x="154.1" y="725" width="20.2" height="15.0" fill="rgb(208,193,21)" rx="2" ry="2" />
<text  x="157.15" y="735.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.28%)</title><rect x="1086.1" y="693" width="3.3" height="15.0" fill="rgb(229,178,52)" rx="2" ry="2" />
<text  x="1089.08" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000025640&gt; (1 samples, 0.28%)</title><rect x="1179.9" y="117" width="3.4" height="15.0" fill="rgb(218,26,33)" rx="2" ry="2" />
<text  x="1182.94" y="127.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="725" width="57.0" height="15.0" fill="rgb(238,46,42)" rx="2" ry="2" />
<text  x="1115.90" y="735.5" >std::s..</text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.28%)</title><rect x="40.2" y="709" width="3.3" height="15.0" fill="rgb(209,55,16)" rx="2" ry="2" />
<text  x="43.17" y="719.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::allocate(unsigned long, void const*) (1 samples, 0.28%)</title><rect x="1112.9" y="501" width="3.3" height="15.0" fill="rgb(223,195,53)" rx="2" ry="2" />
<text  x="1115.90" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.28%)</title><rect x="1069.3" y="677" width="3.4" height="15.0" fill="rgb(251,218,5)" rx="2" ry="2" />
<text  x="1072.32" y="687.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.28%)</title><rect x="1082.7" y="645" width="3.4" height="15.0" fill="rgb(246,93,27)" rx="2" ry="2" />
<text  x="1085.73" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 1.14%)</title><rect x="23.4" y="741" width="13.4" height="15.0" fill="rgb(243,49,34)" rx="2" ry="2" />
<text  x="26.41" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.28%)</title><rect x="1186.6" y="629" width="3.4" height="15.0" fill="rgb(231,172,9)" rx="2" ry="2" />
<text  x="1189.65" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="1072.7" y="613" width="3.3" height="15.0" fill="rgb(226,197,51)" rx="2" ry="2" />
<text  x="1075.67" y="623.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (1 samples, 0.28%)</title><rect x="1106.2" y="629" width="3.3" height="15.0" fill="rgb(211,76,11)" rx="2" ry="2" />
<text  x="1109.19" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index(unsigned long, unsigned long) const (1 samples, 0.28%)</title><rect x="1133.0" y="325" width="3.4" height="15.0" fill="rgb(213,207,26)" rx="2" ry="2" />
<text  x="1136.01" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.57%)</title><rect x="1179.9" y="469" width="6.7" height="15.0" fill="rgb(208,209,24)" rx="2" ry="2" />
<text  x="1182.94" y="479.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f710&gt; (4 samples, 1.14%)</title><rect x="606.7" y="773" width="13.4" height="15.0" fill="rgb(228,194,20)" rx="2" ry="2" />
<text  x="609.70" y="783.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (348 samples, 98.86%)</title><rect x="23.4" y="869" width="1166.6" height="15.0" fill="rgb(228,144,21)" rx="2" ry="2" />
<text  x="26.41" y="879.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1062.6" y="741" width="3.4" height="15.0" fill="rgb(219,4,54)" rx="2" ry="2" />
<text  x="1065.61" y="751.5" ></text>
</g>
<g >
<title>llvm::cl::Option::addArgument()@@LLVM_14&lt;0000000000bb50c0&gt; (1 samples, 0.28%)</title><rect x="23.4" y="405" width="3.4" height="15.0" fill="rgb(253,183,25)" rx="2" ry="2" />
<text  x="26.41" y="415.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.28%)</title><rect x="1092.8" y="693" width="3.3" height="15.0" fill="rgb(206,225,29)" rx="2" ry="2" />
<text  x="1095.78" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 1.42%)</title><rect x="23.4" y="757" width="16.8" height="15.0" fill="rgb(228,200,1)" rx="2" ry="2" />
<text  x="26.41" y="767.5" ></text>
</g>
<g >
<title>~basic_string (1 samples, 0.28%)</title><rect x="610.1" y="709" width="3.3" height="15.0" fill="rgb(252,41,5)" rx="2" ry="2" />
<text  x="613.06" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 1.42%)</title><rect x="294.9" y="741" width="16.8" height="15.0" fill="rgb(245,123,24)" rx="2" ry="2" />
<text  x="297.94" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.28%)</title><rect x="1116.2" y="453" width="3.4" height="15.0" fill="rgb(209,19,53)" rx="2" ry="2" />
<text  x="1119.25" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.28%)</title><rect x="1112.9" y="437" width="3.3" height="15.0" fill="rgb(210,77,32)" rx="2" ry="2" />
<text  x="1115.90" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.28%)</title><rect x="1186.6" y="741" width="3.4" height="15.0" fill="rgb(243,212,37)" rx="2" ry="2" />
<text  x="1189.65" y="751.5" ></text>
</g>
<g >
<title>~__shared_count (2 samples, 0.57%)</title><rect x="589.9" y="741" width="6.7" height="15.0" fill="rgb(239,85,39)" rx="2" ry="2" />
<text  x="592.94" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.28%)</title><rect x="613.4" y="725" width="3.4" height="15.0" fill="rgb(225,85,39)" rx="2" ry="2" />
<text  x="616.41" y="735.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.28%)</title><rect x="1186.6" y="485" width="3.4" height="15.0" fill="rgb(248,44,20)" rx="2" ry="2" />
<text  x="1189.65" y="495.5" ></text>
</g>
<g >
<title>0x00007f03803e7791 (2 samples, 0.57%)</title><rect x="46.9" y="757" width="6.7" height="15.0" fill="rgb(239,190,33)" rx="2" ry="2" />
<text  x="49.88" y="767.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.28%)</title><rect x="811.2" y="613" width="3.3" height="15.0" fill="rgb(211,170,41)" rx="2" ry="2" />
<text  x="814.19" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (31 samples, 8.81%)</title><rect x="435.7" y="725" width="104.0" height="15.0" fill="rgb(254,34,52)" rx="2" ry="2" />
<text  x="438.74" y="735.5" >std::__debug..</text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1076.0" y="613" width="3.4" height="15.0" fill="rgb(227,117,13)" rx="2" ry="2" />
<text  x="1079.02" y="623.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.57%)</title><rect x="1069.3" y="725" width="6.7" height="15.0" fill="rgb(209,146,47)" rx="2" ry="2" />
<text  x="1072.32" y="735.5" ></text>
</g>
<g >
<title>0x00007f03803e9a5a (1 samples, 0.28%)</title><rect x="43.5" y="709" width="3.4" height="15.0" fill="rgb(236,208,36)" rx="2" ry="2" />
<text  x="46.52" y="719.5" ></text>
</g>
<g >
<title>tc_new (3 samples, 0.85%)</title><rect x="1139.7" y="373" width="10.1" height="15.0" fill="rgb(238,27,29)" rx="2" ry="2" />
<text  x="1142.72" y="383.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (2 samples, 0.57%)</title><rect x="23.4" y="581" width="6.7" height="15.0" fill="rgb(221,0,45)" rx="2" ry="2" />
<text  x="26.41" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="757" width="3.4" height="15.0" fill="rgb(221,80,44)" rx="2" ry="2" />
<text  x="629.82" y="767.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.28%)</title><rect x="1186.6" y="773" width="3.4" height="15.0" fill="rgb(246,18,14)" rx="2" ry="2" />
<text  x="1189.65" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.28%)</title><rect x="1109.5" y="725" width="3.4" height="15.0" fill="rgb(218,189,12)" rx="2" ry="2" />
<text  x="1112.55" y="735.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (2 samples, 0.57%)</title><rect x="1179.9" y="805" width="6.7" height="15.0" fill="rgb(238,174,43)" rx="2" ry="2" />
<text  x="1182.94" y="815.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003d610&gt; (3 samples, 0.85%)</title><rect x="127.3" y="741" width="10.1" height="15.0" fill="rgb(251,178,40)" rx="2" ry="2" />
<text  x="130.33" y="751.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.28%)</title><rect x="539.7" y="709" width="3.3" height="15.0" fill="rgb(241,55,26)" rx="2" ry="2" />
<text  x="542.66" y="719.5" ></text>
</g>
<g >
<title>_Guard (1 samples, 0.28%)</title><rect x="1109.5" y="709" width="3.4" height="15.0" fill="rgb(229,25,5)" rx="2" ry="2" />
<text  x="1112.55" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (4 samples, 1.14%)</title><rect x="1149.8" y="373" width="13.4" height="15.0" fill="rgb(212,215,17)" rx="2" ry="2" />
<text  x="1152.77" y="383.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.28%)</title><rect x="1072.7" y="629" width="3.3" height="15.0" fill="rgb(233,71,12)" rx="2" ry="2" />
<text  x="1075.67" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.57%)</title><rect x="288.2" y="741" width="6.7" height="15.0" fill="rgb(219,97,12)" rx="2" ry="2" />
<text  x="291.24" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.28%)</title><rect x="623.5" y="773" width="3.3" height="15.0" fill="rgb(218,117,35)" rx="2" ry="2" />
<text  x="626.47" y="783.5" ></text>
</g>
<g >
<title>0x00007f03803e6b56 (2 samples, 0.57%)</title><rect x="46.9" y="741" width="6.7" height="15.0" fill="rgb(244,136,2)" rx="2" ry="2" />
<text  x="49.88" y="751.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (2 samples, 0.57%)</title><rect x="23.4" y="597" width="6.7" height="15.0" fill="rgb(209,106,6)" rx="2" ry="2" />
<text  x="26.41" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (1 samples, 0.28%)</title><rect x="1096.1" y="709" width="3.4" height="15.0" fill="rgb(254,227,35)" rx="2" ry="2" />
<text  x="1099.14" y="719.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.85%)</title><rect x="1066.0" y="741" width="10.0" height="15.0" fill="rgb(251,122,48)" rx="2" ry="2" />
<text  x="1068.97" y="751.5" ></text>
</g>
<g >
<title>all (352 samples, 100%)</title><rect x="10.0" y="901" width="1180.0" height="15.0" fill="rgb(206,141,48)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (5 samples, 1.42%)</title><rect x="271.5" y="693" width="16.7" height="15.0" fill="rgb(231,22,36)" rx="2" ry="2" />
<text  x="274.48" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.28%)</title><rect x="1186.6" y="677" width="3.4" height="15.0" fill="rgb(236,58,32)" rx="2" ry="2" />
<text  x="1189.65" y="687.5" ></text>
</g>
<g >
<title>0x00007f03803e6b56 (1 samples, 0.28%)</title><rect x="56.9" y="693" width="3.4" height="15.0" fill="rgb(251,93,6)" rx="2" ry="2" />
<text  x="59.93" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (128 samples, 36.36%)</title><rect x="633.5" y="773" width="429.1" height="15.0" fill="rgb(251,211,54)" rx="2" ry="2" />
<text  x="636.52" y="783.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>0x00007f03803e66ee (1 samples, 0.28%)</title><rect x="56.9" y="677" width="3.4" height="15.0" fill="rgb(213,102,7)" rx="2" ry="2" />
<text  x="59.93" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.28%)</title><rect x="1186.6" y="549" width="3.4" height="15.0" fill="rgb(215,118,27)" rx="2" ry="2" />
<text  x="1189.65" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.28%)</title><rect x="36.8" y="581" width="3.4" height="15.0" fill="rgb(252,147,25)" rx="2" ry="2" />
<text  x="39.82" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.28%)</title><rect x="1079.4" y="597" width="3.3" height="15.0" fill="rgb(220,26,18)" rx="2" ry="2" />
<text  x="1082.38" y="607.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003a70&gt; (1 samples, 0.28%)</title><rect x="23.4" y="453" width="3.4" height="15.0" fill="rgb(228,105,33)" rx="2" ry="2" />
<text  x="26.41" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1092.8" y="757" width="3.3" height="15.0" fill="rgb(216,31,28)" rx="2" ry="2" />
<text  x="1095.78" y="767.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="40.2" y="741" width="3.3" height="15.0" fill="rgb(246,217,37)" rx="2" ry="2" />
<text  x="43.17" y="751.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.28%)</title><rect x="50.2" y="613" width="3.4" height="15.0" fill="rgb(206,120,34)" rx="2" ry="2" />
<text  x="53.23" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.28%)</title><rect x="630.2" y="773" width="3.3" height="15.0" fill="rgb(223,104,2)" rx="2" ry="2" />
<text  x="633.17" y="783.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (49 samples, 13.92%)</title><rect x="898.4" y="709" width="164.2" height="15.0" fill="rgb(212,142,27)" rx="2" ry="2" />
<text  x="901.35" y="719.5" >nouveau_drm_screen_cr..</text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete(tcmalloc::Span*)&lt;0000000000027960&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="85" width="3.3" height="15.0" fill="rgb(224,93,2)" rx="2" ry="2" />
<text  x="1186.30" y="95.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.28%)</title><rect x="382.1" y="565" width="3.4" height="15.0" fill="rgb(247,75,25)" rx="2" ry="2" />
<text  x="385.10" y="575.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (1 samples, 0.28%)</title><rect x="1022.4" y="661" width="3.3" height="15.0" fill="rgb(217,95,2)" rx="2" ry="2" />
<text  x="1025.39" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (124 samples, 35.23%)</title><rect x="646.9" y="741" width="415.7" height="15.0" fill="rgb(208,141,41)" rx="2" ry="2" />
<text  x="649.93" y="751.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt;</text>
</g>
<g >
<title>do_calloc[inline] (2 samples, 0.57%)</title><rect x="120.6" y="677" width="6.7" height="15.0" fill="rgb(213,220,14)" rx="2" ry="2" />
<text  x="123.62" y="687.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.28%)</title><rect x="264.8" y="725" width="3.3" height="15.0" fill="rgb(228,157,15)" rx="2" ry="2" />
<text  x="267.77" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[](unsigned long) (1 samples, 0.28%)</title><rect x="1169.9" y="741" width="3.3" height="15.0" fill="rgb(220,150,22)" rx="2" ry="2" />
<text  x="1172.89" y="751.5" ></text>
</g>
<g >
<title>0x00007f03803f12ea (1 samples, 0.28%)</title><rect x="56.9" y="629" width="3.4" height="15.0" fill="rgb(247,42,23)" rx="2" ry="2" />
<text  x="59.93" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.28%)</title><rect x="603.4" y="757" width="3.3" height="15.0" fill="rgb(220,111,8)" rx="2" ry="2" />
<text  x="606.35" y="767.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1099.5" y="693" width="3.3" height="15.0" fill="rgb(228,51,8)" rx="2" ry="2" />
<text  x="1102.49" y="703.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000069f80&gt; (1 samples, 0.28%)</title><rect x="1089.4" y="805" width="3.4" height="15.0" fill="rgb(225,156,25)" rx="2" ry="2" />
<text  x="1092.43" y="815.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (1 samples, 0.28%)</title><rect x="1015.7" y="677" width="3.3" height="15.0" fill="rgb(246,165,33)" rx="2" ry="2" />
<text  x="1018.68" y="687.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.28%)</title><rect x="512.8" y="693" width="3.4" height="15.0" fill="rgb(224,16,34)" rx="2" ry="2" />
<text  x="515.84" y="703.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (3 samples, 0.85%)</title><rect x="177.6" y="709" width="10.1" height="15.0" fill="rgb(237,32,27)" rx="2" ry="2" />
<text  x="180.61" y="719.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003a70&gt; (1 samples, 0.28%)</title><rect x="40.2" y="533" width="3.3" height="15.0" fill="rgb(244,2,3)" rx="2" ry="2" />
<text  x="43.17" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.57%)</title><rect x="1179.9" y="325" width="6.7" height="15.0" fill="rgb(254,35,33)" rx="2" ry="2" />
<text  x="1182.94" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.28%)</title><rect x="1069.3" y="693" width="3.4" height="15.0" fill="rgb(211,176,34)" rx="2" ry="2" />
<text  x="1072.32" y="703.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.28%)</title><rect x="1186.6" y="789" width="3.4" height="15.0" fill="rgb(249,165,35)" rx="2" ry="2" />
<text  x="1189.65" y="799.5" ></text>
</g>
<g >
<title>drmCommandWriteRead&lt;000000000000a8d0&gt; (1 samples, 0.28%)</title><rect x="1022.4" y="629" width="3.3" height="15.0" fill="rgb(238,17,26)" rx="2" ry="2" />
<text  x="1025.39" y="639.5" ></text>
</g>
<g >
<title>0x00007f03803e675a (1 samples, 0.28%)</title><rect x="50.2" y="725" width="3.4" height="15.0" fill="rgb(213,179,6)" rx="2" ry="2" />
<text  x="53.23" y="735.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (1 samples, 0.28%)</title><rect x="40.2" y="693" width="3.3" height="15.0" fill="rgb(228,70,41)" rx="2" ry="2" />
<text  x="43.17" y="703.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (1 samples, 0.28%)</title><rect x="40.2" y="789" width="3.3" height="15.0" fill="rgb(254,19,15)" rx="2" ry="2" />
<text  x="43.17" y="799.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (2 samples, 0.57%)</title><rect x="1179.9" y="501" width="6.7" height="15.0" fill="rgb(213,102,34)" rx="2" ry="2" />
<text  x="1182.94" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (2 samples, 0.57%)</title><rect x="807.8" y="629" width="6.7" height="15.0" fill="rgb(250,217,11)" rx="2" ry="2" />
<text  x="810.84" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.28%)</title><rect x="1079.4" y="661" width="3.3" height="15.0" fill="rgb(238,222,43)" rx="2" ry="2" />
<text  x="1082.38" y="671.5" ></text>
</g>
<g >
<title>SpinLockHolder::~SpinLockHolder()[inline] (1 samples, 0.28%)</title><rect x="1179.9" y="85" width="3.4" height="15.0" fill="rgb(250,133,46)" rx="2" ry="2" />
<text  x="1182.94" y="95.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.28%)</title><rect x="1089.4" y="773" width="3.4" height="15.0" fill="rgb(240,150,20)" rx="2" ry="2" />
<text  x="1092.43" y="783.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.28%)</title><rect x="1082.7" y="661" width="3.4" height="15.0" fill="rgb(245,174,38)" rx="2" ry="2" />
<text  x="1085.73" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.28%)</title><rect x="1086.1" y="677" width="3.3" height="15.0" fill="rgb(213,114,18)" rx="2" ry="2" />
<text  x="1089.08" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000258c0&gt; (1 samples, 0.28%)</title><rect x="1179.9" y="133" width="3.4" height="15.0" fill="rgb(233,31,14)" rx="2" ry="2" />
<text  x="1182.94" y="143.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.28%)</title><rect x="613.4" y="741" width="3.4" height="15.0" fill="rgb(222,110,3)" rx="2" ry="2" />
<text  x="616.41" y="751.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.28%)</title><rect x="1186.6" y="421" width="3.4" height="15.0" fill="rgb(213,89,34)" rx="2" ry="2" />
<text  x="1189.65" y="431.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.57%)</title><rect x="23.4" y="485" width="6.7" height="15.0" fill="rgb(245,3,11)" rx="2" ry="2" />
<text  x="26.41" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::empty() const (1 samples, 0.28%)</title><rect x="1096.1" y="645" width="3.4" height="15.0" fill="rgb(242,156,10)" rx="2" ry="2" />
<text  x="1099.14" y="655.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_space&lt;0000000000005630&gt; (1 samples, 0.28%)</title><rect x="1022.4" y="677" width="3.3" height="15.0" fill="rgb(214,175,32)" rx="2" ry="2" />
<text  x="1025.39" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.28%)</title><rect x="294.9" y="709" width="3.4" height="15.0" fill="rgb(223,104,16)" rx="2" ry="2" />
<text  x="297.94" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (14 samples, 3.98%)</title><rect x="217.8" y="709" width="47.0" height="15.0" fill="rgb(252,201,49)" rx="2" ry="2" />
<text  x="220.84" y="719.5" >std:..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (14 samples, 3.98%)</title><rect x="1123.0" y="469" width="46.9" height="15.0" fill="rgb(233,7,40)" rx="2" ry="2" />
<text  x="1125.95" y="479.5" >std:..</text>
</g>
<g >
<title>tc_calloc (2 samples, 0.57%)</title><rect x="120.6" y="693" width="6.7" height="15.0" fill="rgb(254,26,6)" rx="2" ry="2" />
<text  x="123.62" y="703.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.28%)</title><rect x="1129.7" y="341" width="3.3" height="15.0" fill="rgb(250,141,31)" rx="2" ry="2" />
<text  x="1132.66" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (4 samples, 1.14%)</title><rect x="1149.8" y="357" width="13.4" height="15.0" fill="rgb(254,143,29)" rx="2" ry="2" />
<text  x="1152.77" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.28%)</title><rect x="382.1" y="549" width="3.4" height="15.0" fill="rgb(223,202,9)" rx="2" ry="2" />
<text  x="385.10" y="559.5" ></text>
</g>
<g >
<title>0x00007f03803f5473 (1 samples, 0.28%)</title><rect x="50.2" y="677" width="3.4" height="15.0" fill="rgb(247,72,14)" rx="2" ry="2" />
<text  x="53.23" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.28%)</title><rect x="559.8" y="677" width="3.3" height="15.0" fill="rgb(237,61,54)" rx="2" ry="2" />
<text  x="562.77" y="687.5" ></text>
</g>
<g >
<title>0x00007f03803e1b4e (1 samples, 0.28%)</title><rect x="56.9" y="661" width="3.4" height="15.0" fill="rgb(233,82,10)" rx="2" ry="2" />
<text  x="59.93" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (3 samples, 0.85%)</title><rect x="278.2" y="677" width="10.0" height="15.0" fill="rgb(229,13,49)" rx="2" ry="2" />
<text  x="281.18" y="687.5" ></text>
</g>
<g >
<title>_Safe_iterator (12 samples, 3.41%)</title><rect x="1123.0" y="453" width="40.2" height="15.0" fill="rgb(222,115,7)" rx="2" ry="2" />
<text  x="1125.95" y="463.5" >_Sa..</text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000067af0&gt; (8 samples, 2.27%)</title><rect x="606.7" y="789" width="26.8" height="15.0" fill="rgb(214,196,0)" rx="2" ry="2" />
<text  x="609.70" y="799.5" >R..</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.28%)</title><rect x="616.8" y="741" width="3.3" height="15.0" fill="rgb(215,20,29)" rx="2" ry="2" />
<text  x="619.76" y="751.5" ></text>
</g>
<g >
<title>llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)@@LLVM_14&lt;0000000000c49b90&gt; (1 samples, 0.28%)</title><rect x="23.4" y="357" width="3.4" height="15.0" fill="rgb(206,175,41)" rx="2" ry="2" />
<text  x="26.41" y="367.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000068c20&gt; (306 samples, 86.93%)</title><rect x="63.6" y="805" width="1025.8" height="15.0" fill="rgb(228,229,24)" rx="2" ry="2" />
<text  x="66.64" y="815.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000068c20&gt;</text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (3 samples, 0.85%)</title><rect x="1049.2" y="661" width="10.1" height="15.0" fill="rgb(222,216,17)" rx="2" ry="2" />
<text  x="1052.20" y="671.5" ></text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (1 samples, 0.28%)</title><rect x="60.3" y="709" width="3.3" height="15.0" fill="rgb(216,46,21)" rx="2" ry="2" />
<text  x="63.28" y="719.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.28%)</title><rect x="1082.7" y="709" width="3.4" height="15.0" fill="rgb(206,60,40)" rx="2" ry="2" />
<text  x="1085.73" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.57%)</title><rect x="1179.9" y="357" width="6.7" height="15.0" fill="rgb(227,196,47)" rx="2" ry="2" />
<text  x="1182.94" y="367.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.57%)</title><rect x="23.4" y="549" width="6.7" height="15.0" fill="rgb(224,95,33)" rx="2" ry="2" />
<text  x="26.41" y="559.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int&amp;&amp;) (1 samples, 0.28%)</title><rect x="1102.8" y="661" width="3.4" height="15.0" fill="rgb(225,137,1)" rx="2" ry="2" />
<text  x="1105.84" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.57%)</title><rect x="1179.9" y="293" width="6.7" height="15.0" fill="rgb(214,160,20)" rx="2" ry="2" />
<text  x="1182.94" y="303.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (2 samples, 0.57%)</title><rect x="10.0" y="885" width="6.7" height="15.0" fill="rgb(225,51,37)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="645" width="57.0" height="15.0" fill="rgb(237,174,51)" rx="2" ry="2" />
<text  x="1115.90" y="655.5" >void s..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (5 samples, 1.42%)</title><rect x="938.6" y="693" width="16.7" height="15.0" fill="rgb(249,61,11)" rx="2" ry="2" />
<text  x="941.58" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.28%)</title><rect x="1076.0" y="661" width="3.4" height="15.0" fill="rgb(252,13,50)" rx="2" ry="2" />
<text  x="1079.02" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (1 samples, 0.28%)</title><rect x="432.4" y="709" width="3.3" height="15.0" fill="rgb(237,190,16)" rx="2" ry="2" />
<text  x="435.39" y="719.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::seekpos(std::fpos&lt;__mbstate_t&gt;, std::_Ios_Openmode) (1 samples, 0.28%)</title><rect x="1173.2" y="693" width="3.4" height="15.0" fill="rgb(243,29,8)" rx="2" ry="2" />
<text  x="1176.24" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;0000000000081e10&gt; (1 samples, 0.28%)</title><rect x="613.4" y="709" width="3.4" height="15.0" fill="rgb(213,51,31)" rx="2" ry="2" />
<text  x="616.41" y="719.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.57%)</title><rect x="1179.9" y="373" width="6.7" height="15.0" fill="rgb(221,200,21)" rx="2" ry="2" />
<text  x="1182.94" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.28%)</title><rect x="36.8" y="629" width="3.4" height="15.0" fill="rgb(230,198,37)" rx="2" ry="2" />
<text  x="39.82" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="597" width="57.0" height="15.0" fill="rgb(245,20,46)" rx="2" ry="2" />
<text  x="1115.90" y="607.5" >std::_..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 1.70%)</title><rect x="43.5" y="773" width="20.1" height="15.0" fill="rgb(221,203,21)" rx="2" ry="2" />
<text  x="46.52" y="783.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (2 samples, 0.57%)</title><rect x="1179.9" y="677" width="6.7" height="15.0" fill="rgb(245,213,22)" rx="2" ry="2" />
<text  x="1182.94" y="687.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.28%)</title><rect x="1072.7" y="661" width="3.3" height="15.0" fill="rgb(216,113,40)" rx="2" ry="2" />
<text  x="1075.67" y="671.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 1.70%)</title><rect x="1066.0" y="757" width="20.1" height="15.0" fill="rgb(227,121,21)" rx="2" ry="2" />
<text  x="1068.97" y="767.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (17 samples, 4.83%)</title><rect x="1112.9" y="677" width="57.0" height="15.0" fill="rgb(248,138,27)" rx="2" ry="2" />
<text  x="1115.90" y="687.5" >std::_..</text>
</g>
<g >
<title>nouveau_drm_screen_create (7 samples, 1.99%)</title><rect x="797.8" y="661" width="23.4" height="15.0" fill="rgb(243,53,21)" rx="2" ry="2" />
<text  x="800.78" y="671.5" >n..</text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (3 samples, 0.85%)</title><rect x="1102.8" y="741" width="10.1" height="15.0" fill="rgb(222,225,49)" rx="2" ry="2" />
<text  x="1105.84" y="751.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 1.14%)</title><rect x="372.0" y="709" width="13.5" height="15.0" fill="rgb(229,200,15)" rx="2" ry="2" />
<text  x="375.05" y="719.5" ></text>
</g>
<g >
<title>Mesh::add3dTriangle(Triangle&amp;)&lt;000000000007be00&gt; (1 samples, 0.28%)</title><rect x="1099.5" y="741" width="3.3" height="15.0" fill="rgb(221,8,34)" rx="2" ry="2" />
<text  x="1102.49" y="751.5" ></text>
</g>
<g >
<title>_Safe_sequence (1 samples, 0.28%)</title><rect x="147.4" y="725" width="3.4" height="15.0" fill="rgb(240,165,46)" rx="2" ry="2" />
<text  x="150.44" y="735.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.28%)</title><rect x="40.2" y="661" width="3.3" height="15.0" fill="rgb(248,141,25)" rx="2" ry="2" />
<text  x="43.17" y="671.5" ></text>
</g>
<g >
<title>_dl_debug_state@@GLIBC_PRIVATE&lt;0000000000002090&gt; (1 samples, 0.28%)</title><rect x="40.2" y="597" width="3.3" height="15.0" fill="rgb(248,204,43)" rx="2" ry="2" />
<text  x="43.17" y="607.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003a70&gt; (1 samples, 0.28%)</title><rect x="23.4" y="437" width="3.4" height="15.0" fill="rgb(219,135,9)" rx="2" ry="2" />
<text  x="26.41" y="447.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.28%)</title><rect x="36.8" y="661" width="3.4" height="15.0" fill="rgb(252,181,27)" rx="2" ry="2" />
<text  x="39.82" y="671.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;000000000006a250&gt; (6 samples, 1.70%)</title><rect x="1066.0" y="789" width="20.1" height="15.0" fill="rgb(253,192,17)" rx="2" ry="2" />
<text  x="1068.97" y="799.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="1099.5" y="725" width="3.3" height="15.0" fill="rgb(227,201,30)" rx="2" ry="2" />
<text  x="1102.49" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.28%)</title><rect x="1079.4" y="645" width="3.3" height="15.0" fill="rgb(205,10,21)" rx="2" ry="2" />
<text  x="1082.38" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.28%)</title><rect x="626.8" y="677" width="3.4" height="15.0" fill="rgb(212,84,2)" rx="2" ry="2" />
<text  x="629.82" y="687.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.28%)</title><rect x="311.7" y="741" width="3.4" height="15.0" fill="rgb(246,209,13)" rx="2" ry="2" />
<text  x="314.70" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.28%)</title><rect x="1096.1" y="741" width="3.4" height="15.0" fill="rgb(249,181,36)" rx="2" ry="2" />
<text  x="1099.14" y="751.5" ></text>
</g>
<g >
<title>0x00007f03803ed1bb (1 samples, 0.28%)</title><rect x="53.6" y="613" width="3.3" height="15.0" fill="rgb(219,80,5)" rx="2" ry="2" />
<text  x="56.58" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.57%)</title><rect x="1179.9" y="741" width="6.7" height="15.0" fill="rgb(252,15,48)" rx="2" ry="2" />
<text  x="1182.94" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029750&gt; (1 samples, 0.28%)</title><rect x="1183.3" y="149" width="3.3" height="15.0" fill="rgb(245,137,14)" rx="2" ry="2" />
<text  x="1186.30" y="159.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.28%)</title><rect x="1076.0" y="693" width="3.4" height="15.0" fill="rgb(248,176,5)" rx="2" ry="2" />
<text  x="1079.02" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (2 samples, 0.57%)</title><rect x="120.6" y="613" width="6.7" height="15.0" fill="rgb(219,213,11)" rx="2" ry="2" />
<text  x="123.62" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.28%)</title><rect x="1186.6" y="645" width="3.4" height="15.0" fill="rgb(222,171,33)" rx="2" ry="2" />
<text  x="1189.65" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.28%)</title><rect x="429.0" y="709" width="3.4" height="15.0" fill="rgb(238,91,13)" rx="2" ry="2" />
<text  x="432.03" y="719.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (5 samples, 1.42%)</title><rect x="23.4" y="805" width="16.8" height="15.0" fill="rgb(213,108,51)" rx="2" ry="2" />
<text  x="26.41" y="815.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (4 samples, 1.14%)</title><rect x="298.3" y="709" width="13.4" height="15.0" fill="rgb(219,64,32)" rx="2" ry="2" />
<text  x="301.30" y="719.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow() (1 samples, 0.28%)</title><rect x="1176.6" y="693" width="3.3" height="15.0" fill="rgb(224,81,32)" rx="2" ry="2" />
<text  x="1179.59" y="703.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.57%)</title><rect x="23.4" y="469" width="6.7" height="15.0" fill="rgb(220,50,45)" rx="2" ry="2" />
<text  x="26.41" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029750&gt; (1 samples, 0.28%)</title><rect x="1179.9" y="149" width="3.4" height="15.0" fill="rgb(244,15,12)" rx="2" ry="2" />
<text  x="1182.94" y="159.5" ></text>
</g>
</g>
</svg>
