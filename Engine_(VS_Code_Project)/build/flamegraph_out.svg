<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="886.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="869" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="869" > </text>
<g id="frames">
<g >
<title>tcmalloc::ThreadCache::FreeList::set_max_length(unsigned long)[inline] (1 samples, 0.03%)</title><rect x="1177.2" y="293" width="0.3" height="15.0" fill="rgb(214,155,22)" rx="2" ry="2" />
<text  x="1180.21" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (17 samples, 0.43%)</title><rect x="616.5" y="677" width="5.1" height="15.0" fill="rgb(229,211,14)" rx="2" ry="2" />
<text  x="619.51" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="683.7" y="693" width="0.3" height="15.0" fill="rgb(224,2,7)" rx="2" ry="2" />
<text  x="686.73" y="703.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="245" width="0.3" height="15.0" fill="rgb(233,71,31)" rx="2" ry="2" />
<text  x="1190.32" y="255.5" ></text>
</g>
<g >
<title>int* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, std::allocator&lt;int&gt;&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="549" width="0.3" height="15.0" fill="rgb(219,76,43)" rx="2" ry="2" />
<text  x="1159.69" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="682.5" y="581" width="0.3" height="15.0" fill="rgb(240,21,42)" rx="2" ry="2" />
<text  x="685.54" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (26 samples, 0.66%)</title><rect x="300.6" y="677" width="7.7" height="15.0" fill="rgb(207,85,42)" rx="2" ry="2" />
<text  x="303.61" y="687.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0b4e (1 samples, 0.03%)</title><rect x="33.2" y="677" width="0.3" height="15.0" fill="rgb(221,187,15)" rx="2" ry="2" />
<text  x="36.20" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.03%)</title><rect x="1142.4" y="485" width="0.3" height="15.0" fill="rgb(229,178,13)" rx="2" ry="2" />
<text  x="1145.41" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="667.4" y="597" width="0.3" height="15.0" fill="rgb(220,155,4)" rx="2" ry="2" />
<text  x="670.37" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (1 samples, 0.03%)</title><rect x="672.1" y="645" width="0.3" height="15.0" fill="rgb(245,86,53)" rx="2" ry="2" />
<text  x="675.13" y="655.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.03%)</title><rect x="34.7" y="565" width="0.3" height="15.0" fill="rgb(248,212,51)" rx="2" ry="2" />
<text  x="37.69" y="575.5" ></text>
</g>
<g >
<title>drmIoctl&lt;0000000000007300&gt; (7 samples, 0.18%)</title><rect x="1088.0" y="549" width="2.1" height="15.0" fill="rgb(217,220,7)" rx="2" ry="2" />
<text  x="1090.97" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.08%)</title><rect x="681.9" y="645" width="0.9" height="15.0" fill="rgb(233,165,9)" rx="2" ry="2" />
<text  x="684.95" y="655.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.15%)</title><rect x="1144.5" y="613" width="1.8" height="15.0" fill="rgb(217,51,40)" rx="2" ry="2" />
<text  x="1147.49" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="674.5" y="677" width="0.3" height="15.0" fill="rgb(242,146,14)" rx="2" ry="2" />
<text  x="677.51" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (14 samples, 0.35%)</title><rect x="33.8" y="693" width="4.2" height="15.0" fill="rgb(253,171,40)" rx="2" ry="2" />
<text  x="36.80" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="565" width="0.3" height="15.0" fill="rgb(250,50,19)" rx="2" ry="2" />
<text  x="1185.56" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.03%)</title><rect x="30.2" y="597" width="0.3" height="15.0" fill="rgb(219,81,35)" rx="2" ry="2" />
<text  x="33.23" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="677.5" y="645" width="0.3" height="15.0" fill="rgb(206,173,1)" rx="2" ry="2" />
<text  x="680.49" y="655.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (2 samples, 0.05%)</title><rect x="28.4" y="629" width="0.6" height="15.0" fill="rgb(237,139,2)" rx="2" ry="2" />
<text  x="31.44" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (2 samples, 0.05%)</title><rect x="680.2" y="581" width="0.6" height="15.0" fill="rgb(206,89,9)" rx="2" ry="2" />
<text  x="683.16" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (10 samples, 0.25%)</title><rect x="1183.8" y="485" width="2.9" height="15.0" fill="rgb(242,199,42)" rx="2" ry="2" />
<text  x="1186.75" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; __gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt;(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) (1 samples, 0.03%)</title><rect x="657.9" y="693" width="0.3" height="15.0" fill="rgb(219,209,17)" rx="2" ry="2" />
<text  x="660.85" y="703.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.05%)</title><rect x="655.5" y="677" width="0.6" height="15.0" fill="rgb(251,22,49)" rx="2" ry="2" />
<text  x="658.48" y="687.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1142.4" y="565" width="0.3" height="15.0" fill="rgb(253,26,18)" rx="2" ry="2" />
<text  x="1145.41" y="575.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.03%)</title><rect x="1153.4" y="613" width="0.3" height="15.0" fill="rgb(231,198,27)" rx="2" ry="2" />
<text  x="1156.41" y="623.5" ></text>
</g>
<g >
<title>vector (8 samples, 0.20%)</title><rect x="274.1" y="661" width="2.4" height="15.0" fill="rgb(223,67,26)" rx="2" ry="2" />
<text  x="277.14" y="671.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (20 samples, 0.50%)</title><rect x="916.3" y="581" width="6.0" height="15.0" fill="rgb(220,226,25)" rx="2" ry="2" />
<text  x="919.34" y="591.5" ></text>
</g>
<g >
<title>0x00007fa19390f355 (1 samples, 0.03%)</title><rect x="32.6" y="629" width="0.3" height="15.0" fill="rgb(248,24,49)" rx="2" ry="2" />
<text  x="35.61" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1140.0" y="581" width="0.3" height="15.0" fill="rgb(210,119,44)" rx="2" ry="2" />
<text  x="1143.03" y="591.5" ></text>
</g>
<g >
<title>std::istream::seekg(std::fpos&lt;__mbstate_t&gt;)&lt;000000000011fb30&gt; (1 samples, 0.03%)</title><rect x="1181.1" y="661" width="0.3" height="15.0" fill="rgb(213,193,19)" rx="2" ry="2" />
<text  x="1184.08" y="671.5" ></text>
</g>
<g >
<title>_Safe_sequence_base (3 samples, 0.08%)</title><rect x="1146.3" y="725" width="0.9" height="15.0" fill="rgb(216,67,42)" rx="2" ry="2" />
<text  x="1149.27" y="735.5" ></text>
</g>
<g >
<title>_Vector_impl (16 samples, 0.40%)</title><rect x="142.7" y="661" width="4.7" height="15.0" fill="rgb(249,76,3)" rx="2" ry="2" />
<text  x="145.66" y="671.5" ></text>
</g>
<g >
<title>~__shared_ptr (3 samples, 0.08%)</title><rect x="1186.7" y="725" width="0.9" height="15.0" fill="rgb(235,91,25)" rx="2" ry="2" />
<text  x="1189.73" y="735.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.03%)</title><rect x="32.9" y="581" width="0.3" height="15.0" fill="rgb(234,216,25)" rx="2" ry="2" />
<text  x="35.90" y="591.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="119.2" y="597" width="0.3" height="15.0" fill="rgb(250,37,41)" rx="2" ry="2" />
<text  x="122.17" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1150.4" y="581" width="0.3" height="15.0" fill="rgb(244,118,11)" rx="2" ry="2" />
<text  x="1153.44" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1146.6" y="597" width="0.3" height="15.0" fill="rgb(229,132,50)" rx="2" ry="2" />
<text  x="1149.57" y="607.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (3,919 samples, 98.79%)</title><rect x="22.5" y="773" width="1165.7" height="15.0" fill="rgb(235,163,15)" rx="2" ry="2" />
<text  x="25.49" y="783.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.05%)</title><rect x="676.9" y="693" width="0.6" height="15.0" fill="rgb(244,104,4)" rx="2" ry="2" />
<text  x="679.89" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="517" width="20.8" height="15.0" fill="rgb(209,94,47)" rx="2" ry="2" />
<text  x="1162.36" y="527.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (3 samples, 0.08%)</title><rect x="680.2" y="629" width="0.9" height="15.0" fill="rgb(213,90,32)" rx="2" ry="2" />
<text  x="683.16" y="639.5" ></text>
</g>
<g >
<title>ioctl@@GLIBC_2.2.5&lt;00000000000fc9b0&gt; (7 samples, 0.18%)</title><rect x="1088.0" y="533" width="2.1" height="15.0" fill="rgb(230,124,27)" rx="2" ry="2" />
<text  x="1090.97" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (26 samples, 0.66%)</title><rect x="607.0" y="613" width="7.7" height="15.0" fill="rgb(219,156,48)" rx="2" ry="2" />
<text  x="609.99" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="657.0" y="693" width="0.3" height="15.0" fill="rgb(231,6,32)" rx="2" ry="2" />
<text  x="659.96" y="703.5" ></text>
</g>
<g >
<title>0x00007f4cf82ad56b (1 samples, 0.03%)</title><rect x="31.1" y="661" width="0.3" height="15.0" fill="rgb(245,83,19)" rx="2" ry="2" />
<text  x="34.12" y="671.5" ></text>
</g>
<g >
<title>int* std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.03%)</title><rect x="1156.7" y="501" width="0.3" height="15.0" fill="rgb(214,229,16)" rx="2" ry="2" />
<text  x="1159.69" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (2 samples, 0.05%)</title><rect x="179.3" y="629" width="0.5" height="15.0" fill="rgb(208,71,47)" rx="2" ry="2" />
<text  x="182.25" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.03%)</title><rect x="1140.3" y="613" width="0.3" height="15.0" fill="rgb(252,169,24)" rx="2" ry="2" />
<text  x="1143.33" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (8 samples, 0.20%)</title><rect x="663.2" y="677" width="2.4" height="15.0" fill="rgb(237,199,27)" rx="2" ry="2" />
<text  x="666.21" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.05%)</title><rect x="681.4" y="693" width="0.5" height="15.0" fill="rgb(211,112,0)" rx="2" ry="2" />
<text  x="684.35" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1158.5" y="661" width="0.3" height="15.0" fill="rgb(218,92,10)" rx="2" ry="2" />
<text  x="1161.47" y="671.5" ></text>
</g>
<g >
<title>int* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.03%)</title><rect x="1156.7" y="517" width="0.3" height="15.0" fill="rgb(217,2,9)" rx="2" ry="2" />
<text  x="1159.69" y="527.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a5a5a (1 samples, 0.03%)</title><rect x="32.3" y="581" width="0.3" height="15.0" fill="rgb(245,14,29)" rx="2" ry="2" />
<text  x="35.31" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1142.1" y="565" width="0.3" height="15.0" fill="rgb(236,192,2)" rx="2" ry="2" />
<text  x="1145.11" y="575.5" ></text>
</g>
<g >
<title>__close@@GLIBC_2.2.5&lt;00000000000f7540&gt; (1 samples, 0.03%)</title><rect x="32.3" y="565" width="0.3" height="15.0" fill="rgb(215,215,43)" rx="2" ry="2" />
<text  x="35.31" y="575.5" ></text>
</g>
<g >
<title>readlinkat@@GLIBC_2.4&lt;00000000000f86b0&gt; (1 samples, 0.03%)</title><rect x="34.1" y="549" width="0.3" height="15.0" fill="rgb(234,113,26)" rx="2" ry="2" />
<text  x="37.09" y="559.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.05%)</title><rect x="1144.8" y="581" width="0.6" height="15.0" fill="rgb(222,123,34)" rx="2" ry="2" />
<text  x="1147.79" y="591.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (3,919 samples, 98.79%)</title><rect x="22.5" y="821" width="1165.7" height="15.0" fill="rgb(224,205,28)" rx="2" ry="2" />
<text  x="25.49" y="831.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (4 samples, 0.10%)</title><rect x="555.5" y="629" width="1.2" height="15.0" fill="rgb(242,170,46)" rx="2" ry="2" />
<text  x="558.53" y="639.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.03%)</title><rect x="456.5" y="645" width="0.3" height="15.0" fill="rgb(254,151,52)" rx="2" ry="2" />
<text  x="459.48" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="677.5" y="693" width="0.3" height="15.0" fill="rgb(220,98,21)" rx="2" ry="2" />
<text  x="680.49" y="703.5" ></text>
</g>
<g >
<title>qsort_r@@GLIBC_2.8&lt;000000000003c6e0&gt; (1 samples, 0.03%)</title><rect x="37.7" y="677" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="40.66" y="687.5" ></text>
</g>
<g >
<title>Vec3d::toString[abi:cxx11]() (1 samples, 0.03%)</title><rect x="690.9" y="709" width="0.3" height="15.0" fill="rgb(228,167,21)" rx="2" ry="2" />
<text  x="693.87" y="719.5" ></text>
</g>
<g >
<title>glXCreateContext&lt;000000000001b410&gt; (2 samples, 0.05%)</title><rect x="28.4" y="645" width="0.6" height="15.0" fill="rgb(254,59,14)" rx="2" ry="2" />
<text  x="31.44" y="655.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.05%)</title><rect x="1180.5" y="677" width="0.6" height="15.0" fill="rgb(227,227,27)" rx="2" ry="2" />
<text  x="1183.48" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1152.8" y="677" width="0.3" height="15.0" fill="rgb(250,90,20)" rx="2" ry="2" />
<text  x="1155.82" y="687.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.03%)</title><rect x="38.9" y="549" width="0.3" height="15.0" fill="rgb(220,20,18)" rx="2" ry="2" />
<text  x="41.85" y="559.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="676.3" y="693" width="0.3" height="15.0" fill="rgb(239,228,16)" rx="2" ry="2" />
<text  x="679.30" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1148.4" y="709" width="0.3" height="15.0" fill="rgb(222,6,18)" rx="2" ry="2" />
<text  x="1151.36" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (6 samples, 0.15%)</title><rect x="1135.3" y="613" width="1.8" height="15.0" fill="rgb(246,172,0)" rx="2" ry="2" />
<text  x="1138.27" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (2 samples, 0.05%)</title><rect x="670.6" y="693" width="0.6" height="15.0" fill="rgb(242,27,35)" rx="2" ry="2" />
<text  x="673.65" y="703.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.03%)</title><rect x="678.1" y="661" width="0.3" height="15.0" fill="rgb(245,153,53)" rx="2" ry="2" />
<text  x="681.08" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="1132.6" y="549" width="0.3" height="15.0" fill="rgb(219,106,26)" rx="2" ry="2" />
<text  x="1135.59" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="28.7" y="437" width="0.3" height="15.0" fill="rgb(213,76,10)" rx="2" ry="2" />
<text  x="31.74" y="447.5" ></text>
</g>
<g >
<title>0x00007f9f3a7ad33f (1 samples, 0.03%)</title><rect x="31.7" y="645" width="0.3" height="15.0" fill="rgb(212,69,37)" rx="2" ry="2" />
<text  x="34.71" y="655.5" ></text>
</g>
<g >
<title>__asprintf_chk@@GLIBC_2.8&lt;00000000001170f0&gt; (1 samples, 0.03%)</title><rect x="28.7" y="421" width="0.3" height="15.0" fill="rgb(216,72,36)" rx="2" ry="2" />
<text  x="31.74" y="431.5" ></text>
</g>
<g >
<title>glXQueryContext&lt;000000000001a840&gt; (1 samples, 0.03%)</title><rect x="29.0" y="645" width="0.3" height="15.0" fill="rgb(249,135,10)" rx="2" ry="2" />
<text  x="32.04" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1148.4" y="613" width="0.3" height="15.0" fill="rgb(227,85,1)" rx="2" ry="2" />
<text  x="1151.36" y="623.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.03%)</title><rect x="1187.6" y="645" width="0.3" height="15.0" fill="rgb(225,165,43)" rx="2" ry="2" />
<text  x="1190.62" y="655.5" ></text>
</g>
<g >
<title>tc_calloc (4 samples, 0.10%)</title><rect x="119.5" y="629" width="1.2" height="15.0" fill="rgb(249,17,42)" rx="2" ry="2" />
<text  x="122.46" y="639.5" ></text>
</g>
<g >
<title>0x00007f4cf82b53a5 (1 samples, 0.03%)</title><rect x="33.8" y="565" width="0.3" height="15.0" fill="rgb(248,223,20)" rx="2" ry="2" />
<text  x="36.80" y="575.5" ></text>
</g>
<g >
<title>0x00007fa19390fb4e (1 samples, 0.03%)</title><rect x="34.4" y="597" width="0.3" height="15.0" fill="rgb(223,184,37)" rx="2" ry="2" />
<text  x="37.39" y="607.5" ></text>
</g>
<g >
<title>_Safe_sequence (8 samples, 0.20%)</title><rect x="448.4" y="661" width="2.4" height="15.0" fill="rgb(226,205,20)" rx="2" ry="2" />
<text  x="451.45" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (41 samples, 1.03%)</title><rect x="604.0" y="629" width="12.2" height="15.0" fill="rgb(242,69,6)" rx="2" ry="2" />
<text  x="607.02" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;OBJ_Datum, std::allocator&lt;OBJ_Datum&gt; &gt;::push_back(OBJ_Datum const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="677" width="0.3" height="15.0" fill="rgb(224,24,44)" rx="2" ry="2" />
<text  x="1185.56" y="687.5" ></text>
</g>
<g >
<title>std::istream::tellg()&lt;000000000011fa00&gt; (3 samples, 0.08%)</title><rect x="1182.9" y="661" width="0.9" height="15.0" fill="rgb(209,215,53)" rx="2" ry="2" />
<text  x="1185.86" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (2 samples, 0.05%)</title><rect x="1159.4" y="389" width="0.6" height="15.0" fill="rgb(212,223,8)" rx="2" ry="2" />
<text  x="1162.36" y="399.5" ></text>
</g>
<g >
<title>_Safe_iterator_base (1 samples, 0.03%)</title><rect x="662.3" y="677" width="0.3" height="15.0" fill="rgb(248,205,48)" rx="2" ry="2" />
<text  x="665.32" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (5 samples, 0.13%)</title><rect x="671.2" y="693" width="1.5" height="15.0" fill="rgb(240,95,53)" rx="2" ry="2" />
<text  x="674.24" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (16 samples, 0.40%)</title><rect x="152.8" y="645" width="4.7" height="15.0" fill="rgb(247,181,34)" rx="2" ry="2" />
<text  x="155.78" y="655.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5b4e (1 samples, 0.03%)</title><rect x="33.8" y="597" width="0.3" height="15.0" fill="rgb(242,195,37)" rx="2" ry="2" />
<text  x="36.80" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (3 samples, 0.08%)</title><rect x="1161.7" y="293" width="0.9" height="15.0" fill="rgb(230,53,13)" rx="2" ry="2" />
<text  x="1164.74" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1158.8" y="533" width="0.3" height="15.0" fill="rgb(242,25,30)" rx="2" ry="2" />
<text  x="1161.77" y="543.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (2 samples, 0.05%)</title><rect x="690.6" y="725" width="0.6" height="15.0" fill="rgb(231,38,30)" rx="2" ry="2" />
<text  x="693.57" y="735.5" ></text>
</g>
<g >
<title>_Xlcmbstowcs&lt;0000000000055c70&gt; (2 samples, 0.05%)</title><rect x="36.8" y="629" width="0.6" height="15.0" fill="rgb(217,57,11)" rx="2" ry="2" />
<text  x="39.77" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1148.7" y="709" width="0.5" height="15.0" fill="rgb(232,206,40)" rx="2" ry="2" />
<text  x="1151.65" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (2 samples, 0.05%)</title><rect x="1159.4" y="405" width="0.6" height="15.0" fill="rgb(246,109,19)" rx="2" ry="2" />
<text  x="1162.36" y="415.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="29.0" y="565" width="0.3" height="15.0" fill="rgb(238,34,41)" rx="2" ry="2" />
<text  x="32.04" y="575.5" ></text>
</g>
<g >
<title>TCMalloc_SystemAlloc(unsigned long, unsigned long*, unsigned long)&lt;0000000000024890&gt; (1 samples, 0.03%)</title><rect x="427.3" y="437" width="0.3" height="15.0" fill="rgb(206,93,5)" rx="2" ry="2" />
<text  x="430.33" y="447.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (6 samples, 0.15%)</title><rect x="24.0" y="405" width="1.8" height="15.0" fill="rgb(229,176,31)" rx="2" ry="2" />
<text  x="26.98" y="415.5" ></text>
</g>
<g >
<title>ioctl@@GLIBC_2.2.5&lt;00000000000fc9b0&gt; (2 samples, 0.05%)</title><rect x="23.4" y="405" width="0.6" height="15.0" fill="rgb(230,114,19)" rx="2" ry="2" />
<text  x="26.39" y="415.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (2 samples, 0.05%)</title><rect x="1157.6" y="661" width="0.6" height="15.0" fill="rgb(228,155,16)" rx="2" ry="2" />
<text  x="1160.58" y="671.5" ></text>
</g>
<g >
<title>lseek64 (1 samples, 0.03%)</title><rect x="1181.1" y="597" width="0.3" height="15.0" fill="rgb(232,22,37)" rx="2" ry="2" />
<text  x="1184.08" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (3 samples, 0.08%)</title><rect x="1186.7" y="613" width="0.9" height="15.0" fill="rgb(241,184,8)" rx="2" ry="2" />
<text  x="1189.73" y="623.5" ></text>
</g>
<g >
<title>int* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.03%)</title><rect x="1158.8" y="613" width="0.3" height="15.0" fill="rgb(219,216,3)" rx="2" ry="2" />
<text  x="1161.77" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="687.9" y="661" width="0.3" height="15.0" fill="rgb(246,153,21)" rx="2" ry="2" />
<text  x="690.90" y="671.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (8 samples, 0.20%)</title><rect x="914.0" y="549" width="2.3" height="15.0" fill="rgb(241,162,10)" rx="2" ry="2" />
<text  x="916.96" y="559.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0f9d (1 samples, 0.03%)</title><rect x="33.5" y="645" width="0.3" height="15.0" fill="rgb(233,16,7)" rx="2" ry="2" />
<text  x="36.50" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (3 samples, 0.08%)</title><rect x="1133.5" y="533" width="0.9" height="15.0" fill="rgb(227,21,52)" rx="2" ry="2" />
<text  x="1136.48" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.03%)</title><rect x="1134.4" y="517" width="0.3" height="15.0" fill="rgb(226,161,44)" rx="2" ry="2" />
<text  x="1137.38" y="527.5" ></text>
</g>
<g >
<title>~_Safe_unordered_container_base (67 samples, 1.69%)</title><rect x="1160.0" y="421" width="19.9" height="15.0" fill="rgb(245,90,1)" rx="2" ry="2" />
<text  x="1162.96" y="431.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1137.4" y="565" width="0.2" height="15.0" fill="rgb(243,16,38)" rx="2" ry="2" />
<text  x="1140.35" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="670.3" y="613" width="0.3" height="15.0" fill="rgb(212,51,47)" rx="2" ry="2" />
<text  x="673.35" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="687.3" y="613" width="0.3" height="15.0" fill="rgb(234,116,11)" rx="2" ry="2" />
<text  x="690.30" y="623.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry(std::istream&amp;, bool)&lt;000000000011e2f0&gt; (1 samples, 0.03%)</title><rect x="1157.9" y="645" width="0.3" height="15.0" fill="rgb(214,29,29)" rx="2" ry="2" />
<text  x="1160.87" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.03%)</title><rect x="1149.0" y="581" width="0.2" height="15.0" fill="rgb(230,109,26)" rx="2" ry="2" />
<text  x="1151.95" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (316 samples, 7.97%)</title><rect x="179.8" y="661" width="94.0" height="15.0" fill="rgb(206,220,46)" rx="2" ry="2" />
<text  x="182.85" y="671.5" >std::__debu..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="681.4" y="645" width="0.3" height="15.0" fill="rgb(210,180,34)" rx="2" ry="2" />
<text  x="684.35" y="655.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (1,013 samples, 25.54%)</title><rect x="40.9" y="693" width="301.4" height="15.0" fill="rgb(206,160,48)" rx="2" ry="2" />
<text  x="43.94" y="703.5" >ScanlineRasterizer::drawFlatTopTri(Trian..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="37.7" y="581" width="0.3" height="15.0" fill="rgb(227,80,10)" rx="2" ry="2" />
<text  x="40.66" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="661.1" y="645" width="0.3" height="15.0" fill="rgb(212,120,48)" rx="2" ry="2" />
<text  x="664.13" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1142.4" y="581" width="0.3" height="15.0" fill="rgb(230,136,34)" rx="2" ry="2" />
<text  x="1145.41" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (3 samples, 0.08%)</title><rect x="1186.7" y="709" width="0.9" height="15.0" fill="rgb(206,46,4)" rx="2" ry="2" />
<text  x="1189.73" y="719.5" ></text>
</g>
<g >
<title>scandirat64@@GLIBC_2.15 (1 samples, 0.03%)</title><rect x="37.7" y="565" width="0.3" height="15.0" fill="rgb(232,33,19)" rx="2" ry="2" />
<text  x="40.66" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1149.0" y="597" width="0.2" height="15.0" fill="rgb(219,49,3)" rx="2" ry="2" />
<text  x="1151.95" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (23 samples, 0.58%)</title><rect x="22.5" y="677" width="6.8" height="15.0" fill="rgb(237,151,33)" rx="2" ry="2" />
<text  x="25.49" y="687.5" ></text>
</g>
<g >
<title>operator() (2 samples, 0.05%)</title><rect x="1130.5" y="581" width="0.6" height="15.0" fill="rgb(238,111,13)" rx="2" ry="2" />
<text  x="1133.51" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (5 samples, 0.13%)</title><rect x="1138.8" y="613" width="1.5" height="15.0" fill="rgb(254,125,52)" rx="2" ry="2" />
<text  x="1141.84" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length(char const*) (3 samples, 0.08%)</title><rect x="337.5" y="629" width="0.9" height="15.0" fill="rgb(252,56,22)" rx="2" ry="2" />
<text  x="340.50" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="1127.8" y="661" width="0.3" height="15.0" fill="rgb(238,75,28)" rx="2" ry="2" />
<text  x="1130.83" y="671.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000075ff0&gt; (97 samples, 2.45%)</title><rect x="1154.9" y="741" width="28.9" height="15.0" fill="rgb(223,37,4)" rx="2" ry="2" />
<text  x="1157.90" y="751.5" >Me..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (3 samples, 0.08%)</title><rect x="1186.7" y="501" width="0.9" height="15.0" fill="rgb(230,228,47)" rx="2" ry="2" />
<text  x="1189.73" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="119.2" y="565" width="0.3" height="15.0" fill="rgb(248,211,4)" rx="2" ry="2" />
<text  x="122.17" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="22.5" y="597" width="0.3" height="15.0" fill="rgb(219,21,8)" rx="2" ry="2" />
<text  x="25.49" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.08%)</title><rect x="681.9" y="661" width="0.9" height="15.0" fill="rgb(232,162,12)" rx="2" ry="2" />
<text  x="684.95" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="686.4" y="645" width="0.3" height="15.0" fill="rgb(252,50,40)" rx="2" ry="2" />
<text  x="689.41" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="671.5" y="613" width="0.3" height="15.0" fill="rgb(229,196,41)" rx="2" ry="2" />
<text  x="674.54" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.08%)</title><rect x="23.1" y="517" width="0.9" height="15.0" fill="rgb(217,171,30)" rx="2" ry="2" />
<text  x="26.09" y="527.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0bfe (1 samples, 0.03%)</title><rect x="33.2" y="693" width="0.3" height="15.0" fill="rgb(217,209,2)" rx="2" ry="2" />
<text  x="36.20" y="703.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="687.3" y="629" width="0.3" height="15.0" fill="rgb(215,109,35)" rx="2" ry="2" />
<text  x="690.30" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.03%)</title><rect x="29.6" y="533" width="0.3" height="15.0" fill="rgb(240,50,36)" rx="2" ry="2" />
<text  x="32.63" y="543.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (149 samples, 3.76%)</title><rect x="878.0" y="597" width="44.3" height="15.0" fill="rgb(247,185,21)" rx="2" ry="2" />
<text  x="880.97" y="607.5" >nouv..</text>
</g>
<g >
<title>0x00007fa193915791 (2 samples, 0.05%)</title><rect x="32.6" y="693" width="0.6" height="15.0" fill="rgb(233,56,34)" rx="2" ry="2" />
<text  x="35.61" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (3 samples, 0.08%)</title><rect x="1186.7" y="469" width="0.9" height="15.0" fill="rgb(219,1,32)" rx="2" ry="2" />
<text  x="1189.73" y="479.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (1 samples, 0.03%)</title><rect x="674.5" y="709" width="0.3" height="15.0" fill="rgb(223,108,27)" rx="2" ry="2" />
<text  x="677.51" y="719.5" ></text>
</g>
<g >
<title>vector (3 samples, 0.08%)</title><rect x="648.0" y="677" width="0.9" height="15.0" fill="rgb(228,223,10)" rx="2" ry="2" />
<text  x="651.04" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="656.7" y="661" width="0.3" height="15.0" fill="rgb(238,145,46)" rx="2" ry="2" />
<text  x="659.66" y="671.5" ></text>
</g>
<g >
<title>0x00007f4cf82aab56 (1 samples, 0.03%)</title><rect x="31.4" y="677" width="0.3" height="15.0" fill="rgb(218,198,2)" rx="2" ry="2" />
<text  x="34.42" y="687.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.03%)</title><rect x="36.2" y="629" width="0.3" height="15.0" fill="rgb(231,171,29)" rx="2" ry="2" />
<text  x="39.18" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (3 samples, 0.08%)</title><rect x="671.2" y="629" width="0.9" height="15.0" fill="rgb(250,122,54)" rx="2" ry="2" />
<text  x="674.24" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.08%)</title><rect x="1144.5" y="597" width="0.9" height="15.0" fill="rgb(236,217,5)" rx="2" ry="2" />
<text  x="1147.49" y="607.5" ></text>
</g>
<g >
<title>_Parameter (6 samples, 0.15%)</title><rect x="556.7" y="629" width="1.8" height="15.0" fill="rgb(238,58,7)" rx="2" ry="2" />
<text  x="559.72" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (3 samples, 0.08%)</title><rect x="1186.7" y="405" width="0.9" height="15.0" fill="rgb(225,0,53)" rx="2" ry="2" />
<text  x="1189.73" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1148.7" y="677" width="0.5" height="15.0" fill="rgb(237,42,28)" rx="2" ry="2" />
<text  x="1151.65" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="681.7" y="677" width="0.2" height="15.0" fill="rgb(232,123,12)" rx="2" ry="2" />
<text  x="684.65" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1149.2" y="565" width="0.3" height="15.0" fill="rgb(235,34,21)" rx="2" ry="2" />
<text  x="1152.25" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1145.1" y="501" width="0.3" height="15.0" fill="rgb(231,180,38)" rx="2" ry="2" />
<text  x="1148.08" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (3 samples, 0.08%)</title><rect x="671.2" y="661" width="0.9" height="15.0" fill="rgb(246,143,53)" rx="2" ry="2" />
<text  x="674.24" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.03%)</title><rect x="30.2" y="565" width="0.3" height="15.0" fill="rgb(230,60,52)" rx="2" ry="2" />
<text  x="33.23" y="575.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (10 samples, 0.25%)</title><rect x="78.4" y="677" width="3.0" height="15.0" fill="rgb(237,132,52)" rx="2" ry="2" />
<text  x="81.41" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="581" width="0.3" height="15.0" fill="rgb(220,148,1)" rx="2" ry="2" />
<text  x="1183.48" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000025640&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="165" width="0.3" height="15.0" fill="rgb(242,132,10)" rx="2" ry="2" />
<text  x="1190.32" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast&lt;00000000000a4730&gt; (1 samples, 0.03%)</title><rect x="1182.3" y="581" width="0.3" height="15.0" fill="rgb(225,7,37)" rx="2" ry="2" />
<text  x="1185.27" y="591.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.03%)</title><rect x="1185.8" y="101" width="0.3" height="15.0" fill="rgb(251,221,2)" rx="2" ry="2" />
<text  x="1188.84" y="111.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (69 samples, 1.74%)</title><rect x="851.8" y="597" width="20.5" height="15.0" fill="rgb(227,106,3)" rx="2" ry="2" />
<text  x="854.79" y="607.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.03%)</title><rect x="30.8" y="629" width="0.3" height="15.0" fill="rgb(226,20,19)" rx="2" ry="2" />
<text  x="33.82" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="1140.3" y="533" width="0.3" height="15.0" fill="rgb(241,96,30)" rx="2" ry="2" />
<text  x="1143.33" y="543.5" ></text>
</g>
<g >
<title>0x00007f9f3a79d355 (1 samples, 0.03%)</title><rect x="34.1" y="597" width="0.3" height="15.0" fill="rgb(223,140,17)" rx="2" ry="2" />
<text  x="37.09" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="39.2" y="693" width="0.2" height="15.0" fill="rgb(235,22,49)" rx="2" ry="2" />
<text  x="42.15" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.03%)</title><rect x="30.2" y="533" width="0.3" height="15.0" fill="rgb(247,12,10)" rx="2" ry="2" />
<text  x="33.23" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1141.2" y="613" width="0.3" height="15.0" fill="rgb(205,84,19)" rx="2" ry="2" />
<text  x="1144.22" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="658.7" y="693" width="0.3" height="15.0" fill="rgb(252,133,51)" rx="2" ry="2" />
<text  x="661.75" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="37.7" y="597" width="0.3" height="15.0" fill="rgb(220,164,16)" rx="2" ry="2" />
<text  x="40.66" y="607.5" ></text>
</g>
<g >
<title>XStringToKeysym&lt;000000000003d210&gt; (1 samples, 0.03%)</title><rect x="35.9" y="629" width="0.3" height="15.0" fill="rgb(210,218,6)" rx="2" ry="2" />
<text  x="38.88" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (2 samples, 0.05%)</title><rect x="1159.4" y="421" width="0.6" height="15.0" fill="rgb(231,139,40)" rx="2" ry="2" />
<text  x="1162.36" y="431.5" ></text>
</g>
<g >
<title>nouveau_bufctx_refn&lt;0000000000005d80&gt; (19 samples, 0.48%)</title><rect x="1069.2" y="613" width="5.7" height="15.0" fill="rgb(235,199,3)" rx="2" ry="2" />
<text  x="1072.23" y="623.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.03%)</title><rect x="22.5" y="645" width="0.3" height="15.0" fill="rgb(223,166,4)" rx="2" ry="2" />
<text  x="25.49" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1129.0" y="581" width="0.3" height="15.0" fill="rgb(234,63,38)" rx="2" ry="2" />
<text  x="1132.02" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;__gnu_debug::_Distance_precision&gt;::type&gt;::__type&gt; std::make_pair&lt;long, __gnu_debug::_Distance_precision&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (1 samples, 0.03%)</title><rect x="1162.3" y="261" width="0.3" height="15.0" fill="rgb(221,11,20)" rx="2" ry="2" />
<text  x="1165.34" y="271.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1149.5" y="661" width="0.3" height="15.0" fill="rgb(238,101,8)" rx="2" ry="2" />
<text  x="1152.55" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1144.5" y="517" width="0.3" height="15.0" fill="rgb(211,94,30)" rx="2" ry="2" />
<text  x="1147.49" y="527.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.03%)</title><rect x="22.5" y="629" width="0.3" height="15.0" fill="rgb(234,16,24)" rx="2" ry="2" />
<text  x="25.49" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="1159.1" y="629" width="0.3" height="15.0" fill="rgb(244,223,27)" rx="2" ry="2" />
<text  x="1162.06" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="485" width="0.3" height="15.0" fill="rgb(219,109,25)" rx="2" ry="2" />
<text  x="1185.56" y="495.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (6 samples, 0.15%)</title><rect x="26.7" y="565" width="1.7" height="15.0" fill="rgb(211,82,30)" rx="2" ry="2" />
<text  x="29.66" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (56 samples, 1.41%)</title><rect x="411.6" y="645" width="16.6" height="15.0" fill="rgb(223,128,34)" rx="2" ry="2" />
<text  x="414.56" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1129.6" y="629" width="0.6" height="15.0" fill="rgb(221,95,28)" rx="2" ry="2" />
<text  x="1132.62" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="1154.0" y="629" width="0.9" height="15.0" fill="rgb(225,152,50)" rx="2" ry="2" />
<text  x="1157.01" y="639.5" ></text>
</g>
<g >
<title>_Parameter (9 samples, 0.23%)</title><rect x="503.2" y="645" width="2.7" height="15.0" fill="rgb(215,119,49)" rx="2" ry="2" />
<text  x="506.18" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (3 samples, 0.08%)</title><rect x="1154.0" y="709" width="0.9" height="15.0" fill="rgb(235,58,32)" rx="2" ry="2" />
<text  x="1157.01" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (10 samples, 0.25%)</title><rect x="1183.8" y="581" width="2.9" height="15.0" fill="rgb(253,101,20)" rx="2" ry="2" />
<text  x="1186.75" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1142.7" y="581" width="0.6" height="15.0" fill="rgb(211,79,51)" rx="2" ry="2" />
<text  x="1145.70" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (10 samples, 0.25%)</title><rect x="1183.8" y="373" width="2.9" height="15.0" fill="rgb(210,74,13)" rx="2" ry="2" />
<text  x="1186.75" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.05%)</title><rect x="1139.7" y="597" width="0.6" height="15.0" fill="rgb(206,183,36)" rx="2" ry="2" />
<text  x="1142.73" y="607.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (19 samples, 0.48%)</title><rect x="22.8" y="597" width="5.6" height="15.0" fill="rgb(231,136,2)" rx="2" ry="2" />
<text  x="25.79" y="607.5" ></text>
</g>
<g >
<title>~basic_string (3 samples, 0.08%)</title><rect x="651.3" y="677" width="0.9" height="15.0" fill="rgb(239,81,50)" rx="2" ry="2" />
<text  x="654.31" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (2 samples, 0.05%)</title><rect x="680.2" y="565" width="0.6" height="15.0" fill="rgb(231,150,4)" rx="2" ry="2" />
<text  x="683.16" y="575.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1157.0" y="661" width="0.3" height="15.0" fill="rgb(252,78,21)" rx="2" ry="2" />
<text  x="1159.98" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (132 samples, 3.33%)</title><rect x="81.4" y="677" width="39.3" height="15.0" fill="rgb(234,201,13)" rx="2" ry="2" />
<text  x="84.39" y="687.5" >SDL..</text>
</g>
<g >
<title>shared_ptr (1 samples, 0.03%)</title><rect x="1150.4" y="597" width="0.3" height="15.0" fill="rgb(228,86,53)" rx="2" ry="2" />
<text  x="1153.44" y="607.5" ></text>
</g>
<g >
<title>nouveau_object_mthd&lt;0000000000002f90&gt; (2 samples, 0.05%)</title><rect x="23.4" y="453" width="0.6" height="15.0" fill="rgb(242,135,0)" rx="2" ry="2" />
<text  x="26.39" y="463.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003d670&gt; (2 samples, 0.05%)</title><rect x="120.7" y="677" width="0.5" height="15.0" fill="rgb(245,13,12)" rx="2" ry="2" />
<text  x="123.65" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="690.3" y="661" width="0.3" height="15.0" fill="rgb(240,122,47)" rx="2" ry="2" />
<text  x="693.28" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge()&lt;0000000000029ae0&gt; (1 samples, 0.03%)</title><rect x="1186.4" y="101" width="0.3" height="15.0" fill="rgb(222,216,13)" rx="2" ry="2" />
<text  x="1189.43" y="111.5" ></text>
</g>
<g >
<title>0x00007f4cf82ab776 (1 samples, 0.03%)</title><rect x="33.8" y="645" width="0.3" height="15.0" fill="rgb(227,206,39)" rx="2" ry="2" />
<text  x="36.80" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (6 samples, 0.15%)</title><rect x="1184.9" y="181" width="1.8" height="15.0" fill="rgb(205,83,30)" rx="2" ry="2" />
<text  x="1187.94" y="191.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="517" width="0.3" height="15.0" fill="rgb(230,193,30)" rx="2" ry="2" />
<text  x="1183.48" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="661.1" y="629" width="0.3" height="15.0" fill="rgb(243,54,48)" rx="2" ry="2" />
<text  x="664.13" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::_Safe_container(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="39.4" y="709" width="0.3" height="15.0" fill="rgb(231,190,0)" rx="2" ry="2" />
<text  x="42.45" y="719.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1145.1" y="485" width="0.3" height="15.0" fill="rgb(224,209,30)" rx="2" ry="2" />
<text  x="1148.08" y="495.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (3 samples, 0.08%)</title><rect x="25.8" y="565" width="0.9" height="15.0" fill="rgb(246,224,28)" rx="2" ry="2" />
<text  x="28.77" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="1187.6" y="693" width="0.3" height="15.0" fill="rgb(248,46,3)" rx="2" ry="2" />
<text  x="1190.62" y="703.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="683.7" y="645" width="0.3" height="15.0" fill="rgb(235,34,15)" rx="2" ry="2" />
<text  x="686.73" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.03%)</title><rect x="24.0" y="357" width="0.3" height="15.0" fill="rgb(223,120,31)" rx="2" ry="2" />
<text  x="26.98" y="367.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="38.9" y="645" width="0.3" height="15.0" fill="rgb(237,56,23)" rx="2" ry="2" />
<text  x="41.85" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (50 samples, 1.26%)</title><rect x="319.1" y="629" width="14.8" height="15.0" fill="rgb(236,126,23)" rx="2" ry="2" />
<text  x="322.05" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.03%)</title><rect x="30.2" y="549" width="0.3" height="15.0" fill="rgb(238,94,3)" rx="2" ry="2" />
<text  x="33.23" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (2 samples, 0.05%)</title><rect x="1182.0" y="677" width="0.6" height="15.0" fill="rgb(206,168,50)" rx="2" ry="2" />
<text  x="1184.97" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="645" width="0.3" height="15.0" fill="rgb(215,63,13)" rx="2" ry="2" />
<text  x="1183.48" y="655.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (3 samples, 0.08%)</title><rect x="25.8" y="533" width="0.9" height="15.0" fill="rgb(244,45,40)" rx="2" ry="2" />
<text  x="28.77" y="543.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (79 samples, 1.99%)</title><rect x="276.5" y="677" width="23.5" height="15.0" fill="rgb(250,156,24)" rx="2" ry="2" />
<text  x="279.52" y="687.5" >T..</text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (32 samples, 0.81%)</title><rect x="992.8" y="645" width="9.5" height="15.0" fill="rgb(224,152,14)" rx="2" ry="2" />
<text  x="995.79" y="655.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0355 (1 samples, 0.03%)</title><rect x="33.5" y="613" width="0.3" height="15.0" fill="rgb(240,57,20)" rx="2" ry="2" />
<text  x="36.50" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.03%)</title><rect x="1184.6" y="101" width="0.3" height="15.0" fill="rgb(237,104,11)" rx="2" ry="2" />
<text  x="1187.65" y="111.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (50 samples, 1.26%)</title><rect x="1101.4" y="613" width="14.8" height="15.0" fill="rgb(252,37,42)" rx="2" ry="2" />
<text  x="1104.36" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.08%)</title><rect x="23.1" y="549" width="0.9" height="15.0" fill="rgb(245,60,41)" rx="2" ry="2" />
<text  x="26.09" y="559.5" ></text>
</g>
<g >
<title>_XOpenLC&lt;000000000005f270&gt; (2 samples, 0.05%)</title><rect x="36.8" y="613" width="0.6" height="15.0" fill="rgb(225,133,17)" rx="2" ry="2" />
<text  x="39.77" y="623.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="31.4" y="517" width="0.3" height="15.0" fill="rgb(228,9,44)" rx="2" ry="2" />
<text  x="34.42" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="533" width="20.8" height="15.0" fill="rgb(224,222,39)" rx="2" ry="2" />
<text  x="1162.36" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.03%)</title><rect x="427.3" y="485" width="0.3" height="15.0" fill="rgb(252,74,9)" rx="2" ry="2" />
<text  x="430.33" y="495.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (6 samples, 0.15%)</title><rect x="24.0" y="517" width="1.8" height="15.0" fill="rgb(220,51,42)" rx="2" ry="2" />
<text  x="26.98" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (86 samples, 2.17%)</title><rect x="312.8" y="677" width="25.6" height="15.0" fill="rgb(217,202,36)" rx="2" ry="2" />
<text  x="315.81" y="687.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size() const (1 samples, 0.03%)</title><rect x="1182.6" y="421" width="0.3" height="15.0" fill="rgb(212,207,50)" rx="2" ry="2" />
<text  x="1185.56" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned int)&lt;0000000000029b80&gt; (1 samples, 0.03%)</title><rect x="1186.1" y="101" width="0.3" height="15.0" fill="rgb(213,142,3)" rx="2" ry="2" />
<text  x="1189.13" y="111.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="672.4" y="645" width="0.3" height="15.0" fill="rgb(252,53,24)" rx="2" ry="2" />
<text  x="675.43" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.03%)</title><rect x="1177.5" y="389" width="0.3" height="15.0" fill="rgb(224,46,14)" rx="2" ry="2" />
<text  x="1180.51" y="399.5" ></text>
</g>
<g >
<title>tc_new (1 samples, 0.03%)</title><rect x="1164.4" y="309" width="0.3" height="15.0" fill="rgb(227,43,33)" rx="2" ry="2" />
<text  x="1167.42" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (3 samples, 0.08%)</title><rect x="1133.5" y="549" width="0.9" height="15.0" fill="rgb(226,39,37)" rx="2" ry="2" />
<text  x="1136.48" y="559.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;(std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1180.2" y="645" width="0.3" height="15.0" fill="rgb(236,56,22)" rx="2" ry="2" />
<text  x="1183.18" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.05%)</title><rect x="35.0" y="661" width="0.6" height="15.0" fill="rgb(208,69,47)" rx="2" ry="2" />
<text  x="37.99" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1140.0" y="549" width="0.3" height="15.0" fill="rgb(219,116,29)" rx="2" ry="2" />
<text  x="1143.03" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="22.5" y="581" width="0.3" height="15.0" fill="rgb(219,142,2)" rx="2" ry="2" />
<text  x="25.49" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SDL_Color*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::operator*() const (1 samples, 0.03%)</title><rect x="1154.9" y="581" width="0.3" height="15.0" fill="rgb(244,102,26)" rx="2" ry="2" />
<text  x="1157.90" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (2 samples, 0.05%)</title><rect x="681.9" y="629" width="0.6" height="15.0" fill="rgb(237,184,44)" rx="2" ry="2" />
<text  x="684.95" y="639.5" ></text>
</g>
<g >
<title>__dynamic_cast&lt;00000000000a4730&gt; (1 samples, 0.03%)</title><rect x="1180.8" y="549" width="0.3" height="15.0" fill="rgb(229,18,8)" rx="2" ry="2" />
<text  x="1183.78" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063370&gt; (15 samples, 0.38%)</title><rect x="652.2" y="693" width="4.5" height="15.0" fill="rgb(254,111,39)" rx="2" ry="2" />
<text  x="655.20" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.05%)</title><rect x="684.0" y="661" width="0.6" height="15.0" fill="rgb(235,70,20)" rx="2" ry="2" />
<text  x="687.03" y="671.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5bfe (1 samples, 0.03%)</title><rect x="30.8" y="693" width="0.3" height="15.0" fill="rgb(234,73,1)" rx="2" ry="2" />
<text  x="33.82" y="703.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (97 samples, 2.45%)</title><rect x="1154.9" y="725" width="28.9" height="15.0" fill="rgb(244,100,8)" rx="2" ry="2" />
<text  x="1157.90" y="735.5" >OB..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.05%)</title><rect x="1146.3" y="693" width="0.6" height="15.0" fill="rgb(219,7,44)" rx="2" ry="2" />
<text  x="1149.27" y="703.5" ></text>
</g>
<g >
<title>0x00007fa19390fb4e (1 samples, 0.03%)</title><rect x="32.9" y="629" width="0.3" height="15.0" fill="rgb(248,5,17)" rx="2" ry="2" />
<text  x="35.90" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="683.4" y="597" width="0.3" height="15.0" fill="rgb(218,102,50)" rx="2" ry="2" />
<text  x="686.44" y="607.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="689.1" y="661" width="0.3" height="15.0" fill="rgb(217,35,7)" rx="2" ry="2" />
<text  x="692.09" y="671.5" ></text>
</g>
<g >
<title>drmIoctl&lt;0000000000007300&gt; (1 samples, 0.03%)</title><rect x="23.1" y="421" width="0.3" height="15.0" fill="rgb(215,5,6)" rx="2" ry="2" />
<text  x="26.09" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="674.2" y="677" width="0.3" height="15.0" fill="rgb(234,134,45)" rx="2" ry="2" />
<text  x="677.21" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1149.5" y="677" width="0.3" height="15.0" fill="rgb(228,203,51)" rx="2" ry="2" />
<text  x="1152.55" y="687.5" ></text>
</g>
<g >
<title>__gconv_get_alias_db@@GLIBC_PRIVATE&lt;0000000000024030&gt; (1 samples, 0.03%)</title><rect x="30.5" y="485" width="0.3" height="15.0" fill="rgb(253,61,7)" rx="2" ry="2" />
<text  x="33.52" y="495.5" ></text>
</g>
<g >
<title>0x00007f4cf82aab56 (1 samples, 0.03%)</title><rect x="33.8" y="629" width="0.3" height="15.0" fill="rgb(223,120,12)" rx="2" ry="2" />
<text  x="36.80" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1128.1" y="629" width="0.3" height="15.0" fill="rgb(229,119,24)" rx="2" ry="2" />
<text  x="1131.13" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.03%)</title><rect x="30.2" y="581" width="0.3" height="15.0" fill="rgb(253,1,28)" rx="2" ry="2" />
<text  x="33.23" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="658.2" y="677" width="0.5" height="15.0" fill="rgb(211,111,50)" rx="2" ry="2" />
<text  x="661.15" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1148.4" y="645" width="0.3" height="15.0" fill="rgb(249,229,6)" rx="2" ry="2" />
<text  x="1151.36" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1146.0" y="389" width="0.3" height="15.0" fill="rgb(232,85,12)" rx="2" ry="2" />
<text  x="1148.98" y="399.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="668.3" y="597" width="0.3" height="15.0" fill="rgb(243,205,24)" rx="2" ry="2" />
<text  x="671.27" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1149.2" y="581" width="0.3" height="15.0" fill="rgb(225,188,0)" rx="2" ry="2" />
<text  x="1152.25" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.05%)</title><rect x="1187.0" y="261" width="0.6" height="15.0" fill="rgb(221,138,0)" rx="2" ry="2" />
<text  x="1190.03" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.05%)</title><rect x="684.0" y="709" width="0.6" height="15.0" fill="rgb(216,81,21)" rx="2" ry="2" />
<text  x="687.03" y="719.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1130.2" y="597" width="0.3" height="15.0" fill="rgb(218,23,16)" rx="2" ry="2" />
<text  x="1133.21" y="607.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;(std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;&amp;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;*) (1 samples, 0.03%)</title><rect x="1158.2" y="661" width="0.3" height="15.0" fill="rgb(212,128,3)" rx="2" ry="2" />
<text  x="1161.17" y="671.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000048260&gt; (1 samples, 0.03%)</title><rect x="273.8" y="661" width="0.3" height="15.0" fill="rgb(229,43,22)" rx="2" ry="2" />
<text  x="276.84" y="671.5" ></text>
</g>
<g >
<title>operator*(float const&amp;, Vec2d const&amp;)&lt;00000000000806c0&gt; (1 samples, 0.03%)</title><rect x="662.9" y="677" width="0.3" height="15.0" fill="rgb(227,151,13)" rx="2" ry="2" />
<text  x="665.91" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.10%)</title><rect x="1152.8" y="725" width="1.2" height="15.0" fill="rgb(214,117,14)" rx="2" ry="2" />
<text  x="1155.82" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.03%)</title><rect x="1142.4" y="501" width="0.3" height="15.0" fill="rgb(206,48,51)" rx="2" ry="2" />
<text  x="1145.41" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (3 samples, 0.08%)</title><rect x="1160.6" y="309" width="0.8" height="15.0" fill="rgb(231,188,1)" rx="2" ry="2" />
<text  x="1163.55" y="319.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="1149.8" y="629" width="0.9" height="15.0" fill="rgb(253,142,35)" rx="2" ry="2" />
<text  x="1152.84" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="30.5" y="693" width="0.3" height="15.0" fill="rgb(206,13,51)" rx="2" ry="2" />
<text  x="33.52" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="659.3" y="661" width="0.6" height="15.0" fill="rgb(216,166,52)" rx="2" ry="2" />
<text  x="662.34" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New(unsigned long)&lt;0000000000027cb0&gt; (1 samples, 0.03%)</title><rect x="427.3" y="469" width="0.3" height="15.0" fill="rgb(220,131,24)" rx="2" ry="2" />
<text  x="430.33" y="479.5" ></text>
</g>
<g >
<title>Engine_3D::Engine_3D() (54 samples, 1.36%)</title><rect x="22.5" y="757" width="16.1" height="15.0" fill="rgb(241,48,19)" rx="2" ry="2" />
<text  x="25.49" y="767.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::IsUseEmergencyMalloc()[inline] (1 samples, 0.03%)</title><rect x="427.9" y="613" width="0.3" height="15.0" fill="rgb(215,137,50)" rx="2" ry="2" />
<text  x="430.92" y="623.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.38%)</title><rect x="1128.7" y="661" width="4.5" height="15.0" fill="rgb(229,12,39)" rx="2" ry="2" />
<text  x="1131.72" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (70 samples, 1.76%)</title><rect x="627.2" y="661" width="20.8" height="15.0" fill="rgb(218,101,52)" rx="2" ry="2" />
<text  x="630.22" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="533" width="0.3" height="15.0" fill="rgb(242,152,23)" rx="2" ry="2" />
<text  x="1152.84" y="543.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (1 samples, 0.03%)</title><rect x="29.0" y="581" width="0.3" height="15.0" fill="rgb(235,136,42)" rx="2" ry="2" />
<text  x="32.04" y="591.5" ></text>
</g>
<g >
<title>readlinkat@@GLIBC_2.4&lt;00000000000f86b0&gt; (1 samples, 0.03%)</title><rect x="35.0" y="581" width="0.3" height="15.0" fill="rgb(234,31,25)" rx="2" ry="2" />
<text  x="37.99" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1132.3" y="565" width="0.3" height="15.0" fill="rgb(245,108,52)" rx="2" ry="2" />
<text  x="1135.29" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="1154.0" y="645" width="0.9" height="15.0" fill="rgb(243,189,46)" rx="2" ry="2" />
<text  x="1157.01" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (28 samples, 0.71%)</title><rect x="464.8" y="645" width="8.3" height="15.0" fill="rgb(216,121,9)" rx="2" ry="2" />
<text  x="467.81" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (4 samples, 0.10%)</title><rect x="1154.9" y="613" width="1.2" height="15.0" fill="rgb(221,128,4)" rx="2" ry="2" />
<text  x="1157.90" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="674.8" y="693" width="0.3" height="15.0" fill="rgb(220,160,32)" rx="2" ry="2" />
<text  x="677.81" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.03%)</title><rect x="427.6" y="549" width="0.3" height="15.0" fill="rgb(242,69,33)" rx="2" ry="2" />
<text  x="430.63" y="559.5" ></text>
</g>
<g >
<title>~_Vector_base (1 samples, 0.03%)</title><rect x="1182.6" y="501" width="0.3" height="15.0" fill="rgb(232,176,44)" rx="2" ry="2" />
<text  x="1185.56" y="511.5" ></text>
</g>
<g >
<title>tc_malloc (1 samples, 0.03%)</title><rect x="38.3" y="693" width="0.3" height="15.0" fill="rgb(251,8,9)" rx="2" ry="2" />
<text  x="41.26" y="703.5" ></text>
</g>
<g >
<title>getdents64@@GLIBC_2.30&lt;00000000000ce0c0&gt; (1 samples, 0.03%)</title><rect x="37.7" y="533" width="0.3" height="15.0" fill="rgb(239,127,7)" rx="2" ry="2" />
<text  x="40.66" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="678.1" y="613" width="0.3" height="15.0" fill="rgb(219,132,37)" rx="2" ry="2" />
<text  x="681.08" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::end() const (1 samples, 0.03%)</title><rect x="1155.8" y="581" width="0.3" height="15.0" fill="rgb(252,196,37)" rx="2" ry="2" />
<text  x="1158.79" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (3 samples, 0.08%)</title><rect x="1133.5" y="517" width="0.9" height="15.0" fill="rgb(253,84,28)" rx="2" ry="2" />
<text  x="1136.48" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;__gnu_debug::_Distance_precision&gt;::type&gt;::__type&gt; std::make_pair&lt;long, __gnu_debug::_Distance_precision&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (1 samples, 0.03%)</title><rect x="1158.8" y="501" width="0.3" height="15.0" fill="rgb(214,59,21)" rx="2" ry="2" />
<text  x="1161.77" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1144.2" y="565" width="0.3" height="15.0" fill="rgb(210,76,54)" rx="2" ry="2" />
<text  x="1147.19" y="575.5" ></text>
</g>
<g >
<title>InOutRasterizer (2 samples, 0.05%)</title><rect x="40.3" y="693" width="0.6" height="15.0" fill="rgb(209,100,52)" rx="2" ry="2" />
<text  x="43.34" y="703.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (30 samples, 0.76%)</title><rect x="13.6" y="821" width="8.9" height="15.0" fill="rgb(247,79,53)" rx="2" ry="2" />
<text  x="16.57" y="831.5" ></text>
</g>
<g >
<title>~__concurrence_unlock_error (1 samples, 0.03%)</title><rect x="1163.8" y="341" width="0.3" height="15.0" fill="rgb(252,45,39)" rx="2" ry="2" />
<text  x="1166.82" y="351.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.10%)</title><rect x="686.4" y="677" width="1.2" height="15.0" fill="rgb(248,71,1)" rx="2" ry="2" />
<text  x="689.41" y="687.5" ></text>
</g>
<g >
<title>basic_string (3 samples, 0.08%)</title><rect x="1186.7" y="421" width="0.9" height="15.0" fill="rgb(253,77,21)" rx="2" ry="2" />
<text  x="1189.73" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (18 samples, 0.45%)</title><rect x="1133.2" y="645" width="5.3" height="15.0" fill="rgb(242,76,39)" rx="2" ry="2" />
<text  x="1136.19" y="655.5" ></text>
</g>
<g >
<title>__glDispatchMakeCurrent&lt;0000000000042a60&gt; (1 samples, 0.03%)</title><rect x="29.0" y="613" width="0.3" height="15.0" fill="rgb(223,23,24)" rx="2" ry="2" />
<text  x="32.04" y="623.5" ></text>
</g>
<g >
<title>0x00007f4cf82add2a (1 samples, 0.03%)</title><rect x="33.8" y="549" width="0.3" height="15.0" fill="rgb(232,31,35)" rx="2" ry="2" />
<text  x="36.80" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (10 samples, 0.25%)</title><rect x="1183.8" y="437" width="2.9" height="15.0" fill="rgb(218,174,44)" rx="2" ry="2" />
<text  x="1186.75" y="447.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (3 samples, 0.08%)</title><rect x="307.5" y="645" width="0.8" height="15.0" fill="rgb(235,163,16)" rx="2" ry="2" />
<text  x="310.45" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1149.0" y="613" width="0.2" height="15.0" fill="rgb(215,168,44)" rx="2" ry="2" />
<text  x="1151.95" y="623.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (3 samples, 0.08%)</title><rect x="669.5" y="629" width="0.8" height="15.0" fill="rgb(205,34,31)" rx="2" ry="2" />
<text  x="672.46" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (10 samples, 0.25%)</title><rect x="1183.8" y="277" width="2.9" height="15.0" fill="rgb(250,76,52)" rx="2" ry="2" />
<text  x="1186.75" y="287.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.03%)</title><rect x="1152.8" y="645" width="0.3" height="15.0" fill="rgb(237,63,34)" rx="2" ry="2" />
<text  x="1155.82" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base()&lt;00000000000194b0&gt; (1 samples, 0.03%)</title><rect x="1134.7" y="581" width="0.3" height="15.0" fill="rgb(229,79,33)" rx="2" ry="2" />
<text  x="1137.67" y="591.5" ></text>
</g>
<g >
<title>0x00007f4cf82b533f (1 samples, 0.03%)</title><rect x="30.8" y="645" width="0.3" height="15.0" fill="rgb(216,114,18)" rx="2" ry="2" />
<text  x="33.82" y="655.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="683.7" y="677" width="0.3" height="15.0" fill="rgb(209,71,15)" rx="2" ry="2" />
<text  x="686.73" y="687.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.03%)</title><rect x="1127.5" y="677" width="0.3" height="15.0" fill="rgb(246,229,18)" rx="2" ry="2" />
<text  x="1130.53" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.08%)</title><rect x="1143.6" y="613" width="0.9" height="15.0" fill="rgb(234,14,6)" rx="2" ry="2" />
<text  x="1146.60" y="623.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1152.2" y="661" width="0.3" height="15.0" fill="rgb(229,136,38)" rx="2" ry="2" />
<text  x="1155.22" y="671.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::pubseekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)[inline] (3 samples, 0.08%)</title><rect x="1182.9" y="645" width="0.9" height="15.0" fill="rgb(230,133,38)" rx="2" ry="2" />
<text  x="1185.86" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (42 samples, 1.06%)</title><rect x="1164.7" y="293" width="12.5" height="15.0" fill="rgb(205,102,54)" rx="2" ry="2" />
<text  x="1167.72" y="303.5" ></text>
</g>
<g >
<title>0x00007f9f3a79dbfe (1 samples, 0.03%)</title><rect x="31.7" y="693" width="0.3" height="15.0" fill="rgb(244,143,22)" rx="2" ry="2" />
<text  x="34.71" y="703.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (63 samples, 1.59%)</title><rect x="629.3" y="645" width="18.7" height="15.0" fill="rgb(216,44,20)" rx="2" ry="2" />
<text  x="632.30" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="549" width="0.3" height="15.0" fill="rgb(242,215,20)" rx="2" ry="2" />
<text  x="1185.56" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1144.5" y="549" width="0.3" height="15.0" fill="rgb(227,86,53)" rx="2" ry="2" />
<text  x="1147.49" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (3 samples, 0.08%)</title><rect x="1186.7" y="485" width="0.9" height="15.0" fill="rgb(246,163,40)" rx="2" ry="2" />
<text  x="1189.73" y="495.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="37.4" y="581" width="0.3" height="15.0" fill="rgb(228,204,30)" rx="2" ry="2" />
<text  x="40.37" y="591.5" ></text>
</g>
<g >
<title>0x00007f4cf82aa6ee (1 samples, 0.03%)</title><rect x="33.8" y="613" width="0.3" height="15.0" fill="rgb(245,70,2)" rx="2" ry="2" />
<text  x="36.80" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1126.9" y="693" width="0.6" height="15.0" fill="rgb(240,188,2)" rx="2" ry="2" />
<text  x="1129.94" y="703.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (5 samples, 0.13%)</title><rect x="24.3" y="373" width="1.5" height="15.0" fill="rgb(208,179,49)" rx="2" ry="2" />
<text  x="27.28" y="383.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.05%)</title><rect x="1128.1" y="645" width="0.6" height="15.0" fill="rgb(247,207,45)" rx="2" ry="2" />
<text  x="1131.13" y="655.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (5 samples, 0.13%)</title><rect x="1185.2" y="133" width="1.5" height="15.0" fill="rgb(209,105,0)" rx="2" ry="2" />
<text  x="1188.24" y="143.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1153.4" y="645" width="0.3" height="15.0" fill="rgb(209,229,8)" rx="2" ry="2" />
<text  x="1156.41" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (10 samples, 0.25%)</title><rect x="1183.8" y="421" width="2.9" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1186.75" y="431.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1126.6" y="693" width="0.3" height="15.0" fill="rgb(238,101,38)" rx="2" ry="2" />
<text  x="1129.64" y="703.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="685.2" y="693" width="0.6" height="15.0" fill="rgb(213,158,32)" rx="2" ry="2" />
<text  x="688.22" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (74 samples, 1.87%)</title><rect x="626.0" y="677" width="22.0" height="15.0" fill="rgb(211,42,30)" rx="2" ry="2" />
<text  x="629.03" y="687.5" >s..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (3 samples, 0.08%)</title><rect x="680.2" y="693" width="0.9" height="15.0" fill="rgb(254,85,10)" rx="2" ry="2" />
<text  x="683.16" y="703.5" ></text>
</g>
<g >
<title>~vector (48 samples, 1.21%)</title><rect x="601.9" y="661" width="14.3" height="15.0" fill="rgb(237,145,43)" rx="2" ry="2" />
<text  x="604.93" y="671.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_refn&lt;00000000000059a0&gt; (121 samples, 3.05%)</title><rect x="1090.4" y="629" width="35.9" height="15.0" fill="rgb(227,58,53)" rx="2" ry="2" />
<text  x="1093.35" y="639.5" >nou..</text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="648.6" y="661" width="0.3" height="15.0" fill="rgb(250,67,15)" rx="2" ry="2" />
<text  x="651.63" y="671.5" ></text>
</g>
<g >
<title>0x00007f4cf82ab791 (2 samples, 0.05%)</title><rect x="31.1" y="693" width="0.6" height="15.0" fill="rgb(230,199,24)" rx="2" ry="2" />
<text  x="34.12" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="658.7" y="661" width="0.3" height="15.0" fill="rgb(213,146,48)" rx="2" ry="2" />
<text  x="661.75" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="687.6" y="677" width="0.3" height="15.0" fill="rgb(224,180,22)" rx="2" ry="2" />
<text  x="690.60" y="687.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1142.4" y="549" width="0.3" height="15.0" fill="rgb(244,69,22)" rx="2" ry="2" />
<text  x="1145.41" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1137.4" y="549" width="0.2" height="15.0" fill="rgb(239,67,0)" rx="2" ry="2" />
<text  x="1140.35" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000025640&gt; (1 samples, 0.03%)</title><rect x="1186.1" y="53" width="0.3" height="15.0" fill="rgb(243,82,40)" rx="2" ry="2" />
<text  x="1189.13" y="63.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.03%)</title><rect x="119.2" y="533" width="0.3" height="15.0" fill="rgb(243,212,11)" rx="2" ry="2" />
<text  x="122.17" y="543.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1148.1" y="645" width="0.3" height="15.0" fill="rgb(214,171,40)" rx="2" ry="2" />
<text  x="1151.06" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="681.4" y="661" width="0.3" height="15.0" fill="rgb(244,106,11)" rx="2" ry="2" />
<text  x="684.35" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (6 samples, 0.15%)</title><rect x="672.7" y="709" width="1.8" height="15.0" fill="rgb(212,16,11)" rx="2" ry="2" />
<text  x="675.73" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1142.7" y="565" width="0.6" height="15.0" fill="rgb(215,76,13)" rx="2" ry="2" />
<text  x="1145.70" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="30.2" y="677" width="0.3" height="15.0" fill="rgb(205,18,46)" rx="2" ry="2" />
<text  x="33.23" y="687.5" ></text>
</g>
<g >
<title>Vec2d::setW(float const&amp;) (1 samples, 0.03%)</title><rect x="657.3" y="693" width="0.3" height="15.0" fill="rgb(231,70,24)" rx="2" ry="2" />
<text  x="660.26" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (4 samples, 0.10%)</title><rect x="119.5" y="549" width="1.2" height="15.0" fill="rgb(238,174,30)" rx="2" ry="2" />
<text  x="122.46" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="679.9" y="677" width="0.3" height="15.0" fill="rgb(226,63,18)" rx="2" ry="2" />
<text  x="682.87" y="687.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000068c20&gt; (3,735 samples, 94.15%)</title><rect x="39.7" y="741" width="1111.0" height="15.0" fill="rgb(242,204,40)" rx="2" ry="2" />
<text  x="42.75" y="751.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000068c20&gt;</text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="427.6" y="597" width="0.3" height="15.0" fill="rgb(225,1,13)" rx="2" ry="2" />
<text  x="430.63" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="667.4" y="549" width="0.3" height="15.0" fill="rgb(236,229,35)" rx="2" ry="2" />
<text  x="670.37" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.03%)</title><rect x="671.8" y="613" width="0.3" height="15.0" fill="rgb(216,38,37)" rx="2" ry="2" />
<text  x="674.84" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="680.8" y="597" width="0.3" height="15.0" fill="rgb(247,26,45)" rx="2" ry="2" />
<text  x="683.76" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1138.5" y="597" width="0.3" height="15.0" fill="rgb(208,141,50)" rx="2" ry="2" />
<text  x="1141.54" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (1 samples, 0.03%)</title><rect x="669.2" y="645" width="0.3" height="15.0" fill="rgb(216,163,24)" rx="2" ry="2" />
<text  x="672.16" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="666.5" y="645" width="0.3" height="15.0" fill="rgb(225,47,40)" rx="2" ry="2" />
<text  x="669.48" y="655.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (4 samples, 0.10%)</title><rect x="615.0" y="613" width="1.2" height="15.0" fill="rgb(247,43,14)" rx="2" ry="2" />
<text  x="618.02" y="623.5" ></text>
</g>
<g >
<title>0x00007f4cf82a2129 (1 samples, 0.03%)</title><rect x="35.3" y="629" width="0.3" height="15.0" fill="rgb(230,68,22)" rx="2" ry="2" />
<text  x="38.28" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029750&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="197" width="0.3" height="15.0" fill="rgb(208,23,5)" rx="2" ry="2" />
<text  x="1190.32" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Deallocate(void*, unsigned int)[inline] (1 samples, 0.03%)</title><rect x="672.1" y="533" width="0.3" height="15.0" fill="rgb(248,99,23)" rx="2" ry="2" />
<text  x="675.13" y="543.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (3 samples, 0.08%)</title><rect x="24.9" y="357" width="0.9" height="15.0" fill="rgb(230,92,28)" rx="2" ry="2" />
<text  x="27.87" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1146.0" y="517" width="0.3" height="15.0" fill="rgb(234,11,26)" rx="2" ry="2" />
<text  x="1148.98" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (4 samples, 0.10%)</title><rect x="311.3" y="645" width="1.2" height="15.0" fill="rgb(206,216,45)" rx="2" ry="2" />
<text  x="314.32" y="655.5" ></text>
</g>
<g >
<title>0x00007f4cf82aa75a (1 samples, 0.03%)</title><rect x="31.4" y="661" width="0.3" height="15.0" fill="rgb(227,97,41)" rx="2" ry="2" />
<text  x="34.42" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (10 samples, 0.25%)</title><rect x="1183.8" y="245" width="2.9" height="15.0" fill="rgb(230,25,12)" rx="2" ry="2" />
<text  x="1186.75" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (3,919 samples, 98.79%)</title><rect x="22.5" y="805" width="1165.7" height="15.0" fill="rgb(216,51,27)" rx="2" ry="2" />
<text  x="25.49" y="815.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>0x00007fa19391f33f (1 samples, 0.03%)</title><rect x="32.9" y="597" width="0.3" height="15.0" fill="rgb(209,191,41)" rx="2" ry="2" />
<text  x="35.90" y="607.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051770&gt; (2 samples, 0.05%)</title><rect x="1156.1" y="661" width="0.6" height="15.0" fill="rgb(218,41,53)" rx="2" ry="2" />
<text  x="1159.09" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1140.0" y="565" width="0.3" height="15.0" fill="rgb(241,113,33)" rx="2" ry="2" />
<text  x="1143.03" y="575.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (1 samples, 0.03%)</title><rect x="22.8" y="549" width="0.3" height="15.0" fill="rgb(224,55,7)" rx="2" ry="2" />
<text  x="25.79" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="22.8" y="469" width="0.3" height="15.0" fill="rgb(211,97,1)" rx="2" ry="2" />
<text  x="25.79" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge()&lt;0000000000029ae0&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="213" width="0.3" height="15.0" fill="rgb(227,70,39)" rx="2" ry="2" />
<text  x="1190.32" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.05%)</title><rect x="1142.7" y="597" width="0.6" height="15.0" fill="rgb(244,151,20)" rx="2" ry="2" />
<text  x="1145.70" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1146.6" y="613" width="0.3" height="15.0" fill="rgb(232,176,25)" rx="2" ry="2" />
<text  x="1149.57" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="670.3" y="629" width="0.3" height="15.0" fill="rgb(214,51,29)" rx="2" ry="2" />
<text  x="673.35" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (1 samples, 0.03%)</title><rect x="1157.3" y="661" width="0.3" height="15.0" fill="rgb(218,186,18)" rx="2" ry="2" />
<text  x="1160.28" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1128.1" y="549" width="0.3" height="15.0" fill="rgb(253,158,46)" rx="2" ry="2" />
<text  x="1131.13" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.03%)</title><rect x="1128.1" y="517" width="0.3" height="15.0" fill="rgb(231,59,10)" rx="2" ry="2" />
<text  x="1131.13" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (3 samples, 0.08%)</title><rect x="1186.7" y="293" width="0.9" height="15.0" fill="rgb(247,49,29)" rx="2" ry="2" />
<text  x="1189.73" y="303.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1127.5" y="709" width="0.3" height="15.0" fill="rgb(243,199,9)" rx="2" ry="2" />
<text  x="1130.53" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1153.7" y="645" width="0.3" height="15.0" fill="rgb(221,68,48)" rx="2" ry="2" />
<text  x="1156.71" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.08%)</title><rect x="1147.5" y="709" width="0.9" height="15.0" fill="rgb(210,152,6)" rx="2" ry="2" />
<text  x="1150.46" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (3 samples, 0.08%)</title><rect x="1186.7" y="677" width="0.9" height="15.0" fill="rgb(216,205,12)" rx="2" ry="2" />
<text  x="1189.73" y="687.5" ></text>
</g>
<g >
<title>tc_realloc (1 samples, 0.03%)</title><rect x="37.4" y="629" width="0.3" height="15.0" fill="rgb(252,47,52)" rx="2" ry="2" />
<text  x="40.37" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_Push(void**, void*)[inline] (1 samples, 0.03%)</title><rect x="672.1" y="501" width="0.3" height="15.0" fill="rgb(212,64,23)" rx="2" ry="2" />
<text  x="675.13" y="511.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (6 samples, 0.15%)</title><rect x="24.0" y="437" width="1.8" height="15.0" fill="rgb(213,225,43)" rx="2" ry="2" />
<text  x="26.98" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="690.3" y="693" width="0.3" height="15.0" fill="rgb(250,40,45)" rx="2" ry="2" />
<text  x="693.28" y="703.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1146.0" y="501" width="0.3" height="15.0" fill="rgb(229,70,33)" rx="2" ry="2" />
<text  x="1148.98" y="511.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="427.3" y="597" width="0.3" height="15.0" fill="rgb(245,193,18)" rx="2" ry="2" />
<text  x="430.33" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="581" width="0.3" height="15.0" fill="rgb(248,126,30)" rx="2" ry="2" />
<text  x="1159.69" y="591.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (3 samples, 0.08%)</title><rect x="680.2" y="645" width="0.9" height="15.0" fill="rgb(240,175,15)" rx="2" ry="2" />
<text  x="683.16" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (10 samples, 0.25%)</title><rect x="1183.8" y="501" width="2.9" height="15.0" fill="rgb(243,130,13)" rx="2" ry="2" />
<text  x="1186.75" y="511.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a15e6 (1 samples, 0.03%)</title><rect x="35.0" y="629" width="0.3" height="15.0" fill="rgb(214,22,41)" rx="2" ry="2" />
<text  x="37.99" y="639.5" ></text>
</g>
<g >
<title>0x00007f9f3a7ad596 (1 samples, 0.03%)</title><rect x="32.3" y="597" width="0.3" height="15.0" fill="rgb(221,206,24)" rx="2" ry="2" />
<text  x="35.31" y="607.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (2 samples, 0.05%)</title><rect x="646.6" y="629" width="0.5" height="15.0" fill="rgb(206,112,10)" rx="2" ry="2" />
<text  x="649.55" y="639.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="275.3" y="645" width="0.3" height="15.0" fill="rgb(225,93,12)" rx="2" ry="2" />
<text  x="278.33" y="655.5" ></text>
</g>
<g >
<title>_XIOError&lt;0000000000042dc0&gt; (1 samples, 0.03%)</title><rect x="38.9" y="597" width="0.3" height="15.0" fill="rgb(209,165,24)" rx="2" ry="2" />
<text  x="41.85" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="1131.7" y="613" width="0.9" height="15.0" fill="rgb(247,18,23)" rx="2" ry="2" />
<text  x="1134.70" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1152.8" y="565" width="0.3" height="15.0" fill="rgb(252,104,54)" rx="2" ry="2" />
<text  x="1155.82" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (1 samples, 0.03%)</title><rect x="674.5" y="661" width="0.3" height="15.0" fill="rgb(215,97,14)" rx="2" ry="2" />
<text  x="677.51" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="689.1" y="629" width="0.3" height="15.0" fill="rgb(224,14,4)" rx="2" ry="2" />
<text  x="692.09" y="639.5" ></text>
</g>
<g >
<title>0x00007f4cf82b2384 (1 samples, 0.03%)</title><rect x="35.3" y="597" width="0.3" height="15.0" fill="rgb(242,162,40)" rx="2" ry="2" />
<text  x="38.28" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end() (2 samples, 0.05%)</title><rect x="1177.8" y="357" width="0.6" height="15.0" fill="rgb(243,9,38)" rx="2" ry="2" />
<text  x="1180.80" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.03%)</title><rect x="427.6" y="533" width="0.3" height="15.0" fill="rgb(240,211,38)" rx="2" ry="2" />
<text  x="430.63" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (5 samples, 0.13%)</title><rect x="1126.3" y="725" width="1.5" height="15.0" fill="rgb(215,136,29)" rx="2" ry="2" />
<text  x="1129.34" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1147.2" y="725" width="0.3" height="15.0" fill="rgb(219,225,45)" rx="2" ry="2" />
<text  x="1150.17" y="735.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.03%)</title><rect x="1132.9" y="613" width="0.3" height="15.0" fill="rgb(216,135,24)" rx="2" ry="2" />
<text  x="1135.89" y="623.5" ></text>
</g>
<g >
<title>basic_string (10 samples, 0.25%)</title><rect x="1183.8" y="309" width="2.9" height="15.0" fill="rgb(253,191,32)" rx="2" ry="2" />
<text  x="1186.75" y="319.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (5 samples, 0.13%)</title><rect x="24.3" y="389" width="1.5" height="15.0" fill="rgb(206,109,45)" rx="2" ry="2" />
<text  x="27.28" y="399.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_check_len(unsigned long, char const*) const (2 samples, 0.05%)</title><rect x="1156.1" y="581" width="0.6" height="15.0" fill="rgb(227,41,20)" rx="2" ry="2" />
<text  x="1159.09" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.05%)</title><rect x="1146.3" y="677" width="0.6" height="15.0" fill="rgb(221,162,30)" rx="2" ry="2" />
<text  x="1149.27" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="675.1" y="709" width="0.3" height="15.0" fill="rgb(248,193,8)" rx="2" ry="2" />
<text  x="678.11" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="676.6" y="677" width="0.3" height="15.0" fill="rgb(232,206,39)" rx="2" ry="2" />
<text  x="679.59" y="687.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (1 samples, 0.03%)</title><rect x="690.6" y="709" width="0.3" height="15.0" fill="rgb(210,108,14)" rx="2" ry="2" />
<text  x="693.57" y="719.5" ></text>
</g>
<g >
<title>int* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.03%)</title><rect x="1158.8" y="597" width="0.3" height="15.0" fill="rgb(219,212,45)" rx="2" ry="2" />
<text  x="1161.77" y="607.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (11 samples, 0.28%)</title><rect x="868.7" y="581" width="3.3" height="15.0" fill="rgb(211,64,30)" rx="2" ry="2" />
<text  x="871.75" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="1135.9" y="597" width="0.6" height="15.0" fill="rgb(213,60,9)" rx="2" ry="2" />
<text  x="1138.86" y="607.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::allocate(unsigned long, void const*) (3 samples, 0.08%)</title><rect x="1160.6" y="293" width="0.8" height="15.0" fill="rgb(254,25,10)" rx="2" ry="2" />
<text  x="1163.55" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.03%)</title><rect x="1128.7" y="613" width="0.3" height="15.0" fill="rgb(247,41,51)" rx="2" ry="2" />
<text  x="1131.72" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.03%)</title><rect x="1184.6" y="165" width="0.3" height="15.0" fill="rgb(209,152,20)" rx="2" ry="2" />
<text  x="1187.65" y="175.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.03%)</title><rect x="37.7" y="661" width="0.3" height="15.0" fill="rgb(246,118,14)" rx="2" ry="2" />
<text  x="40.66" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.03%)</title><rect x="668.6" y="613" width="0.3" height="15.0" fill="rgb(220,105,6)" rx="2" ry="2" />
<text  x="671.56" y="623.5" ></text>
</g>
<g >
<title>do_realloc_with_callback[inline] (1 samples, 0.03%)</title><rect x="31.4" y="533" width="0.3" height="15.0" fill="rgb(245,18,49)" rx="2" ry="2" />
<text  x="34.42" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (20 samples, 0.50%)</title><rect x="677.8" y="709" width="5.9" height="15.0" fill="rgb(209,112,52)" rx="2" ry="2" />
<text  x="680.78" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1152.8" y="597" width="0.3" height="15.0" fill="rgb(233,90,38)" rx="2" ry="2" />
<text  x="1155.82" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.05%)</title><rect x="1137.1" y="581" width="0.5" height="15.0" fill="rgb(230,209,14)" rx="2" ry="2" />
<text  x="1140.05" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="672.4" y="629" width="0.3" height="15.0" fill="rgb(240,76,37)" rx="2" ry="2" />
<text  x="675.43" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.03%)</title><rect x="29.6" y="549" width="0.3" height="15.0" fill="rgb(237,154,13)" rx="2" ry="2" />
<text  x="32.63" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="674.8" y="709" width="0.3" height="15.0" fill="rgb(222,93,22)" rx="2" ry="2" />
<text  x="677.81" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;TexturePNG&amp;&gt; std::forward_as_tuple&lt;TexturePNG&amp;&gt;(TexturePNG&amp;) (1 samples, 0.03%)</title><rect x="1162.6" y="277" width="0.3" height="15.0" fill="rgb(209,42,26)" rx="2" ry="2" />
<text  x="1165.63" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_single(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1144.2" y="533" width="0.3" height="15.0" fill="rgb(205,191,40)" rx="2" ry="2" />
<text  x="1147.19" y="543.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="427.6" y="581" width="0.3" height="15.0" fill="rgb(249,54,9)" rx="2" ry="2" />
<text  x="430.63" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1143.3" y="565" width="0.3" height="15.0" fill="rgb(219,226,0)" rx="2" ry="2" />
<text  x="1146.30" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (100 samples, 2.52%)</title><rect x="90.9" y="661" width="29.8" height="15.0" fill="rgb(242,109,37)" rx="2" ry="2" />
<text  x="93.91" y="671.5" >SD..</text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (44 samples, 1.11%)</title><rect x="1133.2" y="677" width="13.1" height="15.0" fill="rgb(215,30,42)" rx="2" ry="2" />
<text  x="1136.19" y="687.5" ></text>
</g>
<g >
<title>0x00007fa19391475a (1 samples, 0.03%)</title><rect x="34.4" y="629" width="0.3" height="15.0" fill="rgb(224,134,40)" rx="2" ry="2" />
<text  x="37.39" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::empty() const (1 samples, 0.03%)</title><rect x="1155.5" y="581" width="0.3" height="15.0" fill="rgb(207,83,31)" rx="2" ry="2" />
<text  x="1158.50" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::input_iterator_tag) (1 samples, 0.03%)</title><rect x="1162.6" y="293" width="0.3" height="15.0" fill="rgb(244,155,39)" rx="2" ry="2" />
<text  x="1165.63" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="31.4" y="485" width="0.3" height="15.0" fill="rgb(251,228,9)" rx="2" ry="2" />
<text  x="34.42" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="1148.4" y="677" width="0.3" height="15.0" fill="rgb(245,210,43)" rx="2" ry="2" />
<text  x="1151.36" y="687.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0355 (1 samples, 0.03%)</title><rect x="33.2" y="661" width="0.3" height="15.0" fill="rgb(211,145,20)" rx="2" ry="2" />
<text  x="36.20" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1140.3" y="469" width="0.3" height="15.0" fill="rgb(253,108,39)" rx="2" ry="2" />
<text  x="1143.33" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_move_assign(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.03%)</title><rect x="1148.4" y="693" width="0.3" height="15.0" fill="rgb(235,4,16)" rx="2" ry="2" />
<text  x="1151.36" y="703.5" ></text>
</g>
<g >
<title>0x00007ff97d90033f (1 samples, 0.03%)</title><rect x="33.2" y="645" width="0.3" height="15.0" fill="rgb(210,33,13)" rx="2" ry="2" />
<text  x="36.20" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.03%)</title><rect x="677.5" y="709" width="0.3" height="15.0" fill="rgb(218,184,9)" rx="2" ry="2" />
<text  x="680.49" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (3 samples, 0.08%)</title><rect x="1186.7" y="741" width="0.9" height="15.0" fill="rgb(252,46,29)" rx="2" ry="2" />
<text  x="1189.73" y="751.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (3 samples, 0.08%)</title><rect x="1149.8" y="693" width="0.9" height="15.0" fill="rgb(221,160,51)" rx="2" ry="2" />
<text  x="1152.84" y="703.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.03%)</title><rect x="31.7" y="629" width="0.3" height="15.0" fill="rgb(216,190,4)" rx="2" ry="2" />
<text  x="34.71" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="667.4" y="581" width="0.3" height="15.0" fill="rgb(205,179,51)" rx="2" ry="2" />
<text  x="670.37" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1139.1" y="581" width="0.3" height="15.0" fill="rgb(207,166,25)" rx="2" ry="2" />
<text  x="1142.14" y="591.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003a70&gt; (1 samples, 0.03%)</title><rect x="24.0" y="389" width="0.3" height="15.0" fill="rgb(222,13,21)" rx="2" ry="2" />
<text  x="26.98" y="399.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (16 samples, 0.40%)</title><rect x="1141.5" y="645" width="4.8" height="15.0" fill="rgb(247,153,22)" rx="2" ry="2" />
<text  x="1144.51" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000025640&gt; (1 samples, 0.03%)</title><rect x="1186.4" y="53" width="0.3" height="15.0" fill="rgb(232,173,49)" rx="2" ry="2" />
<text  x="1189.43" y="63.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (2 samples, 0.05%)</title><rect x="670.6" y="677" width="0.6" height="15.0" fill="rgb(235,103,41)" rx="2" ry="2" />
<text  x="673.65" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1145.1" y="533" width="0.3" height="15.0" fill="rgb(241,113,0)" rx="2" ry="2" />
<text  x="1148.08" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="677.5" y="677" width="0.3" height="15.0" fill="rgb(232,218,14)" rx="2" ry="2" />
<text  x="680.49" y="687.5" ></text>
</g>
<g >
<title>_Xlcmbstoutf8&lt;0000000000055ed0&gt; (1 samples, 0.03%)</title><rect x="36.5" y="629" width="0.3" height="15.0" fill="rgb(240,178,33)" rx="2" ry="2" />
<text  x="39.47" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1134.4" y="549" width="0.3" height="15.0" fill="rgb(227,190,31)" rx="2" ry="2" />
<text  x="1137.38" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (23 samples, 0.58%)</title><rect x="22.5" y="661" width="6.8" height="15.0" fill="rgb(217,90,20)" rx="2" ry="2" />
<text  x="25.49" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.03%)</title><rect x="1180.8" y="645" width="0.3" height="15.0" fill="rgb(213,210,48)" rx="2" ry="2" />
<text  x="1183.78" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="29.6" y="597" width="0.3" height="15.0" fill="rgb(225,176,39)" rx="2" ry="2" />
<text  x="32.63" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (2 samples, 0.05%)</title><rect x="28.4" y="533" width="0.6" height="15.0" fill="rgb(230,127,16)" rx="2" ry="2" />
<text  x="31.44" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="1158.8" y="517" width="0.3" height="15.0" fill="rgb(248,130,23)" rx="2" ry="2" />
<text  x="1161.77" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="682.8" y="693" width="0.9" height="15.0" fill="rgb(230,88,39)" rx="2" ry="2" />
<text  x="685.84" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (152 samples, 3.83%)</title><rect x="228.6" y="645" width="45.2" height="15.0" fill="rgb(226,137,43)" rx="2" ry="2" />
<text  x="231.63" y="655.5" >std:..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (42 samples, 1.06%)</title><rect x="1164.7" y="277" width="12.5" height="15.0" fill="rgb(238,53,21)" rx="2" ry="2" />
<text  x="1167.72" y="287.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (68 samples, 1.71%)</title><rect x="1160.0" y="485" width="20.2" height="15.0" fill="rgb(236,145,38)" rx="2" ry="2" />
<text  x="1162.96" y="495.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="664.4" y="629" width="0.3" height="15.0" fill="rgb(226,97,31)" rx="2" ry="2" />
<text  x="667.40" y="639.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::OBJ_Lex_triFace(OBJ_Lex_triFace const&amp;)&lt;000000000004f050&gt; (2 samples, 0.05%)</title><rect x="1158.5" y="677" width="0.6" height="15.0" fill="rgb(213,191,44)" rx="2" ry="2" />
<text  x="1161.47" y="687.5" ></text>
</g>
<g >
<title>nouveau_bufctx_refn&lt;0000000000005d80&gt; (10 samples, 0.25%)</title><rect x="989.8" y="645" width="3.0" height="15.0" fill="rgb(244,66,30)" rx="2" ry="2" />
<text  x="992.81" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="1154.0" y="597" width="0.3" height="15.0" fill="rgb(213,180,30)" rx="2" ry="2" />
<text  x="1157.01" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="655.2" y="677" width="0.3" height="15.0" fill="rgb(251,133,10)" rx="2" ry="2" />
<text  x="658.18" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="683.7" y="613" width="0.3" height="15.0" fill="rgb(238,213,20)" rx="2" ry="2" />
<text  x="686.73" y="623.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (3,919 samples, 98.79%)</title><rect x="22.5" y="789" width="1165.7" height="15.0" fill="rgb(235,24,39)" rx="2" ry="2" />
<text  x="25.49" y="799.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="28.7" y="517" width="0.3" height="15.0" fill="rgb(237,46,27)" rx="2" ry="2" />
<text  x="31.74" y="527.5" ></text>
</g>
<g >
<title>do_calloc[inline] (4 samples, 0.10%)</title><rect x="119.5" y="613" width="1.2" height="15.0" fill="rgb(218,211,32)" rx="2" ry="2" />
<text  x="122.46" y="623.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.03%)</title><rect x="22.8" y="565" width="0.3" height="15.0" fill="rgb(253,170,20)" rx="2" ry="2" />
<text  x="25.79" y="575.5" ></text>
</g>
<g >
<title>_Safe_vector (2 samples, 0.05%)</title><rect x="676.9" y="709" width="0.6" height="15.0" fill="rgb(223,17,9)" rx="2" ry="2" />
<text  x="679.89" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1136.5" y="565" width="0.6" height="15.0" fill="rgb(243,85,27)" rx="2" ry="2" />
<text  x="1139.46" y="575.5" ></text>
</g>
<g >
<title>0x00007fa19390f355 (1 samples, 0.03%)</title><rect x="34.4" y="581" width="0.3" height="15.0" fill="rgb(220,29,48)" rx="2" ry="2" />
<text  x="37.39" y="591.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f9d0&gt; (1 samples, 0.03%)</title><rect x="38.6" y="741" width="0.3" height="15.0" fill="rgb(208,129,43)" rx="2" ry="2" />
<text  x="41.56" y="751.5" ></text>
</g>
<g >
<title>_XReply&lt;0000000000047b60&gt; (1 samples, 0.03%)</title><rect x="38.9" y="613" width="0.3" height="15.0" fill="rgb(244,49,3)" rx="2" ry="2" />
<text  x="41.85" y="623.5" ></text>
</g>
<g >
<title>_Parameter&lt;__gnu_cxx::__normal_iterator&lt;Triangle *, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; (1 samples, 0.03%)</title><rect x="1149.5" y="645" width="0.3" height="15.0" fill="rgb(211,82,5)" rx="2" ry="2" />
<text  x="1152.55" y="655.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="670.1" y="597" width="0.2" height="15.0" fill="rgb(233,58,28)" rx="2" ry="2" />
<text  x="673.05" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1148.7" y="661" width="0.5" height="15.0" fill="rgb(219,170,53)" rx="2" ry="2" />
<text  x="1151.65" y="671.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5355 (1 samples, 0.03%)</title><rect x="33.8" y="581" width="0.3" height="15.0" fill="rgb(226,217,1)" rx="2" ry="2" />
<text  x="36.80" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (107 samples, 2.70%)</title><rect x="148.0" y="661" width="31.8" height="15.0" fill="rgb(234,221,49)" rx="2" ry="2" />
<text  x="151.02" y="671.5" >st..</text>
</g>
<g >
<title>std::pair&lt;long, __gnu_debug::_Distance_precision&gt;::pair&lt;long, __gnu_debug::_Distance_precision, true&gt;() (1 samples, 0.03%)</title><rect x="1163.5" y="325" width="0.3" height="15.0" fill="rgb(244,14,2)" rx="2" ry="2" />
<text  x="1166.53" y="335.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (4 samples, 0.10%)</title><rect x="1154.9" y="661" width="1.2" height="15.0" fill="rgb(240,175,35)" rx="2" ry="2" />
<text  x="1157.90" y="671.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000067af0&gt; (106 samples, 2.67%)</title><rect x="659.0" y="725" width="31.6" height="15.0" fill="rgb(237,174,28)" rx="2" ry="2" />
<text  x="662.04" y="735.5" >Re..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="39.2" y="709" width="0.2" height="15.0" fill="rgb(221,85,14)" rx="2" ry="2" />
<text  x="42.15" y="719.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003a70&gt; (1 samples, 0.03%)</title><rect x="24.0" y="373" width="0.3" height="15.0" fill="rgb(226,53,52)" rx="2" ry="2" />
<text  x="26.98" y="383.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000082450&gt; (22 samples, 0.55%)</title><rect x="660.2" y="693" width="6.6" height="15.0" fill="rgb(226,126,25)" rx="2" ry="2" />
<text  x="663.23" y="703.5" ></text>
</g>
<g >
<title>do_malloc[inline] (4 samples, 0.10%)</title><rect x="119.5" y="581" width="1.2" height="15.0" fill="rgb(232,219,0)" rx="2" ry="2" />
<text  x="122.46" y="591.5" ></text>
</g>
<g >
<title>__libc_calloc (1 samples, 0.03%)</title><rect x="119.2" y="629" width="0.3" height="15.0" fill="rgb(239,66,4)" rx="2" ry="2" />
<text  x="122.17" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="1127.5" y="693" width="0.3" height="15.0" fill="rgb(207,75,42)" rx="2" ry="2" />
<text  x="1130.53" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (6 samples, 0.15%)</title><rect x="668.9" y="693" width="1.7" height="15.0" fill="rgb(243,92,39)" rx="2" ry="2" />
<text  x="671.86" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1140.6" y="581" width="0.6" height="15.0" fill="rgb(219,152,45)" rx="2" ry="2" />
<text  x="1143.62" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1145.7" y="549" width="0.3" height="15.0" fill="rgb(221,114,20)" rx="2" ry="2" />
<text  x="1148.68" y="559.5" ></text>
</g>
<g >
<title>0x00007f9f3a79db4e (1 samples, 0.03%)</title><rect x="32.0" y="645" width="0.3" height="15.0" fill="rgb(211,118,13)" rx="2" ry="2" />
<text  x="35.01" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (3 samples, 0.08%)</title><rect x="1128.7" y="629" width="0.9" height="15.0" fill="rgb(220,26,6)" rx="2" ry="2" />
<text  x="1131.72" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1128.1" y="501" width="0.3" height="15.0" fill="rgb(218,136,50)" rx="2" ry="2" />
<text  x="1131.13" y="511.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1152.8" y="693" width="0.3" height="15.0" fill="rgb(205,15,44)" rx="2" ry="2" />
<text  x="1155.82" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="665.3" y="645" width="0.3" height="15.0" fill="rgb(252,114,38)" rx="2" ry="2" />
<text  x="668.29" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="679.0" y="677" width="0.3" height="15.0" fill="rgb(231,78,40)" rx="2" ry="2" />
<text  x="681.97" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1149.5" y="613" width="0.3" height="15.0" fill="rgb(238,77,45)" rx="2" ry="2" />
<text  x="1152.55" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.05%)</title><rect x="1152.2" y="725" width="0.6" height="15.0" fill="rgb(215,144,51)" rx="2" ry="2" />
<text  x="1155.22" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (16 samples, 0.40%)</title><rect x="174.5" y="629" width="4.8" height="15.0" fill="rgb(222,208,19)" rx="2" ry="2" />
<text  x="177.49" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="657.9" y="677" width="0.3" height="15.0" fill="rgb(253,190,15)" rx="2" ry="2" />
<text  x="660.85" y="687.5" ></text>
</g>
<g >
<title>nouveau_bo_new&lt;0000000000003d90&gt; (1 samples, 0.03%)</title><rect x="23.1" y="453" width="0.3" height="15.0" fill="rgb(253,168,31)" rx="2" ry="2" />
<text  x="26.09" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (6 samples, 0.15%)</title><rect x="668.9" y="677" width="1.7" height="15.0" fill="rgb(248,178,21)" rx="2" ry="2" />
<text  x="671.86" y="687.5" ></text>
</g>
<g >
<title>0x00007f9f3a79db4e (1 samples, 0.03%)</title><rect x="32.3" y="629" width="0.3" height="15.0" fill="rgb(247,184,38)" rx="2" ry="2" />
<text  x="35.31" y="639.5" ></text>
</g>
<g >
<title>__libc_calloc (2 samples, 0.05%)</title><rect x="427.0" y="629" width="0.6" height="15.0" fill="rgb(215,136,44)" rx="2" ry="2" />
<text  x="430.03" y="639.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (19 samples, 0.48%)</title><rect x="22.8" y="613" width="5.6" height="15.0" fill="rgb(208,15,48)" rx="2" ry="2" />
<text  x="25.79" y="623.5" ></text>
</g>
<g >
<title>0x00007f4cf82d3fec (1 samples, 0.03%)</title><rect x="33.8" y="677" width="0.3" height="15.0" fill="rgb(208,219,50)" rx="2" ry="2" />
<text  x="36.80" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (3 samples, 0.08%)</title><rect x="119.8" y="485" width="0.9" height="15.0" fill="rgb(248,113,1)" rx="2" ry="2" />
<text  x="122.76" y="495.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::pubseekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)[inline] (2 samples, 0.05%)</title><rect x="1181.4" y="645" width="0.6" height="15.0" fill="rgb(249,213,39)" rx="2" ry="2" />
<text  x="1184.37" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (3 samples, 0.08%)</title><rect x="1186.7" y="437" width="0.9" height="15.0" fill="rgb(209,102,32)" rx="2" ry="2" />
<text  x="1189.73" y="447.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.03%)</title><rect x="674.5" y="693" width="0.3" height="15.0" fill="rgb(221,121,15)" rx="2" ry="2" />
<text  x="677.51" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.08%)</title><rect x="1147.5" y="725" width="0.9" height="15.0" fill="rgb(247,2,5)" rx="2" ry="2" />
<text  x="1150.46" y="735.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (3 samples, 0.08%)</title><rect x="23.1" y="565" width="0.9" height="15.0" fill="rgb(229,99,18)" rx="2" ry="2" />
<text  x="26.09" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (5 samples, 0.13%)</title><rect x="1133.5" y="597" width="1.5" height="15.0" fill="rgb(242,81,40)" rx="2" ry="2" />
<text  x="1136.48" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1149.2" y="677" width="0.3" height="15.0" fill="rgb(211,186,52)" rx="2" ry="2" />
<text  x="1152.25" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.03%)</title><rect x="119.2" y="517" width="0.3" height="15.0" fill="rgb(247,39,50)" rx="2" ry="2" />
<text  x="122.17" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (3 samples, 0.08%)</title><rect x="1186.7" y="277" width="0.9" height="15.0" fill="rgb(217,58,30)" rx="2" ry="2" />
<text  x="1189.73" y="287.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (2 samples, 0.05%)</title><rect x="28.4" y="613" width="0.6" height="15.0" fill="rgb(235,175,24)" rx="2" ry="2" />
<text  x="31.44" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (3 samples, 0.08%)</title><rect x="1186.7" y="693" width="0.9" height="15.0" fill="rgb(242,6,23)" rx="2" ry="2" />
<text  x="1189.73" y="703.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (8 samples, 0.20%)</title><rect x="1156.1" y="677" width="2.4" height="15.0" fill="rgb(207,217,16)" rx="2" ry="2" />
<text  x="1159.09" y="687.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (1 samples, 0.03%)</title><rect x="1180.8" y="565" width="0.3" height="15.0" fill="rgb(253,138,30)" rx="2" ry="2" />
<text  x="1183.78" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base()&lt;00000000000194b0&gt; (1 samples, 0.03%)</title><rect x="1143.9" y="533" width="0.3" height="15.0" fill="rgb(254,125,21)" rx="2" ry="2" />
<text  x="1146.89" y="543.5" ></text>
</g>
<g >
<title>_Parameter (9 samples, 0.23%)</title><rect x="189.7" y="645" width="2.6" height="15.0" fill="rgb(230,170,33)" rx="2" ry="2" />
<text  x="192.66" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="690.0" y="613" width="0.3" height="15.0" fill="rgb(232,157,50)" rx="2" ry="2" />
<text  x="692.98" y="623.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_space&lt;0000000000005630&gt; (8 samples, 0.20%)</title><rect x="1087.7" y="613" width="2.4" height="15.0" fill="rgb(206,99,38)" rx="2" ry="2" />
<text  x="1090.68" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1132.9" y="581" width="0.3" height="15.0" fill="rgb(205,188,29)" rx="2" ry="2" />
<text  x="1135.89" y="591.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005d6e0&gt; (3 samples, 0.08%)</title><rect x="1154.0" y="725" width="0.9" height="15.0" fill="rgb(247,90,36)" rx="2" ry="2" />
<text  x="1157.01" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1129.6" y="613" width="0.6" height="15.0" fill="rgb(229,20,15)" rx="2" ry="2" />
<text  x="1132.62" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1153.7" y="629" width="0.3" height="15.0" fill="rgb(227,74,13)" rx="2" ry="2" />
<text  x="1156.71" y="639.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (10 samples, 0.25%)</title><rect x="1183.8" y="725" width="2.9" height="15.0" fill="rgb(227,179,19)" rx="2" ry="2" />
<text  x="1186.75" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.03%)</title><rect x="1140.3" y="517" width="0.3" height="15.0" fill="rgb(210,223,13)" rx="2" ry="2" />
<text  x="1143.33" y="527.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (6 samples, 0.15%)</title><rect x="930.0" y="661" width="1.8" height="15.0" fill="rgb(207,101,6)" rx="2" ry="2" />
<text  x="933.03" y="671.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1140.3" y="549" width="0.3" height="15.0" fill="rgb(209,202,48)" rx="2" ry="2" />
<text  x="1143.33" y="559.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e2c0&gt; (72 samples, 1.81%)</title><rect x="1159.1" y="677" width="21.4" height="15.0" fill="rgb(205,63,43)" rx="2" ry="2" />
<text  x="1162.06" y="687.5" >T..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1139.4" y="581" width="0.3" height="15.0" fill="rgb(240,210,25)" rx="2" ry="2" />
<text  x="1142.43" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.05%)</title><rect x="1141.8" y="597" width="0.6" height="15.0" fill="rgb(241,15,10)" rx="2" ry="2" />
<text  x="1144.81" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="669.8" y="597" width="0.3" height="15.0" fill="rgb(251,182,47)" rx="2" ry="2" />
<text  x="672.75" y="607.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.03%)</title><rect x="1143.0" y="517" width="0.3" height="15.0" fill="rgb(233,226,37)" rx="2" ry="2" />
<text  x="1146.00" y="527.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="22.8" y="501" width="0.3" height="15.0" fill="rgb(252,209,22)" rx="2" ry="2" />
<text  x="25.79" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="681.1" y="693" width="0.3" height="15.0" fill="rgb(240,9,22)" rx="2" ry="2" />
<text  x="684.06" y="703.5" ></text>
</g>
<g >
<title>pthread_sigmask@@GLIBC_2.32 (6 samples, 0.15%)</title><rect x="1188.2" y="821" width="1.8" height="15.0" fill="rgb(207,0,16)" rx="2" ry="2" />
<text  x="1191.22" y="831.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5b4e (1 samples, 0.03%)</title><rect x="31.4" y="629" width="0.3" height="15.0" fill="rgb(225,18,52)" rx="2" ry="2" />
<text  x="34.42" y="639.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="23.1" y="469" width="0.3" height="15.0" fill="rgb(206,14,30)" rx="2" ry="2" />
<text  x="26.09" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (6 samples, 0.15%)</title><rect x="278.6" y="645" width="1.8" height="15.0" fill="rgb(220,189,9)" rx="2" ry="2" />
<text  x="281.60" y="655.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (3 samples, 0.08%)</title><rect x="25.8" y="549" width="0.9" height="15.0" fill="rgb(224,63,23)" rx="2" ry="2" />
<text  x="28.77" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1135.0" y="613" width="0.3" height="15.0" fill="rgb(240,32,16)" rx="2" ry="2" />
<text  x="1137.97" y="623.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1146.0" y="485" width="0.3" height="15.0" fill="rgb(206,203,3)" rx="2" ry="2" />
<text  x="1148.98" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (4 samples, 0.10%)</title><rect x="686.4" y="709" width="1.2" height="15.0" fill="rgb(227,7,51)" rx="2" ry="2" />
<text  x="689.41" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.03%)</title><rect x="427.6" y="517" width="0.3" height="15.0" fill="rgb(212,11,14)" rx="2" ry="2" />
<text  x="430.63" y="527.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (3 samples, 0.08%)</title><rect x="29.3" y="645" width="0.9" height="15.0" fill="rgb(233,127,54)" rx="2" ry="2" />
<text  x="32.33" y="655.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a2b56 (2 samples, 0.05%)</title><rect x="32.0" y="677" width="0.6" height="15.0" fill="rgb(246,169,15)" rx="2" ry="2" />
<text  x="35.01" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.03%)</title><rect x="1145.7" y="517" width="0.3" height="15.0" fill="rgb(218,164,17)" rx="2" ry="2" />
<text  x="1148.68" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="1149.2" y="693" width="0.6" height="15.0" fill="rgb(206,190,40)" rx="2" ry="2" />
<text  x="1152.25" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1132.0" y="581" width="0.3" height="15.0" fill="rgb(236,76,29)" rx="2" ry="2" />
<text  x="1135.00" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="687.6" y="693" width="0.9" height="15.0" fill="rgb(251,10,41)" rx="2" ry="2" />
<text  x="690.60" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (6 samples, 0.15%)</title><rect x="383.6" y="661" width="1.8" height="15.0" fill="rgb(229,18,7)" rx="2" ry="2" />
<text  x="386.60" y="671.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (6 samples, 0.15%)</title><rect x="24.0" y="549" width="1.8" height="15.0" fill="rgb(215,25,42)" rx="2" ry="2" />
<text  x="26.98" y="559.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a3791 (1 samples, 0.03%)</title><rect x="34.1" y="661" width="0.3" height="15.0" fill="rgb(209,215,43)" rx="2" ry="2" />
<text  x="37.09" y="671.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1140.9" y="549" width="0.3" height="15.0" fill="rgb(227,105,8)" rx="2" ry="2" />
<text  x="1143.92" y="559.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="668.0" y="629" width="0.6" height="15.0" fill="rgb(212,210,16)" rx="2" ry="2" />
<text  x="670.97" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="690.0" y="709" width="0.3" height="15.0" fill="rgb(241,31,36)" rx="2" ry="2" />
<text  x="692.98" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Triangle_Modifier&gt;* std::__relocate_a&lt;std::shared_ptr&lt;Triangle_Modifier&gt;*, std::shared_ptr&lt;Triangle_Modifier&gt;*, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;(std::shared_ptr&lt;Triangle_Modifier&gt;*, std::shared_ptr&lt;Triangle_Modifier&gt;*, std::shared_ptr&lt;Triangle_Modifier&gt;*, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt;&amp;) (2 samples, 0.05%)</title><rect x="1179.0" y="373" width="0.6" height="15.0" fill="rgb(243,70,54)" rx="2" ry="2" />
<text  x="1181.99" y="383.5" ></text>
</g>
<g >
<title>Vec2d::getY() const (1 samples, 0.03%)</title><rect x="664.7" y="629" width="0.3" height="15.0" fill="rgb(229,144,14)" rx="2" ry="2" />
<text  x="667.70" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="676.6" y="661" width="0.3" height="15.0" fill="rgb(211,115,44)" rx="2" ry="2" />
<text  x="679.59" y="671.5" ></text>
</g>
<g >
<title>int* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.03%)</title><rect x="1156.7" y="533" width="0.3" height="15.0" fill="rgb(228,174,39)" rx="2" ry="2" />
<text  x="1159.69" y="543.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (2 samples, 0.05%)</title><rect x="28.4" y="565" width="0.6" height="15.0" fill="rgb(251,192,28)" rx="2" ry="2" />
<text  x="31.44" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (10 samples, 0.25%)</title><rect x="1183.8" y="693" width="2.9" height="15.0" fill="rgb(252,77,46)" rx="2" ry="2" />
<text  x="1186.75" y="703.5" ></text>
</g>
<g >
<title>__sqrtf_finite@GLIBC_2.15&lt;000000000003d270&gt; (1 samples, 0.03%)</title><rect x="664.1" y="597" width="0.3" height="15.0" fill="rgb(250,56,24)" rx="2" ry="2" />
<text  x="667.10" y="607.5" ></text>
</g>
<g >
<title>_Safe_sequence_base (1 samples, 0.03%)</title><rect x="676.6" y="709" width="0.3" height="15.0" fill="rgb(214,154,37)" rx="2" ry="2" />
<text  x="679.59" y="719.5" ></text>
</g>
<g >
<title>pa_log_level_meta&lt;0000000000031fa0&gt; (1 samples, 0.03%)</title><rect x="30.5" y="629" width="0.3" height="15.0" fill="rgb(224,58,33)" rx="2" ry="2" />
<text  x="33.52" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; &gt;::_Safe_unordered_container(__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="39.4" y="693" width="0.3" height="15.0" fill="rgb(244,158,29)" rx="2" ry="2" />
<text  x="42.45" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.03%)</title><rect x="427.3" y="533" width="0.3" height="15.0" fill="rgb(216,22,52)" rx="2" ry="2" />
<text  x="430.33" y="543.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (3 samples, 0.08%)</title><rect x="682.8" y="661" width="0.9" height="15.0" fill="rgb(231,180,50)" rx="2" ry="2" />
<text  x="685.84" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (3 samples, 0.08%)</title><rect x="665.6" y="677" width="0.9" height="15.0" fill="rgb(207,2,28)" rx="2" ry="2" />
<text  x="668.59" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (4 samples, 0.10%)</title><rect x="119.5" y="517" width="1.2" height="15.0" fill="rgb(223,177,29)" rx="2" ry="2" />
<text  x="122.46" y="527.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.05%)</title><rect x="673.9" y="693" width="0.6" height="15.0" fill="rgb(217,192,18)" rx="2" ry="2" />
<text  x="676.92" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1141.2" y="581" width="0.3" height="15.0" fill="rgb(211,195,20)" rx="2" ry="2" />
<text  x="1144.22" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (3 samples, 0.08%)</title><rect x="1154.0" y="741" width="0.9" height="15.0" fill="rgb(236,88,30)" rx="2" ry="2" />
<text  x="1157.01" y="751.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;0000000000082330&gt; (1 samples, 0.03%)</title><rect x="678.4" y="677" width="0.3" height="15.0" fill="rgb(206,67,44)" rx="2" ry="2" />
<text  x="681.38" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::PopRange(int, void**, void**)[inline] (1 samples, 0.03%)</title><rect x="872.0" y="549" width="0.3" height="15.0" fill="rgb(223,9,4)" rx="2" ry="2" />
<text  x="875.02" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="670.9" y="645" width="0.3" height="15.0" fill="rgb(228,91,46)" rx="2" ry="2" />
<text  x="673.94" y="655.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.03%)</title><rect x="662.0" y="677" width="0.3" height="15.0" fill="rgb(207,0,19)" rx="2" ry="2" />
<text  x="665.02" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.05%)</title><rect x="1136.5" y="597" width="0.6" height="15.0" fill="rgb(212,86,51)" rx="2" ry="2" />
<text  x="1139.46" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000604a0&gt; (2 samples, 0.05%)</title><rect x="679.3" y="693" width="0.6" height="15.0" fill="rgb(241,208,33)" rx="2" ry="2" />
<text  x="682.27" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1143.3" y="533" width="0.3" height="15.0" fill="rgb(247,127,34)" rx="2" ry="2" />
<text  x="1146.30" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="668.6" y="645" width="0.3" height="15.0" fill="rgb(234,148,7)" rx="2" ry="2" />
<text  x="671.56" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.08%)</title><rect x="667.7" y="693" width="0.9" height="15.0" fill="rgb(244,89,40)" rx="2" ry="2" />
<text  x="670.67" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate(std::allocator&lt;char&gt;&amp;, unsigned long) (1 samples, 0.03%)</title><rect x="1157.3" y="645" width="0.3" height="15.0" fill="rgb(234,190,51)" rx="2" ry="2" />
<text  x="1160.28" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000025490&gt; (1 samples, 0.03%)</title><rect x="1186.1" y="37" width="0.3" height="15.0" fill="rgb(249,52,17)" rx="2" ry="2" />
<text  x="1189.13" y="47.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="672.1" y="677" width="0.6" height="15.0" fill="rgb(236,142,8)" rx="2" ry="2" />
<text  x="675.13" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1132.6" y="565" width="0.3" height="15.0" fill="rgb(211,66,29)" rx="2" ry="2" />
<text  x="1135.59" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006f400&gt; (1 samples, 0.03%)</title><rect x="1143.3" y="613" width="0.3" height="15.0" fill="rgb(206,115,52)" rx="2" ry="2" />
<text  x="1146.30" y="623.5" ></text>
</g>
<g >
<title>_glapi_tls_Current&lt;0000000000000000&gt; (1 samples, 0.03%)</title><rect x="29.0" y="597" width="0.3" height="15.0" fill="rgb(223,167,52)" rx="2" ry="2" />
<text  x="32.04" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1149.0" y="629" width="0.2" height="15.0" fill="rgb(241,73,4)" rx="2" ry="2" />
<text  x="1151.95" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.03%)</title><rect x="119.2" y="501" width="0.3" height="15.0" fill="rgb(207,5,11)" rx="2" ry="2" />
<text  x="122.17" y="511.5" ></text>
</g>
<g >
<title>0x00007ff97d8f56ee (1 samples, 0.03%)</title><rect x="34.7" y="629" width="0.3" height="15.0" fill="rgb(216,76,0)" rx="2" ry="2" />
<text  x="37.69" y="639.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;0000000000081890&gt; (2 samples, 0.05%)</title><rect x="685.8" y="693" width="0.6" height="15.0" fill="rgb(250,49,40)" rx="2" ry="2" />
<text  x="688.82" y="703.5" ></text>
</g>
<g >
<title>vector (8 samples, 0.20%)</title><rect x="597.5" y="661" width="2.4" height="15.0" fill="rgb(252,33,40)" rx="2" ry="2" />
<text  x="600.47" y="671.5" ></text>
</g>
<g >
<title>0x00007f9f3a79db4e (1 samples, 0.03%)</title><rect x="34.1" y="613" width="0.3" height="15.0" fill="rgb(241,196,36)" rx="2" ry="2" />
<text  x="37.09" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (26 samples, 0.66%)</title><rect x="30.8" y="709" width="7.8" height="15.0" fill="rgb(223,9,26)" rx="2" ry="2" />
<text  x="33.82" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="677.5" y="661" width="0.3" height="15.0" fill="rgb(251,94,37)" rx="2" ry="2" />
<text  x="680.49" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="1157.0" y="613" width="0.3" height="15.0" fill="rgb(245,189,28)" rx="2" ry="2" />
<text  x="1159.98" y="623.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.03%)</title><rect x="1184.6" y="85" width="0.3" height="15.0" fill="rgb(220,26,29)" rx="2" ry="2" />
<text  x="1187.65" y="95.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="683.4" y="613" width="0.3" height="15.0" fill="rgb(229,60,9)" rx="2" ry="2" />
<text  x="686.44" y="623.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.03%)</title><rect x="1180.8" y="629" width="0.3" height="15.0" fill="rgb(242,114,45)" rx="2" ry="2" />
<text  x="1183.78" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1138.2" y="597" width="0.3" height="15.0" fill="rgb(212,65,21)" rx="2" ry="2" />
<text  x="1141.24" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="1150.7" y="725" width="0.9" height="15.0" fill="rgb(231,211,8)" rx="2" ry="2" />
<text  x="1153.74" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.03%)</title><rect x="1155.5" y="565" width="0.3" height="15.0" fill="rgb(251,56,31)" rx="2" ry="2" />
<text  x="1158.50" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="1151.0" y="693" width="0.6" height="15.0" fill="rgb(240,188,52)" rx="2" ry="2" />
<text  x="1154.03" y="703.5" ></text>
</g>
<g >
<title>0x00007ff97d8f5b56 (1 samples, 0.03%)</title><rect x="34.7" y="645" width="0.3" height="15.0" fill="rgb(211,27,37)" rx="2" ry="2" />
<text  x="37.69" y="655.5" ></text>
</g>
<g >
<title>drmIoctl&lt;0000000000007300&gt; (2 samples, 0.05%)</title><rect x="23.4" y="421" width="0.6" height="15.0" fill="rgb(250,207,10)" rx="2" ry="2" />
<text  x="26.39" y="431.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="686.7" y="613" width="0.3" height="15.0" fill="rgb(230,183,3)" rx="2" ry="2" />
<text  x="689.71" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (3 samples, 0.08%)</title><rect x="1186.7" y="341" width="0.9" height="15.0" fill="rgb(233,229,19)" rx="2" ry="2" />
<text  x="1189.73" y="351.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a1aab (1 samples, 0.03%)</title><rect x="35.0" y="645" width="0.3" height="15.0" fill="rgb(225,124,7)" rx="2" ry="2" />
<text  x="37.99" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,463 samples, 36.88%)</title><rect x="691.2" y="725" width="435.1" height="15.0" fill="rgb(207,33,46)" rx="2" ry="2" />
<text  x="694.17" y="735.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1126.9" y="661" width="0.6" height="15.0" fill="rgb(241,72,54)" rx="2" ry="2" />
<text  x="1129.94" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (42 samples, 1.06%)</title><rect x="1164.7" y="245" width="12.5" height="15.0" fill="rgb(247,173,21)" rx="2" ry="2" />
<text  x="1167.72" y="255.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="30.2" y="693" width="0.3" height="15.0" fill="rgb(217,71,34)" rx="2" ry="2" />
<text  x="33.23" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (6 samples, 0.15%)</title><rect x="1184.9" y="165" width="1.8" height="15.0" fill="rgb(238,64,6)" rx="2" ry="2" />
<text  x="1187.94" y="175.5" ></text>
</g>
<g >
<title>__open64 (1 samples, 0.03%)</title><rect x="32.0" y="597" width="0.3" height="15.0" fill="rgb(209,113,15)" rx="2" ry="2" />
<text  x="35.01" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="689.4" y="693" width="0.6" height="15.0" fill="rgb(233,89,42)" rx="2" ry="2" />
<text  x="692.38" y="703.5" ></text>
</g>
<g >
<title>SbrkSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long)&lt;0000000000024420&gt; (1 samples, 0.03%)</title><rect x="427.3" y="405" width="0.3" height="15.0" fill="rgb(222,76,5)" rx="2" ry="2" />
<text  x="430.33" y="415.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1150.4" y="565" width="0.3" height="15.0" fill="rgb(247,93,5)" rx="2" ry="2" />
<text  x="1153.44" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="689.7" y="677" width="0.3" height="15.0" fill="rgb(242,10,42)" rx="2" ry="2" />
<text  x="692.68" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (5 samples, 0.13%)</title><rect x="1131.7" y="629" width="1.5" height="15.0" fill="rgb(233,171,41)" rx="2" ry="2" />
<text  x="1134.70" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (3 samples, 0.08%)</title><rect x="1154.9" y="597" width="0.9" height="15.0" fill="rgb(235,194,17)" rx="2" ry="2" />
<text  x="1157.90" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (4 samples, 0.10%)</title><rect x="1133.5" y="565" width="1.2" height="15.0" fill="rgb(212,94,19)" rx="2" ry="2" />
<text  x="1136.48" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1132.6" y="581" width="0.3" height="15.0" fill="rgb(243,30,47)" rx="2" ry="2" />
<text  x="1135.59" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="658.2" y="661" width="0.5" height="15.0" fill="rgb(215,173,31)" rx="2" ry="2" />
<text  x="661.15" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.03%)</title><rect x="119.2" y="549" width="0.3" height="15.0" fill="rgb(239,156,46)" rx="2" ry="2" />
<text  x="122.17" y="559.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1128.4" y="581" width="0.3" height="15.0" fill="rgb(209,32,52)" rx="2" ry="2" />
<text  x="1131.43" y="591.5" ></text>
</g>
<g >
<title>fgetc (1 samples, 0.03%)</title><rect x="36.2" y="597" width="0.3" height="15.0" fill="rgb(224,9,25)" rx="2" ry="2" />
<text  x="39.18" y="607.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="28.7" y="469" width="0.3" height="15.0" fill="rgb(223,214,6)" rx="2" ry="2" />
<text  x="31.74" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (1 samples, 0.03%)</title><rect x="679.9" y="661" width="0.3" height="15.0" fill="rgb(211,139,35)" rx="2" ry="2" />
<text  x="682.87" y="671.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (1 samples, 0.03%)</title><rect x="678.1" y="677" width="0.3" height="15.0" fill="rgb(251,155,34)" rx="2" ry="2" />
<text  x="681.08" y="687.5" ></text>
</g>
<g >
<title>__gconv_get_alias_db@@GLIBC_PRIVATE&lt;0000000000024030&gt; (1 samples, 0.03%)</title><rect x="30.5" y="469" width="0.3" height="15.0" fill="rgb(232,195,11)" rx="2" ry="2" />
<text  x="33.52" y="479.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (7 samples, 0.18%)</title><rect x="1088.0" y="581" width="2.1" height="15.0" fill="rgb(226,216,47)" rx="2" ry="2" />
<text  x="1090.97" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (6 samples, 0.15%)</title><rect x="1184.9" y="149" width="1.8" height="15.0" fill="rgb(213,135,11)" rx="2" ry="2" />
<text  x="1187.94" y="159.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1145.4" y="549" width="0.3" height="15.0" fill="rgb(215,78,28)" rx="2" ry="2" />
<text  x="1148.38" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.03%)</title><rect x="690.0" y="597" width="0.3" height="15.0" fill="rgb(223,66,44)" rx="2" ry="2" />
<text  x="692.98" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1144.5" y="565" width="0.3" height="15.0" fill="rgb(235,179,40)" rx="2" ry="2" />
<text  x="1147.49" y="575.5" ></text>
</g>
<g >
<title>_Alloc_hider (1 samples, 0.03%)</title><rect x="688.5" y="693" width="0.3" height="15.0" fill="rgb(208,164,28)" rx="2" ry="2" />
<text  x="691.49" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="659.9" y="677" width="0.3" height="15.0" fill="rgb(253,117,20)" rx="2" ry="2" />
<text  x="662.94" y="687.5" ></text>
</g>
<g >
<title>_IO_vfprintf (1 samples, 0.03%)</title><rect x="28.7" y="389" width="0.3" height="15.0" fill="rgb(247,131,49)" rx="2" ry="2" />
<text  x="31.74" y="399.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (4 samples, 0.10%)</title><rect x="1154.9" y="629" width="1.2" height="15.0" fill="rgb(229,104,24)" rx="2" ry="2" />
<text  x="1157.90" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::_M_allocate(unsigned long) (2 samples, 0.05%)</title><rect x="1159.4" y="469" width="0.6" height="15.0" fill="rgb(228,78,19)" rx="2" ry="2" />
<text  x="1162.36" y="479.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;0000000000081e10&gt; (1 samples, 0.03%)</title><rect x="664.4" y="645" width="0.3" height="15.0" fill="rgb(213,70,53)" rx="2" ry="2" />
<text  x="667.40" y="655.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="683.4" y="645" width="0.3" height="15.0" fill="rgb(214,217,17)" rx="2" ry="2" />
<text  x="686.44" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (2 samples, 0.05%)</title><rect x="667.1" y="613" width="0.6" height="15.0" fill="rgb(239,57,44)" rx="2" ry="2" />
<text  x="670.08" y="623.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="1182.0" y="661" width="0.3" height="15.0" fill="rgb(248,72,1)" rx="2" ry="2" />
<text  x="1184.97" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (10 samples, 0.25%)</title><rect x="1183.8" y="565" width="2.9" height="15.0" fill="rgb(227,221,49)" rx="2" ry="2" />
<text  x="1186.75" y="575.5" ></text>
</g>
<g >
<title>~_Safe_sequence_base (3 samples, 0.08%)</title><rect x="1149.8" y="725" width="0.9" height="15.0" fill="rgb(231,143,25)" rx="2" ry="2" />
<text  x="1152.84" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="672.4" y="613" width="0.3" height="15.0" fill="rgb(252,42,44)" rx="2" ry="2" />
<text  x="675.43" y="623.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;000000000006a250&gt; (61 samples, 1.54%)</title><rect x="1128.1" y="725" width="18.2" height="15.0" fill="rgb(228,25,52)" rx="2" ry="2" />
<text  x="1131.13" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.03%)</title><rect x="1146.6" y="629" width="0.3" height="15.0" fill="rgb(223,115,5)" rx="2" ry="2" />
<text  x="1149.57" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, Triangle&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="1149.2" y="645" width="0.3" height="15.0" fill="rgb(214,106,7)" rx="2" ry="2" />
<text  x="1152.25" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (4 samples, 0.10%)</title><rect x="1154.9" y="677" width="1.2" height="15.0" fill="rgb(228,23,4)" rx="2" ry="2" />
<text  x="1157.90" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.05%)</title><rect x="1148.7" y="693" width="0.5" height="15.0" fill="rgb(218,229,22)" rx="2" ry="2" />
<text  x="1151.65" y="703.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010670&gt; (1 samples, 0.03%)</title><rect x="1147.8" y="645" width="0.3" height="15.0" fill="rgb(208,119,22)" rx="2" ry="2" />
<text  x="1150.76" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="680.8" y="549" width="0.3" height="15.0" fill="rgb(215,69,19)" rx="2" ry="2" />
<text  x="683.76" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1140.3" y="597" width="0.3" height="15.0" fill="rgb(214,8,14)" rx="2" ry="2" />
<text  x="1143.33" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (10 samples, 0.25%)</title><rect x="1183.8" y="533" width="2.9" height="15.0" fill="rgb(224,194,30)" rx="2" ry="2" />
<text  x="1186.75" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator++() (1 samples, 0.03%)</title><rect x="1152.5" y="677" width="0.3" height="15.0" fill="rgb(239,155,9)" rx="2" ry="2" />
<text  x="1155.52" y="687.5" ></text>
</g>
<g >
<title>0x00007fa19390ff9d (1 samples, 0.03%)</title><rect x="34.4" y="613" width="0.3" height="15.0" fill="rgb(227,2,6)" rx="2" ry="2" />
<text  x="37.39" y="623.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;OBJ_Lex_triFace&gt; &gt;::construct&lt;OBJ_Lex_triFace, OBJ_Lex_triFace const&amp;&gt;(std::allocator&lt;OBJ_Lex_triFace&gt;&amp;, OBJ_Lex_triFace*, OBJ_Lex_triFace const&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="629" width="0.3" height="15.0" fill="rgb(208,95,7)" rx="2" ry="2" />
<text  x="1159.69" y="639.5" ></text>
</g>
<g >
<title>0x00007f4cf82b5585 (1 samples, 0.03%)</title><rect x="31.4" y="597" width="0.3" height="15.0" fill="rgb(237,118,46)" rx="2" ry="2" />
<text  x="34.42" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1141.5" y="597" width="0.3" height="15.0" fill="rgb(250,138,2)" rx="2" ry="2" />
<text  x="1144.51" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SDL_Color*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::operator-(long) const (1 samples, 0.03%)</title><rect x="1155.2" y="581" width="0.3" height="15.0" fill="rgb(220,34,1)" rx="2" ry="2" />
<text  x="1158.20" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1151.9" y="725" width="0.3" height="15.0" fill="rgb(232,16,0)" rx="2" ry="2" />
<text  x="1154.93" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (8 samples, 0.20%)</title><rect x="1184.3" y="213" width="2.4" height="15.0" fill="rgb(212,89,49)" rx="2" ry="2" />
<text  x="1187.35" y="223.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (27 samples, 0.68%)</title><rect x="22.5" y="709" width="8.0" height="15.0" fill="rgb(206,28,8)" rx="2" ry="2" />
<text  x="25.49" y="719.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (6 samples, 0.15%)</title><rect x="298.2" y="613" width="1.8" height="15.0" fill="rgb(234,135,1)" rx="2" ry="2" />
<text  x="301.23" y="623.5" ></text>
</g>
<g >
<title>OBJ_Datum::OBJ_Datum(OBJ_Datum const&amp;)&lt;0000000000055a20&gt; (1 samples, 0.03%)</title><rect x="1182.6" y="597" width="0.3" height="15.0" fill="rgb(246,102,29)" rx="2" ry="2" />
<text  x="1185.56" y="607.5" ></text>
</g>
<g >
<title>std::istream::tellg()&lt;000000000011fa00&gt; (2 samples, 0.05%)</title><rect x="1181.4" y="661" width="0.6" height="15.0" fill="rgb(250,133,43)" rx="2" ry="2" />
<text  x="1184.37" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="533" width="0.3" height="15.0" fill="rgb(242,75,44)" rx="2" ry="2" />
<text  x="1183.48" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1148.4" y="725" width="0.3" height="15.0" fill="rgb(209,206,54)" rx="2" ry="2" />
<text  x="1151.36" y="735.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (3 samples, 0.08%)</title><rect x="680.2" y="661" width="0.9" height="15.0" fill="rgb(206,64,31)" rx="2" ry="2" />
<text  x="683.16" y="671.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="22.5" y="517" width="0.3" height="15.0" fill="rgb(242,11,28)" rx="2" ry="2" />
<text  x="25.49" y="527.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode) (3 samples, 0.08%)</title><rect x="1182.9" y="629" width="0.9" height="15.0" fill="rgb(227,33,48)" rx="2" ry="2" />
<text  x="1185.86" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.03%)</title><rect x="38.6" y="693" width="0.3" height="15.0" fill="rgb(252,52,13)" rx="2" ry="2" />
<text  x="41.56" y="703.5" ></text>
</g>
<g >
<title>0x00007f4cf82b6323 (1 samples, 0.03%)</title><rect x="35.3" y="613" width="0.3" height="15.0" fill="rgb(237,60,46)" rx="2" ry="2" />
<text  x="38.28" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1152.8" y="661" width="0.3" height="15.0" fill="rgb(247,63,25)" rx="2" ry="2" />
<text  x="1155.82" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1148.4" y="581" width="0.3" height="15.0" fill="rgb(227,61,2)" rx="2" ry="2" />
<text  x="1151.36" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="674.8" y="677" width="0.3" height="15.0" fill="rgb(216,18,39)" rx="2" ry="2" />
<text  x="677.81" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="565" width="0.3" height="15.0" fill="rgb(253,168,54)" rx="2" ry="2" />
<text  x="1152.84" y="575.5" ></text>
</g>
<g >
<title>_Parameter (8 samples, 0.20%)</title><rect x="240.2" y="629" width="2.4" height="15.0" fill="rgb(225,110,14)" rx="2" ry="2" />
<text  x="243.23" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="668.6" y="693" width="0.3" height="15.0" fill="rgb(228,14,21)" rx="2" ry="2" />
<text  x="671.56" y="703.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (1 samples, 0.03%)</title><rect x="26.1" y="453" width="0.3" height="15.0" fill="rgb(227,77,43)" rx="2" ry="2" />
<text  x="29.06" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.03%)</title><rect x="1131.1" y="597" width="0.3" height="15.0" fill="rgb(227,144,2)" rx="2" ry="2" />
<text  x="1134.10" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1146.0" y="549" width="0.3" height="15.0" fill="rgb(231,66,53)" rx="2" ry="2" />
<text  x="1148.98" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1149.2" y="549" width="0.3" height="15.0" fill="rgb(249,158,33)" rx="2" ry="2" />
<text  x="1152.25" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;::push_back(OBJ_Lex_triFace const&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="645" width="0.3" height="15.0" fill="rgb(219,177,13)" rx="2" ry="2" />
<text  x="1159.69" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="613" width="20.8" height="15.0" fill="rgb(234,65,9)" rx="2" ry="2" />
<text  x="1162.36" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (4 samples, 0.10%)</title><rect x="1154.9" y="645" width="1.2" height="15.0" fill="rgb(232,147,4)" rx="2" ry="2" />
<text  x="1157.90" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1127.8" y="677" width="0.3" height="15.0" fill="rgb(207,131,42)" rx="2" ry="2" />
<text  x="1130.83" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="1187.9" y="725" width="0.3" height="15.0" fill="rgb(222,90,44)" rx="2" ry="2" />
<text  x="1190.92" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.03%)</title><rect x="1141.5" y="517" width="0.3" height="15.0" fill="rgb(234,174,1)" rx="2" ry="2" />
<text  x="1144.51" y="527.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (6 samples, 0.15%)</title><rect x="24.0" y="421" width="1.8" height="15.0" fill="rgb(244,159,21)" rx="2" ry="2" />
<text  x="26.98" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.03%)</title><rect x="1146.0" y="437" width="0.3" height="15.0" fill="rgb(252,61,40)" rx="2" ry="2" />
<text  x="1148.98" y="447.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.03%)</title><rect x="1182.6" y="533" width="0.3" height="15.0" fill="rgb(244,26,25)" rx="2" ry="2" />
<text  x="1185.56" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="683.7" y="629" width="0.3" height="15.0" fill="rgb(217,101,22)" rx="2" ry="2" />
<text  x="686.73" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::max_size() const (1 samples, 0.03%)</title><rect x="1156.4" y="565" width="0.3" height="15.0" fill="rgb(220,3,26)" rx="2" ry="2" />
<text  x="1159.39" y="575.5" ></text>
</g>
<g >
<title>glXGetCurrentContext&lt;00000000000173b0&gt; (1 samples, 0.03%)</title><rect x="29.0" y="629" width="0.3" height="15.0" fill="rgb(211,16,26)" rx="2" ry="2" />
<text  x="32.04" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1141.2" y="565" width="0.3" height="15.0" fill="rgb(245,16,53)" rx="2" ry="2" />
<text  x="1144.22" y="575.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (27 samples, 0.68%)</title><rect x="22.5" y="741" width="8.0" height="15.0" fill="rgb(222,147,40)" rx="2" ry="2" />
<text  x="25.49" y="751.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1130.2" y="581" width="0.3" height="15.0" fill="rgb(234,104,39)" rx="2" ry="2" />
<text  x="1133.21" y="591.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="22.8" y="485" width="0.3" height="15.0" fill="rgb(207,133,16)" rx="2" ry="2" />
<text  x="25.79" y="495.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="30.5" y="709" width="0.3" height="15.0" fill="rgb(254,225,16)" rx="2" ry="2" />
<text  x="33.52" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (68 samples, 1.71%)</title><rect x="1160.0" y="469" width="20.2" height="15.0" fill="rgb(229,134,50)" rx="2" ry="2" />
<text  x="1162.96" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="680.8" y="565" width="0.3" height="15.0" fill="rgb(238,188,48)" rx="2" ry="2" />
<text  x="683.76" y="575.5" ></text>
</g>
<g >
<title>int&amp; std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt;(int&amp;&amp;) (2 samples, 0.05%)</title><rect x="1156.1" y="613" width="0.6" height="15.0" fill="rgb(232,120,10)" rx="2" ry="2" />
<text  x="1159.09" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.08%)</title><rect x="1039.2" y="613" width="0.9" height="15.0" fill="rgb(232,55,23)" rx="2" ry="2" />
<text  x="1042.19" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.03%)</title><rect x="1184.6" y="117" width="0.3" height="15.0" fill="rgb(224,155,6)" rx="2" ry="2" />
<text  x="1187.65" y="127.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (9 samples, 0.23%)</title><rect x="309.8" y="661" width="2.7" height="15.0" fill="rgb(218,194,45)" rx="2" ry="2" />
<text  x="312.83" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1141.5" y="581" width="0.3" height="15.0" fill="rgb(232,97,47)" rx="2" ry="2" />
<text  x="1144.51" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.08%)</title><rect x="23.1" y="533" width="0.9" height="15.0" fill="rgb(238,112,46)" rx="2" ry="2" />
<text  x="26.09" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1144.2" y="581" width="0.3" height="15.0" fill="rgb(234,215,35)" rx="2" ry="2" />
<text  x="1147.19" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="1159.4" y="501" width="0.6" height="15.0" fill="rgb(245,10,54)" rx="2" ry="2" />
<text  x="1162.36" y="511.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="1149.8" y="597" width="0.6" height="15.0" fill="rgb(212,121,22)" rx="2" ry="2" />
<text  x="1152.84" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.03%)</title><rect x="671.2" y="597" width="0.3" height="15.0" fill="rgb(234,61,35)" rx="2" ry="2" />
<text  x="674.24" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="673.3" y="693" width="0.3" height="15.0" fill="rgb(231,70,1)" rx="2" ry="2" />
<text  x="676.32" y="703.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.03%)</title><rect x="35.3" y="581" width="0.3" height="15.0" fill="rgb(254,58,29)" rx="2" ry="2" />
<text  x="38.28" y="591.5" ></text>
</g>
<g >
<title>int* std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.03%)</title><rect x="1158.8" y="581" width="0.3" height="15.0" fill="rgb(243,204,26)" rx="2" ry="2" />
<text  x="1161.77" y="591.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;000000000006bf70&gt; (1 samples, 0.03%)</title><rect x="1149.2" y="597" width="0.3" height="15.0" fill="rgb(249,202,14)" rx="2" ry="2" />
<text  x="1152.25" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator()(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.03%)</title><rect x="1162.3" y="277" width="0.3" height="15.0" fill="rgb(236,46,29)" rx="2" ry="2" />
<text  x="1165.34" y="287.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (3 samples, 0.08%)</title><rect x="1149.8" y="709" width="0.9" height="15.0" fill="rgb(208,98,12)" rx="2" ry="2" />
<text  x="1152.84" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="666.5" y="677" width="0.3" height="15.0" fill="rgb(206,170,20)" rx="2" ry="2" />
<text  x="669.48" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (1 samples, 0.03%)</title><rect x="1158.8" y="549" width="0.3" height="15.0" fill="rgb(243,142,44)" rx="2" ry="2" />
<text  x="1161.77" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="688.2" y="645" width="0.3" height="15.0" fill="rgb(214,117,22)" rx="2" ry="2" />
<text  x="691.20" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1129.6" y="597" width="0.6" height="15.0" fill="rgb(220,117,13)" rx="2" ry="2" />
<text  x="1132.62" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (75 samples, 1.89%)</title><rect x="157.5" y="645" width="22.3" height="15.0" fill="rgb(206,88,23)" rx="2" ry="2" />
<text  x="160.54" y="655.5" >s..</text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="671.5" y="565" width="0.3" height="15.0" fill="rgb(217,229,4)" rx="2" ry="2" />
<text  x="674.54" y="575.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.03%)</title><rect x="1187.6" y="629" width="0.3" height="15.0" fill="rgb(214,16,26)" rx="2" ry="2" />
<text  x="1190.62" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1132.6" y="613" width="0.3" height="15.0" fill="rgb(246,32,35)" rx="2" ry="2" />
<text  x="1135.59" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator() const (1 samples, 0.03%)</title><rect x="1182.6" y="405" width="0.3" height="15.0" fill="rgb(209,94,29)" rx="2" ry="2" />
<text  x="1185.56" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1126.9" y="677" width="0.6" height="15.0" fill="rgb(213,18,43)" rx="2" ry="2" />
<text  x="1129.94" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1142.1" y="533" width="0.3" height="15.0" fill="rgb(227,151,35)" rx="2" ry="2" />
<text  x="1145.11" y="543.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1148.1" y="629" width="0.3" height="15.0" fill="rgb(239,180,6)" rx="2" ry="2" />
<text  x="1151.06" y="639.5" ></text>
</g>
<g >
<title>0x00007f9f3a7ad3a5 (1 samples, 0.03%)</title><rect x="34.1" y="581" width="0.3" height="15.0" fill="rgb(210,199,52)" rx="2" ry="2" />
<text  x="37.09" y="591.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (1 samples, 0.03%)</title><rect x="1187.6" y="725" width="0.3" height="15.0" fill="rgb(248,102,54)" rx="2" ry="2" />
<text  x="1190.62" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1139.4" y="565" width="0.3" height="15.0" fill="rgb(252,25,52)" rx="2" ry="2" />
<text  x="1142.43" y="575.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (11 samples, 0.28%)</title><rect x="382.1" y="677" width="3.3" height="15.0" fill="rgb(211,30,11)" rx="2" ry="2" />
<text  x="385.11" y="687.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a275a (1 samples, 0.03%)</title><rect x="32.3" y="661" width="0.3" height="15.0" fill="rgb(216,128,44)" rx="2" ry="2" />
<text  x="35.31" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.05%)</title><rect x="670.6" y="661" width="0.6" height="15.0" fill="rgb(241,99,37)" rx="2" ry="2" />
<text  x="673.65" y="671.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (14 samples, 0.35%)</title><rect x="1160.0" y="357" width="4.1" height="15.0" fill="rgb(225,114,0)" rx="2" ry="2" />
<text  x="1162.96" y="367.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::max_size() const (1 samples, 0.03%)</title><rect x="1180.5" y="469" width="0.3" height="15.0" fill="rgb(253,141,46)" rx="2" ry="2" />
<text  x="1183.48" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (2 samples, 0.05%)</title><rect x="1129.6" y="549" width="0.6" height="15.0" fill="rgb(228,110,5)" rx="2" ry="2" />
<text  x="1132.62" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (3 samples, 0.08%)</title><rect x="1186.7" y="389" width="0.9" height="15.0" fill="rgb(238,94,4)" rx="2" ry="2" />
<text  x="1189.73" y="399.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (10 samples, 0.25%)</title><rect x="1183.8" y="613" width="2.9" height="15.0" fill="rgb(231,190,23)" rx="2" ry="2" />
<text  x="1186.75" y="623.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (6 samples, 0.15%)</title><rect x="24.0" y="469" width="1.8" height="15.0" fill="rgb(222,57,17)" rx="2" ry="2" />
<text  x="26.98" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="565" width="0.3" height="15.0" fill="rgb(241,90,38)" rx="2" ry="2" />
<text  x="1159.69" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.03%)</title><rect x="119.2" y="485" width="0.3" height="15.0" fill="rgb(249,9,12)" rx="2" ry="2" />
<text  x="122.17" y="495.5" ></text>
</g>
<g >
<title>0x00007f4cf82b1afc (1 samples, 0.03%)</title><rect x="31.4" y="581" width="0.3" height="15.0" fill="rgb(231,136,42)" rx="2" ry="2" />
<text  x="34.42" y="591.5" ></text>
</g>
<g >
<title>lseek64 (1 samples, 0.03%)</title><rect x="1181.7" y="613" width="0.3" height="15.0" fill="rgb(207,224,39)" rx="2" ry="2" />
<text  x="1184.67" y="623.5" ></text>
</g>
<g >
<title>~vector (76 samples, 1.92%)</title><rect x="277.4" y="661" width="22.6" height="15.0" fill="rgb(240,46,4)" rx="2" ry="2" />
<text  x="280.41" y="671.5" >~..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (8 samples, 0.20%)</title><rect x="1184.3" y="197" width="2.4" height="15.0" fill="rgb(235,74,2)" rx="2" ry="2" />
<text  x="1187.35" y="207.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047d40&gt; (571 samples, 14.39%)</title><rect x="430.0" y="677" width="169.9" height="15.0" fill="rgb(235,219,4)" rx="2" ry="2" />
<text  x="433.01" y="687.5" >TexturePNG::getPixelA..</text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.03%)</title><rect x="37.7" y="613" width="0.3" height="15.0" fill="rgb(239,42,42)" rx="2" ry="2" />
<text  x="40.66" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (10 samples, 0.25%)</title><rect x="1183.8" y="357" width="2.9" height="15.0" fill="rgb(249,218,5)" rx="2" ry="2" />
<text  x="1186.75" y="367.5" ></text>
</g>
<g >
<title>__shared_ptr (14 samples, 0.35%)</title><rect x="308.3" y="677" width="4.2" height="15.0" fill="rgb(225,142,9)" rx="2" ry="2" />
<text  x="311.35" y="687.5" ></text>
</g>
<g >
<title>~__shared_count (13 samples, 0.33%)</title><rect x="338.4" y="677" width="3.9" height="15.0" fill="rgb(249,175,34)" rx="2" ry="2" />
<text  x="341.39" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="682.5" y="597" width="0.3" height="15.0" fill="rgb(245,166,48)" rx="2" ry="2" />
<text  x="685.54" y="607.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="581" width="20.8" height="15.0" fill="rgb(240,106,29)" rx="2" ry="2" />
<text  x="1162.36" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="1187.6" y="709" width="0.3" height="15.0" fill="rgb(234,101,9)" rx="2" ry="2" />
<text  x="1190.62" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (35 samples, 0.88%)</title><rect x="631.4" y="629" width="10.4" height="15.0" fill="rgb(247,47,22)" rx="2" ry="2" />
<text  x="634.38" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (89 samples, 2.24%)</title><rect x="889.9" y="581" width="26.4" height="15.0" fill="rgb(211,40,29)" rx="2" ry="2" />
<text  x="892.87" y="591.5" >_..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (10 samples, 0.25%)</title><rect x="1183.8" y="709" width="2.9" height="15.0" fill="rgb(207,49,46)" rx="2" ry="2" />
<text  x="1186.75" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.10%)</title><rect x="686.4" y="693" width="1.2" height="15.0" fill="rgb(232,13,23)" rx="2" ry="2" />
<text  x="689.41" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.08%)</title><rect x="680.2" y="677" width="0.9" height="15.0" fill="rgb(222,96,41)" rx="2" ry="2" />
<text  x="683.16" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (3 samples, 0.08%)</title><rect x="1186.7" y="325" width="0.9" height="15.0" fill="rgb(228,166,37)" rx="2" ry="2" />
<text  x="1189.73" y="335.5" ></text>
</g>
<g >
<title>getdents64@@GLIBC_2.30&lt;00000000000ce0c0&gt; (1 samples, 0.03%)</title><rect x="31.1" y="629" width="0.3" height="15.0" fill="rgb(207,138,12)" rx="2" ry="2" />
<text  x="34.12" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1158.8" y="661" width="0.3" height="15.0" fill="rgb(251,198,3)" rx="2" ry="2" />
<text  x="1161.77" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.08%)</title><rect x="628.4" y="645" width="0.9" height="15.0" fill="rgb(254,227,32)" rx="2" ry="2" />
<text  x="631.41" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="682.8" y="645" width="0.6" height="15.0" fill="rgb(211,205,37)" rx="2" ry="2" />
<text  x="685.84" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.08%)</title><rect x="29.3" y="677" width="0.9" height="15.0" fill="rgb(253,206,41)" rx="2" ry="2" />
<text  x="32.33" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000062330&gt; (3 samples, 0.08%)</title><rect x="657.3" y="709" width="0.9" height="15.0" fill="rgb(230,77,35)" rx="2" ry="2" />
<text  x="660.26" y="719.5" ></text>
</g>
<g >
<title>~_Hashtable (2 samples, 0.05%)</title><rect x="1159.4" y="485" width="0.6" height="15.0" fill="rgb(237,10,43)" rx="2" ry="2" />
<text  x="1162.36" y="495.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (3 samples, 0.08%)</title><rect x="599.0" y="645" width="0.9" height="15.0" fill="rgb(248,227,12)" rx="2" ry="2" />
<text  x="601.96" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (64 samples, 1.61%)</title><rect x="1160.0" y="405" width="19.0" height="15.0" fill="rgb(208,174,50)" rx="2" ry="2" />
<text  x="1162.96" y="415.5" ></text>
</g>
<g >
<title>__gconv_open@@GLIBC_PRIVATE&lt;0000000000023990&gt; (1 samples, 0.03%)</title><rect x="30.5" y="533" width="0.3" height="15.0" fill="rgb(233,167,51)" rx="2" ry="2" />
<text  x="33.52" y="543.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a5d2a (1 samples, 0.03%)</title><rect x="34.1" y="565" width="0.3" height="15.0" fill="rgb(251,133,11)" rx="2" ry="2" />
<text  x="37.09" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.05%)</title><rect x="1129.6" y="581" width="0.6" height="15.0" fill="rgb(252,173,16)" rx="2" ry="2" />
<text  x="1132.62" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.13%)</title><rect x="34.1" y="677" width="1.5" height="15.0" fill="rgb(217,193,45)" rx="2" ry="2" />
<text  x="37.09" y="687.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.03%)</title><rect x="1182.0" y="645" width="0.3" height="15.0" fill="rgb(229,58,35)" rx="2" ry="2" />
<text  x="1184.97" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (4 samples, 0.10%)</title><rect x="602.5" y="645" width="1.2" height="15.0" fill="rgb(210,74,51)" rx="2" ry="2" />
<text  x="605.53" y="655.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_space&lt;0000000000005630&gt; (34 samples, 0.86%)</title><rect x="1116.2" y="613" width="10.1" height="15.0" fill="rgb(211,211,26)" rx="2" ry="2" />
<text  x="1119.23" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (19 samples, 0.48%)</title><rect x="22.8" y="645" width="5.6" height="15.0" fill="rgb(239,44,11)" rx="2" ry="2" />
<text  x="25.79" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.05%)</title><rect x="1126.9" y="709" width="0.6" height="15.0" fill="rgb(207,159,19)" rx="2" ry="2" />
<text  x="1129.94" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (10 samples, 0.25%)</title><rect x="1183.8" y="677" width="2.9" height="15.0" fill="rgb(207,135,21)" rx="2" ry="2" />
<text  x="1186.75" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (10 samples, 0.25%)</title><rect x="1183.8" y="341" width="2.9" height="15.0" fill="rgb(206,188,39)" rx="2" ry="2" />
<text  x="1186.75" y="351.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (3 samples, 0.08%)</title><rect x="1154.0" y="693" width="0.9" height="15.0" fill="rgb(229,51,20)" rx="2" ry="2" />
<text  x="1157.01" y="703.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (3 samples, 0.08%)</title><rect x="24.9" y="341" width="0.9" height="15.0" fill="rgb(217,28,51)" rx="2" ry="2" />
<text  x="27.87" y="351.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="656.7" y="677" width="0.3" height="15.0" fill="rgb(234,110,1)" rx="2" ry="2" />
<text  x="659.66" y="687.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (7 samples, 0.18%)</title><rect x="1088.0" y="597" width="2.1" height="15.0" fill="rgb(205,99,31)" rx="2" ry="2" />
<text  x="1090.97" y="607.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (27 samples, 0.68%)</title><rect x="30.5" y="741" width="8.1" height="15.0" fill="rgb(234,31,10)" rx="2" ry="2" />
<text  x="33.52" y="751.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (168 samples, 4.23%)</title><rect x="1040.1" y="629" width="50.0" height="15.0" fill="rgb(239,109,6)" rx="2" ry="2" />
<text  x="1043.08" y="639.5" >nouve..</text>
</g>
<g >
<title>0x00007fa19391475a (1 samples, 0.03%)</title><rect x="32.9" y="661" width="0.3" height="15.0" fill="rgb(215,100,39)" rx="2" ry="2" />
<text  x="35.90" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (2 samples, 0.05%)</title><rect x="1129.6" y="565" width="0.6" height="15.0" fill="rgb(218,9,12)" rx="2" ry="2" />
<text  x="1132.62" y="575.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (3 samples, 0.08%)</title><rect x="275.6" y="645" width="0.9" height="15.0" fill="rgb(214,11,32)" rx="2" ry="2" />
<text  x="278.63" y="655.5" ></text>
</g>
<g >
<title>_Vector_impl (17 samples, 0.43%)</title><rect x="450.8" y="661" width="5.1" height="15.0" fill="rgb(245,89,44)" rx="2" ry="2" />
<text  x="453.83" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (111 samples, 2.80%)</title><rect x="395.2" y="661" width="33.0" height="15.0" fill="rgb(241,223,49)" rx="2" ry="2" />
<text  x="398.20" y="671.5" >SD..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_erase_at_end(Triangle*) (1 samples, 0.03%)</title><rect x="666.8" y="661" width="0.3" height="15.0" fill="rgb(253,45,54)" rx="2" ry="2" />
<text  x="669.78" y="671.5" ></text>
</g>
<g >
<title>ioctl@@GLIBC_2.2.5&lt;00000000000fc9b0&gt; (1 samples, 0.03%)</title><rect x="23.1" y="405" width="0.3" height="15.0" fill="rgb(229,48,27)" rx="2" ry="2" />
<text  x="26.09" y="415.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.05%)</title><rect x="667.1" y="661" width="0.6" height="15.0" fill="rgb(240,147,22)" rx="2" ry="2" />
<text  x="670.08" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (4 samples, 0.10%)</title><rect x="1130.2" y="629" width="1.2" height="15.0" fill="rgb(210,177,50)" rx="2" ry="2" />
<text  x="1133.21" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (4 samples, 0.10%)</title><rect x="1177.8" y="389" width="1.2" height="15.0" fill="rgb(239,74,18)" rx="2" ry="2" />
<text  x="1180.80" y="399.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.10%)</title><rect x="1152.8" y="709" width="1.2" height="15.0" fill="rgb(240,31,22)" rx="2" ry="2" />
<text  x="1155.82" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1149.2" y="725" width="0.6" height="15.0" fill="rgb(214,183,9)" rx="2" ry="2" />
<text  x="1152.25" y="735.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (7 samples, 0.18%)</title><rect x="872.3" y="613" width="2.1" height="15.0" fill="rgb(253,78,23)" rx="2" ry="2" />
<text  x="875.32" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="688.8" y="693" width="0.6" height="15.0" fill="rgb(244,116,14)" rx="2" ry="2" />
<text  x="691.79" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1127.8" y="693" width="0.3" height="15.0" fill="rgb(242,198,31)" rx="2" ry="2" />
<text  x="1130.83" y="703.5" ></text>
</g>
<g >
<title>OBJ_Lex_normal::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000050cb0&gt; (1 samples, 0.03%)</title><rect x="1180.5" y="661" width="0.3" height="15.0" fill="rgb(252,152,17)" rx="2" ry="2" />
<text  x="1183.48" y="671.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1142.4" y="533" width="0.3" height="15.0" fill="rgb(254,153,42)" rx="2" ry="2" />
<text  x="1145.41" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (10 samples, 0.25%)</title><rect x="1138.5" y="645" width="3.0" height="15.0" fill="rgb(239,9,54)" rx="2" ry="2" />
<text  x="1141.54" y="655.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1140.3" y="581" width="0.3" height="15.0" fill="rgb(237,78,49)" rx="2" ry="2" />
<text  x="1143.33" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (161 samples, 4.06%)</title><rect x="874.4" y="613" width="47.9" height="15.0" fill="rgb(241,172,10)" rx="2" ry="2" />
<text  x="877.40" y="623.5" >nouv..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="1146.9" y="693" width="0.3" height="15.0" fill="rgb(233,154,30)" rx="2" ry="2" />
<text  x="1149.87" y="703.5" ></text>
</g>
<g >
<title>all (3,967 samples, 100%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(215,141,39)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029750&gt; (1 samples, 0.03%)</title><rect x="1186.1" y="85" width="0.3" height="15.0" fill="rgb(228,169,51)" rx="2" ry="2" />
<text  x="1189.13" y="95.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;0000000000081ee0&gt; (4 samples, 0.10%)</title><rect x="675.4" y="709" width="1.2" height="15.0" fill="rgb(253,7,47)" rx="2" ry="2" />
<text  x="678.40" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (406 samples, 10.23%)</title><rect x="801.5" y="629" width="120.8" height="15.0" fill="rgb(248,130,13)" rx="2" ry="2" />
<text  x="804.53" y="639.5" >__driDriverGetE..</text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="671.5" y="597" width="0.3" height="15.0" fill="rgb(250,3,45)" rx="2" ry="2" />
<text  x="674.54" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="678.1" y="645" width="0.3" height="15.0" fill="rgb(215,24,54)" rx="2" ry="2" />
<text  x="681.08" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1148.4" y="549" width="0.3" height="15.0" fill="rgb(230,48,42)" rx="2" ry="2" />
<text  x="1151.36" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (2 samples, 0.05%)</title><rect x="680.2" y="597" width="0.6" height="15.0" fill="rgb(236,187,27)" rx="2" ry="2" />
<text  x="683.16" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (31 samples, 0.78%)</title><rect x="1030.9" y="629" width="9.2" height="15.0" fill="rgb(234,44,15)" rx="2" ry="2" />
<text  x="1033.86" y="639.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length(char const*) (1 samples, 0.03%)</title><rect x="647.1" y="629" width="0.3" height="15.0" fill="rgb(219,171,13)" rx="2" ry="2" />
<text  x="650.15" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1128.1" y="581" width="0.3" height="15.0" fill="rgb(207,0,10)" rx="2" ry="2" />
<text  x="1131.13" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (2 samples, 0.05%)</title><rect x="1129.6" y="533" width="0.6" height="15.0" fill="rgb(219,176,21)" rx="2" ry="2" />
<text  x="1132.62" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (8 samples, 0.20%)</title><rect x="306.0" y="661" width="2.3" height="15.0" fill="rgb(246,211,22)" rx="2" ry="2" />
<text  x="308.97" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="427.6" y="565" width="0.3" height="15.0" fill="rgb(226,98,0)" rx="2" ry="2" />
<text  x="430.63" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (10 samples, 0.25%)</title><rect x="1183.8" y="597" width="2.9" height="15.0" fill="rgb(219,201,45)" rx="2" ry="2" />
<text  x="1186.75" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (3 samples, 0.08%)</title><rect x="659.3" y="693" width="0.9" height="15.0" fill="rgb(236,194,23)" rx="2" ry="2" />
<text  x="662.34" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getVectorLength(Vec3d const&amp;) (1 samples, 0.03%)</title><rect x="666.5" y="661" width="0.3" height="15.0" fill="rgb(209,134,28)" rx="2" ry="2" />
<text  x="669.48" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="1157.0" y="597" width="0.3" height="15.0" fill="rgb(224,105,0)" rx="2" ry="2" />
<text  x="1159.98" y="607.5" ></text>
</g>
<g >
<title>pa_client_conf_load&lt;0000000000023f30&gt; (1 samples, 0.03%)</title><rect x="30.5" y="661" width="0.3" height="15.0" fill="rgb(219,154,50)" rx="2" ry="2" />
<text  x="33.52" y="671.5" ></text>
</g>
<g >
<title>readlinkat@@GLIBC_2.4&lt;00000000000f86b0&gt; (1 samples, 0.03%)</title><rect x="33.8" y="533" width="0.3" height="15.0" fill="rgb(234,60,41)" rx="2" ry="2" />
<text  x="36.80" y="543.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="38.9" y="693" width="0.3" height="15.0" fill="rgb(247,31,31)" rx="2" ry="2" />
<text  x="41.85" y="703.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000067450&gt; (2,081 samples, 52.46%)</title><rect x="40.0" y="725" width="619.0" height="15.0" fill="rgb(240,189,30)" rx="2" ry="2" />
<text  x="43.04" y="735.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000067450&gt;</text>
</g>
<g >
<title>iconv_open@@GLIBC_2.2.5&lt;0000000000023700&gt; (1 samples, 0.03%)</title><rect x="30.5" y="549" width="0.3" height="15.0" fill="rgb(234,52,16)" rx="2" ry="2" />
<text  x="33.52" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (3 samples, 0.08%)</title><rect x="1186.7" y="453" width="0.9" height="15.0" fill="rgb(244,37,16)" rx="2" ry="2" />
<text  x="1189.73" y="463.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (2 samples, 0.05%)</title><rect x="1187.6" y="741" width="0.6" height="15.0" fill="rgb(228,41,31)" rx="2" ry="2" />
<text  x="1190.62" y="751.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.03%)</title><rect x="22.8" y="517" width="0.3" height="15.0" fill="rgb(252,164,45)" rx="2" ry="2" />
<text  x="25.79" y="527.5" ></text>
</g>
<g >
<title>nouveau_object_new&lt;0000000000003380&gt; (2 samples, 0.05%)</title><rect x="23.4" y="469" width="0.6" height="15.0" fill="rgb(231,12,27)" rx="2" ry="2" />
<text  x="26.39" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.03%)</title><rect x="1145.7" y="501" width="0.3" height="15.0" fill="rgb(226,154,31)" rx="2" ry="2" />
<text  x="1148.68" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1158.8" y="645" width="0.3" height="15.0" fill="rgb(211,141,35)" rx="2" ry="2" />
<text  x="1161.77" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="688.2" y="661" width="0.3" height="15.0" fill="rgb(254,164,20)" rx="2" ry="2" />
<text  x="691.20" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (45 samples, 1.13%)</title><rect x="1164.1" y="357" width="13.4" height="15.0" fill="rgb(253,107,16)" rx="2" ry="2" />
<text  x="1167.12" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.03%)</title><rect x="1179.6" y="389" width="0.3" height="15.0" fill="rgb(243,171,51)" rx="2" ry="2" />
<text  x="1182.59" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1147.2" y="709" width="0.3" height="15.0" fill="rgb(237,166,36)" rx="2" ry="2" />
<text  x="1150.17" y="719.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (2 samples, 0.05%)</title><rect x="621.0" y="645" width="0.6" height="15.0" fill="rgb(230,171,6)" rx="2" ry="2" />
<text  x="623.97" y="655.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1131.4" y="565" width="0.3" height="15.0" fill="rgb(249,3,25)" rx="2" ry="2" />
<text  x="1134.40" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="667.4" y="565" width="0.3" height="15.0" fill="rgb(211,173,42)" rx="2" ry="2" />
<text  x="670.37" y="575.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (5 samples, 0.13%)</title><rect x="188.2" y="645" width="1.5" height="15.0" fill="rgb(224,21,0)" rx="2" ry="2" />
<text  x="191.17" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="684.3" y="645" width="0.3" height="15.0" fill="rgb(250,72,37)" rx="2" ry="2" />
<text  x="687.33" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;OBJ_Lex_triFace&gt;::construct&lt;OBJ_Lex_triFace, OBJ_Lex_triFace const&amp;&gt;(OBJ_Lex_triFace*, OBJ_Lex_triFace const&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="613" width="0.3" height="15.0" fill="rgb(246,132,5)" rx="2" ry="2" />
<text  x="1159.69" y="623.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (97 samples, 2.45%)</title><rect x="1154.9" y="709" width="28.9" height="15.0" fill="rgb(228,193,53)" rx="2" ry="2" />
<text  x="1157.90" y="719.5" >OB..</text>
</g>
<g >
<title>0x00007f4cf82a5355 (1 samples, 0.03%)</title><rect x="30.8" y="661" width="0.3" height="15.0" fill="rgb(246,202,2)" rx="2" ry="2" />
<text  x="33.82" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (44 samples, 1.11%)</title><rect x="1164.4" y="325" width="13.1" height="15.0" fill="rgb(233,166,21)" rx="2" ry="2" />
<text  x="1167.42" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="1157.0" y="629" width="0.3" height="15.0" fill="rgb(216,43,39)" rx="2" ry="2" />
<text  x="1159.98" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029750&gt; (1 samples, 0.03%)</title><rect x="1186.4" y="85" width="0.3" height="15.0" fill="rgb(224,7,47)" rx="2" ry="2" />
<text  x="1189.43" y="95.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (4 samples, 0.10%)</title><rect x="1133.5" y="581" width="1.2" height="15.0" fill="rgb(206,78,42)" rx="2" ry="2" />
<text  x="1136.48" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::getVectorLength(Vec3d const&amp;) (1 samples, 0.03%)</title><rect x="678.4" y="661" width="0.3" height="15.0" fill="rgb(220,93,48)" rx="2" ry="2" />
<text  x="681.38" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (2 samples, 0.05%)</title><rect x="29.3" y="613" width="0.6" height="15.0" fill="rgb(233,73,9)" rx="2" ry="2" />
<text  x="32.33" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.03%)</title><rect x="1152.8" y="629" width="0.3" height="15.0" fill="rgb(216,159,15)" rx="2" ry="2" />
<text  x="1155.82" y="639.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.03%)</title><rect x="38.9" y="565" width="0.3" height="15.0" fill="rgb(239,118,23)" rx="2" ry="2" />
<text  x="41.85" y="575.5" ></text>
</g>
<g >
<title>shared_ptr (3 samples, 0.08%)</title><rect x="1137.6" y="613" width="0.9" height="15.0" fill="rgb(254,106,17)" rx="2" ry="2" />
<text  x="1140.65" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.05%)</title><rect x="297.6" y="613" width="0.6" height="15.0" fill="rgb(243,84,5)" rx="2" ry="2" />
<text  x="300.64" y="623.5" ></text>
</g>
<g >
<title>brk@@GLIBC_2.2.5&lt;00000000000fc8c0&gt; (1 samples, 0.03%)</title><rect x="427.3" y="357" width="0.3" height="15.0" fill="rgb(251,136,31)" rx="2" ry="2" />
<text  x="430.33" y="367.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::OBJ_Lex_triFace(OBJ_Lex_triFace const&amp;)&lt;000000000004f050&gt; (1 samples, 0.03%)</title><rect x="1156.7" y="597" width="0.3" height="15.0" fill="rgb(206,110,17)" rx="2" ry="2" />
<text  x="1159.69" y="607.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="670.3" y="645" width="0.3" height="15.0" fill="rgb(233,134,52)" rx="2" ry="2" />
<text  x="673.35" y="655.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.03%)</title><rect x="37.7" y="629" width="0.3" height="15.0" fill="rgb(224,72,9)" rx="2" ry="2" />
<text  x="40.66" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.03%)</title><rect x="1140.3" y="501" width="0.3" height="15.0" fill="rgb(228,90,34)" rx="2" ry="2" />
<text  x="1143.33" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (18 samples, 0.45%)</title><rect x="1133.2" y="661" width="5.3" height="15.0" fill="rgb(215,59,13)" rx="2" ry="2" />
<text  x="1136.19" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (6 samples, 0.15%)</title><rect x="1161.7" y="325" width="1.8" height="15.0" fill="rgb(239,42,24)" rx="2" ry="2" />
<text  x="1164.74" y="335.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1129.6" y="501" width="0.6" height="15.0" fill="rgb(239,62,32)" rx="2" ry="2" />
<text  x="1132.62" y="511.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (4 samples, 0.10%)</title><rect x="1160.3" y="341" width="1.1" height="15.0" fill="rgb(254,47,25)" rx="2" ry="2" />
<text  x="1163.25" y="351.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (26 samples, 0.66%)</title><rect x="1138.5" y="661" width="7.8" height="15.0" fill="rgb(225,91,7)" rx="2" ry="2" />
<text  x="1141.54" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1138.5" y="613" width="0.3" height="15.0" fill="rgb(248,55,30)" rx="2" ry="2" />
<text  x="1141.54" y="623.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (6 samples, 0.15%)</title><rect x="24.0" y="565" width="1.8" height="15.0" fill="rgb(245,38,17)" rx="2" ry="2" />
<text  x="26.98" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1,374 samples, 34.64%)</title><rect x="717.6" y="677" width="408.7" height="15.0" fill="rgb(235,47,32)" rx="2" ry="2" />
<text  x="720.64" y="687.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt;</text>
</g>
<g >
<title>__shared_ptr (13 samples, 0.33%)</title><rect x="621.6" y="677" width="3.8" height="15.0" fill="rgb(212,207,42)" rx="2" ry="2" />
<text  x="624.57" y="687.5" ></text>
</g>
<g >
<title>do_realloc[inline] (1 samples, 0.03%)</title><rect x="31.4" y="549" width="0.3" height="15.0" fill="rgb(242,80,16)" rx="2" ry="2" />
<text  x="34.42" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.15%)</title><rect x="1141.5" y="613" width="1.8" height="15.0" fill="rgb(241,32,1)" rx="2" ry="2" />
<text  x="1144.51" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.03%)</title><rect x="22.8" y="405" width="0.3" height="15.0" fill="rgb(245,102,29)" rx="2" ry="2" />
<text  x="25.79" y="415.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1152.2" y="677" width="0.3" height="15.0" fill="rgb(242,101,3)" rx="2" ry="2" />
<text  x="1155.22" y="687.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.03%)</title><rect x="1148.1" y="661" width="0.3" height="15.0" fill="rgb(238,48,37)" rx="2" ry="2" />
<text  x="1151.06" y="671.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.03%)</title><rect x="37.7" y="645" width="0.3" height="15.0" fill="rgb(251,28,31)" rx="2" ry="2" />
<text  x="40.66" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.03%)</title><rect x="1146.0" y="421" width="0.3" height="15.0" fill="rgb(238,67,53)" rx="2" ry="2" />
<text  x="1148.98" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="684.0" y="693" width="0.6" height="15.0" fill="rgb(232,181,39)" rx="2" ry="2" />
<text  x="687.03" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="1151.0" y="709" width="0.6" height="15.0" fill="rgb(254,65,10)" rx="2" ry="2" />
<text  x="1154.03" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="661" width="20.8" height="15.0" fill="rgb(243,68,27)" rx="2" ry="2" />
<text  x="1162.36" y="671.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a26ee (1 samples, 0.03%)</title><rect x="34.1" y="629" width="0.3" height="15.0" fill="rgb(246,53,34)" rx="2" ry="2" />
<text  x="37.09" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (2 samples, 0.05%)</title><rect x="1159.4" y="373" width="0.6" height="15.0" fill="rgb(213,53,34)" rx="2" ry="2" />
<text  x="1162.36" y="383.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.05%)</title><rect x="647.4" y="629" width="0.6" height="15.0" fill="rgb(225,0,25)" rx="2" ry="2" />
<text  x="650.44" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="30.2" y="645" width="0.3" height="15.0" fill="rgb(224,172,48)" rx="2" ry="2" />
<text  x="33.23" y="655.5" ></text>
</g>
<g >
<title>sbrk (1 samples, 0.03%)</title><rect x="427.3" y="373" width="0.3" height="15.0" fill="rgb(252,187,0)" rx="2" ry="2" />
<text  x="430.33" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.03%)</title><rect x="1128.1" y="565" width="0.3" height="15.0" fill="rgb(239,48,21)" rx="2" ry="2" />
<text  x="1131.13" y="575.5" ></text>
</g>
<g >
<title>_Safe_sequence (3 samples, 0.08%)</title><rect x="141.8" y="661" width="0.9" height="15.0" fill="rgb(213,204,53)" rx="2" ry="2" />
<text  x="144.77" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1131.4" y="629" width="0.3" height="15.0" fill="rgb(224,100,32)" rx="2" ry="2" />
<text  x="1134.40" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="678.7" y="645" width="0.3" height="15.0" fill="rgb(253,11,15)" rx="2" ry="2" />
<text  x="681.68" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (116 samples, 2.92%)</title><rect x="837.8" y="613" width="34.5" height="15.0" fill="rgb(222,44,10)" rx="2" ry="2" />
<text  x="840.81" y="623.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="501" width="0.3" height="15.0" fill="rgb(227,199,25)" rx="2" ry="2" />
<text  x="1183.48" y="511.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (1 samples, 0.03%)</title><rect x="1158.8" y="565" width="0.3" height="15.0" fill="rgb(240,176,11)" rx="2" ry="2" />
<text  x="1161.77" y="575.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1130.5" y="565" width="0.6" height="15.0" fill="rgb(252,224,47)" rx="2" ry="2" />
<text  x="1133.51" y="575.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000023a00&gt; (3,753 samples, 94.61%)</title><rect x="38.6" y="757" width="1116.3" height="15.0" fill="rgb(237,0,2)" rx="2" ry="2" />
<text  x="41.56" y="767.5" >Engine_3D::engine_update()&lt;0000000000023a00&gt;</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="690.3" y="709" width="0.3" height="15.0" fill="rgb(221,169,51)" rx="2" ry="2" />
<text  x="693.28" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="657.0" y="677" width="0.3" height="15.0" fill="rgb(254,78,37)" rx="2" ry="2" />
<text  x="659.96" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="688.5" y="709" width="0.9" height="15.0" fill="rgb(243,122,28)" rx="2" ry="2" />
<text  x="691.49" y="719.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="1182.3" y="629" width="0.3" height="15.0" fill="rgb(234,179,32)" rx="2" ry="2" />
<text  x="1185.27" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1151.6" y="725" width="0.3" height="15.0" fill="rgb(236,50,20)" rx="2" ry="2" />
<text  x="1154.63" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.03%)</title><rect x="427.3" y="501" width="0.3" height="15.0" fill="rgb(214,119,33)" rx="2" ry="2" />
<text  x="430.33" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (3 samples, 0.08%)</title><rect x="455.9" y="661" width="0.9" height="15.0" fill="rgb(236,116,25)" rx="2" ry="2" />
<text  x="458.88" y="671.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="31.4" y="501" width="0.3" height="15.0" fill="rgb(210,10,28)" rx="2" ry="2" />
<text  x="34.42" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="614.7" y="613" width="0.3" height="15.0" fill="rgb(228,223,26)" rx="2" ry="2" />
<text  x="617.72" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (3 samples, 0.08%)</title><rect x="1186.7" y="373" width="0.9" height="15.0" fill="rgb(249,122,35)" rx="2" ry="2" />
<text  x="1189.73" y="383.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (14 samples, 0.35%)</title><rect x="1160.0" y="373" width="4.1" height="15.0" fill="rgb(212,208,19)" rx="2" ry="2" />
<text  x="1162.96" y="383.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000069f80&gt; (11 samples, 0.28%)</title><rect x="1150.7" y="741" width="3.3" height="15.0" fill="rgb(231,221,11)" rx="2" ry="2" />
<text  x="1153.74" y="751.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (4 samples, 0.10%)</title><rect x="493.1" y="629" width="1.2" height="15.0" fill="rgb(229,154,8)" rx="2" ry="2" />
<text  x="496.07" y="639.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.03%)</title><rect x="1187.6" y="661" width="0.3" height="15.0" fill="rgb(235,54,52)" rx="2" ry="2" />
<text  x="1190.62" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1149.2" y="661" width="0.3" height="15.0" fill="rgb(205,164,13)" rx="2" ry="2" />
<text  x="1152.25" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (10 samples, 0.25%)</title><rect x="1183.8" y="469" width="2.9" height="15.0" fill="rgb(208,98,32)" rx="2" ry="2" />
<text  x="1186.75" y="479.5" ></text>
</g>
<g >
<title>~TextureList (1 samples, 0.03%)</title><rect x="1180.2" y="661" width="0.3" height="15.0" fill="rgb(235,216,16)" rx="2" ry="2" />
<text  x="1183.18" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.08%)</title><rect x="681.9" y="677" width="0.9" height="15.0" fill="rgb(245,114,39)" rx="2" ry="2" />
<text  x="684.95" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (3 samples, 0.08%)</title><rect x="29.3" y="661" width="0.9" height="15.0" fill="rgb(232,57,45)" rx="2" ry="2" />
<text  x="32.33" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::TryRecordAllocationFast(unsigned long)[inline] (1 samples, 0.03%)</title><rect x="1164.4" y="277" width="0.3" height="15.0" fill="rgb(224,83,11)" rx="2" ry="2" />
<text  x="1167.42" y="287.5" ></text>
</g>
<g >
<title>int&amp; std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt;(int&amp;&amp;) (2 samples, 0.05%)</title><rect x="1156.1" y="629" width="0.6" height="15.0" fill="rgb(240,184,22)" rx="2" ry="2" />
<text  x="1159.09" y="639.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1146.0" y="581" width="0.3" height="15.0" fill="rgb(217,177,45)" rx="2" ry="2" />
<text  x="1148.98" y="591.5" ></text>
</g>
<g >
<title>Event_Scanner::scanInput()&lt;000000000002d470&gt; (2 samples, 0.05%)</title><rect x="38.9" y="725" width="0.5" height="15.0" fill="rgb(223,224,41)" rx="2" ry="2" />
<text  x="41.85" y="735.5" ></text>
</g>
<g >
<title>0x00007f4cf82d31ea (1 samples, 0.03%)</title><rect x="33.8" y="661" width="0.3" height="15.0" fill="rgb(210,229,7)" rx="2" ry="2" />
<text  x="36.80" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (2 samples, 0.05%)</title><rect x="1179.0" y="357" width="0.6" height="15.0" fill="rgb(248,187,45)" rx="2" ry="2" />
<text  x="1181.99" y="367.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (4 samples, 0.10%)</title><rect x="119.5" y="597" width="1.2" height="15.0" fill="rgb(251,9,14)" rx="2" ry="2" />
<text  x="122.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_node(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.05%)</title><rect x="1159.4" y="453" width="0.6" height="15.0" fill="rgb(216,51,24)" rx="2" ry="2" />
<text  x="1162.36" y="463.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (7 samples, 0.18%)</title><rect x="35.6" y="677" width="2.1" height="15.0" fill="rgb(227,189,17)" rx="2" ry="2" />
<text  x="38.58" y="687.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.38%)</title><rect x="1128.7" y="645" width="4.5" height="15.0" fill="rgb(218,183,45)" rx="2" ry="2" />
<text  x="1131.72" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (2 samples, 0.05%)</title><rect x="1129.6" y="517" width="0.6" height="15.0" fill="rgb(245,131,21)" rx="2" ry="2" />
<text  x="1132.62" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (19 samples, 0.48%)</title><rect x="487.4" y="629" width="5.7" height="15.0" fill="rgb(209,36,38)" rx="2" ry="2" />
<text  x="490.41" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;OBJ_Lex_textureCoord, std::allocator&lt;OBJ_Lex_textureCoord&gt; &gt;, std::__cxx1998::vector&lt;OBJ_Lex_textureCoord, std::allocator&lt;OBJ_Lex_textureCoord&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.03%)</title><rect x="1156.7" y="661" width="0.3" height="15.0" fill="rgb(214,207,7)" rx="2" ry="2" />
<text  x="1159.69" y="671.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (61 samples, 1.54%)</title><rect x="1128.1" y="693" width="18.2" height="15.0" fill="rgb(210,143,39)" rx="2" ry="2" />
<text  x="1131.13" y="703.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1146.0" y="469" width="0.3" height="15.0" fill="rgb(223,179,29)" rx="2" ry="2" />
<text  x="1148.98" y="479.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1147.8" y="677" width="0.3" height="15.0" fill="rgb(235,62,40)" rx="2" ry="2" />
<text  x="1150.76" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="673.6" y="693" width="0.3" height="15.0" fill="rgb(208,191,17)" rx="2" ry="2" />
<text  x="676.62" y="703.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (2 samples, 0.05%)</title><rect x="36.8" y="597" width="0.6" height="15.0" fill="rgb(242,114,41)" rx="2" ry="2" />
<text  x="39.77" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.03%)</title><rect x="1135.0" y="597" width="0.3" height="15.0" fill="rgb(232,24,17)" rx="2" ry="2" />
<text  x="1137.97" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (4 samples, 0.10%)</title><rect x="686.4" y="661" width="1.2" height="15.0" fill="rgb(217,48,14)" rx="2" ry="2" />
<text  x="689.41" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (12 samples, 0.30%)</title><rect x="641.8" y="629" width="3.6" height="15.0" fill="rgb(208,87,27)" rx="2" ry="2" />
<text  x="644.79" y="639.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (6 samples, 0.15%)</title><rect x="24.0" y="501" width="1.8" height="15.0" fill="rgb(251,199,17)" rx="2" ry="2" />
<text  x="26.98" y="511.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="24.0" y="309" width="0.3" height="15.0" fill="rgb(218,182,19)" rx="2" ry="2" />
<text  x="26.98" y="319.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (10 samples, 0.25%)</title><rect x="1183.8" y="453" width="2.9" height="15.0" fill="rgb(208,220,18)" rx="2" ry="2" />
<text  x="1186.75" y="463.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="549" width="0.3" height="15.0" fill="rgb(231,9,53)" rx="2" ry="2" />
<text  x="1183.48" y="559.5" ></text>
</g>
<g >
<title>0x00007f9f3a79d355 (1 samples, 0.03%)</title><rect x="32.0" y="629" width="0.3" height="15.0" fill="rgb(246,188,26)" rx="2" ry="2" />
<text  x="35.01" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (3 samples, 0.08%)</title><rect x="1149.8" y="613" width="0.9" height="15.0" fill="rgb(223,79,34)" rx="2" ry="2" />
<text  x="1152.84" y="623.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5f9d (1 samples, 0.03%)</title><rect x="31.4" y="645" width="0.3" height="15.0" fill="rgb(254,138,33)" rx="2" ry="2" />
<text  x="34.42" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.05%)</title><rect x="147.4" y="661" width="0.6" height="15.0" fill="rgb(229,126,6)" rx="2" ry="2" />
<text  x="150.42" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::Push(void*)[inline] (1 samples, 0.03%)</title><rect x="672.1" y="517" width="0.3" height="15.0" fill="rgb(227,66,31)" rx="2" ry="2" />
<text  x="675.13" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1152.2" y="709" width="0.6" height="15.0" fill="rgb(211,16,8)" rx="2" ry="2" />
<text  x="1155.22" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.03%)</title><rect x="29.6" y="517" width="0.3" height="15.0" fill="rgb(221,111,15)" rx="2" ry="2" />
<text  x="32.63" y="527.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.03%)</title><rect x="32.6" y="597" width="0.3" height="15.0" fill="rgb(244,153,10)" rx="2" ry="2" />
<text  x="35.61" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="668.6" y="677" width="0.3" height="15.0" fill="rgb(225,75,6)" rx="2" ry="2" />
<text  x="671.56" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1141.2" y="549" width="0.3" height="15.0" fill="rgb(240,128,42)" rx="2" ry="2" />
<text  x="1144.22" y="559.5" ></text>
</g>
<g >
<title>vector (10 samples, 0.25%)</title><rect x="1183.8" y="645" width="2.9" height="15.0" fill="rgb(240,15,2)" rx="2" ry="2" />
<text  x="1186.75" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1145.4" y="533" width="0.3" height="15.0" fill="rgb(216,76,5)" rx="2" ry="2" />
<text  x="1148.38" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (171 samples, 4.31%)</title><rect x="546.6" y="645" width="50.9" height="15.0" fill="rgb(238,178,28)" rx="2" ry="2" />
<text  x="549.61" y="655.5" >std::..</text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (2 samples, 0.05%)</title><rect x="664.7" y="645" width="0.6" height="15.0" fill="rgb(245,168,13)" rx="2" ry="2" />
<text  x="667.70" y="655.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (21 samples, 0.53%)</title><rect x="1120.1" y="597" width="6.2" height="15.0" fill="rgb(217,202,17)" rx="2" ry="2" />
<text  x="1123.10" y="607.5" ></text>
</g>
<g >
<title>0x00007f9f3a79df9d (1 samples, 0.03%)</title><rect x="32.3" y="645" width="0.3" height="15.0" fill="rgb(209,220,7)" rx="2" ry="2" />
<text  x="35.31" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="690.0" y="629" width="0.3" height="15.0" fill="rgb(222,148,0)" rx="2" ry="2" />
<text  x="692.98" y="639.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="29.9" y="613" width="0.3" height="15.0" fill="rgb(251,53,50)" rx="2" ry="2" />
<text  x="32.93" y="623.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0b4e (1 samples, 0.03%)</title><rect x="34.7" y="613" width="0.3" height="15.0" fill="rgb(220,91,5)" rx="2" ry="2" />
<text  x="37.69" y="623.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.03%)</title><rect x="658.7" y="709" width="0.3" height="15.0" fill="rgb(224,205,48)" rx="2" ry="2" />
<text  x="661.75" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (3 samples, 0.08%)</title><rect x="1186.7" y="309" width="0.9" height="15.0" fill="rgb(214,41,28)" rx="2" ry="2" />
<text  x="1189.73" y="319.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047d40&gt; (518 samples, 13.06%)</title><rect x="122.4" y="677" width="154.1" height="15.0" fill="rgb(225,137,51)" rx="2" ry="2" />
<text  x="125.44" y="687.5" >TexturePNG::getPixe..</text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (17 samples, 0.43%)</title><rect x="1128.1" y="677" width="5.1" height="15.0" fill="rgb(213,180,48)" rx="2" ry="2" />
<text  x="1131.13" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (10 samples, 0.25%)</title><rect x="1183.8" y="293" width="2.9" height="15.0" fill="rgb(250,38,41)" rx="2" ry="2" />
<text  x="1186.75" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="565" width="0.3" height="15.0" fill="rgb(213,125,21)" rx="2" ry="2" />
<text  x="1183.48" y="575.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.03%)</title><rect x="666.8" y="693" width="0.3" height="15.0" fill="rgb(206,174,34)" rx="2" ry="2" />
<text  x="669.78" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="670.3" y="661" width="0.3" height="15.0" fill="rgb(209,198,4)" rx="2" ry="2" />
<text  x="673.35" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.03%)</title><rect x="1142.4" y="597" width="0.3" height="15.0" fill="rgb(233,205,28)" rx="2" ry="2" />
<text  x="1145.41" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.03%)</title><rect x="1141.2" y="533" width="0.3" height="15.0" fill="rgb(212,124,19)" rx="2" ry="2" />
<text  x="1144.22" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.03%)</title><rect x="671.2" y="613" width="0.3" height="15.0" fill="rgb(248,90,20)" rx="2" ry="2" />
<text  x="674.24" y="623.5" ></text>
</g>
<g >
<title>~vector (3 samples, 0.08%)</title><rect x="1179.0" y="405" width="0.9" height="15.0" fill="rgb(209,11,17)" rx="2" ry="2" />
<text  x="1181.99" y="415.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="30.2" y="613" width="0.3" height="15.0" fill="rgb(229,132,52)" rx="2" ry="2" />
<text  x="33.23" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1151.6" y="677" width="0.3" height="15.0" fill="rgb(211,21,12)" rx="2" ry="2" />
<text  x="1154.63" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1149.5" y="581" width="0.3" height="15.0" fill="rgb(210,57,11)" rx="2" ry="2" />
<text  x="1152.55" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1132.3" y="581" width="0.3" height="15.0" fill="rgb(227,226,30)" rx="2" ry="2" />
<text  x="1135.29" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.03%)</title><rect x="1158.5" y="645" width="0.3" height="15.0" fill="rgb(243,209,28)" rx="2" ry="2" />
<text  x="1161.47" y="655.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1130.5" y="549" width="0.3" height="15.0" fill="rgb(244,134,17)" rx="2" ry="2" />
<text  x="1133.51" y="559.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (137 samples, 3.45%)</title><rect x="505.9" y="645" width="40.7" height="15.0" fill="rgb(206,135,42)" rx="2" ry="2" />
<text  x="508.86" y="655.5" >_Pa..</text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (2 samples, 0.05%)</title><rect x="688.8" y="677" width="0.6" height="15.0" fill="rgb(232,194,36)" rx="2" ry="2" />
<text  x="691.79" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.08%)</title><rect x="1186.7" y="581" width="0.9" height="15.0" fill="rgb(242,8,51)" rx="2" ry="2" />
<text  x="1189.73" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="667.1" y="677" width="0.6" height="15.0" fill="rgb(205,145,5)" rx="2" ry="2" />
<text  x="670.08" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.03%)</title><rect x="690.0" y="693" width="0.3" height="15.0" fill="rgb(235,218,29)" rx="2" ry="2" />
<text  x="692.98" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1142.1" y="549" width="0.3" height="15.0" fill="rgb(250,27,46)" rx="2" ry="2" />
<text  x="1145.11" y="559.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (8 samples, 0.20%)</title><rect x="500.8" y="645" width="2.4" height="15.0" fill="rgb(240,2,41)" rx="2" ry="2" />
<text  x="503.80" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (3 samples, 0.08%)</title><rect x="681.9" y="693" width="0.9" height="15.0" fill="rgb(242,110,36)" rx="2" ry="2" />
<text  x="684.95" y="703.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (122 samples, 3.08%)</title><rect x="192.3" y="645" width="36.3" height="15.0" fill="rgb(225,162,25)" rx="2" ry="2" />
<text  x="195.34" y="655.5" >_Pa..</text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (55 samples, 1.39%)</title><rect x="599.9" y="677" width="16.3" height="15.0" fill="rgb(206,29,17)" rx="2" ry="2" />
<text  x="602.85" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (4 samples, 0.10%)</title><rect x="119.5" y="533" width="1.2" height="15.0" fill="rgb(224,68,51)" rx="2" ry="2" />
<text  x="122.46" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;::insert_or_assign&lt;TexturePNG&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, TexturePNG&amp;) (3 samples, 0.08%)</title><rect x="1160.6" y="325" width="0.8" height="15.0" fill="rgb(245,90,9)" rx="2" ry="2" />
<text  x="1163.55" y="335.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (26 samples, 0.66%)</title><rect x="30.8" y="725" width="7.8" height="15.0" fill="rgb(223,119,37)" rx="2" ry="2" />
<text  x="33.82" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end() (3 samples, 0.08%)</title><rect x="1182.9" y="677" width="0.9" height="15.0" fill="rgb(253,114,53)" rx="2" ry="2" />
<text  x="1185.86" y="687.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::malloc_oom&gt;[inline] (1 samples, 0.03%)</title><rect x="38.3" y="677" width="0.3" height="15.0" fill="rgb(220,5,1)" rx="2" ry="2" />
<text  x="41.26" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="485" width="0.3" height="15.0" fill="rgb(222,136,50)" rx="2" ry="2" />
<text  x="1159.69" y="495.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode) (2 samples, 0.05%)</title><rect x="1181.4" y="629" width="0.6" height="15.0" fill="rgb(215,229,35)" rx="2" ry="2" />
<text  x="1184.37" y="639.5" ></text>
</g>
<g >
<title>Vec2d::setX(float const&amp;)&lt;0000000000080020&gt; (1 samples, 0.03%)</title><rect x="665.0" y="629" width="0.3" height="15.0" fill="rgb(217,163,7)" rx="2" ry="2" />
<text  x="667.99" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.03%)</title><rect x="1184.6" y="149" width="0.3" height="15.0" fill="rgb(224,221,43)" rx="2" ry="2" />
<text  x="1187.65" y="159.5" ></text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.03%)</title><rect x="672.1" y="549" width="0.3" height="15.0" fill="rgb(238,106,5)" rx="2" ry="2" />
<text  x="675.13" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::_Safe_sequence(__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="1179.0" y="389" width="0.6" height="15.0" fill="rgb(239,182,36)" rx="2" ry="2" />
<text  x="1181.99" y="399.5" ></text>
</g>
<g >
<title>~basic_string (2 samples, 0.05%)</title><rect x="656.1" y="677" width="0.6" height="15.0" fill="rgb(252,228,2)" rx="2" ry="2" />
<text  x="659.07" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::Sampler::TryRecordAllocationFast(unsigned long)[inline] (1 samples, 0.03%)</title><rect x="1164.4" y="261" width="0.3" height="15.0" fill="rgb(213,135,1)" rx="2" ry="2" />
<text  x="1167.42" y="271.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.08%)</title><rect x="1186.7" y="565" width="0.9" height="15.0" fill="rgb(229,145,22)" rx="2" ry="2" />
<text  x="1189.73" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1143.9" y="565" width="0.3" height="15.0" fill="rgb(216,46,47)" rx="2" ry="2" />
<text  x="1146.89" y="575.5" ></text>
</g>
<g >
<title>readdir64 (1 samples, 0.03%)</title><rect x="31.1" y="645" width="0.3" height="15.0" fill="rgb(220,85,35)" rx="2" ry="2" />
<text  x="34.12" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="1149.8" y="661" width="0.9" height="15.0" fill="rgb(209,120,44)" rx="2" ry="2" />
<text  x="1152.84" y="671.5" ></text>
</g>
<g >
<title>~__shared_count (8 samples, 0.20%)</title><rect x="648.9" y="677" width="2.4" height="15.0" fill="rgb(210,48,12)" rx="2" ry="2" />
<text  x="651.93" y="687.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (131 samples, 3.30%)</title><rect x="558.5" y="629" width="39.0" height="15.0" fill="rgb(234,153,49)" rx="2" ry="2" />
<text  x="561.51" y="639.5" >_Pa..</text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000082450&gt; (4 samples, 0.10%)</title><rect x="678.1" y="693" width="1.2" height="15.0" fill="rgb(229,219,12)" rx="2" ry="2" />
<text  x="681.08" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000064250&gt; (1,042 samples, 26.27%)</title><rect x="342.3" y="693" width="309.9" height="15.0" fill="rgb(221,57,34)" rx="2" ry="2" />
<text  x="345.26" y="703.5" >TexturemapRasterizer::drawFlatBottomTri(T..</text>
</g>
<g >
<title>pa_xrealloc@@PULSE_0&lt;0000000000036770&gt; (1 samples, 0.03%)</title><rect x="30.5" y="565" width="0.3" height="15.0" fill="rgb(218,156,30)" rx="2" ry="2" />
<text  x="33.52" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (3 samples, 0.08%)</title><rect x="669.5" y="645" width="0.8" height="15.0" fill="rgb(235,119,35)" rx="2" ry="2" />
<text  x="672.46" y="655.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.03%)</title><rect x="1128.4" y="613" width="0.3" height="15.0" fill="rgb(250,155,53)" rx="2" ry="2" />
<text  x="1131.43" y="623.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;0000000000053620&gt; (9 samples, 0.23%)</title><rect x="1181.1" y="693" width="2.7" height="15.0" fill="rgb(240,224,46)" rx="2" ry="2" />
<text  x="1184.08" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.03%)</title><rect x="28.1" y="533" width="0.3" height="15.0" fill="rgb(235,145,46)" rx="2" ry="2" />
<text  x="31.14" y="543.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,463 samples, 36.88%)</title><rect x="691.2" y="709" width="435.1" height="15.0" fill="rgb(254,44,36)" rx="2" ry="2" />
<text  x="694.17" y="719.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1149.5" y="629" width="0.3" height="15.0" fill="rgb(216,22,7)" rx="2" ry="2" />
<text  x="1152.55" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (26 samples, 0.66%)</title><rect x="22.5" y="693" width="7.7" height="15.0" fill="rgb(235,209,2)" rx="2" ry="2" />
<text  x="25.49" y="703.5" ></text>
</g>
<g >
<title>IAction_Updater::numberOfActiveCommands(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt; const&amp;) const&lt;000000000000db30&gt; (1 samples, 0.03%)</title><rect x="38.6" y="725" width="0.3" height="15.0" fill="rgb(249,161,4)" rx="2" ry="2" />
<text  x="41.56" y="735.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (24 samples, 0.60%)</title><rect x="1080.5" y="597" width="7.2" height="15.0" fill="rgb(213,207,8)" rx="2" ry="2" />
<text  x="1083.54" y="607.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (19 samples, 0.48%)</title><rect x="22.8" y="629" width="5.6" height="15.0" fill="rgb(226,75,17)" rx="2" ry="2" />
<text  x="25.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="1146.0" y="453" width="0.3" height="15.0" fill="rgb(250,12,18)" rx="2" ry="2" />
<text  x="1148.98" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (346 samples, 8.72%)</title><rect x="494.6" y="661" width="102.9" height="15.0" fill="rgb(228,218,13)" rx="2" ry="2" />
<text  x="497.55" y="671.5" >std::__debug..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;OBJ_Datum, std::allocator&lt;OBJ_Datum&gt; &gt;::push_back(OBJ_Datum const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="661" width="0.3" height="15.0" fill="rgb(233,51,16)" rx="2" ry="2" />
<text  x="1185.56" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.03%)</title><rect x="29.6" y="565" width="0.3" height="15.0" fill="rgb(247,95,47)" rx="2" ry="2" />
<text  x="32.63" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (27 samples, 0.68%)</title><rect x="22.5" y="725" width="8.0" height="15.0" fill="rgb(236,25,0)" rx="2" ry="2" />
<text  x="25.49" y="735.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="613" width="0.3" height="15.0" fill="rgb(210,180,26)" rx="2" ry="2" />
<text  x="1183.48" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (8 samples, 0.20%)</title><rect x="1161.4" y="341" width="2.4" height="15.0" fill="rgb(221,60,1)" rx="2" ry="2" />
<text  x="1164.44" y="351.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1145.1" y="565" width="0.3" height="15.0" fill="rgb(240,25,3)" rx="2" ry="2" />
<text  x="1148.08" y="575.5" ></text>
</g>
<g >
<title>0x00007fa193915791 (1 samples, 0.03%)</title><rect x="34.4" y="661" width="0.3" height="15.0" fill="rgb(233,155,12)" rx="2" ry="2" />
<text  x="37.39" y="671.5" ></text>
</g>
<g >
<title>_Guard (1 samples, 0.03%)</title><rect x="1180.5" y="485" width="0.3" height="15.0" fill="rgb(220,119,22)" rx="2" ry="2" />
<text  x="1183.48" y="495.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;OBJ_Datum&gt; &gt;::construct&lt;OBJ_Datum, OBJ_Datum const&amp;&gt;(std::allocator&lt;OBJ_Datum&gt;&amp;, OBJ_Datum*, OBJ_Datum const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="629" width="0.3" height="15.0" fill="rgb(246,148,45)" rx="2" ry="2" />
<text  x="1185.56" y="639.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.03%)</title><rect x="616.2" y="677" width="0.3" height="15.0" fill="rgb(248,146,19)" rx="2" ry="2" />
<text  x="619.21" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.08%)</title><rect x="1147.5" y="693" width="0.9" height="15.0" fill="rgb(245,36,22)" rx="2" ry="2" />
<text  x="1150.46" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="28.7" y="501" width="0.3" height="15.0" fill="rgb(221,162,7)" rx="2" ry="2" />
<text  x="31.74" y="511.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (3 samples, 0.08%)</title><rect x="23.1" y="501" width="0.9" height="15.0" fill="rgb(224,110,2)" rx="2" ry="2" />
<text  x="26.09" y="511.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5355 (1 samples, 0.03%)</title><rect x="31.4" y="613" width="0.3" height="15.0" fill="rgb(253,107,24)" rx="2" ry="2" />
<text  x="34.42" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::ByteSizeForClass(unsigned int)[inline] (1 samples, 0.03%)</title><rect x="38.3" y="661" width="0.3" height="15.0" fill="rgb(231,113,8)" rx="2" ry="2" />
<text  x="41.26" y="671.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1147.8" y="661" width="0.3" height="15.0" fill="rgb(210,109,13)" rx="2" ry="2" />
<text  x="1150.76" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1138.5" y="581" width="0.3" height="15.0" fill="rgb(253,132,54)" rx="2" ry="2" />
<text  x="1141.54" y="591.5" ></text>
</g>
<g >
<title>drmIoctl&lt;0000000000007300&gt; (1 samples, 0.03%)</title><rect x="22.5" y="469" width="0.3" height="15.0" fill="rgb(232,156,14)" rx="2" ry="2" />
<text  x="25.49" y="479.5" ></text>
</g>
<g >
<title>0x00007f9f3a79d355 (1 samples, 0.03%)</title><rect x="31.7" y="661" width="0.3" height="15.0" fill="rgb(227,222,22)" rx="2" ry="2" />
<text  x="34.71" y="671.5" ></text>
</g>
<g >
<title>~basic_string (1 samples, 0.03%)</title><rect x="662.0" y="661" width="0.3" height="15.0" fill="rgb(248,157,14)" rx="2" ry="2" />
<text  x="665.02" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.03%)</title><rect x="22.8" y="421" width="0.3" height="15.0" fill="rgb(245,179,15)" rx="2" ry="2" />
<text  x="25.79" y="431.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a2b56 (1 samples, 0.03%)</title><rect x="34.1" y="645" width="0.3" height="15.0" fill="rgb(228,10,12)" rx="2" ry="2" />
<text  x="37.09" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1142.4" y="453" width="0.3" height="15.0" fill="rgb(213,158,31)" rx="2" ry="2" />
<text  x="1145.41" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1127.8" y="709" width="0.3" height="15.0" fill="rgb(230,160,30)" rx="2" ry="2" />
<text  x="1130.83" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="658.2" y="645" width="0.2" height="15.0" fill="rgb(242,187,5)" rx="2" ry="2" />
<text  x="661.15" y="655.5" ></text>
</g>
<g >
<title>0x00007f9f3a79d355 (1 samples, 0.03%)</title><rect x="32.3" y="613" width="0.3" height="15.0" fill="rgb(242,23,44)" rx="2" ry="2" />
<text  x="35.31" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1154.6" y="597" width="0.3" height="15.0" fill="rgb(236,196,25)" rx="2" ry="2" />
<text  x="1157.60" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1152.2" y="693" width="0.6" height="15.0" fill="rgb(244,199,42)" rx="2" ry="2" />
<text  x="1155.22" y="703.5" ></text>
</g>
<g >
<title>__gconv_get_alias_db@@GLIBC_PRIVATE&lt;0000000000024030&gt; (1 samples, 0.03%)</title><rect x="30.5" y="517" width="0.3" height="15.0" fill="rgb(242,87,50)" rx="2" ry="2" />
<text  x="33.52" y="527.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1159.1" y="645" width="0.3" height="15.0" fill="rgb(242,74,20)" rx="2" ry="2" />
<text  x="1162.06" y="655.5" ></text>
</g>
<g >
<title>~__scoped_lock (1 samples, 0.03%)</title><rect x="1178.1" y="341" width="0.3" height="15.0" fill="rgb(212,26,18)" rx="2" ry="2" />
<text  x="1181.10" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="680.8" y="581" width="0.3" height="15.0" fill="rgb(237,102,54)" rx="2" ry="2" />
<text  x="683.76" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (10 samples, 0.25%)</title><rect x="1183.8" y="661" width="2.9" height="15.0" fill="rgb(233,97,3)" rx="2" ry="2" />
<text  x="1186.75" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="678.7" y="677" width="0.3" height="15.0" fill="rgb(231,77,9)" rx="2" ry="2" />
<text  x="681.68" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1143.9" y="549" width="0.3" height="15.0" fill="rgb(238,197,45)" rx="2" ry="2" />
<text  x="1146.89" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.03%)</title><rect x="1131.1" y="581" width="0.3" height="15.0" fill="rgb(238,189,44)" rx="2" ry="2" />
<text  x="1134.10" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (1 samples, 0.03%)</title><rect x="686.7" y="629" width="0.3" height="15.0" fill="rgb(223,81,2)" rx="2" ry="2" />
<text  x="689.71" y="639.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.03%)</title><rect x="1180.8" y="581" width="0.3" height="15.0" fill="rgb(235,183,8)" rx="2" ry="2" />
<text  x="1183.78" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (42 samples, 1.06%)</title><rect x="1164.7" y="261" width="12.5" height="15.0" fill="rgb(249,197,27)" rx="2" ry="2" />
<text  x="1167.72" y="271.5" ></text>
</g>
<g >
<title>0x00007fa193914b56 (2 samples, 0.05%)</title><rect x="32.6" y="677" width="0.6" height="15.0" fill="rgb(241,147,54)" rx="2" ry="2" />
<text  x="35.61" y="687.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="657.6" y="693" width="0.3" height="15.0" fill="rgb(217,79,40)" rx="2" ry="2" />
<text  x="660.56" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="494.3" y="645" width="0.3" height="15.0" fill="rgb(241,0,20)" rx="2" ry="2" />
<text  x="497.26" y="655.5" ></text>
</g>
<g >
<title>DefaultSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long)&lt;00000000000243b0&gt; (1 samples, 0.03%)</title><rect x="427.3" y="421" width="0.3" height="15.0" fill="rgb(216,93,43)" rx="2" ry="2" />
<text  x="430.33" y="431.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (6 samples, 0.15%)</title><rect x="24.0" y="533" width="1.8" height="15.0" fill="rgb(234,109,45)" rx="2" ry="2" />
<text  x="26.98" y="543.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="671.2" y="565" width="0.3" height="15.0" fill="rgb(251,12,52)" rx="2" ry="2" />
<text  x="674.24" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000258c0&gt; (1 samples, 0.03%)</title><rect x="1186.1" y="69" width="0.3" height="15.0" fill="rgb(209,205,7)" rx="2" ry="2" />
<text  x="1189.13" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="1182.6" y="517" width="0.3" height="15.0" fill="rgb(222,199,45)" rx="2" ry="2" />
<text  x="1185.56" y="527.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="1154.0" y="661" width="0.9" height="15.0" fill="rgb(211,219,39)" rx="2" ry="2" />
<text  x="1157.01" y="671.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003aca0&gt; (4 samples, 0.10%)</title><rect x="1154.9" y="693" width="1.2" height="15.0" fill="rgb(208,174,3)" rx="2" ry="2" />
<text  x="1157.90" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (3 samples, 0.08%)</title><rect x="1181.1" y="677" width="0.9" height="15.0" fill="rgb(250,80,46)" rx="2" ry="2" />
<text  x="1184.08" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="675.1" y="693" width="0.3" height="15.0" fill="rgb(253,15,54)" rx="2" ry="2" />
<text  x="678.11" y="703.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="660.8" y="677" width="0.3" height="15.0" fill="rgb(237,226,36)" rx="2" ry="2" />
<text  x="663.83" y="687.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator() (1 samples, 0.03%)</title><rect x="1157.3" y="629" width="0.3" height="15.0" fill="rgb(243,167,15)" rx="2" ry="2" />
<text  x="1160.28" y="639.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.03%)</title><rect x="1182.3" y="661" width="0.3" height="15.0" fill="rgb(241,215,26)" rx="2" ry="2" />
<text  x="1185.27" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.05%)</title><rect x="687.9" y="677" width="0.6" height="15.0" fill="rgb(210,14,20)" rx="2" ry="2" />
<text  x="690.90" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (2 samples, 0.05%)</title><rect x="1137.1" y="613" width="0.5" height="15.0" fill="rgb(207,217,24)" rx="2" ry="2" />
<text  x="1140.05" y="623.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003d670&gt; (3 samples, 0.08%)</title><rect x="428.2" y="677" width="0.9" height="15.0" fill="rgb(219,26,31)" rx="2" ry="2" />
<text  x="431.22" y="687.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="456.2" y="645" width="0.3" height="15.0" fill="rgb(210,74,10)" rx="2" ry="2" />
<text  x="459.18" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="549" width="0.3" height="15.0" fill="rgb(209,18,19)" rx="2" ry="2" />
<text  x="1152.84" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (5 samples, 0.13%)</title><rect x="1133.5" y="629" width="1.5" height="15.0" fill="rgb(230,176,4)" rx="2" ry="2" />
<text  x="1136.48" y="639.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="687.3" y="597" width="0.3" height="15.0" fill="rgb(211,124,34)" rx="2" ry="2" />
<text  x="690.30" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (5 samples, 0.13%)</title><rect x="1133.5" y="613" width="1.5" height="15.0" fill="rgb(214,83,17)" rx="2" ry="2" />
<text  x="1136.48" y="623.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.03%)</title><rect x="22.8" y="533" width="0.3" height="15.0" fill="rgb(254,114,34)" rx="2" ry="2" />
<text  x="25.79" y="543.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (19 samples, 0.48%)</title><rect x="22.8" y="581" width="5.6" height="15.0" fill="rgb(217,33,47)" rx="2" ry="2" />
<text  x="25.79" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (3 samples, 0.08%)</title><rect x="1154.0" y="677" width="0.9" height="15.0" fill="rgb(226,172,10)" rx="2" ry="2" />
<text  x="1157.01" y="687.5" ></text>
</g>
<g >
<title>0x00007f4cf82aaab0 (1 samples, 0.03%)</title><rect x="31.1" y="677" width="0.3" height="15.0" fill="rgb(205,89,27)" rx="2" ry="2" />
<text  x="34.12" y="687.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.05%)</title><rect x="1128.1" y="661" width="0.6" height="15.0" fill="rgb(221,219,43)" rx="2" ry="2" />
<text  x="1131.13" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (68 samples, 1.71%)</title><rect x="1160.0" y="453" width="20.2" height="15.0" fill="rgb(217,85,11)" rx="2" ry="2" />
<text  x="1162.96" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1145.1" y="517" width="0.3" height="15.0" fill="rgb(237,154,17)" rx="2" ry="2" />
<text  x="1148.08" y="527.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1141.2" y="629" width="0.3" height="15.0" fill="rgb(205,65,47)" rx="2" ry="2" />
<text  x="1144.22" y="639.5" ></text>
</g>
<g >
<title>0x00007ff97d90035a (1 samples, 0.03%)</title><rect x="34.7" y="581" width="0.3" height="15.0" fill="rgb(250,157,26)" rx="2" ry="2" />
<text  x="37.69" y="591.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (10 samples, 0.25%)</title><rect x="1183.8" y="741" width="2.9" height="15.0" fill="rgb(243,95,7)" rx="2" ry="2" />
<text  x="1186.75" y="751.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1131.4" y="533" width="0.3" height="15.0" fill="rgb(233,94,40)" rx="2" ry="2" />
<text  x="1134.40" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.03%)</title><rect x="1146.0" y="533" width="0.3" height="15.0" fill="rgb(214,156,0)" rx="2" ry="2" />
<text  x="1148.98" y="543.5" ></text>
</g>
<g >
<title>drmCloseBufferHandle&lt;000000000000ad50&gt; (1 samples, 0.03%)</title><rect x="22.5" y="485" width="0.3" height="15.0" fill="rgb(249,25,34)" rx="2" ry="2" />
<text  x="25.49" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1148.1" y="677" width="0.3" height="15.0" fill="rgb(218,217,8)" rx="2" ry="2" />
<text  x="1151.06" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (10 samples, 0.25%)</title><rect x="1183.8" y="629" width="2.9" height="15.0" fill="rgb(217,219,35)" rx="2" ry="2" />
<text  x="1186.75" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (79 samples, 1.99%)</title><rect x="314.9" y="661" width="23.5" height="15.0" fill="rgb(229,85,25)" rx="2" ry="2" />
<text  x="317.89" y="671.5" >s..</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="597" width="20.8" height="15.0" fill="rgb(205,221,47)" rx="2" ry="2" />
<text  x="1162.36" y="607.5" ></text>
</g>
<g >
<title>pthread_mutexattr_settype@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="30.5" y="501" width="0.3" height="15.0" fill="rgb(254,2,10)" rx="2" ry="2" />
<text  x="33.52" y="511.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.03%)</title><rect x="656.7" y="693" width="0.3" height="15.0" fill="rgb(241,37,18)" rx="2" ry="2" />
<text  x="659.66" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.03%)</title><rect x="1143.0" y="533" width="0.3" height="15.0" fill="rgb(213,138,36)" rx="2" ry="2" />
<text  x="1146.00" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="1140.3" y="485" width="0.3" height="15.0" fill="rgb(210,181,8)" rx="2" ry="2" />
<text  x="1143.33" y="495.5" ></text>
</g>
<g >
<title>0x00007ff97d8f6791 (1 samples, 0.03%)</title><rect x="33.5" y="693" width="0.3" height="15.0" fill="rgb(230,8,37)" rx="2" ry="2" />
<text  x="36.50" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1151.6" y="709" width="0.3" height="15.0" fill="rgb(216,21,25)" rx="2" ry="2" />
<text  x="1154.63" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (3 samples, 0.08%)</title><rect x="27.5" y="549" width="0.9" height="15.0" fill="rgb(210,198,52)" rx="2" ry="2" />
<text  x="30.55" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (4 samples, 0.10%)</title><rect x="645.4" y="629" width="1.2" height="15.0" fill="rgb(230,18,4)" rx="2" ry="2" />
<text  x="648.36" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.05%)</title><rect x="1137.1" y="597" width="0.5" height="15.0" fill="rgb(242,186,52)" rx="2" ry="2" />
<text  x="1140.05" y="607.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.03%)</title><rect x="658.4" y="645" width="0.3" height="15.0" fill="rgb(237,182,44)" rx="2" ry="2" />
<text  x="661.45" y="655.5" ></text>
</g>
<g >
<title>pa_context_new_with_proplist@@PULSE_0&lt;0000000000011550&gt; (1 samples, 0.03%)</title><rect x="30.5" y="677" width="0.3" height="15.0" fill="rgb(210,90,43)" rx="2" ry="2" />
<text  x="33.52" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029750&gt; (1 samples, 0.03%)</title><rect x="872.0" y="565" width="0.3" height="15.0" fill="rgb(212,181,38)" rx="2" ry="2" />
<text  x="875.02" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.03%)</title><rect x="1143.0" y="549" width="0.3" height="15.0" fill="rgb(215,2,25)" rx="2" ry="2" />
<text  x="1146.00" y="559.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="427.3" y="581" width="0.3" height="15.0" fill="rgb(245,150,1)" rx="2" ry="2" />
<text  x="430.33" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (10 samples, 0.25%)</title><rect x="1183.8" y="261" width="2.9" height="15.0" fill="rgb(234,88,35)" rx="2" ry="2" />
<text  x="1186.75" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1148.4" y="533" width="0.3" height="15.0" fill="rgb(240,136,15)" rx="2" ry="2" />
<text  x="1151.36" y="543.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (6 samples, 0.15%)</title><rect x="24.0" y="453" width="1.8" height="15.0" fill="rgb(252,115,13)" rx="2" ry="2" />
<text  x="26.98" y="463.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="1145.1" y="549" width="0.3" height="15.0" fill="rgb(251,31,8)" rx="2" ry="2" />
<text  x="1148.08" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="677.2" y="677" width="0.3" height="15.0" fill="rgb(249,142,31)" rx="2" ry="2" />
<text  x="680.19" y="687.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.03%)</title><rect x="427.3" y="613" width="0.3" height="15.0" fill="rgb(248,145,47)" rx="2" ry="2" />
<text  x="430.33" y="623.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.03%)</title><rect x="36.2" y="613" width="0.3" height="15.0" fill="rgb(206,163,21)" rx="2" ry="2" />
<text  x="39.18" y="623.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (5 samples, 0.13%)</title><rect x="668.9" y="661" width="1.4" height="15.0" fill="rgb(225,124,16)" rx="2" ry="2" />
<text  x="671.86" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="1149.8" y="645" width="0.9" height="15.0" fill="rgb(253,205,9)" rx="2" ry="2" />
<text  x="1152.84" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (6 samples, 0.15%)</title><rect x="1161.7" y="309" width="1.8" height="15.0" fill="rgb(252,143,35)" rx="2" ry="2" />
<text  x="1164.74" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="679.9" y="693" width="0.3" height="15.0" fill="rgb(236,17,7)" rx="2" ry="2" />
<text  x="682.87" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::_Vector_impl(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="689.7" y="661" width="0.3" height="15.0" fill="rgb(238,132,52)" rx="2" ry="2" />
<text  x="692.68" y="671.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f710&gt; (45 samples, 1.13%)</title><rect x="659.3" y="709" width="13.4" height="15.0" fill="rgb(252,216,8)" rx="2" ry="2" />
<text  x="662.34" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="35.3" y="645" width="0.3" height="15.0" fill="rgb(254,154,38)" rx="2" ry="2" />
<text  x="38.28" y="655.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (3 samples, 0.08%)</title><rect x="336.6" y="629" width="0.9" height="15.0" fill="rgb(250,225,22)" rx="2" ry="2" />
<text  x="339.60" y="639.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int&amp;&amp;) (2 samples, 0.05%)</title><rect x="1156.1" y="597" width="0.6" height="15.0" fill="rgb(211,41,42)" rx="2" ry="2" />
<text  x="1159.09" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (67 samples, 1.69%)</title><rect x="1160.0" y="437" width="19.9" height="15.0" fill="rgb(212,224,40)" rx="2" ry="2" />
<text  x="1162.96" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (3 samples, 0.08%)</title><rect x="1149.8" y="677" width="0.9" height="15.0" fill="rgb(228,165,50)" rx="2" ry="2" />
<text  x="1152.84" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="28.4" y="517" width="0.3" height="15.0" fill="rgb(214,165,35)" rx="2" ry="2" />
<text  x="31.44" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (42 samples, 1.06%)</title><rect x="603.7" y="645" width="12.5" height="15.0" fill="rgb(252,104,39)" rx="2" ry="2" />
<text  x="606.72" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;long, __gnu_debug::_Distance_precision&gt;::operator=(std::pair&lt;long, __gnu_debug::_Distance_precision&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1156.7" y="453" width="0.3" height="15.0" fill="rgb(217,201,5)" rx="2" ry="2" />
<text  x="1159.69" y="463.5" ></text>
</g>
<g >
<title>tc_cfree[inline] (1 samples, 0.03%)</title><rect x="1185.8" y="85" width="0.3" height="15.0" fill="rgb(223,109,20)" rx="2" ry="2" />
<text  x="1188.84" y="95.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**)&lt;00000000000259b0&gt; (1 samples, 0.03%)</title><rect x="119.5" y="501" width="0.3" height="15.0" fill="rgb(226,108,13)" rx="2" ry="2" />
<text  x="122.46" y="511.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::deallocate(Triangle*, unsigned long) (1 samples, 0.03%)</title><rect x="672.1" y="613" width="0.3" height="15.0" fill="rgb(206,82,4)" rx="2" ry="2" />
<text  x="675.13" y="623.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.03%)</title><rect x="1182.3" y="613" width="0.3" height="15.0" fill="rgb(217,75,38)" rx="2" ry="2" />
<text  x="1185.27" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1144.5" y="581" width="0.3" height="15.0" fill="rgb(226,29,24)" rx="2" ry="2" />
<text  x="1147.49" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (68 samples, 1.71%)</title><rect x="1160.0" y="501" width="20.2" height="15.0" fill="rgb(241,74,30)" rx="2" ry="2" />
<text  x="1162.96" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap(unsigned long)&lt;00000000000279a0&gt; (1 samples, 0.03%)</title><rect x="427.3" y="453" width="0.3" height="15.0" fill="rgb(244,46,27)" rx="2" ry="2" />
<text  x="430.33" y="463.5" ></text>
</g>
<g >
<title>XML_ParseBuffer&lt;0000000000010b20&gt; (3 samples, 0.08%)</title><rect x="25.8" y="517" width="0.9" height="15.0" fill="rgb(250,119,40)" rx="2" ry="2" />
<text  x="28.77" y="527.5" ></text>
</g>
<g >
<title>readdir64 (1 samples, 0.03%)</title><rect x="37.7" y="549" width="0.3" height="15.0" fill="rgb(249,72,14)" rx="2" ry="2" />
<text  x="40.66" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="1153.4" y="629" width="0.3" height="15.0" fill="rgb(205,140,22)" rx="2" ry="2" />
<text  x="1156.41" y="639.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (2 samples, 0.05%)</title><rect x="25.8" y="501" width="0.6" height="15.0" fill="rgb(240,45,7)" rx="2" ry="2" />
<text  x="28.77" y="511.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1150.1" y="581" width="0.3" height="15.0" fill="rgb(250,225,26)" rx="2" ry="2" />
<text  x="1153.14" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (6 samples, 0.15%)</title><rect x="623.6" y="645" width="1.8" height="15.0" fill="rgb(243,156,36)" rx="2" ry="2" />
<text  x="626.65" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="38.9" y="661" width="0.3" height="15.0" fill="rgb(228,180,29)" rx="2" ry="2" />
<text  x="41.85" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (501 samples, 12.63%)</title><rect x="781.0" y="645" width="149.0" height="15.0" fill="rgb(223,140,21)" rx="2" ry="2" />
<text  x="784.00" y="655.5" >__driDriverGetExten..</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="645" width="20.8" height="15.0" fill="rgb(254,146,10)" rx="2" ry="2" />
<text  x="1162.36" y="655.5" ></text>
</g>
<g >
<title>0x00007fa19391f33f (1 samples, 0.03%)</title><rect x="34.4" y="565" width="0.3" height="15.0" fill="rgb(235,50,4)" rx="2" ry="2" />
<text  x="37.39" y="575.5" ></text>
</g>
<g >
<title>~basic_string (1 samples, 0.03%)</title><rect x="661.7" y="661" width="0.3" height="15.0" fill="rgb(241,184,37)" rx="2" ry="2" />
<text  x="664.72" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;long, __gnu_debug::_Distance_precision&gt;::operator=(std::pair&lt;long, __gnu_debug::_Distance_precision&gt;&amp;&amp;) (2 samples, 0.05%)</title><rect x="1162.9" y="293" width="0.6" height="15.0" fill="rgb(215,192,25)" rx="2" ry="2" />
<text  x="1165.93" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream()[inline] (1 samples, 0.03%)</title><rect x="1182.3" y="645" width="0.3" height="15.0" fill="rgb(215,110,29)" rx="2" ry="2" />
<text  x="1185.27" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (2 samples, 0.05%)</title><rect x="658.2" y="709" width="0.5" height="15.0" fill="rgb(209,174,16)" rx="2" ry="2" />
<text  x="661.15" y="719.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (3 samples, 0.08%)</title><rect x="1133.5" y="501" width="0.9" height="15.0" fill="rgb(239,221,40)" rx="2" ry="2" />
<text  x="1136.48" y="511.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (3 samples, 0.08%)</title><rect x="1153.1" y="693" width="0.9" height="15.0" fill="rgb(208,217,46)" rx="2" ry="2" />
<text  x="1156.12" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1126.6" y="709" width="0.3" height="15.0" fill="rgb(223,145,25)" rx="2" ry="2" />
<text  x="1129.64" y="719.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (2 samples, 0.05%)</title><rect x="300.0" y="677" width="0.6" height="15.0" fill="rgb(246,33,2)" rx="2" ry="2" />
<text  x="303.02" y="687.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_bufctx&lt;0000000000004a30&gt; (1 samples, 0.03%)</title><rect x="1090.1" y="629" width="0.3" height="15.0" fill="rgb(210,186,30)" rx="2" ry="2" />
<text  x="1093.06" y="639.5" ></text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (7 samples, 0.18%)</title><rect x="35.6" y="661" width="2.1" height="15.0" fill="rgb(227,6,45)" rx="2" ry="2" />
<text  x="38.58" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1148.4" y="565" width="0.3" height="15.0" fill="rgb(243,194,35)" rx="2" ry="2" />
<text  x="1151.36" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="678.7" y="661" width="0.3" height="15.0" fill="rgb(236,99,24)" rx="2" ry="2" />
<text  x="681.68" y="671.5" ></text>
</g>
<g >
<title>free_fast_path[inline] (1 samples, 0.03%)</title><rect x="672.1" y="581" width="0.3" height="15.0" fill="rgb(244,143,36)" rx="2" ry="2" />
<text  x="675.13" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (2 samples, 0.05%)</title><rect x="1159.4" y="357" width="0.6" height="15.0" fill="rgb(205,85,2)" rx="2" ry="2" />
<text  x="1162.36" y="367.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (13 samples, 0.33%)</title><rect x="1183.8" y="757" width="3.8" height="15.0" fill="rgb(220,56,20)" rx="2" ry="2" />
<text  x="1186.75" y="767.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="675.7" y="693" width="0.6" height="15.0" fill="rgb(233,38,22)" rx="2" ry="2" />
<text  x="678.70" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="676.0" y="677" width="0.3" height="15.0" fill="rgb(253,227,39)" rx="2" ry="2" />
<text  x="679.00" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1152.8" y="581" width="0.3" height="15.0" fill="rgb(239,15,44)" rx="2" ry="2" />
<text  x="1155.82" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1144.8" y="533" width="0.3" height="15.0" fill="rgb(246,165,3)" rx="2" ry="2" />
<text  x="1147.79" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.03%)</title><rect x="690.0" y="645" width="0.3" height="15.0" fill="rgb(220,163,2)" rx="2" ry="2" />
<text  x="692.98" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.05%)</title><rect x="667.1" y="693" width="0.6" height="15.0" fill="rgb(220,148,17)" rx="2" ry="2" />
<text  x="670.08" y="703.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.03%)</title><rect x="1153.7" y="661" width="0.3" height="15.0" fill="rgb(215,167,7)" rx="2" ry="2" />
<text  x="1156.71" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="1131.7" y="597" width="0.6" height="15.0" fill="rgb(242,227,19)" rx="2" ry="2" />
<text  x="1134.70" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1141.8" y="565" width="0.3" height="15.0" fill="rgb(228,85,9)" rx="2" ry="2" />
<text  x="1144.81" y="575.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (3 samples, 0.08%)</title><rect x="1153.1" y="677" width="0.9" height="15.0" fill="rgb(208,59,2)" rx="2" ry="2" />
<text  x="1156.12" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1141.5" y="549" width="0.3" height="15.0" fill="rgb(222,122,12)" rx="2" ry="2" />
<text  x="1144.51" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="682.8" y="677" width="0.9" height="15.0" fill="rgb(213,160,34)" rx="2" ry="2" />
<text  x="685.84" y="687.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="663.5" y="645" width="0.9" height="15.0" fill="rgb(210,53,44)" rx="2" ry="2" />
<text  x="666.51" y="655.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="312.5" y="677" width="0.3" height="15.0" fill="rgb(208,194,28)" rx="2" ry="2" />
<text  x="315.51" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="674.8" y="661" width="0.3" height="15.0" fill="rgb(234,128,44)" rx="2" ry="2" />
<text  x="677.81" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="676.9" y="645" width="0.3" height="15.0" fill="rgb(233,114,37)" rx="2" ry="2" />
<text  x="679.89" y="655.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.05%)</title><rect x="667.1" y="645" width="0.6" height="15.0" fill="rgb(225,32,23)" rx="2" ry="2" />
<text  x="670.08" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++(int) (1 samples, 0.03%)</title><rect x="38.6" y="709" width="0.3" height="15.0" fill="rgb(246,206,14)" rx="2" ry="2" />
<text  x="41.56" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1141.8" y="581" width="0.3" height="15.0" fill="rgb(249,87,42)" rx="2" ry="2" />
<text  x="1144.81" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (3 samples, 0.08%)</title><rect x="671.2" y="677" width="0.9" height="15.0" fill="rgb(249,80,33)" rx="2" ry="2" />
<text  x="674.24" y="687.5" ></text>
</g>
<g >
<title>Vec2d::toString[abi:cxx11]() (1 samples, 0.03%)</title><rect x="690.6" y="693" width="0.3" height="15.0" fill="rgb(250,64,9)" rx="2" ry="2" />
<text  x="693.57" y="703.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.23%)</title><rect x="1143.6" y="629" width="2.7" height="15.0" fill="rgb(240,1,21)" rx="2" ry="2" />
<text  x="1146.60" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.03%)</title><rect x="1141.5" y="533" width="0.3" height="15.0" fill="rgb(222,226,23)" rx="2" ry="2" />
<text  x="1144.51" y="543.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000054830&gt; (84 samples, 2.12%)</title><rect x="1156.1" y="693" width="25.0" height="15.0" fill="rgb(232,28,12)" rx="2" ry="2" />
<text  x="1159.09" y="703.5" >O..</text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000023880&gt; (97 samples, 2.45%)</title><rect x="1154.9" y="757" width="28.9" height="15.0" fill="rgb(217,18,18)" rx="2" ry="2" />
<text  x="1157.90" y="767.5" >En..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (66 samples, 1.66%)</title><rect x="280.4" y="645" width="19.6" height="15.0" fill="rgb(242,219,38)" rx="2" ry="2" />
<text  x="283.39" y="655.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (2 samples, 0.05%)</title><rect x="28.4" y="597" width="0.6" height="15.0" fill="rgb(207,102,40)" rx="2" ry="2" />
<text  x="31.44" y="607.5" ></text>
</g>
<g >
<title>0x00007ff97d8f6791 (1 samples, 0.03%)</title><rect x="34.7" y="661" width="0.3" height="15.0" fill="rgb(243,205,13)" rx="2" ry="2" />
<text  x="37.69" y="671.5" ></text>
</g>
<g >
<title>drmCommandWriteRead&lt;000000000000a8d0&gt; (1 samples, 0.03%)</title><rect x="23.1" y="437" width="0.3" height="15.0" fill="rgb(252,4,16)" rx="2" ry="2" />
<text  x="26.09" y="447.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (3 samples, 0.08%)</title><rect x="1185.8" y="117" width="0.9" height="15.0" fill="rgb(209,83,29)" rx="2" ry="2" />
<text  x="1188.84" y="127.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (7 samples, 0.18%)</title><rect x="623.4" y="661" width="2.0" height="15.0" fill="rgb(223,69,48)" rx="2" ry="2" />
<text  x="626.35" y="671.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1178.4" y="357" width="0.6" height="15.0" fill="rgb(217,46,44)" rx="2" ry="2" />
<text  x="1181.40" y="367.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.08%)</title><rect x="1186.7" y="645" width="0.9" height="15.0" fill="rgb(207,91,17)" rx="2" ry="2" />
<text  x="1189.73" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1149.8" y="581" width="0.3" height="15.0" fill="rgb(217,130,20)" rx="2" ry="2" />
<text  x="1152.84" y="591.5" ></text>
</g>
<g >
<title>0x00007ff97d8f575a (1 samples, 0.03%)</title><rect x="33.5" y="661" width="0.3" height="15.0" fill="rgb(209,136,36)" rx="2" ry="2" />
<text  x="36.50" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.05%)</title><rect x="336.0" y="629" width="0.6" height="15.0" fill="rgb(225,18,52)" rx="2" ry="2" />
<text  x="339.01" y="639.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="668.0" y="613" width="0.3" height="15.0" fill="rgb(234,22,27)" rx="2" ry="2" />
<text  x="670.97" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="629" width="20.8" height="15.0" fill="rgb(208,77,8)" rx="2" ry="2" />
<text  x="1162.36" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1141.5" y="565" width="0.3" height="15.0" fill="rgb(245,188,35)" rx="2" ry="2" />
<text  x="1144.51" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string(int) (5 samples, 0.13%)</title><rect x="684.9" y="709" width="1.5" height="15.0" fill="rgb(216,109,30)" rx="2" ry="2" />
<text  x="687.92" y="719.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="229" width="0.3" height="15.0" fill="rgb(216,204,45)" rx="2" ry="2" />
<text  x="1190.32" y="239.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018bf0&gt; (1 samples, 0.03%)</title><rect x="676.9" y="629" width="0.3" height="15.0" fill="rgb(254,174,52)" rx="2" ry="2" />
<text  x="679.89" y="639.5" ></text>
</g>
<g >
<title>pa_log_levelv_meta&lt;0000000000031430&gt; (1 samples, 0.03%)</title><rect x="30.5" y="613" width="0.3" height="15.0" fill="rgb(243,82,42)" rx="2" ry="2" />
<text  x="33.52" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create(unsigned long&amp;, unsigned long) (1 samples, 0.03%)</title><rect x="1182.6" y="437" width="0.3" height="15.0" fill="rgb(253,18,44)" rx="2" ry="2" />
<text  x="1185.56" y="447.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream()[inline] (1 samples, 0.03%)</title><rect x="1180.8" y="613" width="0.3" height="15.0" fill="rgb(224,122,54)" rx="2" ry="2" />
<text  x="1183.78" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.03%)</title><rect x="682.5" y="613" width="0.3" height="15.0" fill="rgb(215,113,34)" rx="2" ry="2" />
<text  x="685.54" y="623.5" ></text>
</g>
<g >
<title>tc_realloc (1 samples, 0.03%)</title><rect x="31.4" y="565" width="0.3" height="15.0" fill="rgb(209,0,52)" rx="2" ry="2" />
<text  x="34.42" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.23%)</title><rect x="1138.5" y="629" width="2.7" height="15.0" fill="rgb(251,61,33)" rx="2" ry="2" />
<text  x="1141.54" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="668.6" y="661" width="0.3" height="15.0" fill="rgb(215,210,35)" rx="2" ry="2" />
<text  x="671.56" y="671.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.03%)</title><rect x="147.7" y="645" width="0.3" height="15.0" fill="rgb(212,46,52)" rx="2" ry="2" />
<text  x="150.72" y="655.5" ></text>
</g>
<g >
<title>0x00007f4cf82a5b4e (1 samples, 0.03%)</title><rect x="30.8" y="677" width="0.3" height="15.0" fill="rgb(235,99,4)" rx="2" ry="2" />
<text  x="33.82" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_PopRange(void**, int, void**, void**)[inline] (1 samples, 0.03%)</title><rect x="872.0" y="517" width="0.3" height="15.0" fill="rgb(211,176,2)" rx="2" ry="2" />
<text  x="875.02" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.03%)</title><rect x="29.6" y="581" width="0.3" height="15.0" fill="rgb(233,147,1)" rx="2" ry="2" />
<text  x="32.63" y="591.5" ></text>
</g>
<g >
<title>drmCommandWriteRead&lt;000000000000a8d0&gt; (2 samples, 0.05%)</title><rect x="23.4" y="437" width="0.6" height="15.0" fill="rgb(230,150,39)" rx="2" ry="2" />
<text  x="26.39" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="427.3" y="565" width="0.3" height="15.0" fill="rgb(237,214,44)" rx="2" ry="2" />
<text  x="430.33" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (1 samples, 0.03%)</title><rect x="427.3" y="517" width="0.3" height="15.0" fill="rgb(232,202,24)" rx="2" ry="2" />
<text  x="430.33" y="527.5" ></text>
</g>
<g >
<title>XCloseDisplay&lt;0000000000023d70&gt; (1 samples, 0.03%)</title><rect x="1187.6" y="677" width="0.3" height="15.0" fill="rgb(235,176,52)" rx="2" ry="2" />
<text  x="1190.62" y="687.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (1 samples, 0.03%)</title><rect x="30.5" y="725" width="0.3" height="15.0" fill="rgb(233,13,29)" rx="2" ry="2" />
<text  x="33.52" y="735.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (12 samples, 0.30%)</title><rect x="10.0" y="821" width="3.6" height="15.0" fill="rgb(210,1,1)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1135.0" y="629" width="0.3" height="15.0" fill="rgb(229,12,31)" rx="2" ry="2" />
<text  x="1137.97" y="639.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (654 samples, 16.49%)</title><rect x="931.8" y="661" width="194.5" height="15.0" fill="rgb(237,70,1)" rx="2" ry="2" />
<text  x="934.81" y="671.5" >nouveau_drm_screen_create</text>
</g>
<g >
<title>_Safe_sequence_base (1 samples, 0.03%)</title><rect x="39.4" y="725" width="0.3" height="15.0" fill="rgb(222,153,1)" rx="2" ry="2" />
<text  x="42.45" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000258c0&gt; (1 samples, 0.03%)</title><rect x="1186.4" y="69" width="0.3" height="15.0" fill="rgb(243,148,38)" rx="2" ry="2" />
<text  x="1189.43" y="79.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="28.7" y="485" width="0.3" height="15.0" fill="rgb(213,207,7)" rx="2" ry="2" />
<text  x="31.74" y="495.5" ></text>
</g>
<g >
<title>_XIOError&lt;0000000000042dc0&gt; (1 samples, 0.03%)</title><rect x="38.9" y="581" width="0.3" height="15.0" fill="rgb(250,173,8)" rx="2" ry="2" />
<text  x="41.85" y="591.5" ></text>
</g>
<g >
<title>XGetWindowProperty&lt;0000000000026f80&gt; (1 samples, 0.03%)</title><rect x="38.9" y="629" width="0.3" height="15.0" fill="rgb(253,104,50)" rx="2" ry="2" />
<text  x="41.85" y="639.5" ></text>
</g>
<g >
<title>_Safe_iterator (59 samples, 1.49%)</title><rect x="1160.0" y="389" width="17.5" height="15.0" fill="rgb(217,189,36)" rx="2" ry="2" />
<text  x="1162.96" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.08%)</title><rect x="667.7" y="677" width="0.9" height="15.0" fill="rgb(225,62,46)" rx="2" ry="2" />
<text  x="670.67" y="687.5" ></text>
</g>
<g >
<title>0x00007fa19391f35a (1 samples, 0.03%)</title><rect x="32.6" y="613" width="0.3" height="15.0" fill="rgb(229,80,16)" rx="2" ry="2" />
<text  x="35.61" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (1 samples, 0.03%)</title><rect x="427.6" y="501" width="0.3" height="15.0" fill="rgb(249,195,50)" rx="2" ry="2" />
<text  x="430.63" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1142.1" y="517" width="0.3" height="15.0" fill="rgb(215,22,40)" rx="2" ry="2" />
<text  x="1145.11" y="527.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="22.5" y="565" width="0.3" height="15.0" fill="rgb(231,162,12)" rx="2" ry="2" />
<text  x="25.49" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1130.2" y="549" width="0.3" height="15.0" fill="rgb(246,228,13)" rx="2" ry="2" />
<text  x="1133.21" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="24.0" y="325" width="0.3" height="15.0" fill="rgb(217,41,27)" rx="2" ry="2" />
<text  x="26.98" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.03%)</title><rect x="1142.7" y="549" width="0.3" height="15.0" fill="rgb(233,123,50)" rx="2" ry="2" />
<text  x="1145.70" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (4 samples, 0.10%)</title><rect x="1177.8" y="373" width="1.2" height="15.0" fill="rgb(228,221,5)" rx="2" ry="2" />
<text  x="1180.80" y="383.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1127.8" y="725" width="0.3" height="15.0" fill="rgb(240,5,45)" rx="2" ry="2" />
<text  x="1130.83" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge()&lt;0000000000029ae0&gt; (1 samples, 0.03%)</title><rect x="872.0" y="581" width="0.3" height="15.0" fill="rgb(216,226,33)" rx="2" ry="2" />
<text  x="875.02" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (3 samples, 0.08%)</title><rect x="620.7" y="661" width="0.9" height="15.0" fill="rgb(220,88,50)" rx="2" ry="2" />
<text  x="623.67" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (45 samples, 1.13%)</title><rect x="1164.1" y="373" width="13.4" height="15.0" fill="rgb(231,183,48)" rx="2" ry="2" />
<text  x="1167.12" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.05%)</title><rect x="1129.0" y="613" width="0.6" height="15.0" fill="rgb(217,137,43)" rx="2" ry="2" />
<text  x="1132.02" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1128.1" y="597" width="0.3" height="15.0" fill="rgb(220,22,2)" rx="2" ry="2" />
<text  x="1131.13" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (11 samples, 0.28%)</title><rect x="1135.3" y="629" width="3.2" height="15.0" fill="rgb(226,221,50)" rx="2" ry="2" />
<text  x="1138.27" y="639.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (5 samples, 0.13%)</title><rect x="1074.9" y="613" width="1.5" height="15.0" fill="rgb(244,151,18)" rx="2" ry="2" />
<text  x="1077.89" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (1 samples, 0.03%)</title><rect x="689.7" y="645" width="0.3" height="15.0" fill="rgb(238,198,39)" rx="2" ry="2" />
<text  x="692.68" y="655.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::max_size() const (1 samples, 0.03%)</title><rect x="1156.4" y="517" width="0.3" height="15.0" fill="rgb(225,187,37)" rx="2" ry="2" />
<text  x="1159.39" y="527.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1132.9" y="597" width="0.3" height="15.0" fill="rgb(216,10,34)" rx="2" ry="2" />
<text  x="1135.89" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.03%)</title><rect x="1182.6" y="453" width="0.3" height="15.0" fill="rgb(222,17,9)" rx="2" ry="2" />
<text  x="1185.56" y="463.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="28.7" y="373" width="0.3" height="15.0" fill="rgb(242,62,37)" rx="2" ry="2" />
<text  x="31.74" y="383.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000056310&gt; (10 samples, 0.25%)</title><rect x="1183.8" y="549" width="2.9" height="15.0" fill="rgb(219,42,9)" rx="2" ry="2" />
<text  x="1186.75" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="659.3" y="677" width="0.6" height="15.0" fill="rgb(225,210,23)" rx="2" ry="2" />
<text  x="662.34" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="22.5" y="549" width="0.3" height="15.0" fill="rgb(236,125,18)" rx="2" ry="2" />
<text  x="25.49" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018bf0&gt; (1 samples, 0.03%)</title><rect x="1146.6" y="645" width="0.3" height="15.0" fill="rgb(217,203,34)" rx="2" ry="2" />
<text  x="1149.57" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1144.2" y="549" width="0.3" height="15.0" fill="rgb(212,51,8)" rx="2" ry="2" />
<text  x="1147.19" y="559.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_seek(long, std::_Ios_Seekdir, __mbstate_t) (1 samples, 0.03%)</title><rect x="1181.1" y="613" width="0.3" height="15.0" fill="rgb(246,87,30)" rx="2" ry="2" />
<text  x="1184.08" y="623.5" ></text>
</g>
<g >
<title>__shared_ptr (2 samples, 0.05%)</title><rect x="1187.6" y="757" width="0.6" height="15.0" fill="rgb(215,80,48)" rx="2" ry="2" />
<text  x="1190.62" y="767.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1149.0" y="645" width="0.2" height="15.0" fill="rgb(234,139,0)" rx="2" ry="2" />
<text  x="1151.95" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.08%)</title><rect x="1186.7" y="629" width="0.9" height="15.0" fill="rgb(211,111,49)" rx="2" ry="2" />
<text  x="1189.73" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1151.6" y="693" width="0.3" height="15.0" fill="rgb(219,74,30)" rx="2" ry="2" />
<text  x="1154.63" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="669.2" y="629" width="0.3" height="15.0" fill="rgb(224,11,23)" rx="2" ry="2" />
<text  x="672.16" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::empty() const (1 samples, 0.03%)</title><rect x="1155.8" y="597" width="0.3" height="15.0" fill="rgb(229,65,52)" rx="2" ry="2" />
<text  x="1158.79" y="607.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;*, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (3 samples, 0.08%)</title><rect x="1160.6" y="277" width="0.8" height="15.0" fill="rgb(234,180,2)" rx="2" ry="2" />
<text  x="1163.55" y="287.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (641 samples, 16.16%)</title><rect x="739.4" y="661" width="190.6" height="15.0" fill="rgb(207,35,7)" rx="2" ry="2" />
<text  x="742.36" y="671.5" >__driDriverGetExtensions..</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1139.4" y="549" width="0.3" height="15.0" fill="rgb(242,213,31)" rx="2" ry="2" />
<text  x="1142.43" y="559.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="38.0" y="693" width="0.3" height="15.0" fill="rgb(226,120,43)" rx="2" ry="2" />
<text  x="40.96" y="703.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="683.7" y="661" width="0.3" height="15.0" fill="rgb(253,31,28)" rx="2" ry="2" />
<text  x="686.73" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (6 samples, 0.15%)</title><rect x="315.5" y="645" width="1.8" height="15.0" fill="rgb(245,154,47)" rx="2" ry="2" />
<text  x="318.49" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1144.8" y="517" width="0.3" height="15.0" fill="rgb(214,133,12)" rx="2" ry="2" />
<text  x="1147.79" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1128.1" y="533" width="0.3" height="15.0" fill="rgb(213,229,22)" rx="2" ry="2" />
<text  x="1131.13" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.03%)</title><rect x="1145.7" y="469" width="0.3" height="15.0" fill="rgb(221,25,51)" rx="2" ry="2" />
<text  x="1148.68" y="479.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="687.6" y="661" width="0.3" height="15.0" fill="rgb(213,83,37)" rx="2" ry="2" />
<text  x="690.60" y="671.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (3 samples, 0.08%)</title><rect x="29.3" y="629" width="0.9" height="15.0" fill="rgb(236,55,50)" rx="2" ry="2" />
<text  x="32.33" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (1 samples, 0.03%)</title><rect x="672.1" y="661" width="0.3" height="15.0" fill="rgb(219,52,31)" rx="2" ry="2" />
<text  x="675.13" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.03%)</title><rect x="671.2" y="581" width="0.3" height="15.0" fill="rgb(225,92,35)" rx="2" ry="2" />
<text  x="674.24" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="38.9" y="709" width="0.3" height="15.0" fill="rgb(214,11,51)" rx="2" ry="2" />
<text  x="41.85" y="719.5" ></text>
</g>
<g >
<title>vector (70 samples, 1.76%)</title><rect x="1159.4" y="549" width="20.8" height="15.0" fill="rgb(239,209,35)" rx="2" ry="2" />
<text  x="1162.36" y="559.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (3 samples, 0.08%)</title><rect x="23.1" y="485" width="0.9" height="15.0" fill="rgb(232,112,9)" rx="2" ry="2" />
<text  x="26.09" y="495.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="28.7" y="453" width="0.3" height="15.0" fill="rgb(246,64,1)" rx="2" ry="2" />
<text  x="31.74" y="463.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.03%)</title><rect x="672.1" y="597" width="0.3" height="15.0" fill="rgb(251,60,38)" rx="2" ry="2" />
<text  x="675.13" y="607.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (6 samples, 0.15%)</title><rect x="24.0" y="485" width="1.8" height="15.0" fill="rgb(238,187,52)" rx="2" ry="2" />
<text  x="26.98" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1136.5" y="581" width="0.6" height="15.0" fill="rgb(226,196,11)" rx="2" ry="2" />
<text  x="1139.46" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1154.0" y="613" width="0.3" height="15.0" fill="rgb(254,1,42)" rx="2" ry="2" />
<text  x="1157.01" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1149.5" y="565" width="0.3" height="15.0" fill="rgb(205,133,0)" rx="2" ry="2" />
<text  x="1152.55" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="1143.3" y="549" width="0.3" height="15.0" fill="rgb(215,150,15)" rx="2" ry="2" />
<text  x="1146.30" y="559.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (26 samples, 0.66%)</title><rect x="922.3" y="629" width="7.7" height="15.0" fill="rgb(236,220,5)" rx="2" ry="2" />
<text  x="925.29" y="639.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.03%)</title><rect x="668.3" y="613" width="0.3" height="15.0" fill="rgb(254,200,42)" rx="2" ry="2" />
<text  x="671.27" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1144.8" y="549" width="0.3" height="15.0" fill="rgb(254,102,0)" rx="2" ry="2" />
<text  x="1147.79" y="559.5" ></text>
</g>
<g >
<title>ioctl@@GLIBC_2.2.5&lt;00000000000fc9b0&gt; (1 samples, 0.03%)</title><rect x="22.5" y="453" width="0.3" height="15.0" fill="rgb(233,15,42)" rx="2" ry="2" />
<text  x="25.49" y="463.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="660.8" y="645" width="0.3" height="15.0" fill="rgb(219,140,36)" rx="2" ry="2" />
<text  x="663.83" y="655.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::pubseekpos(std::fpos&lt;__mbstate_t&gt;, std::_Ios_Openmode)[inline] (1 samples, 0.03%)</title><rect x="1181.1" y="645" width="0.3" height="15.0" fill="rgb(241,41,26)" rx="2" ry="2" />
<text  x="1184.08" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (44 samples, 1.11%)</title><rect x="1164.4" y="341" width="13.1" height="15.0" fill="rgb(218,88,7)" rx="2" ry="2" />
<text  x="1167.42" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1129.0" y="597" width="0.3" height="15.0" fill="rgb(223,117,15)" rx="2" ry="2" />
<text  x="1132.02" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (4 samples, 0.10%)</title><rect x="1130.2" y="613" width="1.2" height="15.0" fill="rgb(241,190,40)" rx="2" ry="2" />
<text  x="1133.21" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (10 samples, 0.25%)</title><rect x="1183.8" y="229" width="2.9" height="15.0" fill="rgb(232,85,3)" rx="2" ry="2" />
<text  x="1186.75" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;!std::__are_same&lt;int, bool&gt;::__value, void&gt;::__type std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back&lt;int&gt;(int&amp;&amp;) (2 samples, 0.05%)</title><rect x="1156.1" y="645" width="0.6" height="15.0" fill="rgb(248,103,33)" rx="2" ry="2" />
<text  x="1159.09" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (10 samples, 0.25%)</title><rect x="1183.8" y="517" width="2.9" height="15.0" fill="rgb(221,169,17)" rx="2" ry="2" />
<text  x="1186.75" y="527.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1148.4" y="597" width="0.3" height="15.0" fill="rgb(243,161,19)" rx="2" ry="2" />
<text  x="1151.36" y="607.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.03%)</title><rect x="1131.4" y="549" width="0.3" height="15.0" fill="rgb(244,177,24)" rx="2" ry="2" />
<text  x="1134.40" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.08%)</title><rect x="1186.7" y="597" width="0.9" height="15.0" fill="rgb(205,11,45)" rx="2" ry="2" />
<text  x="1189.73" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="673.6" y="677" width="0.3" height="15.0" fill="rgb(251,210,21)" rx="2" ry="2" />
<text  x="676.62" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;OBJ_Datum, std::allocator&lt;OBJ_Datum&gt; &gt;::_M_realloc_insert&lt;OBJ_Datum const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;OBJ_Datum*, std::__cxx1998::vector&lt;OBJ_Datum, std::allocator&lt;OBJ_Datum&gt; &gt; &gt;, OBJ_Datum const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="645" width="0.3" height="15.0" fill="rgb(253,8,7)" rx="2" ry="2" />
<text  x="1185.56" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="670.1" y="581" width="0.2" height="15.0" fill="rgb(231,97,34)" rx="2" ry="2" />
<text  x="673.05" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="661.1" y="661" width="0.3" height="15.0" fill="rgb(233,20,30)" rx="2" ry="2" />
<text  x="664.13" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.03%)</title><rect x="682.5" y="565" width="0.3" height="15.0" fill="rgb(222,164,29)" rx="2" ry="2" />
<text  x="685.54" y="575.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (1 samples, 0.03%)</title><rect x="1182.0" y="629" width="0.3" height="15.0" fill="rgb(237,165,21)" rx="2" ry="2" />
<text  x="1184.97" y="639.5" ></text>
</g>
<g >
<title>do_realloc[inline] (1 samples, 0.03%)</title><rect x="37.4" y="613" width="0.3" height="15.0" fill="rgb(241,44,7)" rx="2" ry="2" />
<text  x="40.37" y="623.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (417 samples, 10.51%)</title><rect x="1002.3" y="645" width="124.0" height="15.0" fill="rgb(242,3,4)" rx="2" ry="2" />
<text  x="1005.31" y="655.5" >nouveau_drm_scr..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (43 samples, 1.08%)</title><rect x="1164.7" y="309" width="12.8" height="15.0" fill="rgb(216,198,25)" rx="2" ry="2" />
<text  x="1167.72" y="319.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;000000000006bf70&gt; (1 samples, 0.03%)</title><rect x="661.1" y="677" width="0.3" height="15.0" fill="rgb(219,173,44)" rx="2" ry="2" />
<text  x="664.13" y="687.5" ></text>
</g>
<g >
<title>nouveau_bo_wait&lt;0000000000005480&gt; (1 samples, 0.03%)</title><rect x="1087.7" y="597" width="0.3" height="15.0" fill="rgb(246,34,20)" rx="2" ry="2" />
<text  x="1090.68" y="607.5" ></text>
</g>
<g >
<title>0x00007fa19390fb4e (1 samples, 0.03%)</title><rect x="32.6" y="645" width="0.3" height="15.0" fill="rgb(248,164,26)" rx="2" ry="2" />
<text  x="35.61" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1146.6" y="565" width="0.3" height="15.0" fill="rgb(241,95,26)" rx="2" ry="2" />
<text  x="1149.57" y="575.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1180.8" y="661" width="0.3" height="15.0" fill="rgb(242,51,51)" rx="2" ry="2" />
<text  x="1183.78" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.03%)</title><rect x="24.0" y="341" width="0.3" height="15.0" fill="rgb(217,97,44)" rx="2" ry="2" />
<text  x="26.98" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_PopRange(void**, int, void**, void**)[inline] (1 samples, 0.03%)</title><rect x="872.0" y="533" width="0.3" height="15.0" fill="rgb(208,62,39)" rx="2" ry="2" />
<text  x="875.02" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (2,075 samples, 52.31%)</title><rect x="40.0" y="709" width="617.3" height="15.0" fill="rgb(233,120,40)" rx="2" ry="2" />
<text  x="43.04" y="719.5" >TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)</text>
</g>
<g >
<title>0x00007fa19390f355 (1 samples, 0.03%)</title><rect x="32.9" y="613" width="0.3" height="15.0" fill="rgb(230,174,16)" rx="2" ry="2" />
<text  x="35.90" y="623.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (3 samples, 0.08%)</title><rect x="663.5" y="629" width="0.9" height="15.0" fill="rgb(227,164,54)" rx="2" ry="2" />
<text  x="666.51" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (144 samples, 3.63%)</title><rect x="385.4" y="677" width="42.8" height="15.0" fill="rgb(254,74,40)" rx="2" ry="2" />
<text  x="388.39" y="687.5" >SDL_..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.03%)</title><rect x="427.6" y="485" width="0.3" height="15.0" fill="rgb(250,161,17)" rx="2" ry="2" />
<text  x="430.63" y="495.5" ></text>
</g>
<g >
<title>lseek64 (3 samples, 0.08%)</title><rect x="1182.9" y="613" width="0.9" height="15.0" fill="rgb(241,87,41)" rx="2" ry="2" />
<text  x="1185.86" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="682.5" y="549" width="0.3" height="15.0" fill="rgb(211,32,42)" rx="2" ry="2" />
<text  x="685.54" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1152.8" y="549" width="0.3" height="15.0" fill="rgb(227,134,40)" rx="2" ry="2" />
<text  x="1155.82" y="559.5" ></text>
</g>
<g >
<title>0x00007f9f3a7acfc2 (1 samples, 0.03%)</title><rect x="35.0" y="613" width="0.3" height="15.0" fill="rgb(225,102,50)" rx="2" ry="2" />
<text  x="37.99" y="623.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;0000000000082330&gt; (2 samples, 0.05%)</title><rect x="661.4" y="677" width="0.6" height="15.0" fill="rgb(251,69,37)" rx="2" ry="2" />
<text  x="664.42" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000258c0&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="181" width="0.3" height="15.0" fill="rgb(247,155,40)" rx="2" ry="2" />
<text  x="1190.32" y="191.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="681.4" y="677" width="0.3" height="15.0" fill="rgb(208,186,40)" rx="2" ry="2" />
<text  x="684.35" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (43 samples, 1.08%)</title><rect x="107.9" y="645" width="12.8" height="15.0" fill="rgb(241,166,53)" rx="2" ry="2" />
<text  x="110.86" y="655.5" ></text>
</g>
<g >
<title>int* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, std::allocator&lt;int&gt;&amp;) (1 samples, 0.03%)</title><rect x="1158.8" y="629" width="0.3" height="15.0" fill="rgb(222,80,41)" rx="2" ry="2" />
<text  x="1161.77" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (3 samples, 0.08%)</title><rect x="687.6" y="709" width="0.9" height="15.0" fill="rgb(211,207,46)" rx="2" ry="2" />
<text  x="690.60" y="719.5" ></text>
</g>
<g >
<title>nouveau_bo_ref&lt;0000000000004240&gt; (1 samples, 0.03%)</title><rect x="22.5" y="501" width="0.3" height="15.0" fill="rgb(254,91,51)" rx="2" ry="2" />
<text  x="25.49" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (2 samples, 0.05%)</title><rect x="686.7" y="645" width="0.6" height="15.0" fill="rgb(241,186,44)" rx="2" ry="2" />
<text  x="689.71" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (1 samples, 0.03%)</title><rect x="678.1" y="629" width="0.3" height="15.0" fill="rgb(226,168,30)" rx="2" ry="2" />
<text  x="681.08" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (2 samples, 0.05%)</title><rect x="1154.3" y="613" width="0.6" height="15.0" fill="rgb(254,14,49)" rx="2" ry="2" />
<text  x="1157.31" y="623.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0b4e (1 samples, 0.03%)</title><rect x="33.5" y="629" width="0.3" height="15.0" fill="rgb(223,118,44)" rx="2" ry="2" />
<text  x="36.50" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="469" width="0.3" height="15.0" fill="rgb(221,167,41)" rx="2" ry="2" />
<text  x="1185.56" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1149.5" y="597" width="0.3" height="15.0" fill="rgb(217,170,12)" rx="2" ry="2" />
<text  x="1152.55" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_to_end() const (1 samples, 0.03%)</title><rect x="1143.3" y="581" width="0.3" height="15.0" fill="rgb(237,153,53)" rx="2" ry="2" />
<text  x="1146.30" y="591.5" ></text>
</g>
<g >
<title>~allocator (1 samples, 0.03%)</title><rect x="1179.9" y="437" width="0.3" height="15.0" fill="rgb(228,164,11)" rx="2" ry="2" />
<text  x="1182.89" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (127 samples, 3.20%)</title><rect x="456.8" y="661" width="37.8" height="15.0" fill="rgb(233,91,36)" rx="2" ry="2" />
<text  x="459.78" y="671.5" >std..</text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="681.1" y="677" width="0.3" height="15.0" fill="rgb(205,78,2)" rx="2" ry="2" />
<text  x="684.06" y="687.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003d610&gt; (4 samples, 0.10%)</title><rect x="121.2" y="677" width="1.2" height="15.0" fill="rgb(241,165,31)" rx="2" ry="2" />
<text  x="124.25" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (8 samples, 0.20%)</title><rect x="663.2" y="661" width="2.4" height="15.0" fill="rgb(250,149,46)" rx="2" ry="2" />
<text  x="666.21" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1128.1" y="613" width="0.3" height="15.0" fill="rgb(244,67,25)" rx="2" ry="2" />
<text  x="1131.13" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (10 samples, 0.25%)</title><rect x="1183.8" y="389" width="2.9" height="15.0" fill="rgb(213,30,45)" rx="2" ry="2" />
<text  x="1186.75" y="399.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1140.9" y="565" width="0.3" height="15.0" fill="rgb(225,33,0)" rx="2" ry="2" />
<text  x="1143.92" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000025490&gt; (1 samples, 0.03%)</title><rect x="1187.3" y="149" width="0.3" height="15.0" fill="rgb(205,78,31)" rx="2" ry="2" />
<text  x="1190.32" y="159.5" ></text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (7 samples, 0.18%)</title><rect x="35.6" y="645" width="2.1" height="15.0" fill="rgb(253,112,33)" rx="2" ry="2" />
<text  x="38.58" y="655.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.05%)</title><rect x="28.4" y="581" width="0.6" height="15.0" fill="rgb(219,226,32)" rx="2" ry="2" />
<text  x="31.44" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (71 samples, 1.79%)</title><rect x="317.3" y="645" width="21.1" height="15.0" fill="rgb(229,123,19)" rx="2" ry="2" />
<text  x="320.27" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="1149.2" y="709" width="0.6" height="15.0" fill="rgb(231,94,16)" rx="2" ry="2" />
<text  x="1152.25" y="719.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1149.2" y="629" width="0.3" height="15.0" fill="rgb(240,20,18)" rx="2" ry="2" />
<text  x="1152.25" y="639.5" ></text>
</g>
<g >
<title>pa_config_parse&lt;00000000000235e0&gt; (1 samples, 0.03%)</title><rect x="30.5" y="645" width="0.3" height="15.0" fill="rgb(251,219,27)" rx="2" ry="2" />
<text  x="33.52" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1144.8" y="565" width="0.3" height="15.0" fill="rgb(224,62,39)" rx="2" ry="2" />
<text  x="1147.79" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (1 samples, 0.03%)</title><rect x="22.8" y="389" width="0.3" height="15.0" fill="rgb(217,52,12)" rx="2" ry="2" />
<text  x="25.79" y="399.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.03%)</title><rect x="427.6" y="613" width="0.3" height="15.0" fill="rgb(225,20,52)" rx="2" ry="2" />
<text  x="430.63" y="623.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="662.3" y="661" width="0.3" height="15.0" fill="rgb(234,20,19)" rx="2" ry="2" />
<text  x="665.32" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (7 samples, 0.18%)</title><rect x="333.9" y="629" width="2.1" height="15.0" fill="rgb(224,18,0)" rx="2" ry="2" />
<text  x="336.93" y="639.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1140.3" y="565" width="0.3" height="15.0" fill="rgb(220,29,31)" rx="2" ry="2" />
<text  x="1143.33" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long) (1 samples, 0.03%)</title><rect x="672.1" y="629" width="0.3" height="15.0" fill="rgb(206,101,52)" rx="2" ry="2" />
<text  x="675.13" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="30.2" y="661" width="0.3" height="15.0" fill="rgb(237,58,45)" rx="2" ry="2" />
<text  x="33.23" y="671.5" ></text>
</g>
<g >
<title>tc_realloc[inline] (1 samples, 0.03%)</title><rect x="37.4" y="597" width="0.3" height="15.0" fill="rgb(221,197,19)" rx="2" ry="2" />
<text  x="40.37" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.03%)</title><rect x="427.3" y="549" width="0.3" height="15.0" fill="rgb(243,211,30)" rx="2" ry="2" />
<text  x="430.33" y="559.5" ></text>
</g>
<g >
<title>0x00007ff97d90033f (1 samples, 0.03%)</title><rect x="33.5" y="597" width="0.3" height="15.0" fill="rgb(248,84,39)" rx="2" ry="2" />
<text  x="36.50" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1144.5" y="533" width="0.3" height="15.0" fill="rgb(224,52,40)" rx="2" ry="2" />
<text  x="1147.49" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.03%)</title><rect x="679.6" y="677" width="0.3" height="15.0" fill="rgb(212,155,10)" rx="2" ry="2" />
<text  x="682.57" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (10 samples, 0.25%)</title><rect x="1183.8" y="325" width="2.9" height="15.0" fill="rgb(208,40,20)" rx="2" ry="2" />
<text  x="1186.75" y="335.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1141.2" y="597" width="0.3" height="15.0" fill="rgb(241,176,15)" rx="2" ry="2" />
<text  x="1144.22" y="607.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="687.3" y="645" width="0.3" height="15.0" fill="rgb(217,14,12)" rx="2" ry="2" />
<text  x="690.30" y="655.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.03%)</title><rect x="119.2" y="613" width="0.3" height="15.0" fill="rgb(218,130,42)" rx="2" ry="2" />
<text  x="122.17" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="1139.1" y="597" width="0.6" height="15.0" fill="rgb(216,123,22)" rx="2" ry="2" />
<text  x="1142.14" y="607.5" ></text>
</g>
<g >
<title>0x00007fa1939146ee (1 samples, 0.03%)</title><rect x="32.6" y="661" width="0.3" height="15.0" fill="rgb(206,48,4)" rx="2" ry="2" />
<text  x="35.61" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="30.2" y="629" width="0.3" height="15.0" fill="rgb(209,76,6)" rx="2" ry="2" />
<text  x="33.23" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="690.9" y="693" width="0.3" height="15.0" fill="rgb(237,85,42)" rx="2" ry="2" />
<text  x="693.87" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (41 samples, 1.03%)</title><rect x="285.4" y="613" width="12.2" height="15.0" fill="rgb(231,46,34)" rx="2" ry="2" />
<text  x="288.44" y="623.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="1180.8" y="597" width="0.3" height="15.0" fill="rgb(231,213,38)" rx="2" ry="2" />
<text  x="1183.78" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018bf0&gt; (1 samples, 0.03%)</title><rect x="681.4" y="629" width="0.3" height="15.0" fill="rgb(227,195,30)" rx="2" ry="2" />
<text  x="684.35" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.03%)</title><rect x="660.8" y="661" width="0.3" height="15.0" fill="rgb(236,144,48)" rx="2" ry="2" />
<text  x="663.83" y="671.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;OBJ_Datum&gt;::construct&lt;OBJ_Datum, OBJ_Datum const&amp;&gt;(OBJ_Datum*, OBJ_Datum const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="613" width="0.3" height="15.0" fill="rgb(238,109,5)" rx="2" ry="2" />
<text  x="1185.56" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="38.9" y="677" width="0.3" height="15.0" fill="rgb(206,94,39)" rx="2" ry="2" />
<text  x="41.85" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.03%)</title><rect x="1143.3" y="597" width="0.3" height="15.0" fill="rgb(230,178,52)" rx="2" ry="2" />
<text  x="1146.30" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.03%)</title><rect x="671.5" y="581" width="0.3" height="15.0" fill="rgb(227,29,5)" rx="2" ry="2" />
<text  x="674.54" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1148.7" y="725" width="0.5" height="15.0" fill="rgb(237,145,32)" rx="2" ry="2" />
<text  x="1151.65" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018bf0&gt; (1 samples, 0.03%)</title><rect x="682.5" y="629" width="0.3" height="15.0" fill="rgb(210,64,35)" rx="2" ry="2" />
<text  x="685.54" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (58 samples, 1.46%)</title><rect x="282.8" y="629" width="17.2" height="15.0" fill="rgb(218,91,42)" rx="2" ry="2" />
<text  x="285.77" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="689.4" y="709" width="0.6" height="15.0" fill="rgb(222,64,32)" rx="2" ry="2" />
<text  x="692.38" y="719.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.03%)</title><rect x="1142.1" y="581" width="0.3" height="15.0" fill="rgb(244,60,16)" rx="2" ry="2" />
<text  x="1145.11" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (10 samples, 0.25%)</title><rect x="1183.8" y="405" width="2.9" height="15.0" fill="rgb(249,178,43)" rx="2" ry="2" />
<text  x="1186.75" y="415.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1130.8" y="549" width="0.3" height="15.0" fill="rgb(230,55,38)" rx="2" ry="2" />
<text  x="1133.81" y="559.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (61 samples, 1.54%)</title><rect x="1128.1" y="709" width="18.2" height="15.0" fill="rgb(237,105,30)" rx="2" ry="2" />
<text  x="1131.13" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="676.9" y="677" width="0.3" height="15.0" fill="rgb(209,140,1)" rx="2" ry="2" />
<text  x="679.89" y="687.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a3791 (2 samples, 0.05%)</title><rect x="32.0" y="693" width="0.6" height="15.0" fill="rgb(243,54,34)" rx="2" ry="2" />
<text  x="35.01" y="703.5" ></text>
</g>
<g >
<title>0x00007ff97d8f5b56 (1 samples, 0.03%)</title><rect x="33.5" y="677" width="0.3" height="15.0" fill="rgb(210,17,31)" rx="2" ry="2" />
<text  x="36.50" y="687.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003d610&gt; (3 samples, 0.08%)</title><rect x="429.1" y="677" width="0.9" height="15.0" fill="rgb(228,109,1)" rx="2" ry="2" />
<text  x="432.11" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TexturemapRasterizer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy() (1 samples, 0.03%)</title><rect x="658.7" y="645" width="0.3" height="15.0" fill="rgb(225,39,43)" rx="2" ry="2" />
<text  x="661.75" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="690.3" y="677" width="0.3" height="15.0" fill="rgb(253,26,14)" rx="2" ry="2" />
<text  x="693.28" y="687.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.03%)</title><rect x="34.4" y="549" width="0.3" height="15.0" fill="rgb(236,4,45)" rx="2" ry="2" />
<text  x="37.39" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="1145.7" y="485" width="0.3" height="15.0" fill="rgb(228,229,53)" rx="2" ry="2" />
<text  x="1148.68" y="495.5" ></text>
</g>
<g >
<title>0x00007ff97d8f0355 (1 samples, 0.03%)</title><rect x="34.7" y="597" width="0.3" height="15.0" fill="rgb(214,2,54)" rx="2" ry="2" />
<text  x="37.69" y="607.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.05%)</title><rect x="667.1" y="629" width="0.6" height="15.0" fill="rgb(246,148,47)" rx="2" ry="2" />
<text  x="670.08" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="1161.7" y="277" width="0.6" height="15.0" fill="rgb(205,204,10)" rx="2" ry="2" />
<text  x="1164.74" y="287.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1131.4" y="613" width="0.3" height="15.0" fill="rgb(238,147,41)" rx="2" ry="2" />
<text  x="1134.40" y="623.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="119.2" y="581" width="0.3" height="15.0" fill="rgb(234,141,1)" rx="2" ry="2" />
<text  x="122.17" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.08%)</title><rect x="1186.7" y="533" width="0.9" height="15.0" fill="rgb(214,164,31)" rx="2" ry="2" />
<text  x="1189.73" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.03%)</title><rect x="1184.6" y="133" width="0.3" height="15.0" fill="rgb(236,193,49)" rx="2" ry="2" />
<text  x="1187.65" y="143.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.08%)</title><rect x="1186.7" y="517" width="0.9" height="15.0" fill="rgb(218,222,39)" rx="2" ry="2" />
<text  x="1189.73" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="684.6" y="709" width="0.3" height="15.0" fill="rgb(218,127,31)" rx="2" ry="2" />
<text  x="687.63" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.03%)</title><rect x="683.7" y="709" width="0.3" height="15.0" fill="rgb(229,88,18)" rx="2" ry="2" />
<text  x="686.73" y="719.5" ></text>
</g>
<g >
<title>0x00007fa19390ff9d (1 samples, 0.03%)</title><rect x="32.9" y="645" width="0.3" height="15.0" fill="rgb(211,215,31)" rx="2" ry="2" />
<text  x="35.90" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.03%)</title><rect x="1146.6" y="581" width="0.3" height="15.0" fill="rgb(209,4,1)" rx="2" ry="2" />
<text  x="1149.57" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="687.0" y="629" width="0.3" height="15.0" fill="rgb(253,132,28)" rx="2" ry="2" />
<text  x="690.01" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (70 samples, 1.76%)</title><rect x="1159.4" y="565" width="20.8" height="15.0" fill="rgb(210,122,36)" rx="2" ry="2" />
<text  x="1162.36" y="575.5" ></text>
</g>
<g >
<title>0x00007f9f3a79db4e (1 samples, 0.03%)</title><rect x="31.7" y="677" width="0.3" height="15.0" fill="rgb(234,167,44)" rx="2" ry="2" />
<text  x="34.71" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::max_size(std::allocator&lt;int&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1156.4" y="533" width="0.3" height="15.0" fill="rgb(211,221,53)" rx="2" ry="2" />
<text  x="1159.39" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1145.1" y="469" width="0.3" height="15.0" fill="rgb(213,184,22)" rx="2" ry="2" />
<text  x="1148.08" y="479.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (1 samples, 0.03%)</title><rect x="1156.7" y="469" width="0.3" height="15.0" fill="rgb(251,8,38)" rx="2" ry="2" />
<text  x="1159.69" y="479.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="674.8" y="645" width="0.3" height="15.0" fill="rgb(226,47,54)" rx="2" ry="2" />
<text  x="677.81" y="655.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.03%)</title><rect x="33.2" y="629" width="0.3" height="15.0" fill="rgb(235,224,42)" rx="2" ry="2" />
<text  x="36.20" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1140.6" y="597" width="0.6" height="15.0" fill="rgb(254,28,9)" rx="2" ry="2" />
<text  x="1143.62" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="1153.1" y="661" width="0.6" height="15.0" fill="rgb(216,217,7)" rx="2" ry="2" />
<text  x="1156.12" y="671.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.03%)</title><rect x="1164.4" y="293" width="0.3" height="15.0" fill="rgb(233,108,36)" rx="2" ry="2" />
<text  x="1167.42" y="303.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000031830&gt; (3 samples, 0.08%)</title><rect x="38.9" y="741" width="0.8" height="15.0" fill="rgb(219,141,11)" rx="2" ry="2" />
<text  x="41.85" y="751.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.03%)</title><rect x="22.5" y="613" width="0.3" height="15.0" fill="rgb(236,50,2)" rx="2" ry="2" />
<text  x="25.49" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (2 samples, 0.05%)</title><rect x="28.4" y="549" width="0.6" height="15.0" fill="rgb(246,88,21)" rx="2" ry="2" />
<text  x="31.44" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1148.4" y="629" width="0.3" height="15.0" fill="rgb(230,95,53)" rx="2" ry="2" />
<text  x="1151.36" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1145.7" y="533" width="0.3" height="15.0" fill="rgb(249,181,5)" rx="2" ry="2" />
<text  x="1148.68" y="543.5" ></text>
</g>
<g >
<title>tc_calloc (2 samples, 0.05%)</title><rect x="427.6" y="629" width="0.6" height="15.0" fill="rgb(247,64,16)" rx="2" ry="2" />
<text  x="430.63" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.03%)</title><rect x="1152.8" y="613" width="0.3" height="15.0" fill="rgb(210,97,42)" rx="2" ry="2" />
<text  x="1155.82" y="623.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (38 samples, 0.96%)</title><rect x="1076.4" y="613" width="11.3" height="15.0" fill="rgb(239,123,9)" rx="2" ry="2" />
<text  x="1079.37" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1132.6" y="597" width="0.3" height="15.0" fill="rgb(244,115,53)" rx="2" ry="2" />
<text  x="1135.59" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.08%)</title><rect x="1143.6" y="597" width="0.9" height="15.0" fill="rgb(219,148,9)" rx="2" ry="2" />
<text  x="1146.60" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="676.9" y="661" width="0.3" height="15.0" fill="rgb(213,229,28)" rx="2" ry="2" />
<text  x="679.89" y="671.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="625.4" y="677" width="0.3" height="15.0" fill="rgb(224,143,31)" rx="2" ry="2" />
<text  x="628.43" y="687.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (1 samples, 0.03%)</title><rect x="1182.3" y="597" width="0.3" height="15.0" fill="rgb(242,155,15)" rx="2" ry="2" />
<text  x="1185.27" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (1 samples, 0.03%)</title><rect x="22.8" y="437" width="0.3" height="15.0" fill="rgb(229,155,1)" rx="2" ry="2" />
<text  x="25.79" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018bf0&gt; (1 samples, 0.03%)</title><rect x="668.6" y="629" width="0.3" height="15.0" fill="rgb(254,15,33)" rx="2" ry="2" />
<text  x="671.56" y="639.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::seekpos(std::fpos&lt;__mbstate_t&gt;, std::_Ios_Openmode) (1 samples, 0.03%)</title><rect x="1181.1" y="629" width="0.3" height="15.0" fill="rgb(242,177,12)" rx="2" ry="2" />
<text  x="1184.08" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1132.3" y="597" width="0.3" height="15.0" fill="rgb(219,44,45)" rx="2" ry="2" />
<text  x="1135.29" y="607.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::allocate(unsigned long, void const*) (2 samples, 0.05%)</title><rect x="1159.4" y="437" width="0.6" height="15.0" fill="rgb(239,227,49)" rx="2" ry="2" />
<text  x="1162.36" y="447.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.03%)</title><rect x="690.0" y="661" width="0.3" height="15.0" fill="rgb(209,219,10)" rx="2" ry="2" />
<text  x="692.98" y="671.5" ></text>
</g>
<g >
<title>_Node_const_iterator (3 samples, 0.08%)</title><rect x="667.7" y="645" width="0.9" height="15.0" fill="rgb(254,207,33)" rx="2" ry="2" />
<text  x="670.67" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="676.6" y="645" width="0.3" height="15.0" fill="rgb(248,104,52)" rx="2" ry="2" />
<text  x="679.59" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (3 samples, 0.08%)</title><rect x="1146.3" y="709" width="0.9" height="15.0" fill="rgb(232,149,12)" rx="2" ry="2" />
<text  x="1149.27" y="719.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;0000000000109840&gt; (1 samples, 0.03%)</title><rect x="38.9" y="533" width="0.3" height="15.0" fill="rgb(220,82,43)" rx="2" ry="2" />
<text  x="41.85" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.03%)</title><rect x="1129.3" y="597" width="0.3" height="15.0" fill="rgb(205,97,15)" rx="2" ry="2" />
<text  x="1132.32" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.03%)</title><rect x="1184.6" y="181" width="0.3" height="15.0" fill="rgb(237,165,9)" rx="2" ry="2" />
<text  x="1187.65" y="191.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1148.4" y="661" width="0.3" height="15.0" fill="rgb(251,55,46)" rx="2" ry="2" />
<text  x="1151.36" y="671.5" ></text>
</g>
<g >
<title>setlinebuf@@GLIBC_2.2.5&lt;000000000007b480&gt; (1 samples, 0.03%)</title><rect x="28.7" y="405" width="0.3" height="15.0" fill="rgb(249,58,25)" rx="2" ry="2" />
<text  x="31.74" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1143.9" y="581" width="0.3" height="15.0" fill="rgb(240,204,8)" rx="2" ry="2" />
<text  x="1146.89" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*) (1 samples, 0.03%)</title><rect x="1158.5" y="629" width="0.3" height="15.0" fill="rgb(215,204,24)" rx="2" ry="2" />
<text  x="1161.47" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index(unsigned long, unsigned long) const (2 samples, 0.05%)</title><rect x="1161.7" y="261" width="0.6" height="15.0" fill="rgb(218,3,29)" rx="2" ry="2" />
<text  x="1164.74" y="271.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (71 samples, 1.79%)</title><rect x="473.1" y="645" width="21.2" height="15.0" fill="rgb(243,21,15)" rx="2" ry="2" />
<text  x="476.14" y="655.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (3 samples, 0.08%)</title><rect x="1186.7" y="357" width="0.9" height="15.0" fill="rgb(253,18,3)" rx="2" ry="2" />
<text  x="1189.73" y="367.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1157.0" y="645" width="0.3" height="15.0" fill="rgb(228,109,50)" rx="2" ry="2" />
<text  x="1159.98" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="597" width="0.3" height="15.0" fill="rgb(206,161,36)" rx="2" ry="2" />
<text  x="1183.48" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.08%)</title><rect x="1145.4" y="597" width="0.9" height="15.0" fill="rgb(235,13,33)" rx="2" ry="2" />
<text  x="1148.38" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1128.4" y="629" width="0.3" height="15.0" fill="rgb(250,96,54)" rx="2" ry="2" />
<text  x="1131.43" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator-(long) const (1 samples, 0.03%)</title><rect x="1149.2" y="613" width="0.3" height="15.0" fill="rgb(220,200,6)" rx="2" ry="2" />
<text  x="1152.25" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="1142.4" y="469" width="0.3" height="15.0" fill="rgb(237,213,4)" rx="2" ry="2" />
<text  x="1145.41" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.05%)</title><rect x="1145.4" y="565" width="0.6" height="15.0" fill="rgb(251,168,45)" rx="2" ry="2" />
<text  x="1148.38" y="575.5" ></text>
</g>
<g >
<title>pa_log_set_ident&lt;0000000000031200&gt; (1 samples, 0.03%)</title><rect x="30.5" y="597" width="0.3" height="15.0" fill="rgb(236,4,24)" rx="2" ry="2" />
<text  x="33.52" y="607.5" ></text>
</g>
<g >
<title>pair&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;, bool, true&gt; (1 samples, 0.03%)</title><rect x="1160.3" y="325" width="0.3" height="15.0" fill="rgb(220,154,10)" rx="2" ry="2" />
<text  x="1163.25" y="335.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (70 samples, 1.76%)</title><rect x="895.5" y="565" width="20.8" height="15.0" fill="rgb(234,169,35)" rx="2" ry="2" />
<text  x="898.52" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1182.6" y="581" width="0.3" height="15.0" fill="rgb(249,119,30)" rx="2" ry="2" />
<text  x="1185.56" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="1142.4" y="517" width="0.3" height="15.0" fill="rgb(228,154,35)" rx="2" ry="2" />
<text  x="1145.41" y="527.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (3 samples, 0.08%)</title><rect x="1160.6" y="261" width="0.8" height="15.0" fill="rgb(228,128,50)" rx="2" ry="2" />
<text  x="1163.55" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (3 samples, 0.08%)</title><rect x="119.8" y="501" width="0.9" height="15.0" fill="rgb(212,30,20)" rx="2" ry="2" />
<text  x="122.76" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="684.0" y="677" width="0.6" height="15.0" fill="rgb(246,202,16)" rx="2" ry="2" />
<text  x="687.03" y="687.5" ></text>
</g>
<g >
<title>0x00007f9f3a7ad28b (1 samples, 0.03%)</title><rect x="32.0" y="613" width="0.3" height="15.0" fill="rgb(216,56,6)" rx="2" ry="2" />
<text  x="35.01" y="623.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.03%)</title><rect x="33.5" y="581" width="0.3" height="15.0" fill="rgb(217,99,18)" rx="2" ry="2" />
<text  x="36.50" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::TryPop(void**)[inline] (1 samples, 0.03%)</title><rect x="31.4" y="469" width="0.3" height="15.0" fill="rgb(252,69,22)" rx="2" ry="2" />
<text  x="34.42" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1146.0" y="565" width="0.3" height="15.0" fill="rgb(243,80,28)" rx="2" ry="2" />
<text  x="1148.98" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1134.4" y="501" width="0.3" height="15.0" fill="rgb(207,45,0)" rx="2" ry="2" />
<text  x="1137.38" y="511.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1131.4" y="581" width="0.3" height="15.0" fill="rgb(214,76,43)" rx="2" ry="2" />
<text  x="1134.40" y="591.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.03%)</title><rect x="672.1" y="565" width="0.3" height="15.0" fill="rgb(246,70,48)" rx="2" ry="2" />
<text  x="675.13" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="659.9" y="661" width="0.3" height="15.0" fill="rgb(223,13,44)" rx="2" ry="2" />
<text  x="662.94" y="671.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (105 samples, 2.65%)</title><rect x="242.6" y="629" width="31.2" height="15.0" fill="rgb(211,6,6)" rx="2" ry="2" />
<text  x="245.61" y="639.5" >_P..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (1 samples, 0.03%)</title><rect x="22.8" y="453" width="0.3" height="15.0" fill="rgb(215,40,46)" rx="2" ry="2" />
<text  x="25.79" y="463.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="22.5" y="533" width="0.3" height="15.0" fill="rgb(205,36,35)" rx="2" ry="2" />
<text  x="25.49" y="543.5" ></text>
</g>
<g >
<title>pa_log_set_ident&lt;0000000000031200&gt; (1 samples, 0.03%)</title><rect x="30.5" y="581" width="0.3" height="15.0" fill="rgb(206,197,9)" rx="2" ry="2" />
<text  x="33.52" y="591.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.03%)</title><rect x="1130.2" y="565" width="0.3" height="15.0" fill="rgb(217,62,45)" rx="2" ry="2" />
<text  x="1133.21" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1180.5" y="629" width="0.3" height="15.0" fill="rgb(224,157,26)" rx="2" ry="2" />
<text  x="1183.48" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="690.0" y="581" width="0.3" height="15.0" fill="rgb(250,38,6)" rx="2" ry="2" />
<text  x="692.98" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="676.6" y="693" width="0.3" height="15.0" fill="rgb(226,24,7)" rx="2" ry="2" />
<text  x="679.59" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size(std::allocator&lt;int&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1156.4" y="549" width="0.3" height="15.0" fill="rgb(232,60,7)" rx="2" ry="2" />
<text  x="1159.39" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="672.4" y="661" width="0.3" height="15.0" fill="rgb(254,109,38)" rx="2" ry="2" />
<text  x="675.43" y="671.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (1 samples, 0.03%)</title><rect x="26.4" y="501" width="0.3" height="15.0" fill="rgb(247,175,47)" rx="2" ry="2" />
<text  x="29.36" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (3 samples, 0.08%)</title><rect x="680.2" y="613" width="0.9" height="15.0" fill="rgb(250,149,30)" rx="2" ry="2" />
<text  x="683.16" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="1151.6" y="661" width="0.3" height="15.0" fill="rgb(208,122,12)" rx="2" ry="2" />
<text  x="1154.63" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.05%)</title><rect x="1146.3" y="661" width="0.6" height="15.0" fill="rgb(250,85,33)" rx="2" ry="2" />
<text  x="1149.27" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (21 samples, 0.53%)</title><rect x="711.4" y="677" width="6.2" height="15.0" fill="rgb(246,158,51)" rx="2" ry="2" />
<text  x="714.40" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.05%)</title><rect x="658.2" y="693" width="0.5" height="15.0" fill="rgb(250,228,41)" rx="2" ry="2" />
<text  x="661.15" y="703.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.03%)</title><rect x="30.5" y="453" width="0.3" height="15.0" fill="rgb(217,41,22)" rx="2" ry="2" />
<text  x="33.52" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.08%)</title><rect x="667.7" y="661" width="0.9" height="15.0" fill="rgb(225,97,19)" rx="2" ry="2" />
<text  x="670.67" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;) (2 samples, 0.05%)</title><rect x="663.8" y="613" width="0.6" height="15.0" fill="rgb(227,171,43)" rx="2" ry="2" />
<text  x="666.80" y="623.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.03%)</title><rect x="662.6" y="677" width="0.3" height="15.0" fill="rgb(205,97,15)" rx="2" ry="2" />
<text  x="665.61" y="687.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a26ee (1 samples, 0.03%)</title><rect x="32.0" y="661" width="0.3" height="15.0" fill="rgb(238,149,50)" rx="2" ry="2" />
<text  x="35.01" y="671.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="683.4" y="629" width="0.3" height="15.0" fill="rgb(252,208,30)" rx="2" ry="2" />
<text  x="686.44" y="639.5" ></text>
</g>
<g >
<title>drmCommandWriteRead&lt;000000000000a8d0&gt; (7 samples, 0.18%)</title><rect x="1088.0" y="565" width="2.1" height="15.0" fill="rgb(225,193,29)" rx="2" ry="2" />
<text  x="1090.97" y="575.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="658.7" y="677" width="0.3" height="15.0" fill="rgb(231,11,4)" rx="2" ry="2" />
<text  x="661.75" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (3 samples, 0.08%)</title><rect x="671.2" y="645" width="0.9" height="15.0" fill="rgb(248,45,26)" rx="2" ry="2" />
<text  x="674.24" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="689.1" y="645" width="0.3" height="15.0" fill="rgb(211,138,17)" rx="2" ry="2" />
<text  x="692.09" y="655.5" ></text>
</g>
<g >
<title>0x00007f9f3a7a5d2a (1 samples, 0.03%)</title><rect x="35.0" y="597" width="0.3" height="15.0" fill="rgb(242,24,7)" rx="2" ry="2" />
<text  x="37.99" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (3 samples, 0.08%)</title><rect x="80.5" y="661" width="0.9" height="15.0" fill="rgb(242,228,41)" rx="2" ry="2" />
<text  x="83.50" y="671.5" ></text>
</g>
<g >
<title>0x00007fa193914b56 (1 samples, 0.03%)</title><rect x="34.4" y="645" width="0.3" height="15.0" fill="rgb(230,12,24)" rx="2" ry="2" />
<text  x="37.39" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1134.4" y="533" width="0.3" height="15.0" fill="rgb(211,228,15)" rx="2" ry="2" />
<text  x="1137.38" y="543.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (2 samples, 0.05%)</title><rect x="25.8" y="485" width="0.6" height="15.0" fill="rgb(208,63,48)" rx="2" ry="2" />
<text  x="28.77" y="495.5" ></text>
</g>
<g >
<title>sbrk&lt;000000000003a3d0&gt; (1 samples, 0.03%)</title><rect x="427.3" y="389" width="0.3" height="15.0" fill="rgb(223,203,32)" rx="2" ry="2" />
<text  x="430.33" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="1146.0" y="405" width="0.3" height="15.0" fill="rgb(212,92,6)" rx="2" ry="2" />
<text  x="1148.98" y="415.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.08%)</title><rect x="669.5" y="613" width="0.8" height="15.0" fill="rgb(241,229,43)" rx="2" ry="2" />
<text  x="672.46" y="623.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (2 samples, 0.05%)</title><rect x="25.8" y="469" width="0.6" height="15.0" fill="rgb(245,65,26)" rx="2" ry="2" />
<text  x="28.77" y="479.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.03%)</title><rect x="1152.2" y="645" width="0.3" height="15.0" fill="rgb(232,158,17)" rx="2" ry="2" />
<text  x="1155.22" y="655.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;0000000000026230&gt; (3 samples, 0.08%)</title><rect x="1186.7" y="661" width="0.9" height="15.0" fill="rgb(237,10,8)" rx="2" ry="2" />
<text  x="1189.73" y="671.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000048260&gt; (1 samples, 0.03%)</title><rect x="625.7" y="677" width="0.3" height="15.0" fill="rgb(247,194,1)" rx="2" ry="2" />
<text  x="628.73" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1130.5" y="597" width="0.6" height="15.0" fill="rgb(253,108,10)" rx="2" ry="2" />
<text  x="1133.51" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,463 samples, 36.88%)</title><rect x="691.2" y="693" width="435.1" height="15.0" fill="rgb(212,104,52)" rx="2" ry="2" />
<text  x="694.17" y="703.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::pair&lt;long, __gnu_debug::_Distance_precision&gt;::pair&lt;long, __gnu_debug::_Distance_precision, true&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (1 samples, 0.03%)</title><rect x="1162.3" y="245" width="0.3" height="15.0" fill="rgb(240,81,11)" rx="2" ry="2" />
<text  x="1165.34" y="255.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (4 samples, 0.10%)</title><rect x="119.5" y="565" width="1.2" height="15.0" fill="rgb(210,165,53)" rx="2" ry="2" />
<text  x="122.46" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.03%)</title><rect x="690.0" y="677" width="0.3" height="15.0" fill="rgb(239,201,2)" rx="2" ry="2" />
<text  x="692.98" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (7 samples, 0.18%)</title><rect x="1141.5" y="629" width="2.1" height="15.0" fill="rgb(229,206,10)" rx="2" ry="2" />
<text  x="1144.51" y="639.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (1 samples, 0.03%)</title><rect x="1159.1" y="661" width="0.3" height="15.0" fill="rgb(221,184,33)" rx="2" ry="2" />
<text  x="1162.06" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.03%)</title><rect x="666.8" y="677" width="0.3" height="15.0" fill="rgb(245,51,52)" rx="2" ry="2" />
<text  x="669.78" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1128.4" y="597" width="0.3" height="15.0" fill="rgb(231,36,42)" rx="2" ry="2" />
<text  x="1131.43" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1131.4" y="597" width="0.3" height="15.0" fill="rgb(236,213,6)" rx="2" ry="2" />
<text  x="1134.40" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.05%)</title><rect x="1145.4" y="581" width="0.6" height="15.0" fill="rgb(216,37,43)" rx="2" ry="2" />
<text  x="1148.38" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1144.8" y="501" width="0.3" height="15.0" fill="rgb(239,17,3)" rx="2" ry="2" />
<text  x="1147.79" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="680.2" y="549" width="0.6" height="15.0" fill="rgb(212,182,19)" rx="2" ry="2" />
<text  x="683.16" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.03%)</title><rect x="28.4" y="501" width="0.3" height="15.0" fill="rgb(241,125,41)" rx="2" ry="2" />
<text  x="31.44" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.05%)</title><rect x="1140.6" y="613" width="0.6" height="15.0" fill="rgb(214,144,50)" rx="2" ry="2" />
<text  x="1143.62" y="623.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (4 samples, 0.10%)</title><rect x="239.0" y="629" width="1.2" height="15.0" fill="rgb(251,166,1)" rx="2" ry="2" />
<text  x="242.04" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (3 samples, 0.08%)</title><rect x="1186.7" y="549" width="0.9" height="15.0" fill="rgb(220,15,5)" rx="2" ry="2" />
<text  x="1189.73" y="559.5" ></text>
</g>
</g>
</svg>
