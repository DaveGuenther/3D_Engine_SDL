<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="854.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="837" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="837" > </text>
<g id="frames">
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (39 samples, 1.38%)</title><rect x="670.0" y="581" width="16.2" height="15.0" fill="rgb(243,62,46)" rx="2" ry="2" />
<text  x="672.95" y="591.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (335 samples, 11.82%)</title><rect x="39.6" y="661" width="139.4" height="15.0" fill="rgb(235,17,30)" rx="2" ry="2" />
<text  x="42.56" y="671.5" >ScanlineRasterize..</text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1187.5" y="421" width="0.8" height="15.0" fill="rgb(213,58,39)" rx="2" ry="2" />
<text  x="1190.50" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1170.4" y="565" width="0.9" height="15.0" fill="rgb(238,43,51)" rx="2" ry="2" />
<text  x="1173.43" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1170.0" y="549" width="0.4" height="15.0" fill="rgb(212,118,13)" rx="2" ry="2" />
<text  x="1173.01" y="559.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1155.9" y="549" width="0.4" height="15.0" fill="rgb(229,97,18)" rx="2" ry="2" />
<text  x="1158.86" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1179.2" y="565" width="0.8" height="15.0" fill="rgb(238,167,39)" rx="2" ry="2" />
<text  x="1182.17" y="575.5" ></text>
</g>
<g >
<title>VectorMathService::getVectorLength(Vec3d const&amp;) (1 samples, 0.04%)</title><rect x="416.0" y="677" width="0.4" height="15.0" fill="rgb(223,129,30)" rx="2" ry="2" />
<text  x="418.96" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1186.3" y="581" width="0.4" height="15.0" fill="rgb(247,100,35)" rx="2" ry="2" />
<text  x="1189.25" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (355 samples, 12.53%)</title><rect x="707.8" y="565" width="147.9" height="15.0" fill="rgb(242,195,18)" rx="2" ry="2" />
<text  x="710.84" y="575.5" >nouveau_drm_screen..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000d2550&gt; (1 samples, 0.04%)</title><rect x="1172.9" y="597" width="0.4" height="15.0" fill="rgb(225,101,35)" rx="2" ry="2" />
<text  x="1175.93" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (7 samples, 0.25%)</title><rect x="173.6" y="597" width="2.9" height="15.0" fill="rgb(254,83,8)" rx="2" ry="2" />
<text  x="176.63" y="607.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (24 samples, 0.85%)</title><rect x="10.0" y="789" width="10.0" height="15.0" fill="rgb(224,63,29)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="645" width="0.4" height="15.0" fill="rgb(240,152,38)" rx="2" ry="2" />
<text  x="1179.26" y="655.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;00000000000535a0&gt; (2 samples, 0.07%)</title><rect x="1186.7" y="661" width="0.8" height="15.0" fill="rgb(218,123,9)" rx="2" ry="2" />
<text  x="1189.67" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1172.5" y="501" width="0.4" height="15.0" fill="rgb(244,201,52)" rx="2" ry="2" />
<text  x="1175.51" y="511.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (6 samples, 0.21%)</title><rect x="1162.5" y="581" width="2.5" height="15.0" fill="rgb(246,217,28)" rx="2" ry="2" />
<text  x="1165.52" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (30 samples, 1.06%)</title><rect x="230.3" y="613" width="12.5" height="15.0" fill="rgb(247,43,20)" rx="2" ry="2" />
<text  x="233.26" y="623.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="34.1" y="421" width="0.5" height="15.0" fill="rgb(226,167,8)" rx="2" ry="2" />
<text  x="37.15" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (2 samples, 0.07%)</title><rect x="411.4" y="661" width="0.8" height="15.0" fill="rgb(236,24,49)" rx="2" ry="2" />
<text  x="414.38" y="671.5" ></text>
</g>
<g >
<title>SpinLock::Lock()[inline] (1 samples, 0.04%)</title><rect x="242.3" y="485" width="0.5" height="15.0" fill="rgb(222,19,35)" rx="2" ry="2" />
<text  x="245.34" y="495.5" ></text>
</g>
<g >
<title>~_Safe_sequence_base (1 samples, 0.04%)</title><rect x="1176.3" y="693" width="0.4" height="15.0" fill="rgb(232,166,17)" rx="2" ry="2" />
<text  x="1179.26" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (41 samples, 1.45%)</title><rect x="350.6" y="629" width="17.1" height="15.0" fill="rgb(240,4,24)" rx="2" ry="2" />
<text  x="353.59" y="639.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1165.9" y="517" width="0.8" height="15.0" fill="rgb(237,123,1)" rx="2" ry="2" />
<text  x="1168.85" y="527.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000066b70&gt; (879 samples, 31.02%)</title><rect x="37.9" y="693" width="366.0" height="15.0" fill="rgb(229,39,37)" rx="2" ry="2" />
<text  x="40.90" y="703.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;00000000..</text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1179.2" y="581" width="0.8" height="15.0" fill="rgb(248,96,12)" rx="2" ry="2" />
<text  x="1182.17" y="591.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.39%)</title><rect x="1152.1" y="613" width="4.6" height="15.0" fill="rgb(217,164,23)" rx="2" ry="2" />
<text  x="1155.11" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (57 samples, 2.01%)</title><rect x="219.0" y="629" width="23.8" height="15.0" fill="rgb(240,63,4)" rx="2" ry="2" />
<text  x="222.02" y="639.5" >S..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1159.2" y="565" width="0.4" height="15.0" fill="rgb(230,39,51)" rx="2" ry="2" />
<text  x="1162.19" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="410.1" y="645" width="1.3" height="15.0" fill="rgb(245,188,2)" rx="2" ry="2" />
<text  x="413.13" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::SampleAllocation(unsigned long)[inline] (1 samples, 0.04%)</title><rect x="401.4" y="533" width="0.4" height="15.0" fill="rgb(209,149,5)" rx="2" ry="2" />
<text  x="404.39" y="543.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;00000000000671c0&gt; (58 samples, 2.05%)</title><rect x="403.9" y="693" width="24.1" height="15.0" fill="rgb(209,29,9)" rx="2" ry="2" />
<text  x="406.89" y="703.5" >R..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="34.1" y="453" width="0.5" height="15.0" fill="rgb(240,68,9)" rx="2" ry="2" />
<text  x="37.15" y="463.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (3 samples, 0.11%)</title><rect x="34.6" y="645" width="1.2" height="15.0" fill="rgb(217,183,49)" rx="2" ry="2" />
<text  x="37.57" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1188.3" y="485" width="0.9" height="15.0" fill="rgb(209,209,4)" rx="2" ry="2" />
<text  x="1191.33" y="495.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.07%)</title><rect x="32.1" y="357" width="0.8" height="15.0" fill="rgb(220,57,9)" rx="2" ry="2" />
<text  x="35.07" y="367.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (1 samples, 0.04%)</title><rect x="1161.7" y="581" width="0.4" height="15.0" fill="rgb(230,60,42)" rx="2" ry="2" />
<text  x="1164.69" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1187.5" y="501" width="0.8" height="15.0" fill="rgb(251,205,15)" rx="2" ry="2" />
<text  x="1190.50" y="511.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="348.9" y="645" width="0.4" height="15.0" fill="rgb(250,160,51)" rx="2" ry="2" />
<text  x="351.93" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060410&gt; (2 samples, 0.07%)</title><rect x="418.5" y="661" width="0.8" height="15.0" fill="rgb(246,34,26)" rx="2" ry="2" />
<text  x="421.46" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1156.7" y="565" width="1.2" height="15.0" fill="rgb(250,87,41)" rx="2" ry="2" />
<text  x="1159.69" y="575.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.04%)</title><rect x="149.9" y="581" width="0.4" height="15.0" fill="rgb(240,203,26)" rx="2" ry="2" />
<text  x="152.90" y="591.5" ></text>
</g>
<g >
<title>xcb_send_request_with_fds64&lt;0000000000013f00&gt; (1 samples, 0.04%)</title><rect x="428.9" y="613" width="0.4" height="15.0" fill="rgb(227,225,10)" rx="2" ry="2" />
<text  x="431.87" y="623.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (1 samples, 0.04%)</title><rect x="1164.6" y="565" width="0.4" height="15.0" fill="rgb(215,105,36)" rx="2" ry="2" />
<text  x="1167.60" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1178.3" y="645" width="0.9" height="15.0" fill="rgb(214,136,7)" rx="2" ry="2" />
<text  x="1181.34" y="655.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="565" width="0.5" height="15.0" fill="rgb(246,9,42)" rx="2" ry="2" />
<text  x="37.15" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.07%)</title><rect x="1187.5" y="261" width="0.8" height="15.0" fill="rgb(250,110,34)" rx="2" ry="2" />
<text  x="1190.50" y="271.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (6 samples, 0.21%)</title><rect x="31.7" y="581" width="2.4" height="15.0" fill="rgb(234,47,16)" rx="2" ry="2" />
<text  x="34.65" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="677" width="0.4" height="15.0" fill="rgb(246,184,53)" rx="2" ry="2" />
<text  x="1179.26" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.07%)</title><rect x="1188.3" y="277" width="0.9" height="15.0" fill="rgb(254,34,39)" rx="2" ry="2" />
<text  x="1191.33" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="1187.5" y="85" width="0.4" height="15.0" fill="rgb(242,115,34)" rx="2" ry="2" />
<text  x="1190.50" y="95.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (63 samples, 2.22%)</title><rect x="117.8" y="629" width="26.3" height="15.0" fill="rgb(214,156,35)" rx="2" ry="2" />
<text  x="120.84" y="639.5" >s..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.39%)</title><rect x="1162.1" y="597" width="4.6" height="15.0" fill="rgb(216,224,50)" rx="2" ry="2" />
<text  x="1165.10" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="412.2" y="565" width="0.4" height="15.0" fill="rgb(214,45,29)" rx="2" ry="2" />
<text  x="415.22" y="575.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f680&gt; (25 samples, 0.88%)</title><rect x="403.9" y="677" width="10.4" height="15.0" fill="rgb(216,2,39)" rx="2" ry="2" />
<text  x="406.89" y="687.5" ></text>
</g>
<g >
<title>__open64 (1 samples, 0.04%)</title><rect x="34.6" y="581" width="0.4" height="15.0" fill="rgb(211,184,3)" rx="2" ry="2" />
<text  x="37.57" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.07%)</title><rect x="1178.3" y="709" width="0.9" height="15.0" fill="rgb(216,194,9)" rx="2" ry="2" />
<text  x="1181.34" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (8 samples, 0.28%)</title><rect x="1157.9" y="597" width="3.4" height="15.0" fill="rgb(245,149,12)" rx="2" ry="2" />
<text  x="1160.94" y="607.5" ></text>
</g>
<g >
<title>XFreeModifiermap&lt;0000000000028720&gt; (1 samples, 0.04%)</title><rect x="428.9" y="565" width="0.4" height="15.0" fill="rgb(249,97,6)" rx="2" ry="2" />
<text  x="431.87" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1156.3" y="597" width="0.4" height="15.0" fill="rgb(206,153,12)" rx="2" ry="2" />
<text  x="1159.27" y="607.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;00000000000261e0&gt; (2 samples, 0.07%)</title><rect x="1188.3" y="629" width="0.9" height="15.0" fill="rgb(221,99,15)" rx="2" ry="2" />
<text  x="1191.33" y="639.5" ></text>
</g>
<g >
<title>~__shared_count (3 samples, 0.11%)</title><rect x="367.7" y="645" width="1.2" height="15.0" fill="rgb(212,181,26)" rx="2" ry="2" />
<text  x="370.66" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (7 samples, 0.25%)</title><rect x="1153.4" y="597" width="2.9" height="15.0" fill="rgb(237,165,50)" rx="2" ry="2" />
<text  x="1156.36" y="607.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.07%)</title><rect x="32.1" y="309" width="0.8" height="15.0" fill="rgb(244,173,28)" rx="2" ry="2" />
<text  x="35.07" y="319.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003ecb0&gt; (5 samples, 0.18%)</title><rect x="35.8" y="709" width="2.1" height="15.0" fill="rgb(248,161,41)" rx="2" ry="2" />
<text  x="38.82" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.07%)</title><rect x="1187.5" y="293" width="0.8" height="15.0" fill="rgb(218,103,11)" rx="2" ry="2" />
<text  x="1190.50" y="303.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.14%)</title><rect x="1167.5" y="549" width="1.7" height="15.0" fill="rgb(212,202,53)" rx="2" ry="2" />
<text  x="1170.52" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="427.6" y="565" width="0.4" height="15.0" fill="rgb(253,153,42)" rx="2" ry="2" />
<text  x="430.62" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="402.6" y="645" width="0.5" height="15.0" fill="rgb(219,68,6)" rx="2" ry="2" />
<text  x="405.64" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1171.3" y="565" width="0.4" height="15.0" fill="rgb(245,177,22)" rx="2" ry="2" />
<text  x="1174.26" y="575.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1172.1" y="469" width="0.4" height="15.0" fill="rgb(217,215,33)" rx="2" ry="2" />
<text  x="1175.10" y="479.5" ></text>
</g>
<g >
<title>qsort_r@@GLIBC_2.8&lt;000000000003c6e0&gt; (1 samples, 0.04%)</title><rect x="37.5" y="645" width="0.4" height="15.0" fill="rgb(220,166,51)" rx="2" ry="2" />
<text  x="40.48" y="655.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.04%)</title><rect x="401.4" y="549" width="0.4" height="15.0" fill="rgb(218,120,51)" rx="2" ry="2" />
<text  x="404.39" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1171.7" y="485" width="0.4" height="15.0" fill="rgb(218,110,37)" rx="2" ry="2" />
<text  x="1174.68" y="495.5" ></text>
</g>
<g >
<title>__shared_ptr (5 samples, 0.18%)</title><rect x="346.8" y="645" width="2.1" height="15.0" fill="rgb(227,193,16)" rx="2" ry="2" />
<text  x="349.85" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="343.1" y="581" width="0.4" height="15.0" fill="rgb(245,132,5)" rx="2" ry="2" />
<text  x="346.10" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="416.4" y="581" width="0.4" height="15.0" fill="rgb(225,152,37)" rx="2" ry="2" />
<text  x="419.38" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1164.6" y="501" width="0.4" height="15.0" fill="rgb(252,73,32)" rx="2" ry="2" />
<text  x="1167.60" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="1156.3" y="517" width="0.4" height="15.0" fill="rgb(245,167,25)" rx="2" ry="2" />
<text  x="1159.27" y="527.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000023830&gt; (18 samples, 0.64%)</title><rect x="1180.0" y="725" width="7.5" height="15.0" fill="rgb(223,28,42)" rx="2" ry="2" />
<text  x="1183.01" y="735.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="373" width="0.5" height="15.0" fill="rgb(233,17,51)" rx="2" ry="2" />
<text  x="37.15" y="383.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="427.2" y="645" width="0.4" height="15.0" fill="rgb(248,135,11)" rx="2" ry="2" />
<text  x="430.21" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (6 samples, 0.21%)</title><rect x="1120.5" y="565" width="2.5" height="15.0" fill="rgb(211,77,18)" rx="2" ry="2" />
<text  x="1123.47" y="575.5" ></text>
</g>
<g >
<title>glXGetCurrentContext&lt;00000000000173b0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="581" width="0.5" height="15.0" fill="rgb(249,42,11)" rx="2" ry="2" />
<text  x="37.15" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="1173.8" y="677" width="0.4" height="15.0" fill="rgb(248,162,5)" rx="2" ry="2" />
<text  x="1176.76" y="687.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1172.1" y="485" width="0.4" height="15.0" fill="rgb(222,114,19)" rx="2" ry="2" />
<text  x="1175.10" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.04%)</title><rect x="1162.1" y="485" width="0.4" height="15.0" fill="rgb(217,173,42)" rx="2" ry="2" />
<text  x="1165.10" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000d2550&gt; (1 samples, 0.04%)</title><rect x="1156.7" y="533" width="0.4" height="15.0" fill="rgb(243,215,41)" rx="2" ry="2" />
<text  x="1159.69" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.07%)</title><rect x="1188.3" y="373" width="0.9" height="15.0" fill="rgb(254,53,39)" rx="2" ry="2" />
<text  x="1191.33" y="383.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.14%)</title><rect x="36.2" y="661" width="1.7" height="15.0" fill="rgb(249,117,28)" rx="2" ry="2" />
<text  x="39.23" y="671.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (5 samples, 0.18%)</title><rect x="1180.8" y="325" width="2.1" height="15.0" fill="rgb(230,216,8)" rx="2" ry="2" />
<text  x="1183.84" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1151.3" y="597" width="0.8" height="15.0" fill="rgb(250,177,34)" rx="2" ry="2" />
<text  x="1154.28" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.07%)</title><rect x="419.3" y="661" width="0.8" height="15.0" fill="rgb(212,229,29)" rx="2" ry="2" />
<text  x="422.29" y="671.5" ></text>
</g>
<g >
<title>XML_ParseBuffer&lt;0000000000010b20&gt; (1 samples, 0.04%)</title><rect x="31.7" y="485" width="0.4" height="15.0" fill="rgb(245,49,10)" rx="2" ry="2" />
<text  x="34.65" y="495.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (5 samples, 0.18%)</title><rect x="212.8" y="645" width="2.1" height="15.0" fill="rgb(246,118,17)" rx="2" ry="2" />
<text  x="215.77" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (2 samples, 0.07%)</title><rect x="1153.8" y="581" width="0.8" height="15.0" fill="rgb(236,67,34)" rx="2" ry="2" />
<text  x="1156.78" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="517" width="0.4" height="15.0" fill="rgb(248,27,42)" rx="2" ry="2" />
<text  x="1179.26" y="527.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="407.6" y="613" width="0.5" height="15.0" fill="rgb(244,22,37)" rx="2" ry="2" />
<text  x="410.64" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (13 samples, 0.46%)</title><rect x="1180.8" y="421" width="5.5" height="15.0" fill="rgb(229,65,53)" rx="2" ry="2" />
<text  x="1183.84" y="431.5" ></text>
</g>
<g >
<title>InOutRasterizer (4 samples, 0.14%)</title><rect x="37.9" y="661" width="1.7" height="15.0" fill="rgb(215,187,40)" rx="2" ry="2" />
<text  x="40.90" y="671.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.04%)</title><rect x="410.1" y="597" width="0.5" height="15.0" fill="rgb(226,204,36)" rx="2" ry="2" />
<text  x="413.13" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator()(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (4 samples, 0.14%)</title><rect x="1181.3" y="245" width="1.6" height="15.0" fill="rgb(217,10,45)" rx="2" ry="2" />
<text  x="1184.26" y="255.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;00000000000695e0&gt; (4 samples, 0.14%)</title><rect x="1176.7" y="709" width="1.6" height="15.0" fill="rgb(240,98,33)" rx="2" ry="2" />
<text  x="1179.68" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (2 samples, 0.07%)</title><rect x="408.1" y="645" width="0.8" height="15.0" fill="rgb(250,171,37)" rx="2" ry="2" />
<text  x="411.05" y="655.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (2 samples, 0.07%)</title><rect x="32.1" y="533" width="0.8" height="15.0" fill="rgb(231,146,35)" rx="2" ry="2" />
<text  x="35.07" y="543.5" ></text>
</g>
<g >
<title>0x00007f80daf02f9d (1 samples, 0.04%)</title><rect x="36.6" y="581" width="0.5" height="15.0" fill="rgb(249,3,20)" rx="2" ry="2" />
<text  x="39.65" y="591.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005d660&gt; (2 samples, 0.07%)</title><rect x="1178.3" y="693" width="0.9" height="15.0" fill="rgb(221,59,11)" rx="2" ry="2" />
<text  x="1181.34" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="1153.8" y="517" width="0.4" height="15.0" fill="rgb(242,227,3)" rx="2" ry="2" />
<text  x="1156.78" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060410&gt; (2 samples, 0.07%)</title><rect x="408.9" y="661" width="0.8" height="15.0" fill="rgb(222,34,49)" rx="2" ry="2" />
<text  x="411.88" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="423.0" y="661" width="0.5" height="15.0" fill="rgb(233,147,33)" rx="2" ry="2" />
<text  x="426.04" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="416.8" y="549" width="0.4" height="15.0" fill="rgb(219,205,50)" rx="2" ry="2" />
<text  x="419.80" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (3 samples, 0.11%)</title><rect x="364.7" y="597" width="1.3" height="15.0" fill="rgb(208,14,8)" rx="2" ry="2" />
<text  x="367.75" y="607.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::max_size() const (1 samples, 0.04%)</title><rect x="1186.3" y="485" width="0.4" height="15.0" fill="rgb(250,49,38)" rx="2" ry="2" />
<text  x="1189.25" y="495.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.0" y="501" width="0.4" height="15.0" fill="rgb(251,226,41)" rx="2" ry="2" />
<text  x="1173.01" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="412.2" y="517" width="0.4" height="15.0" fill="rgb(239,145,37)" rx="2" ry="2" />
<text  x="415.22" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="417.6" y="629" width="0.4" height="15.0" fill="rgb(242,194,9)" rx="2" ry="2" />
<text  x="420.63" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="428.0" y="645" width="0.5" height="15.0" fill="rgb(214,103,50)" rx="2" ry="2" />
<text  x="431.04" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string(int) (4 samples, 0.14%)</title><rect x="423.9" y="677" width="1.6" height="15.0" fill="rgb(236,200,26)" rx="2" ry="2" />
<text  x="426.87" y="687.5" ></text>
</g>
<g >
<title>0x00007f80daf02355 (1 samples, 0.04%)</title><rect x="35.8" y="629" width="0.4" height="15.0" fill="rgb(231,76,5)" rx="2" ry="2" />
<text  x="38.82" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="420.1" y="629" width="0.4" height="15.0" fill="rgb(249,59,47)" rx="2" ry="2" />
<text  x="423.13" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.04%)</title><rect x="1150.9" y="565" width="0.4" height="15.0" fill="rgb(227,216,24)" rx="2" ry="2" />
<text  x="1153.86" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (39 samples, 1.38%)</title><rect x="1156.7" y="645" width="16.2" height="15.0" fill="rgb(253,191,32)" rx="2" ry="2" />
<text  x="1159.69" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="1152.5" y="581" width="0.4" height="15.0" fill="rgb(210,134,54)" rx="2" ry="2" />
<text  x="1155.53" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018ba0&gt; (1 samples, 0.04%)</title><rect x="412.2" y="597" width="0.4" height="15.0" fill="rgb(254,148,12)" rx="2" ry="2" />
<text  x="415.22" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1155.0" y="533" width="0.4" height="15.0" fill="rgb(228,164,46)" rx="2" ry="2" />
<text  x="1158.02" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1173.3" y="677" width="0.5" height="15.0" fill="rgb(206,75,2)" rx="2" ry="2" />
<text  x="1176.35" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="417.6" y="645" width="0.4" height="15.0" fill="rgb(205,2,23)" rx="2" ry="2" />
<text  x="420.63" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1172.5" y="549" width="0.4" height="15.0" fill="rgb(217,13,21)" rx="2" ry="2" />
<text  x="1175.51" y="559.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.46%)</title><rect x="1151.3" y="629" width="5.4" height="15.0" fill="rgb(249,195,27)" rx="2" ry="2" />
<text  x="1154.28" y="639.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="1165.0" y="549" width="0.9" height="15.0" fill="rgb(238,108,25)" rx="2" ry="2" />
<text  x="1168.02" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1188.3" y="309" width="0.9" height="15.0" fill="rgb(248,174,27)" rx="2" ry="2" />
<text  x="1191.33" y="319.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (1 samples, 0.04%)</title><rect x="421.8" y="613" width="0.4" height="15.0" fill="rgb(245,177,11)" rx="2" ry="2" />
<text  x="424.79" y="623.5" ></text>
</g>
<g >
<title>~vector (10 samples, 0.35%)</title><rect x="146.2" y="629" width="4.1" height="15.0" fill="rgb(230,84,15)" rx="2" ry="2" />
<text  x="149.15" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.11%)</title><rect x="351.4" y="613" width="1.3" height="15.0" fill="rgb(239,45,14)" rx="2" ry="2" />
<text  x="354.43" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1188.3" y="645" width="0.9" height="15.0" fill="rgb(232,32,1)" rx="2" ry="2" />
<text  x="1191.33" y="655.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000516f0&gt; (1 samples, 0.04%)</title><rect x="1180.4" y="629" width="0.4" height="15.0" fill="rgb(227,136,22)" rx="2" ry="2" />
<text  x="1183.42" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (2 samples, 0.07%)</title><rect x="1120.9" y="549" width="0.8" height="15.0" fill="rgb(223,182,40)" rx="2" ry="2" />
<text  x="1123.88" y="559.5" ></text>
</g>
<g >
<title>0x00007f80daf1228b (1 samples, 0.04%)</title><rect x="36.6" y="533" width="0.5" height="15.0" fill="rgb(247,108,48)" rx="2" ry="2" />
<text  x="39.65" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (8 samples, 0.28%)</title><rect x="1182.9" y="309" width="3.4" height="15.0" fill="rgb(230,221,40)" rx="2" ry="2" />
<text  x="1185.92" y="319.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (395 samples, 13.94%)</title><rect x="691.2" y="581" width="164.5" height="15.0" fill="rgb(227,200,54)" rx="2" ry="2" />
<text  x="694.19" y="591.5" >nouveau_drm_screen_cr..</text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.04%)</title><rect x="427.6" y="645" width="0.4" height="15.0" fill="rgb(223,43,29)" rx="2" ry="2" />
<text  x="430.62" y="655.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (3 samples, 0.11%)</title><rect x="428.0" y="661" width="1.3" height="15.0" fill="rgb(253,87,22)" rx="2" ry="2" />
<text  x="431.04" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1163.8" y="549" width="0.4" height="15.0" fill="rgb(219,127,14)" rx="2" ry="2" />
<text  x="1166.77" y="559.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (53 samples, 1.87%)</title><rect x="1150.9" y="661" width="22.0" height="15.0" fill="rgb(245,86,17)" rx="2" ry="2" />
<text  x="1153.86" y="671.5" >v..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1187.5" y="597" width="0.8" height="15.0" fill="rgb(216,107,8)" rx="2" ry="2" />
<text  x="1190.50" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TrianglePipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1179.2" y="645" width="0.8" height="15.0" fill="rgb(224,194,29)" rx="2" ry="2" />
<text  x="1182.17" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (2 samples, 0.07%)</title><rect x="1157.1" y="485" width="0.8" height="15.0" fill="rgb(229,203,23)" rx="2" ry="2" />
<text  x="1160.11" y="495.5" ></text>
</g>
<g >
<title>0x00007f80daf02355 (1 samples, 0.04%)</title><rect x="36.6" y="549" width="0.5" height="15.0" fill="rgb(215,122,16)" rx="2" ry="2" />
<text  x="39.65" y="559.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;00000000000755f0&gt; (18 samples, 0.64%)</title><rect x="1180.0" y="709" width="7.5" height="15.0" fill="rgb(251,36,24)" rx="2" ry="2" />
<text  x="1183.01" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_update_bbegin(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;*) (1 samples, 0.04%)</title><rect x="1180.4" y="613" width="0.4" height="15.0" fill="rgb(226,58,14)" rx="2" ry="2" />
<text  x="1183.42" y="623.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.04%)</title><rect x="401.4" y="581" width="0.4" height="15.0" fill="rgb(224,187,22)" rx="2" ry="2" />
<text  x="404.39" y="591.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.04%)</title><rect x="1180.8" y="309" width="0.5" height="15.0" fill="rgb(209,166,29)" rx="2" ry="2" />
<text  x="1183.84" y="319.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1175.0" y="645" width="0.4" height="15.0" fill="rgb(230,46,46)" rx="2" ry="2" />
<text  x="1178.01" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1153.8" y="565" width="0.8" height="15.0" fill="rgb(234,81,17)" rx="2" ry="2" />
<text  x="1156.78" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="34.1" y="501" width="0.5" height="15.0" fill="rgb(214,139,53)" rx="2" ry="2" />
<text  x="37.15" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (11 samples, 0.39%)</title><rect x="338.9" y="613" width="4.6" height="15.0" fill="rgb(251,151,48)" rx="2" ry="2" />
<text  x="341.93" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.07%)</title><rect x="1165.0" y="581" width="0.9" height="15.0" fill="rgb(247,134,31)" rx="2" ry="2" />
<text  x="1168.02" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="413.0" y="629" width="0.9" height="15.0" fill="rgb(229,85,45)" rx="2" ry="2" />
<text  x="416.05" y="639.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (3 samples, 0.11%)</title><rect x="242.8" y="645" width="1.2" height="15.0" fill="rgb(241,91,1)" rx="2" ry="2" />
<text  x="245.75" y="655.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (26 samples, 0.92%)</title><rect x="1162.1" y="629" width="10.8" height="15.0" fill="rgb(206,216,18)" rx="2" ry="2" />
<text  x="1165.10" y="639.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (2 samples, 0.07%)</title><rect x="32.1" y="341" width="0.8" height="15.0" fill="rgb(232,164,42)" rx="2" ry="2" />
<text  x="35.07" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1153.8" y="549" width="0.8" height="15.0" fill="rgb(241,216,31)" rx="2" ry="2" />
<text  x="1156.78" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="417.2" y="677" width="0.4" height="15.0" fill="rgb(236,162,26)" rx="2" ry="2" />
<text  x="420.21" y="687.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (16 samples, 0.56%)</title><rect x="336.9" y="645" width="6.6" height="15.0" fill="rgb(212,44,46)" rx="2" ry="2" />
<text  x="339.85" y="655.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.04%)</title><rect x="1159.6" y="533" width="0.4" height="15.0" fill="rgb(234,227,15)" rx="2" ry="2" />
<text  x="1162.60" y="543.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (17 samples, 0.60%)</title><rect x="123.3" y="613" width="7.0" height="15.0" fill="rgb(232,90,45)" rx="2" ry="2" />
<text  x="126.25" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.04%)</title><rect x="1162.1" y="501" width="0.4" height="15.0" fill="rgb(229,22,0)" rx="2" ry="2" />
<text  x="1165.10" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="346.0" y="629" width="0.8" height="15.0" fill="rgb(244,43,25)" rx="2" ry="2" />
<text  x="349.01" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="419.7" y="565" width="0.4" height="15.0" fill="rgb(244,125,18)" rx="2" ry="2" />
<text  x="422.71" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1160.9" y="565" width="0.4" height="15.0" fill="rgb(219,154,5)" rx="2" ry="2" />
<text  x="1163.85" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,732 samples, 61.12%)</title><rect x="429.3" y="661" width="721.1" height="15.0" fill="rgb(214,81,12)" rx="2" ry="2" />
<text  x="432.29" y="671.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2&lt;0000000000085970&gt; (2 samples, 0.07%)</title><rect x="1120.9" y="533" width="0.8" height="15.0" fill="rgb(229,171,11)" rx="2" ry="2" />
<text  x="1123.88" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (2 samples, 0.07%)</title><rect x="155.7" y="629" width="0.9" height="15.0" fill="rgb(245,150,49)" rx="2" ry="2" />
<text  x="158.73" y="639.5" ></text>
</g>
<g >
<title>_Safe_sequence (9 samples, 0.32%)</title><rect x="275.6" y="629" width="3.8" height="15.0" fill="rgb(238,85,0)" rx="2" ry="2" />
<text  x="278.65" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1188.3" y="549" width="0.9" height="15.0" fill="rgb(229,117,9)" rx="2" ry="2" />
<text  x="1191.33" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="416.4" y="565" width="0.4" height="15.0" fill="rgb(212,213,32)" rx="2" ry="2" />
<text  x="419.38" y="575.5" ></text>
</g>
<g >
<title>shared_ptr (2 samples, 0.07%)</title><rect x="1155.4" y="581" width="0.9" height="15.0" fill="rgb(209,186,13)" rx="2" ry="2" />
<text  x="1158.44" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="416.4" y="533" width="0.4" height="15.0" fill="rgb(248,214,16)" rx="2" ry="2" />
<text  x="419.38" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1161.3" y="581" width="0.4" height="15.0" fill="rgb(247,131,15)" rx="2" ry="2" />
<text  x="1164.27" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="426.4" y="597" width="0.4" height="15.0" fill="rgb(214,198,39)" rx="2" ry="2" />
<text  x="429.37" y="607.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (36 samples, 1.27%)</title><rect x="352.7" y="613" width="15.0" height="15.0" fill="rgb(205,54,37)" rx="2" ry="2" />
<text  x="355.67" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1172.1" y="517" width="0.4" height="15.0" fill="rgb(208,179,49)" rx="2" ry="2" />
<text  x="1175.10" y="527.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (4 samples, 0.14%)</title><rect x="1181.3" y="293" width="1.6" height="15.0" fill="rgb(253,207,40)" rx="2" ry="2" />
<text  x="1184.26" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (6 samples, 0.21%)</title><rect x="102.9" y="613" width="2.4" height="15.0" fill="rgb(227,22,4)" rx="2" ry="2" />
<text  x="105.85" y="623.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (4 samples, 0.14%)</title><rect x="69.5" y="645" width="1.7" height="15.0" fill="rgb(207,1,53)" rx="2" ry="2" />
<text  x="72.54" y="655.5" ></text>
</g>
<g >
<title>syscall@@GLIBC_2.2.5&lt;0000000000100550&gt; (1 samples, 0.04%)</title><rect x="34.1" y="213" width="0.5" height="15.0" fill="rgb(245,200,51)" rx="2" ry="2" />
<text  x="37.15" y="223.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="423.0" y="597" width="0.5" height="15.0" fill="rgb(229,98,34)" rx="2" ry="2" />
<text  x="426.04" y="607.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1168.8" y="533" width="0.4" height="15.0" fill="rgb(245,88,37)" rx="2" ry="2" />
<text  x="1171.76" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1171.7" y="533" width="0.4" height="15.0" fill="rgb(238,172,17)" rx="2" ry="2" />
<text  x="1174.68" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1170.4" y="581" width="0.9" height="15.0" fill="rgb(212,189,2)" rx="2" ry="2" />
<text  x="1173.43" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.3" y="597" width="0.9" height="15.0" fill="rgb(248,75,0)" rx="2" ry="2" />
<text  x="1191.33" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1186.7" y="645" width="0.4" height="15.0" fill="rgb(248,177,43)" rx="2" ry="2" />
<text  x="1189.67" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.04%)</title><rect x="426.8" y="581" width="0.4" height="15.0" fill="rgb(243,203,54)" rx="2" ry="2" />
<text  x="429.79" y="591.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="428.9" y="597" width="0.4" height="15.0" fill="rgb(212,99,29)" rx="2" ry="2" />
<text  x="431.87" y="607.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (2 samples, 0.07%)</title><rect x="32.1" y="501" width="0.8" height="15.0" fill="rgb(210,149,5)" rx="2" ry="2" />
<text  x="35.07" y="511.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.07%)</title><rect x="1187.5" y="613" width="0.8" height="15.0" fill="rgb(228,16,26)" rx="2" ry="2" />
<text  x="1190.50" y="623.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="423.0" y="645" width="0.5" height="15.0" fill="rgb(252,57,44)" rx="2" ry="2" />
<text  x="426.04" y="655.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1159.6" y="565" width="0.4" height="15.0" fill="rgb(252,174,44)" rx="2" ry="2" />
<text  x="1162.60" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (51 samples, 1.80%)</title><rect x="156.6" y="645" width="21.2" height="15.0" fill="rgb(246,110,27)" rx="2" ry="2" />
<text  x="159.56" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (1 samples, 0.04%)</title><rect x="421.8" y="597" width="0.4" height="15.0" fill="rgb(215,26,35)" rx="2" ry="2" />
<text  x="424.79" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (4 samples, 0.14%)</title><rect x="1181.3" y="277" width="1.6" height="15.0" fill="rgb(216,208,52)" rx="2" ry="2" />
<text  x="1184.26" y="287.5" ></text>
</g>
<g >
<title>VectorMathService::getVectorLength(Vec3d const&amp;) (1 samples, 0.04%)</title><rect x="405.1" y="629" width="0.5" height="15.0" fill="rgb(205,165,40)" rx="2" ry="2" />
<text  x="408.14" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1156.3" y="581" width="0.4" height="15.0" fill="rgb(214,156,41)" rx="2" ry="2" />
<text  x="1159.27" y="591.5" ></text>
</g>
<g >
<title>getdents64@@GLIBC_2.30&lt;00000000000ce0c0&gt; (1 samples, 0.04%)</title><rect x="37.5" y="501" width="0.4" height="15.0" fill="rgb(245,38,15)" rx="2" ry="2" />
<text  x="40.48" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.04%)</title><rect x="427.6" y="613" width="0.4" height="15.0" fill="rgb(211,168,53)" rx="2" ry="2" />
<text  x="430.62" y="623.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="413.5" y="613" width="0.4" height="15.0" fill="rgb(205,114,15)" rx="2" ry="2" />
<text  x="416.47" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1156.3" y="533" width="0.4" height="15.0" fill="rgb(227,218,43)" rx="2" ry="2" />
<text  x="1159.27" y="543.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="357" width="0.5" height="15.0" fill="rgb(228,144,17)" rx="2" ry="2" />
<text  x="37.15" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.11%)</title><rect x="1175.0" y="693" width="1.3" height="15.0" fill="rgb(251,131,9)" rx="2" ry="2" />
<text  x="1178.01" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1176.3" y="629" width="0.4" height="15.0" fill="rgb(206,38,16)" rx="2" ry="2" />
<text  x="1179.26" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::Sampler::RecordAllocation(unsigned long)[inline] (1 samples, 0.04%)</title><rect x="401.4" y="517" width="0.4" height="15.0" fill="rgb(254,186,2)" rx="2" ry="2" />
<text  x="404.39" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="425.5" y="661" width="1.3" height="15.0" fill="rgb(205,216,2)" rx="2" ry="2" />
<text  x="428.54" y="671.5" ></text>
</g>
<g >
<title>long&amp;&amp; std::forward&lt;long&gt;(std::remove_reference&lt;long&gt;::type&amp;) (1 samples, 0.04%)</title><rect x="1182.5" y="197" width="0.4" height="15.0" fill="rgb(223,75,4)" rx="2" ry="2" />
<text  x="1185.51" y="207.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="428.5" y="597" width="0.4" height="15.0" fill="rgb(231,38,47)" rx="2" ry="2" />
<text  x="431.45" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="373" width="5.5" height="15.0" fill="rgb(215,79,21)" rx="2" ry="2" />
<text  x="1183.84" y="383.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 0.25%)</title><rect x="31.7" y="661" width="2.9" height="15.0" fill="rgb(238,98,45)" rx="2" ry="2" />
<text  x="34.65" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="416.8" y="581" width="0.4" height="15.0" fill="rgb(205,198,34)" rx="2" ry="2" />
<text  x="419.80" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1171.3" y="581" width="0.4" height="15.0" fill="rgb(219,92,23)" rx="2" ry="2" />
<text  x="1174.26" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (2 samples, 0.07%)</title><rect x="70.4" y="629" width="0.8" height="15.0" fill="rgb(243,135,13)" rx="2" ry="2" />
<text  x="73.37" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="421.0" y="613" width="0.4" height="15.0" fill="rgb(230,103,5)" rx="2" ry="2" />
<text  x="423.96" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1179.2" y="469" width="0.8" height="15.0" fill="rgb(207,124,37)" rx="2" ry="2" />
<text  x="1182.17" y="479.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (2 samples, 0.07%)</title><rect x="1188.3" y="517" width="0.9" height="15.0" fill="rgb(211,184,40)" rx="2" ry="2" />
<text  x="1191.33" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.11%)</title><rect x="347.7" y="629" width="1.2" height="15.0" fill="rgb(231,193,14)" rx="2" ry="2" />
<text  x="350.68" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="1187.5" y="69" width="0.4" height="15.0" fill="rgb(210,80,42)" rx="2" ry="2" />
<text  x="1190.50" y="79.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="31.7" y="517" width="0.4" height="15.0" fill="rgb(239,45,29)" rx="2" ry="2" />
<text  x="34.65" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="1165.0" y="565" width="0.9" height="15.0" fill="rgb(243,151,13)" rx="2" ry="2" />
<text  x="1168.02" y="575.5" ></text>
</g>
<g >
<title>__nptl_death_event@@GLIBC_PRIVATE&lt;0000000000083270&gt; (2 samples, 0.07%)</title><rect x="1120.9" y="517" width="0.8" height="15.0" fill="rgb(224,34,42)" rx="2" ry="2" />
<text  x="1123.88" y="527.5" ></text>
</g>
<g >
<title>tc_calloc (2 samples, 0.07%)</title><rect x="241.9" y="597" width="0.9" height="15.0" fill="rgb(242,186,36)" rx="2" ry="2" />
<text  x="244.92" y="607.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (11 samples, 0.39%)</title><rect x="145.7" y="645" width="4.6" height="15.0" fill="rgb(250,22,2)" rx="2" ry="2" />
<text  x="148.74" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="413.0" y="597" width="0.5" height="15.0" fill="rgb(251,38,22)" rx="2" ry="2" />
<text  x="416.05" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.32%)</title><rect x="1166.7" y="581" width="3.7" height="15.0" fill="rgb(214,54,43)" rx="2" ry="2" />
<text  x="1169.68" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="426.8" y="613" width="0.4" height="15.0" fill="rgb(235,186,0)" rx="2" ry="2" />
<text  x="429.79" y="623.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (28 samples, 0.99%)</title><rect x="20.0" y="789" width="11.7" height="15.0" fill="rgb(233,166,1)" rx="2" ry="2" />
<text  x="22.99" y="799.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (51 samples, 1.80%)</title><rect x="1129.2" y="613" width="21.2" height="15.0" fill="rgb(226,54,38)" rx="2" ry="2" />
<text  x="1132.21" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.2" y="661" width="0.4" height="15.0" fill="rgb(242,148,10)" rx="2" ry="2" />
<text  x="430.21" y="671.5" ></text>
</g>
<g >
<title>0x00007f80daf08791 (1 samples, 0.04%)</title><rect x="36.6" y="629" width="0.5" height="15.0" fill="rgb(243,34,2)" rx="2" ry="2" />
<text  x="39.65" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (4 samples, 0.14%)</title><rect x="406.4" y="629" width="1.7" height="15.0" fill="rgb(233,68,50)" rx="2" ry="2" />
<text  x="409.39" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1161.7" y="517" width="0.4" height="15.0" fill="rgb(244,69,45)" rx="2" ry="2" />
<text  x="1164.69" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="420.5" y="645" width="0.5" height="15.0" fill="rgb(211,220,37)" rx="2" ry="2" />
<text  x="423.54" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="421.4" y="613" width="0.4" height="15.0" fill="rgb(246,71,6)" rx="2" ry="2" />
<text  x="424.38" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (441 samples, 15.56%)</title><rect x="939.3" y="581" width="183.7" height="15.0" fill="rgb(218,73,14)" rx="2" ry="2" />
<text  x="942.34" y="591.5" >__driDriverGetExtension..</text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1161.3" y="549" width="0.4" height="15.0" fill="rgb(245,149,3)" rx="2" ry="2" />
<text  x="1164.27" y="559.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="427.6" y="549" width="0.4" height="15.0" fill="rgb(229,97,53)" rx="2" ry="2" />
<text  x="430.62" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="412.2" y="613" width="0.4" height="15.0" fill="rgb(232,43,13)" rx="2" ry="2" />
<text  x="415.22" y="623.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000056290&gt; (2 samples, 0.07%)</title><rect x="1187.5" y="517" width="0.8" height="15.0" fill="rgb(237,197,47)" rx="2" ry="2" />
<text  x="1190.50" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (44 samples, 1.55%)</title><rect x="349.3" y="645" width="18.4" height="15.0" fill="rgb(226,81,34)" rx="2" ry="2" />
<text  x="352.34" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="427.6" y="581" width="0.4" height="15.0" fill="rgb(209,150,18)" rx="2" ry="2" />
<text  x="430.62" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1178.3" y="661" width="0.9" height="15.0" fill="rgb(235,71,35)" rx="2" ry="2" />
<text  x="1181.34" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1150.4" y="677" width="0.5" height="15.0" fill="rgb(223,149,46)" rx="2" ry="2" />
<text  x="1153.44" y="687.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="428.0" y="597" width="0.5" height="15.0" fill="rgb(224,191,53)" rx="2" ry="2" />
<text  x="431.04" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1164.6" y="549" width="0.4" height="15.0" fill="rgb(230,212,45)" rx="2" ry="2" />
<text  x="1167.60" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018ba0&gt; (1 samples, 0.04%)</title><rect x="412.6" y="597" width="0.4" height="15.0" fill="rgb(242,204,50)" rx="2" ry="2" />
<text  x="415.63" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (11 samples, 0.39%)</title><rect x="169.1" y="597" width="4.5" height="15.0" fill="rgb(235,14,46)" rx="2" ry="2" />
<text  x="172.05" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1160.9" y="533" width="0.4" height="15.0" fill="rgb(220,41,28)" rx="2" ry="2" />
<text  x="1163.85" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1170.0" y="533" width="0.4" height="15.0" fill="rgb(211,90,11)" rx="2" ry="2" />
<text  x="1173.01" y="543.5" ></text>
</g>
<g >
<title>__shared_ptr (3 samples, 0.11%)</title><rect x="155.3" y="645" width="1.3" height="15.0" fill="rgb(215,142,21)" rx="2" ry="2" />
<text  x="158.31" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1180.4" y="517" width="0.4" height="15.0" fill="rgb(231,111,43)" rx="2" ry="2" />
<text  x="1183.42" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1150.9" y="597" width="0.4" height="15.0" fill="rgb(230,67,42)" rx="2" ry="2" />
<text  x="1153.86" y="607.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;00000000000239b0&gt; (2,743 samples, 96.79%)</title><rect x="37.9" y="725" width="1142.1" height="15.0" fill="rgb(226,185,16)" rx="2" ry="2" />
<text  x="40.90" y="735.5" >Engine_3D::engine_update()&lt;00000000000239b0&gt;</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1152.1" y="597" width="0.4" height="15.0" fill="rgb(229,39,39)" rx="2" ry="2" />
<text  x="1155.11" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="426.4" y="613" width="0.4" height="15.0" fill="rgb(225,136,0)" rx="2" ry="2" />
<text  x="429.37" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length(char const*) (1 samples, 0.04%)</title><rect x="366.4" y="597" width="0.4" height="15.0" fill="rgb(233,40,29)" rx="2" ry="2" />
<text  x="369.41" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (1 samples, 0.04%)</title><rect x="1169.2" y="549" width="0.4" height="15.0" fill="rgb(218,168,5)" rx="2" ry="2" />
<text  x="1172.18" y="559.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints() (1 samples, 0.04%)</title><rect x="415.1" y="677" width="0.4" height="15.0" fill="rgb(246,57,53)" rx="2" ry="2" />
<text  x="418.13" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (3 samples, 0.11%)</title><rect x="425.5" y="677" width="1.3" height="15.0" fill="rgb(253,208,40)" rx="2" ry="2" />
<text  x="428.54" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (2 samples, 0.07%)</title><rect x="1187.5" y="405" width="0.8" height="15.0" fill="rgb(207,191,15)" rx="2" ry="2" />
<text  x="1190.50" y="415.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1153.8" y="533" width="0.8" height="15.0" fill="rgb(251,226,33)" rx="2" ry="2" />
<text  x="1156.78" y="543.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (3 samples, 0.11%)</title><rect x="428.0" y="677" width="1.3" height="15.0" fill="rgb(235,182,4)" rx="2" ry="2" />
<text  x="431.04" y="687.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;00000000000698b0&gt; (53 samples, 1.87%)</title><rect x="1150.9" y="693" width="22.0" height="15.0" fill="rgb(208,138,23)" rx="2" ry="2" />
<text  x="1153.86" y="703.5" >T..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1177.9" y="693" width="0.4" height="15.0" fill="rgb(207,225,9)" rx="2" ry="2" />
<text  x="1180.93" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="416.4" y="661" width="0.4" height="15.0" fill="rgb(221,229,18)" rx="2" ry="2" />
<text  x="419.38" y="671.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.04%)</title><rect x="242.3" y="565" width="0.5" height="15.0" fill="rgb(212,137,17)" rx="2" ry="2" />
<text  x="245.34" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="419.3" y="645" width="0.8" height="15.0" fill="rgb(250,109,27)" rx="2" ry="2" />
<text  x="422.29" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1160.9" y="581" width="0.4" height="15.0" fill="rgb(234,65,52)" rx="2" ry="2" />
<text  x="1163.85" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1179.2" y="677" width="0.8" height="15.0" fill="rgb(213,174,49)" rx="2" ry="2" />
<text  x="1182.17" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1176.3" y="549" width="0.4" height="15.0" fill="rgb(208,171,33)" rx="2" ry="2" />
<text  x="1179.26" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (5 samples, 0.18%)</title><rect x="1167.5" y="565" width="2.1" height="15.0" fill="rgb(232,153,30)" rx="2" ry="2" />
<text  x="1170.52" y="575.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="1156.3" y="485" width="0.4" height="15.0" fill="rgb(239,3,31)" rx="2" ry="2" />
<text  x="1159.27" y="495.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.07%)</title><rect x="1188.3" y="325" width="0.9" height="15.0" fill="rgb(250,121,20)" rx="2" ry="2" />
<text  x="1191.33" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (9 samples, 0.32%)</title><rect x="339.8" y="597" width="3.7" height="15.0" fill="rgb(243,94,29)" rx="2" ry="2" />
<text  x="342.77" y="607.5" ></text>
</g>
<g >
<title>_Vector_impl (5 samples, 0.18%)</title><rect x="97.9" y="629" width="2.0" height="15.0" fill="rgb(235,23,11)" rx="2" ry="2" />
<text  x="100.85" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="242.3" y="517" width="0.5" height="15.0" fill="rgb(232,134,30)" rx="2" ry="2" />
<text  x="245.34" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="409.7" y="645" width="0.4" height="15.0" fill="rgb(240,90,13)" rx="2" ry="2" />
<text  x="412.72" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1187.5" y="357" width="0.8" height="15.0" fill="rgb(224,97,51)" rx="2" ry="2" />
<text  x="1190.50" y="367.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="413.9" y="661" width="0.4" height="15.0" fill="rgb(241,191,51)" rx="2" ry="2" />
<text  x="416.88" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="1158.4" y="565" width="0.8" height="15.0" fill="rgb(248,204,34)" rx="2" ry="2" />
<text  x="1161.36" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="416.8" y="613" width="0.4" height="15.0" fill="rgb(212,135,31)" rx="2" ry="2" />
<text  x="419.80" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (3 samples, 0.11%)</title><rect x="283.6" y="629" width="1.2" height="15.0" fill="rgb(254,122,16)" rx="2" ry="2" />
<text  x="286.56" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="1175.0" y="677" width="1.3" height="15.0" fill="rgb(231,82,24)" rx="2" ry="2" />
<text  x="1178.01" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="348.5" y="613" width="0.4" height="15.0" fill="rgb(242,107,22)" rx="2" ry="2" />
<text  x="351.51" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (2 samples, 0.07%)</title><rect x="1187.5" y="629" width="0.8" height="15.0" fill="rgb(227,196,14)" rx="2" ry="2" />
<text  x="1190.50" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (706 samples, 24.91%)</title><rect x="572.5" y="613" width="294.0" height="15.0" fill="rgb(207,125,26)" rx="2" ry="2" />
<text  x="575.52" y="623.5" >__driDriverGetExtensions_d3d12&lt;00000000..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1156.7" y="597" width="1.2" height="15.0" fill="rgb(241,106,4)" rx="2" ry="2" />
<text  x="1159.69" y="607.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (2 samples, 0.07%)</title><rect x="32.1" y="469" width="0.8" height="15.0" fill="rgb(237,98,24)" rx="2" ry="2" />
<text  x="35.07" y="479.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (2 samples, 0.07%)</title><rect x="414.3" y="677" width="0.8" height="15.0" fill="rgb(217,205,42)" rx="2" ry="2" />
<text  x="417.30" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="427.2" y="613" width="0.4" height="15.0" fill="rgb(239,165,10)" rx="2" ry="2" />
<text  x="430.21" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.07%)</title><rect x="419.3" y="597" width="0.8" height="15.0" fill="rgb(243,8,13)" rx="2" ry="2" />
<text  x="422.29" y="607.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.07%)</title><rect x="32.1" y="517" width="0.8" height="15.0" fill="rgb(218,73,22)" rx="2" ry="2" />
<text  x="35.07" y="527.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="485" width="0.5" height="15.0" fill="rgb(243,112,26)" rx="2" ry="2" />
<text  x="37.15" y="495.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (15 samples, 0.53%)</title><rect x="310.6" y="613" width="6.3" height="15.0" fill="rgb(241,142,41)" rx="2" ry="2" />
<text  x="313.62" y="623.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000048210&gt; (1 samples, 0.04%)</title><rect x="144.1" y="629" width="0.4" height="15.0" fill="rgb(226,170,10)" rx="2" ry="2" />
<text  x="147.07" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="37.5" y="549" width="0.4" height="15.0" fill="rgb(251,81,25)" rx="2" ry="2" />
<text  x="40.48" y="559.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047cf0&gt; (220 samples, 7.76%)</title><rect x="245.3" y="645" width="91.6" height="15.0" fill="rgb(237,162,36)" rx="2" ry="2" />
<text  x="248.25" y="655.5" >TexturePNG..</text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (3 samples, 0.11%)</title><rect x="244.0" y="645" width="1.3" height="15.0" fill="rgb(229,25,5)" rx="2" ry="2" />
<text  x="247.00" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="412.2" y="661" width="0.4" height="15.0" fill="rgb(243,39,53)" rx="2" ry="2" />
<text  x="415.22" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_single(int*, int)[inline] (1 samples, 0.04%)</title><rect x="417.2" y="629" width="0.4" height="15.0" fill="rgb(254,133,37)" rx="2" ry="2" />
<text  x="420.21" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1188.3" y="453" width="0.9" height="15.0" fill="rgb(243,210,23)" rx="2" ry="2" />
<text  x="1191.33" y="463.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="415.5" y="661" width="0.5" height="15.0" fill="rgb(224,3,20)" rx="2" ry="2" />
<text  x="418.55" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1187.9" y="69" width="0.4" height="15.0" fill="rgb(250,90,1)" rx="2" ry="2" />
<text  x="1190.92" y="79.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (10 samples, 0.35%)</title><rect x="31.7" y="677" width="4.1" height="15.0" fill="rgb(231,78,10)" rx="2" ry="2" />
<text  x="34.65" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,732 samples, 61.12%)</title><rect x="429.3" y="677" width="721.1" height="15.0" fill="rgb(230,139,43)" rx="2" ry="2" />
<text  x="432.29" y="687.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1187.5" y="341" width="0.8" height="15.0" fill="rgb(216,183,36)" rx="2" ry="2" />
<text  x="1190.50" y="351.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (47 samples, 1.66%)</title><rect x="158.2" y="613" width="19.6" height="15.0" fill="rgb(205,87,30)" rx="2" ry="2" />
<text  x="161.23" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1179.2" y="485" width="0.8" height="15.0" fill="rgb(244,176,42)" rx="2" ry="2" />
<text  x="1182.17" y="495.5" ></text>
</g>
<g >
<title>~__shared_ptr (2 samples, 0.07%)</title><rect x="1188.3" y="693" width="0.9" height="15.0" fill="rgb(233,43,46)" rx="2" ry="2" />
<text  x="1191.33" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="419.7" y="517" width="0.4" height="15.0" fill="rgb(209,57,23)" rx="2" ry="2" />
<text  x="422.71" y="527.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.11%)</title><rect x="1171.7" y="581" width="1.2" height="15.0" fill="rgb(222,224,10)" rx="2" ry="2" />
<text  x="1174.68" y="591.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.4" y="533" width="0.4" height="15.0" fill="rgb(234,205,12)" rx="2" ry="2" />
<text  x="1183.42" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="426.8" y="677" width="0.4" height="15.0" fill="rgb(252,228,54)" rx="2" ry="2" />
<text  x="429.79" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="418.0" y="645" width="0.5" height="15.0" fill="rgb(226,6,25)" rx="2" ry="2" />
<text  x="421.05" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1187.5" y="389" width="0.8" height="15.0" fill="rgb(249,2,26)" rx="2" ry="2" />
<text  x="1190.50" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1187.5" y="533" width="0.8" height="15.0" fill="rgb(249,45,29)" rx="2" ry="2" />
<text  x="1190.50" y="543.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="309" width="0.5" height="15.0" fill="rgb(249,188,25)" rx="2" ry="2" />
<text  x="37.15" y="319.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1187.5" y="565" width="0.8" height="15.0" fill="rgb(205,20,40)" rx="2" ry="2" />
<text  x="1190.50" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.04%)</title><rect x="1180.0" y="565" width="0.4" height="15.0" fill="rgb(254,31,2)" rx="2" ry="2" />
<text  x="1183.01" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1171.3" y="533" width="0.4" height="15.0" fill="rgb(216,53,32)" rx="2" ry="2" />
<text  x="1174.26" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1178.3" y="549" width="0.5" height="15.0" fill="rgb(207,89,38)" rx="2" ry="2" />
<text  x="1181.34" y="559.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;00000000000816a0&gt; (1 samples, 0.04%)</title><rect x="405.1" y="645" width="0.5" height="15.0" fill="rgb(215,19,42)" rx="2" ry="2" />
<text  x="408.14" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1159.2" y="549" width="0.4" height="15.0" fill="rgb(205,183,7)" rx="2" ry="2" />
<text  x="1162.19" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="1172.9" y="677" width="0.4" height="15.0" fill="rgb(240,46,35)" rx="2" ry="2" />
<text  x="1175.93" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="426.8" y="661" width="0.4" height="15.0" fill="rgb(214,229,10)" rx="2" ry="2" />
<text  x="429.79" y="671.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.04%)</title><rect x="37.5" y="613" width="0.4" height="15.0" fill="rgb(223,38,36)" rx="2" ry="2" />
<text  x="40.48" y="623.5" ></text>
</g>
<g >
<title>scandirat64@@GLIBC_2.15 (1 samples, 0.04%)</title><rect x="37.5" y="533" width="0.4" height="15.0" fill="rgb(254,101,15)" rx="2" ry="2" />
<text  x="40.48" y="543.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="413.5" y="597" width="0.4" height="15.0" fill="rgb(236,58,16)" rx="2" ry="2" />
<text  x="416.47" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="1172.9" y="629" width="0.4" height="15.0" fill="rgb(213,149,54)" rx="2" ry="2" />
<text  x="1175.93" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="1175.8" y="613" width="0.5" height="15.0" fill="rgb(254,146,53)" rx="2" ry="2" />
<text  x="1178.84" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1179.2" y="453" width="0.8" height="15.0" fill="rgb(229,196,46)" rx="2" ry="2" />
<text  x="1182.17" y="463.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (3 samples, 0.11%)</title><rect x="1121.7" y="549" width="1.3" height="15.0" fill="rgb(237,7,16)" rx="2" ry="2" />
<text  x="1124.71" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.04%)</title><rect x="35.4" y="581" width="0.4" height="15.0" fill="rgb(208,170,51)" rx="2" ry="2" />
<text  x="38.40" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.18%)</title><rect x="35.8" y="693" width="2.1" height="15.0" fill="rgb(245,174,28)" rx="2" ry="2" />
<text  x="38.82" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1188.3" y="565" width="0.9" height="15.0" fill="rgb(224,226,43)" rx="2" ry="2" />
<text  x="1191.33" y="575.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="32.1" y="485" width="0.8" height="15.0" fill="rgb(210,152,22)" rx="2" ry="2" />
<text  x="35.07" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="533" width="0.4" height="15.0" fill="rgb(237,220,45)" rx="2" ry="2" />
<text  x="1179.26" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="413.9" y="629" width="0.4" height="15.0" fill="rgb(234,127,40)" rx="2" ry="2" />
<text  x="416.88" y="639.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="1165.0" y="533" width="0.9" height="15.0" fill="rgb(220,66,24)" rx="2" ry="2" />
<text  x="1168.02" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="154.5" y="629" width="0.8" height="15.0" fill="rgb(225,87,52)" rx="2" ry="2" />
<text  x="157.48" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1177.9" y="533" width="0.4" height="15.0" fill="rgb(220,110,13)" rx="2" ry="2" />
<text  x="1180.93" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (2 samples, 0.07%)</title><rect x="1187.5" y="581" width="0.8" height="15.0" fill="rgb(222,186,17)" rx="2" ry="2" />
<text  x="1190.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="412.2" y="533" width="0.4" height="15.0" fill="rgb(227,110,43)" rx="2" ry="2" />
<text  x="415.22" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="303.5" y="613" width="0.5" height="15.0" fill="rgb(209,89,32)" rx="2" ry="2" />
<text  x="306.54" y="623.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;000000000006b5d0&gt; (1 samples, 0.04%)</title><rect x="1161.7" y="565" width="0.4" height="15.0" fill="rgb(228,144,42)" rx="2" ry="2" />
<text  x="1164.69" y="575.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (1 samples, 0.04%)</title><rect x="1160.0" y="581" width="0.4" height="15.0" fill="rgb(252,165,52)" rx="2" ry="2" />
<text  x="1163.02" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018ba0&gt; (1 samples, 0.04%)</title><rect x="1172.9" y="613" width="0.4" height="15.0" fill="rgb(243,108,21)" rx="2" ry="2" />
<text  x="1175.93" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="36.6" y="645" width="0.5" height="15.0" fill="rgb(240,31,36)" rx="2" ry="2" />
<text  x="39.65" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (4 samples, 0.14%)</title><rect x="301.9" y="597" width="1.6" height="15.0" fill="rgb(226,181,43)" rx="2" ry="2" />
<text  x="304.88" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1179.2" y="661" width="0.8" height="15.0" fill="rgb(253,46,10)" rx="2" ry="2" />
<text  x="1182.17" y="671.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1172.5" y="485" width="0.4" height="15.0" fill="rgb(246,147,0)" rx="2" ry="2" />
<text  x="1175.51" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1177.5" y="677" width="0.4" height="15.0" fill="rgb(239,137,10)" rx="2" ry="2" />
<text  x="1180.51" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.14%)</title><rect x="1162.9" y="565" width="1.7" height="15.0" fill="rgb(219,74,13)" rx="2" ry="2" />
<text  x="1165.94" y="575.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="336.4" y="613" width="0.5" height="15.0" fill="rgb(228,23,24)" rx="2" ry="2" />
<text  x="339.44" y="623.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (8 samples, 0.28%)</title><rect x="1182.9" y="293" width="3.4" height="15.0" fill="rgb(215,188,23)" rx="2" ry="2" />
<text  x="1185.92" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="412.6" y="629" width="0.4" height="15.0" fill="rgb(247,209,16)" rx="2" ry="2" />
<text  x="415.63" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1187.5" y="37" width="0.4" height="15.0" fill="rgb(240,193,16)" rx="2" ry="2" />
<text  x="1190.50" y="47.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1171.7" y="501" width="0.4" height="15.0" fill="rgb(217,68,46)" rx="2" ry="2" />
<text  x="1174.68" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1177.9" y="517" width="0.4" height="15.0" fill="rgb(223,146,46)" rx="2" ry="2" />
<text  x="1180.93" y="527.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1175.0" y="597" width="0.4" height="15.0" fill="rgb(225,199,8)" rx="2" ry="2" />
<text  x="1178.01" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1170.0" y="565" width="0.4" height="15.0" fill="rgb(248,96,4)" rx="2" ry="2" />
<text  x="1173.01" y="575.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="325" width="0.5" height="15.0" fill="rgb(242,154,41)" rx="2" ry="2" />
<text  x="37.15" y="335.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1186.3" y="613" width="0.4" height="15.0" fill="rgb(251,24,9)" rx="2" ry="2" />
<text  x="1189.25" y="623.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1169.6" y="533" width="0.4" height="15.0" fill="rgb(229,152,18)" rx="2" ry="2" />
<text  x="1172.60" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1172.5" y="421" width="0.4" height="15.0" fill="rgb(243,48,38)" rx="2" ry="2" />
<text  x="1175.51" y="431.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (5 samples, 0.18%)</title><rect x="307.7" y="613" width="2.1" height="15.0" fill="rgb(218,74,6)" rx="2" ry="2" />
<text  x="310.71" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (2 samples, 0.07%)</title><rect x="1188.3" y="245" width="0.9" height="15.0" fill="rgb(206,207,53)" rx="2" ry="2" />
<text  x="1191.33" y="255.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.21%)</title><rect x="31.7" y="613" width="2.4" height="15.0" fill="rgb(222,90,18)" rx="2" ry="2" />
<text  x="34.65" y="623.5" ></text>
</g>
<g >
<title>shared_ptr (2 samples, 0.07%)</title><rect x="422.2" y="677" width="0.8" height="15.0" fill="rgb(223,195,30)" rx="2" ry="2" />
<text  x="425.21" y="687.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (18 samples, 0.64%)</title><rect x="1180.0" y="693" width="7.5" height="15.0" fill="rgb(213,39,35)" rx="2" ry="2" />
<text  x="1183.01" y="703.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1172.5" y="469" width="0.4" height="15.0" fill="rgb(218,133,7)" rx="2" ry="2" />
<text  x="1175.51" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1161.7" y="549" width="0.4" height="15.0" fill="rgb(238,218,5)" rx="2" ry="2" />
<text  x="1164.69" y="559.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.07%)</title><rect x="1187.5" y="213" width="0.8" height="15.0" fill="rgb(238,97,33)" rx="2" ry="2" />
<text  x="1190.50" y="223.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1170.0" y="517" width="0.4" height="15.0" fill="rgb(211,225,15)" rx="2" ry="2" />
<text  x="1173.01" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1161.3" y="597" width="0.4" height="15.0" fill="rgb(206,222,42)" rx="2" ry="2" />
<text  x="1164.27" y="607.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (6 samples, 0.21%)</title><rect x="31.7" y="597" width="2.4" height="15.0" fill="rgb(243,153,36)" rx="2" ry="2" />
<text  x="34.65" y="607.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="406.4" y="613" width="1.2" height="15.0" fill="rgb(251,142,29)" rx="2" ry="2" />
<text  x="409.39" y="623.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.04%)</title><rect x="37.5" y="629" width="0.4" height="15.0" fill="rgb(225,163,12)" rx="2" ry="2" />
<text  x="40.48" y="639.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="426.8" y="629" width="0.4" height="15.0" fill="rgb(213,206,7)" rx="2" ry="2" />
<text  x="429.79" y="639.5" ></text>
</g>
<g >
<title>XStringToKeysym&lt;000000000003d210&gt; (1 samples, 0.04%)</title><rect x="37.1" y="597" width="0.4" height="15.0" fill="rgb(207,58,29)" rx="2" ry="2" />
<text  x="40.06" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1156.3" y="501" width="0.4" height="15.0" fill="rgb(244,167,0)" rx="2" ry="2" />
<text  x="1159.27" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="533" width="0.5" height="15.0" fill="rgb(225,197,9)" rx="2" ry="2" />
<text  x="37.15" y="543.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.04%)</title><rect x="37.5" y="597" width="0.4" height="15.0" fill="rgb(246,225,38)" rx="2" ry="2" />
<text  x="40.48" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (5 samples, 0.18%)</title><rect x="147.4" y="581" width="2.1" height="15.0" fill="rgb(249,100,4)" rx="2" ry="2" />
<text  x="150.40" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="366.8" y="597" width="0.9" height="15.0" fill="rgb(222,218,22)" rx="2" ry="2" />
<text  x="369.83" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="1178.3" y="565" width="0.9" height="15.0" fill="rgb(246,60,49)" rx="2" ry="2" />
<text  x="1181.34" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New(unsigned long)&lt;0000000000027ea0&gt; (1 samples, 0.04%)</title><rect x="35.4" y="549" width="0.4" height="15.0" fill="rgb(237,81,40)" rx="2" ry="2" />
<text  x="38.40" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (67 samples, 2.36%)</title><rect x="214.9" y="645" width="27.9" height="15.0" fill="rgb(212,65,14)" rx="2" ry="2" />
<text  x="217.86" y="655.5" >S..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="428.0" y="613" width="0.5" height="15.0" fill="rgb(238,54,16)" rx="2" ry="2" />
<text  x="431.04" y="623.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1161.3" y="565" width="0.4" height="15.0" fill="rgb(227,160,10)" rx="2" ry="2" />
<text  x="1164.27" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1170.8" y="453" width="0.5" height="15.0" fill="rgb(251,84,23)" rx="2" ry="2" />
<text  x="1173.85" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (46 samples, 1.62%)</title><rect x="284.8" y="629" width="19.2" height="15.0" fill="rgb(244,120,53)" rx="2" ry="2" />
<text  x="287.81" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018ba0&gt; (1 samples, 0.04%)</title><rect x="416.4" y="597" width="0.4" height="15.0" fill="rgb(232,156,35)" rx="2" ry="2" />
<text  x="419.38" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1177.9" y="677" width="0.4" height="15.0" fill="rgb(223,206,50)" rx="2" ry="2" />
<text  x="1180.93" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (13 samples, 0.46%)</title><rect x="1180.8" y="453" width="5.5" height="15.0" fill="rgb(215,49,18)" rx="2" ry="2" />
<text  x="1183.84" y="463.5" ></text>
</g>
<g >
<title>~vector (14 samples, 0.49%)</title><rect x="337.7" y="629" width="5.8" height="15.0" fill="rgb(214,42,28)" rx="2" ry="2" />
<text  x="340.69" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="1173.3" y="693" width="0.9" height="15.0" fill="rgb(248,134,38)" rx="2" ry="2" />
<text  x="1176.35" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1177.5" y="693" width="0.4" height="15.0" fill="rgb(213,102,0)" rx="2" ry="2" />
<text  x="1180.51" y="703.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="533" width="5.5" height="15.0" fill="rgb(223,116,18)" rx="2" ry="2" />
<text  x="1183.84" y="543.5" ></text>
</g>
<g >
<title>~_Safe_unordered_container_base (13 samples, 0.46%)</title><rect x="1180.8" y="389" width="5.5" height="15.0" fill="rgb(232,177,4)" rx="2" ry="2" />
<text  x="1183.84" y="399.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="581" width="0.4" height="15.0" fill="rgb(228,65,34)" rx="2" ry="2" />
<text  x="1179.26" y="591.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="34.1" y="437" width="0.5" height="15.0" fill="rgb(225,53,25)" rx="2" ry="2" />
<text  x="37.15" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (13 samples, 0.46%)</title><rect x="354.8" y="597" width="5.4" height="15.0" fill="rgb(241,206,12)" rx="2" ry="2" />
<text  x="357.76" y="607.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (15 samples, 0.53%)</title><rect x="137.8" y="597" width="6.3" height="15.0" fill="rgb(253,51,27)" rx="2" ry="2" />
<text  x="140.83" y="607.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.04%)</title><rect x="35.8" y="597" width="0.4" height="15.0" fill="rgb(247,192,53)" rx="2" ry="2" />
<text  x="38.82" y="607.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.04%)</title><rect x="1180.0" y="629" width="0.4" height="15.0" fill="rgb(225,67,23)" rx="2" ry="2" />
<text  x="1183.01" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (1 samples, 0.04%)</title><rect x="1177.9" y="581" width="0.4" height="15.0" fill="rgb(239,125,12)" rx="2" ry="2" />
<text  x="1180.93" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1161.7" y="533" width="0.4" height="15.0" fill="rgb(247,43,29)" rx="2" ry="2" />
<text  x="1164.69" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (2 samples, 0.07%)</title><rect x="1187.5" y="117" width="0.8" height="15.0" fill="rgb(217,105,0)" rx="2" ry="2" />
<text  x="1190.50" y="127.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.04%)</title><rect x="35.4" y="565" width="0.4" height="15.0" fill="rgb(229,18,19)" rx="2" ry="2" />
<text  x="38.40" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="428.0" y="581" width="0.5" height="15.0" fill="rgb(209,72,18)" rx="2" ry="2" />
<text  x="431.04" y="591.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="420.1" y="565" width="0.4" height="15.0" fill="rgb(215,198,14)" rx="2" ry="2" />
<text  x="423.13" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="1172.9" y="661" width="0.4" height="15.0" fill="rgb(226,93,1)" rx="2" ry="2" />
<text  x="1175.93" y="671.5" ></text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (1 samples, 0.04%)</title><rect x="37.1" y="629" width="0.4" height="15.0" fill="rgb(207,62,0)" rx="2" ry="2" />
<text  x="40.06" y="639.5" ></text>
</g>
<g >
<title>0x00007f80daf02b4e (1 samples, 0.04%)</title><rect x="36.6" y="565" width="0.5" height="15.0" fill="rgb(206,89,41)" rx="2" ry="2" />
<text  x="39.65" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1151.7" y="581" width="0.4" height="15.0" fill="rgb(233,56,15)" rx="2" ry="2" />
<text  x="1154.69" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.2" y="581" width="0.4" height="15.0" fill="rgb(245,209,28)" rx="2" ry="2" />
<text  x="430.21" y="591.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e270&gt; (13 samples, 0.46%)</title><rect x="1180.8" y="645" width="5.5" height="15.0" fill="rgb(235,159,2)" rx="2" ry="2" />
<text  x="1183.84" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1172.5" y="517" width="0.4" height="15.0" fill="rgb(246,72,50)" rx="2" ry="2" />
<text  x="1175.51" y="527.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (2,780 samples, 98.09%)</title><rect x="31.7" y="773" width="1157.5" height="15.0" fill="rgb(231,188,1)" rx="2" ry="2" />
<text  x="34.65" y="783.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1187.5" y="373" width="0.8" height="15.0" fill="rgb(234,36,54)" rx="2" ry="2" />
<text  x="1190.50" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.04%)</title><rect x="1159.6" y="549" width="0.4" height="15.0" fill="rgb(218,29,35)" rx="2" ry="2" />
<text  x="1162.60" y="559.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.7" y="661" width="0.4" height="15.0" fill="rgb(210,99,39)" rx="2" ry="2" />
<text  x="427.71" y="671.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.04%)</title><rect x="37.1" y="645" width="0.4" height="15.0" fill="rgb(245,93,15)" rx="2" ry="2" />
<text  x="40.06" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="35.4" y="629" width="0.4" height="15.0" fill="rgb(239,124,46)" rx="2" ry="2" />
<text  x="38.40" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060410&gt; (1 samples, 0.04%)</title><rect x="1177.1" y="693" width="0.4" height="15.0" fill="rgb(234,12,31)" rx="2" ry="2" />
<text  x="1180.09" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,735 samples, 61.22%)</title><rect x="428.0" y="693" width="722.4" height="15.0" fill="rgb(247,2,21)" rx="2" ry="2" />
<text  x="431.04" y="703.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>SDL_DYNAPI_entry (10 samples, 0.35%)</title><rect x="31.7" y="693" width="4.1" height="15.0" fill="rgb(206,64,19)" rx="2" ry="2" />
<text  x="34.65" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1170.0" y="469" width="0.4" height="15.0" fill="rgb(243,219,39)" rx="2" ry="2" />
<text  x="1173.01" y="479.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="145.3" y="613" width="0.4" height="15.0" fill="rgb(237,41,50)" rx="2" ry="2" />
<text  x="148.32" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (77 samples, 2.72%)</title><rect x="304.0" y="629" width="32.0" height="15.0" fill="rgb(224,22,9)" rx="2" ry="2" />
<text  x="306.96" y="639.5" >st..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="427.6" y="677" width="0.4" height="15.0" fill="rgb(219,214,49)" rx="2" ry="2" />
<text  x="430.62" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="413.0" y="581" width="0.5" height="15.0" fill="rgb(253,182,20)" rx="2" ry="2" />
<text  x="416.05" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="1175.0" y="661" width="1.3" height="15.0" fill="rgb(226,197,51)" rx="2" ry="2" />
<text  x="1178.01" y="671.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="1162.1" y="469" width="0.4" height="15.0" fill="rgb(226,182,41)" rx="2" ry="2" />
<text  x="1165.10" y="479.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="428.0" y="629" width="0.5" height="15.0" fill="rgb(243,81,0)" rx="2" ry="2" />
<text  x="431.04" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="326.0" y="597" width="0.4" height="15.0" fill="rgb(253,27,15)" rx="2" ry="2" />
<text  x="329.03" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1172.1" y="501" width="0.4" height="15.0" fill="rgb(237,137,47)" rx="2" ry="2" />
<text  x="1175.10" y="511.5" ></text>
</g>
<g >
<title>_Vector_impl_data (1 samples, 0.04%)</title><rect x="416.8" y="677" width="0.4" height="15.0" fill="rgb(245,50,50)" rx="2" ry="2" />
<text  x="419.80" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="661" width="0.4" height="15.0" fill="rgb(252,75,9)" rx="2" ry="2" />
<text  x="1179.26" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="416.8" y="517" width="0.4" height="15.0" fill="rgb(240,95,30)" rx="2" ry="2" />
<text  x="419.80" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.46%)</title><rect x="1156.7" y="629" width="5.4" height="15.0" fill="rgb(247,123,32)" rx="2" ry="2" />
<text  x="1159.69" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1,682 samples, 59.35%)</title><rect x="450.1" y="645" width="700.3" height="15.0" fill="rgb(223,79,6)" rx="2" ry="2" />
<text  x="453.11" y="655.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1171.7" y="517" width="0.4" height="15.0" fill="rgb(242,123,21)" rx="2" ry="2" />
<text  x="1174.68" y="527.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="427.2" y="629" width="0.4" height="15.0" fill="rgb(253,88,2)" rx="2" ry="2" />
<text  x="430.21" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::empty() const (1 samples, 0.04%)</title><rect x="1180.0" y="549" width="0.4" height="15.0" fill="rgb(213,96,45)" rx="2" ry="2" />
<text  x="1183.01" y="559.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.04%)</title><rect x="1170.0" y="485" width="0.4" height="15.0" fill="rgb(219,13,20)" rx="2" ry="2" />
<text  x="1173.01" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1188.3" y="581" width="0.9" height="15.0" fill="rgb(249,214,42)" rx="2" ry="2" />
<text  x="1191.33" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1187.5" y="645" width="0.8" height="15.0" fill="rgb(207,112,11)" rx="2" ry="2" />
<text  x="1190.50" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.46%)</title><rect x="1156.7" y="613" width="5.4" height="15.0" fill="rgb(211,131,31)" rx="2" ry="2" />
<text  x="1159.69" y="623.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.07%)</title><rect x="1188.3" y="421" width="0.9" height="15.0" fill="rgb(242,46,50)" rx="2" ry="2" />
<text  x="1191.33" y="431.5" ></text>
</g>
<g >
<title>0x00007f80daf0775a (1 samples, 0.04%)</title><rect x="36.6" y="597" width="0.5" height="15.0" fill="rgb(218,35,15)" rx="2" ry="2" />
<text  x="39.65" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;__gnu_debug::_Distance_precision&gt;::type&gt;::__type&gt; std::make_pair&lt;long, __gnu_debug::_Distance_precision&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (4 samples, 0.14%)</title><rect x="1181.3" y="229" width="1.6" height="15.0" fill="rgb(246,31,17)" rx="2" ry="2" />
<text  x="1184.26" y="239.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="34.1" y="549" width="0.5" height="15.0" fill="rgb(229,209,40)" rx="2" ry="2" />
<text  x="37.15" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="425.5" y="645" width="1.3" height="15.0" fill="rgb(231,89,2)" rx="2" ry="2" />
<text  x="428.54" y="655.5" ></text>
</g>
<g >
<title>~__shared_count (3 samples, 0.11%)</title><rect x="177.8" y="645" width="1.2" height="15.0" fill="rgb(221,168,30)" rx="2" ry="2" />
<text  x="180.80" y="655.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.53%)</title><rect x="1166.7" y="613" width="6.2" height="15.0" fill="rgb(240,209,14)" rx="2" ry="2" />
<text  x="1169.68" y="623.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (2 samples, 0.07%)</title><rect x="1187.5" y="709" width="0.8" height="15.0" fill="rgb(220,170,34)" rx="2" ry="2" />
<text  x="1190.50" y="719.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="423.0" y="613" width="0.5" height="15.0" fill="rgb(219,84,44)" rx="2" ry="2" />
<text  x="426.04" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (13 samples, 0.46%)</title><rect x="1180.8" y="437" width="5.5" height="15.0" fill="rgb(243,123,30)" rx="2" ry="2" />
<text  x="1183.84" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (3 samples, 0.11%)</title><rect x="1156.7" y="549" width="1.2" height="15.0" fill="rgb(249,132,52)" rx="2" ry="2" />
<text  x="1159.69" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.2" y="677" width="0.4" height="15.0" fill="rgb(225,85,44)" rx="2" ry="2" />
<text  x="430.21" y="687.5" ></text>
</g>
<g >
<title>TrianglePipeline::~TrianglePipeline()&lt;0000000000027850&gt; (2 samples, 0.07%)</title><rect x="1179.2" y="629" width="0.8" height="15.0" fill="rgb(254,39,2)" rx="2" ry="2" />
<text  x="1182.17" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.18%)</title><rect x="35.8" y="677" width="2.1" height="15.0" fill="rgb(246,181,27)" rx="2" ry="2" />
<text  x="38.82" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1152.9" y="581" width="0.5" height="15.0" fill="rgb(237,10,43)" rx="2" ry="2" />
<text  x="1155.94" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (4 samples, 0.14%)</title><rect x="213.2" y="629" width="1.7" height="15.0" fill="rgb(246,112,49)" rx="2" ry="2" />
<text  x="216.19" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="389" width="0.5" height="15.0" fill="rgb(220,93,8)" rx="2" ry="2" />
<text  x="37.15" y="399.5" ></text>
</g>
<g >
<title>Engine_3D::Engine_3D() (15 samples, 0.53%)</title><rect x="31.7" y="725" width="6.2" height="15.0" fill="rgb(212,18,50)" rx="2" ry="2" />
<text  x="34.65" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (2 samples, 0.07%)</title><rect x="408.9" y="645" width="0.8" height="15.0" fill="rgb(251,190,15)" rx="2" ry="2" />
<text  x="411.88" y="655.5" ></text>
</g>
<g >
<title>glXQueryContext&lt;000000000001a840&gt; (1 samples, 0.04%)</title><rect x="34.1" y="613" width="0.5" height="15.0" fill="rgb(215,159,2)" rx="2" ry="2" />
<text  x="37.15" y="623.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1169.6" y="517" width="0.4" height="15.0" fill="rgb(220,72,2)" rx="2" ry="2" />
<text  x="1172.60" y="527.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="405.6" y="629" width="0.4" height="15.0" fill="rgb(245,73,6)" rx="2" ry="2" />
<text  x="408.55" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="416.8" y="629" width="0.4" height="15.0" fill="rgb(215,143,5)" rx="2" ry="2" />
<text  x="419.80" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="421.0" y="661" width="1.2" height="15.0" fill="rgb(236,163,4)" rx="2" ry="2" />
<text  x="423.96" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1178.3" y="613" width="0.9" height="15.0" fill="rgb(250,108,16)" rx="2" ry="2" />
<text  x="1181.34" y="623.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.4" y="645" width="0.4" height="15.0" fill="rgb(250,96,17)" rx="2" ry="2" />
<text  x="1183.42" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="403.1" y="661" width="0.4" height="15.0" fill="rgb(243,140,11)" rx="2" ry="2" />
<text  x="406.06" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1187.9" y="37" width="0.4" height="15.0" fill="rgb(228,210,22)" rx="2" ry="2" />
<text  x="1190.92" y="47.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (53 samples, 1.87%)</title><rect x="1150.9" y="677" width="22.0" height="15.0" fill="rgb(244,172,45)" rx="2" ry="2" />
<text  x="1153.86" y="687.5" >v..</text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="428.5" y="629" width="0.4" height="15.0" fill="rgb(228,29,1)" rx="2" ry="2" />
<text  x="431.45" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="413.0" y="645" width="0.9" height="15.0" fill="rgb(223,86,44)" rx="2" ry="2" />
<text  x="416.05" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (2 samples, 0.07%)</title><rect x="1157.1" y="501" width="0.8" height="15.0" fill="rgb(223,131,21)" rx="2" ry="2" />
<text  x="1160.11" y="511.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="277" width="0.5" height="15.0" fill="rgb(254,81,7)" rx="2" ry="2" />
<text  x="37.15" y="287.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="426.8" y="645" width="0.4" height="15.0" fill="rgb(221,77,48)" rx="2" ry="2" />
<text  x="429.79" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1156.7" y="581" width="1.2" height="15.0" fill="rgb(219,123,48)" rx="2" ry="2" />
<text  x="1159.69" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="404.7" y="629" width="0.4" height="15.0" fill="rgb(221,20,43)" rx="2" ry="2" />
<text  x="407.72" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1180.4" y="581" width="0.4" height="15.0" fill="rgb(206,79,8)" rx="2" ry="2" />
<text  x="1183.42" y="591.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (2,780 samples, 98.09%)</title><rect x="31.7" y="741" width="1157.5" height="15.0" fill="rgb(230,193,1)" rx="2" ry="2" />
<text  x="34.65" y="751.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>OBJ_Lex_normal::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000050c60&gt; (1 samples, 0.04%)</title><rect x="1186.3" y="629" width="0.4" height="15.0" fill="rgb(210,33,2)" rx="2" ry="2" />
<text  x="1189.25" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;00000000000817b0&gt; (2 samples, 0.07%)</title><rect x="417.6" y="661" width="0.9" height="15.0" fill="rgb(249,138,43)" rx="2" ry="2" />
<text  x="420.63" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.04%)</title><rect x="1186.3" y="517" width="0.4" height="15.0" fill="rgb(232,8,20)" rx="2" ry="2" />
<text  x="1189.25" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (8 samples, 0.28%)</title><rect x="1182.9" y="245" width="3.4" height="15.0" fill="rgb(215,108,11)" rx="2" ry="2" />
<text  x="1185.92" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1180.8" y="277" width="0.5" height="15.0" fill="rgb(250,129,2)" rx="2" ry="2" />
<text  x="1183.84" y="287.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (491 samples, 17.33%)</title><rect x="918.5" y="597" width="204.5" height="15.0" fill="rgb(250,70,52)" rx="2" ry="2" />
<text  x="921.53" y="607.5" >__driDriverGetExtensions_d..</text>
</g>
<g >
<title>__open64 (1 samples, 0.04%)</title><rect x="36.6" y="517" width="0.5" height="15.0" fill="rgb(230,67,29)" rx="2" ry="2" />
<text  x="39.65" y="527.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1177.1" y="677" width="0.4" height="15.0" fill="rgb(254,53,40)" rx="2" ry="2" />
<text  x="1180.09" y="687.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (682 samples, 24.06%)</title><rect x="866.5" y="629" width="283.9" height="15.0" fill="rgb(239,150,2)" rx="2" ry="2" />
<text  x="869.48" y="639.5" >nouveau_drm_screen_create</text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="1170.8" y="437" width="0.5" height="15.0" fill="rgb(236,89,30)" rx="2" ry="2" />
<text  x="1173.85" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="412.2" y="645" width="0.4" height="15.0" fill="rgb(235,48,23)" rx="2" ry="2" />
<text  x="415.22" y="655.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.07%)</title><rect x="32.1" y="325" width="0.8" height="15.0" fill="rgb(253,95,40)" rx="2" ry="2" />
<text  x="35.07" y="335.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (2 samples, 0.07%)</title><rect x="34.6" y="629" width="0.8" height="15.0" fill="rgb(248,118,5)" rx="2" ry="2" />
<text  x="37.57" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="156.1" y="613" width="0.5" height="15.0" fill="rgb(225,106,41)" rx="2" ry="2" />
<text  x="159.15" y="623.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.21%)</title><rect x="1170.4" y="597" width="2.5" height="15.0" fill="rgb(254,112,20)" rx="2" ry="2" />
<text  x="1173.43" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="1172.9" y="645" width="0.4" height="15.0" fill="rgb(232,209,25)" rx="2" ry="2" />
<text  x="1175.93" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="407.6" y="597" width="0.5" height="15.0" fill="rgb(243,65,32)" rx="2" ry="2" />
<text  x="410.64" y="607.5" ></text>
</g>
<g >
<title>0x00007f80daf0596f (1 samples, 0.04%)</title><rect x="36.2" y="629" width="0.4" height="15.0" fill="rgb(244,145,50)" rx="2" ry="2" />
<text  x="39.23" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="424.7" y="645" width="0.4" height="15.0" fill="rgb(234,49,6)" rx="2" ry="2" />
<text  x="427.71" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1188.3" y="677" width="0.9" height="15.0" fill="rgb(229,87,17)" rx="2" ry="2" />
<text  x="1191.33" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="1157.1" y="469" width="0.8" height="15.0" fill="rgb(206,15,8)" rx="2" ry="2" />
<text  x="1160.11" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (2 samples, 0.07%)</title><rect x="1187.5" y="101" width="0.8" height="15.0" fill="rgb(252,166,11)" rx="2" ry="2" />
<text  x="1190.50" y="111.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1186.3" y="549" width="0.4" height="15.0" fill="rgb(214,201,26)" rx="2" ry="2" />
<text  x="1189.25" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (577 samples, 20.36%)</title><rect x="889.0" y="613" width="240.2" height="15.0" fill="rgb(211,149,46)" rx="2" ry="2" />
<text  x="891.96" y="623.5" >__driDriverGetExtensions_d3d12&lt;..</text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="629" width="5.5" height="15.0" fill="rgb(216,109,2)" rx="2" ry="2" />
<text  x="1183.84" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1162.1" y="549" width="0.4" height="15.0" fill="rgb(247,199,18)" rx="2" ry="2" />
<text  x="1165.10" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 0.25%)</title><rect x="31.7" y="629" width="2.9" height="15.0" fill="rgb(247,26,54)" rx="2" ry="2" />
<text  x="34.65" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1171.3" y="549" width="0.4" height="15.0" fill="rgb(210,71,13)" rx="2" ry="2" />
<text  x="1174.26" y="559.5" ></text>
</g>
<g >
<title>all (2,834 samples, 100%)</title><rect x="10.0" y="805" width="1180.0" height="15.0" fill="rgb(241,183,52)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.04%)</title><rect x="157.8" y="613" width="0.4" height="15.0" fill="rgb(208,201,27)" rx="2" ry="2" />
<text  x="160.81" y="623.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.0" y="629" width="0.4" height="15.0" fill="rgb(226,7,40)" rx="2" ry="2" />
<text  x="1178.01" y="639.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="346.4" y="613" width="0.4" height="15.0" fill="rgb(220,172,41)" rx="2" ry="2" />
<text  x="349.43" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Carve(tcmalloc::Span*, unsigned long)&lt;00000000000273a0&gt; (1 samples, 0.04%)</title><rect x="35.4" y="533" width="0.4" height="15.0" fill="rgb(214,157,15)" rx="2" ry="2" />
<text  x="38.40" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1157.9" y="565" width="0.5" height="15.0" fill="rgb(249,98,33)" rx="2" ry="2" />
<text  x="1160.94" y="575.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (2 samples, 0.07%)</title><rect x="137.0" y="597" width="0.8" height="15.0" fill="rgb(221,31,19)" rx="2" ry="2" />
<text  x="139.99" y="607.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (3 samples, 0.11%)</title><rect x="176.5" y="597" width="1.3" height="15.0" fill="rgb(237,52,39)" rx="2" ry="2" />
<text  x="179.55" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (5 samples, 0.18%)</title><rect x="1157.9" y="581" width="2.1" height="15.0" fill="rgb(241,91,31)" rx="2" ry="2" />
<text  x="1160.94" y="591.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (1 samples, 0.04%)</title><rect x="31.7" y="469" width="0.4" height="15.0" fill="rgb(219,200,52)" rx="2" ry="2" />
<text  x="34.65" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1150.9" y="581" width="0.4" height="15.0" fill="rgb(226,46,47)" rx="2" ry="2" />
<text  x="1153.86" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="404.3" y="645" width="0.8" height="15.0" fill="rgb(232,33,17)" rx="2" ry="2" />
<text  x="407.30" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="402.6" y="613" width="0.5" height="15.0" fill="rgb(214,191,28)" rx="2" ry="2" />
<text  x="405.64" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="469" width="5.5" height="15.0" fill="rgb(225,113,33)" rx="2" ry="2" />
<text  x="1183.84" y="479.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (12 samples, 0.42%)</title><rect x="686.2" y="581" width="5.0" height="15.0" fill="rgb(231,94,20)" rx="2" ry="2" />
<text  x="689.19" y="591.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1156.3" y="565" width="0.4" height="15.0" fill="rgb(244,78,13)" rx="2" ry="2" />
<text  x="1159.27" y="575.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="341" width="0.5" height="15.0" fill="rgb(205,54,54)" rx="2" ry="2" />
<text  x="37.15" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1187.5" y="197" width="0.8" height="15.0" fill="rgb(243,216,5)" rx="2" ry="2" />
<text  x="1190.50" y="207.5" ></text>
</g>
<g >
<title>_XSend&lt;0000000000043460&gt; (1 samples, 0.04%)</title><rect x="428.9" y="581" width="0.4" height="15.0" fill="rgb(224,177,33)" rx="2" ry="2" />
<text  x="431.87" y="591.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="423.0" y="629" width="0.5" height="15.0" fill="rgb(214,42,41)" rx="2" ry="2" />
<text  x="426.04" y="639.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (21 samples, 0.74%)</title><rect x="327.3" y="597" width="8.7" height="15.0" fill="rgb(234,116,54)" rx="2" ry="2" />
<text  x="330.28" y="607.5" ></text>
</g>
<g >
<title>_Parameter (2 samples, 0.07%)</title><rect x="326.4" y="597" width="0.9" height="15.0" fill="rgb(236,196,8)" rx="2" ry="2" />
<text  x="329.44" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data(char*) (1 samples, 0.04%)</title><rect x="1186.7" y="629" width="0.4" height="15.0" fill="rgb(225,200,23)" rx="2" ry="2" />
<text  x="1189.67" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (2 samples, 0.07%)</title><rect x="1188.3" y="229" width="0.9" height="15.0" fill="rgb(224,130,8)" rx="2" ry="2" />
<text  x="1191.33" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="416.4" y="549" width="0.4" height="15.0" fill="rgb(207,2,2)" rx="2" ry="2" />
<text  x="419.38" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="1175.8" y="597" width="0.5" height="15.0" fill="rgb(217,51,23)" rx="2" ry="2" />
<text  x="1178.84" y="607.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="419.3" y="629" width="0.8" height="15.0" fill="rgb(213,104,35)" rx="2" ry="2" />
<text  x="422.29" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1152.9" y="597" width="0.5" height="15.0" fill="rgb(233,105,45)" rx="2" ry="2" />
<text  x="1155.94" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1178.3" y="677" width="0.9" height="15.0" fill="rgb(249,46,15)" rx="2" ry="2" />
<text  x="1181.34" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (12 samples, 0.42%)</title><rect x="150.3" y="645" width="5.0" height="15.0" fill="rgb(215,33,42)" rx="2" ry="2" />
<text  x="153.32" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1164.6" y="517" width="0.4" height="15.0" fill="rgb(216,72,53)" rx="2" ry="2" />
<text  x="1167.60" y="527.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.04%)</title><rect x="122.8" y="613" width="0.5" height="15.0" fill="rgb(229,41,6)" rx="2" ry="2" />
<text  x="125.84" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1187.5" y="677" width="0.8" height="15.0" fill="rgb(247,23,8)" rx="2" ry="2" />
<text  x="1190.50" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1179.2" y="549" width="0.8" height="15.0" fill="rgb(218,171,10)" rx="2" ry="2" />
<text  x="1182.17" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1155.0" y="549" width="0.4" height="15.0" fill="rgb(216,157,16)" rx="2" ry="2" />
<text  x="1158.02" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="116.2" y="597" width="0.4" height="15.0" fill="rgb(214,148,11)" rx="2" ry="2" />
<text  x="119.18" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (50 samples, 1.76%)</title><rect x="157.0" y="629" width="20.8" height="15.0" fill="rgb(226,3,36)" rx="2" ry="2" />
<text  x="159.98" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1177.5" y="661" width="0.4" height="15.0" fill="rgb(253,161,18)" rx="2" ry="2" />
<text  x="1180.51" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.07%)</title><rect x="1170.4" y="501" width="0.9" height="15.0" fill="rgb(214,216,44)" rx="2" ry="2" />
<text  x="1173.43" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (9 samples, 0.32%)</title><rect x="146.6" y="597" width="3.7" height="15.0" fill="rgb(248,86,38)" rx="2" ry="2" />
<text  x="149.57" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (27 samples, 0.95%)</title><rect x="105.3" y="613" width="11.3" height="15.0" fill="rgb(250,177,49)" rx="2" ry="2" />
<text  x="108.35" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.04%)</title><rect x="421.8" y="581" width="0.4" height="15.0" fill="rgb(233,203,36)" rx="2" ry="2" />
<text  x="424.79" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000d2370&gt; (2 samples, 0.07%)</title><rect x="1165.0" y="469" width="0.9" height="15.0" fill="rgb(223,128,19)" rx="2" ry="2" />
<text  x="1168.02" y="479.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (5 samples, 0.18%)</title><rect x="1180.8" y="341" width="2.1" height="15.0" fill="rgb(207,173,1)" rx="2" ry="2" />
<text  x="1183.84" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (2 samples, 0.07%)</title><rect x="1188.3" y="261" width="0.9" height="15.0" fill="rgb(208,53,37)" rx="2" ry="2" />
<text  x="1191.33" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.04%)</title><rect x="242.3" y="533" width="0.5" height="15.0" fill="rgb(239,229,6)" rx="2" ry="2" />
<text  x="245.34" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (2 samples, 0.07%)</title><rect x="1157.1" y="517" width="0.8" height="15.0" fill="rgb(235,99,53)" rx="2" ry="2" />
<text  x="1160.11" y="527.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="416.4" y="517" width="0.4" height="15.0" fill="rgb(223,229,43)" rx="2" ry="2" />
<text  x="419.38" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1170.8" y="469" width="0.5" height="15.0" fill="rgb(211,65,18)" rx="2" ry="2" />
<text  x="1173.85" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="409.7" y="661" width="0.4" height="15.0" fill="rgb(251,203,53)" rx="2" ry="2" />
<text  x="412.72" y="671.5" ></text>
</g>
<g >
<title>Triangle::getTriangleZCenter()&lt;000000000007f360&gt; (1 samples, 0.04%)</title><rect x="1160.4" y="565" width="0.5" height="15.0" fill="rgb(227,39,2)" rx="2" ry="2" />
<text  x="1163.44" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (4 samples, 0.14%)</title><rect x="406.4" y="645" width="1.7" height="15.0" fill="rgb(229,15,12)" rx="2" ry="2" />
<text  x="409.39" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (8 samples, 0.28%)</title><rect x="1182.9" y="325" width="3.4" height="15.0" fill="rgb(229,74,41)" rx="2" ry="2" />
<text  x="1185.92" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (2 samples, 0.07%)</title><rect x="1165.0" y="501" width="0.9" height="15.0" fill="rgb(222,170,15)" rx="2" ry="2" />
<text  x="1168.02" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (914 samples, 32.25%)</title><rect x="485.9" y="629" width="380.6" height="15.0" fill="rgb(234,44,20)" rx="2" ry="2" />
<text  x="488.91" y="639.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (26 samples, 0.92%)</title><rect x="855.7" y="597" width="10.8" height="15.0" fill="rgb(227,198,10)" rx="2" ry="2" />
<text  x="858.65" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1170.8" y="421" width="0.5" height="15.0" fill="rgb(208,73,26)" rx="2" ry="2" />
<text  x="1173.85" y="431.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="31.7" y="501" width="0.4" height="15.0" fill="rgb(205,27,23)" rx="2" ry="2" />
<text  x="34.65" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="1172.5" y="437" width="0.4" height="15.0" fill="rgb(227,121,48)" rx="2" ry="2" />
<text  x="1175.51" y="447.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.04%)</title><rect x="403.5" y="677" width="0.4" height="15.0" fill="rgb(229,168,5)" rx="2" ry="2" />
<text  x="406.47" y="687.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="32.1" y="453" width="0.8" height="15.0" fill="rgb(219,189,50)" rx="2" ry="2" />
<text  x="35.07" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.07%)</title><rect x="1175.4" y="645" width="0.9" height="15.0" fill="rgb(250,42,24)" rx="2" ry="2" />
<text  x="1178.43" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000d2550&gt; (1 samples, 0.04%)</title><rect x="1171.3" y="517" width="0.4" height="15.0" fill="rgb(226,143,48)" rx="2" ry="2" />
<text  x="1174.26" y="527.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;0000000000080ca0&gt; (1 samples, 0.04%)</title><rect x="425.1" y="661" width="0.4" height="15.0" fill="rgb(232,166,54)" rx="2" ry="2" />
<text  x="428.12" y="671.5" ></text>
</g>
<g >
<title>0x00007f80daf07b56 (1 samples, 0.04%)</title><rect x="36.6" y="613" width="0.5" height="15.0" fill="rgb(207,5,25)" rx="2" ry="2" />
<text  x="39.65" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1187.5" y="181" width="0.8" height="15.0" fill="rgb(233,193,20)" rx="2" ry="2" />
<text  x="1190.50" y="191.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.04%)</title><rect x="1168.8" y="517" width="0.4" height="15.0" fill="rgb(206,56,44)" rx="2" ry="2" />
<text  x="1171.76" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="613" width="5.5" height="15.0" fill="rgb(244,186,3)" rx="2" ry="2" />
<text  x="1183.84" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1187.5" y="437" width="0.8" height="15.0" fill="rgb(238,131,24)" rx="2" ry="2" />
<text  x="1190.50" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.11%)</title><rect x="410.1" y="661" width="1.3" height="15.0" fill="rgb(213,1,50)" rx="2" ry="2" />
<text  x="413.13" y="671.5" ></text>
</g>
<g >
<title>~path (1 samples, 0.04%)</title><rect x="1187.1" y="645" width="0.4" height="15.0" fill="rgb(216,82,12)" rx="2" ry="2" />
<text  x="1190.09" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="581" width="5.5" height="15.0" fill="rgb(222,77,25)" rx="2" ry="2" />
<text  x="1183.84" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="1155.4" y="565" width="0.9" height="15.0" fill="rgb(243,65,36)" rx="2" ry="2" />
<text  x="1158.44" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1188.3" y="533" width="0.9" height="15.0" fill="rgb(231,226,54)" rx="2" ry="2" />
<text  x="1191.33" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1179.2" y="501" width="0.8" height="15.0" fill="rgb(222,204,53)" rx="2" ry="2" />
<text  x="1182.17" y="511.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1173.3" y="645" width="0.5" height="15.0" fill="rgb(213,172,49)" rx="2" ry="2" />
<text  x="1176.35" y="655.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.04%)</title><rect x="1180.4" y="549" width="0.4" height="15.0" fill="rgb(234,147,23)" rx="2" ry="2" />
<text  x="1183.42" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1172.1" y="533" width="0.4" height="15.0" fill="rgb(226,56,15)" rx="2" ry="2" />
<text  x="1175.10" y="543.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (2,780 samples, 98.09%)</title><rect x="31.7" y="789" width="1157.5" height="15.0" fill="rgb(236,4,40)" rx="2" ry="2" />
<text  x="34.65" y="799.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1186.3" y="597" width="0.4" height="15.0" fill="rgb(248,207,32)" rx="2" ry="2" />
<text  x="1189.25" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.07%)</title><rect x="1187.5" y="165" width="0.8" height="15.0" fill="rgb(222,142,6)" rx="2" ry="2" />
<text  x="1190.50" y="175.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="426.8" y="597" width="0.4" height="15.0" fill="rgb(228,68,29)" rx="2" ry="2" />
<text  x="429.79" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*) (2 samples, 0.07%)</title><rect x="1179.2" y="693" width="0.8" height="15.0" fill="rgb(221,71,35)" rx="2" ry="2" />
<text  x="1182.17" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="565" width="0.4" height="15.0" fill="rgb(213,17,50)" rx="2" ry="2" />
<text  x="1179.26" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1151.3" y="613" width="0.8" height="15.0" fill="rgb(242,76,38)" rx="2" ry="2" />
<text  x="1154.28" y="623.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (2 samples, 0.07%)</title><rect x="32.1" y="437" width="0.8" height="15.0" fill="rgb(240,91,41)" rx="2" ry="2" />
<text  x="35.07" y="447.5" ></text>
</g>
<g >
<title>vector (13 samples, 0.46%)</title><rect x="1180.8" y="517" width="5.5" height="15.0" fill="rgb(240,131,25)" rx="2" ry="2" />
<text  x="1183.84" y="527.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1172.1" y="453" width="0.4" height="15.0" fill="rgb(214,153,1)" rx="2" ry="2" />
<text  x="1175.10" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1188.3" y="501" width="0.9" height="15.0" fill="rgb(220,85,51)" rx="2" ry="2" />
<text  x="1191.33" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (2 samples, 0.07%)</title><rect x="405.6" y="645" width="0.8" height="15.0" fill="rgb(243,160,1)" rx="2" ry="2" />
<text  x="408.55" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1187.5" y="549" width="0.8" height="15.0" fill="rgb(211,115,11)" rx="2" ry="2" />
<text  x="1190.50" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1178.3" y="629" width="0.9" height="15.0" fill="rgb(236,106,48)" rx="2" ry="2" />
<text  x="1181.34" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (71 samples, 2.51%)</title><rect x="372.2" y="645" width="29.6" height="15.0" fill="rgb(218,72,22)" rx="2" ry="2" />
<text  x="375.24" y="655.5" >SD..</text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (1 samples, 0.04%)</title><rect x="37.1" y="613" width="0.4" height="15.0" fill="rgb(242,99,15)" rx="2" ry="2" />
<text  x="40.06" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.04%)</title><rect x="410.6" y="613" width="0.4" height="15.0" fill="rgb(208,69,30)" rx="2" ry="2" />
<text  x="413.55" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (43 samples, 1.52%)</title><rect x="99.9" y="629" width="17.9" height="15.0" fill="rgb(222,149,30)" rx="2" ry="2" />
<text  x="102.94" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1176.7" y="693" width="0.4" height="15.0" fill="rgb(211,146,7)" rx="2" ry="2" />
<text  x="1179.68" y="703.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;00000000000547b0&gt; (15 samples, 0.53%)</title><rect x="1180.4" y="661" width="6.3" height="15.0" fill="rgb(220,3,5)" rx="2" ry="2" />
<text  x="1183.42" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1188.3" y="293" width="0.9" height="15.0" fill="rgb(251,77,30)" rx="2" ry="2" />
<text  x="1191.33" y="303.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.04%)</title><rect x="1175.0" y="613" width="0.4" height="15.0" fill="rgb(243,111,25)" rx="2" ry="2" />
<text  x="1178.01" y="623.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (2,780 samples, 98.09%)</title><rect x="31.7" y="757" width="1157.5" height="15.0" fill="rgb(244,0,25)" rx="2" ry="2" />
<text  x="34.65" y="767.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="1165.9" y="581" width="0.8" height="15.0" fill="rgb(232,198,43)" rx="2" ry="2" />
<text  x="1168.85" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="35.4" y="597" width="0.4" height="15.0" fill="rgb(240,157,15)" rx="2" ry="2" />
<text  x="38.40" y="607.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="405.1" y="613" width="0.5" height="15.0" fill="rgb(239,221,26)" rx="2" ry="2" />
<text  x="408.14" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1161.3" y="533" width="0.4" height="15.0" fill="rgb(214,99,20)" rx="2" ry="2" />
<text  x="1164.27" y="543.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1161.7" y="597" width="0.4" height="15.0" fill="rgb(252,141,29)" rx="2" ry="2" />
<text  x="1164.69" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1170.4" y="517" width="0.9" height="15.0" fill="rgb(252,40,29)" rx="2" ry="2" />
<text  x="1173.43" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::operator&lt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006e4f0&gt; (1 samples, 0.04%)</title><rect x="1167.1" y="565" width="0.4" height="15.0" fill="rgb(222,177,49)" rx="2" ry="2" />
<text  x="1170.10" y="575.5" ></text>
</g>
<g >
<title>readdir64 (1 samples, 0.04%)</title><rect x="37.5" y="517" width="0.4" height="15.0" fill="rgb(220,202,4)" rx="2" ry="2" />
<text  x="40.48" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="412.6" y="613" width="0.4" height="15.0" fill="rgb(244,98,2)" rx="2" ry="2" />
<text  x="415.63" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (9 samples, 0.32%)</title><rect x="146.6" y="613" width="3.7" height="15.0" fill="rgb(217,110,17)" rx="2" ry="2" />
<text  x="149.57" y="623.5" ></text>
</g>
<g >
<title>_Safe_sequence (3 samples, 0.11%)</title><rect x="96.6" y="629" width="1.3" height="15.0" fill="rgb(240,145,19)" rx="2" ry="2" />
<text  x="99.61" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.3" y="357" width="0.9" height="15.0" fill="rgb(230,116,32)" rx="2" ry="2" />
<text  x="1191.33" y="367.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="413.9" y="613" width="0.4" height="15.0" fill="rgb(239,100,18)" rx="2" ry="2" />
<text  x="416.88" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1160.0" y="565" width="0.4" height="15.0" fill="rgb(222,147,3)" rx="2" ry="2" />
<text  x="1163.02" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="427.6" y="597" width="0.4" height="15.0" fill="rgb(232,156,8)" rx="2" ry="2" />
<text  x="430.62" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.07%)</title><rect x="1187.5" y="229" width="0.8" height="15.0" fill="rgb(226,108,34)" rx="2" ry="2" />
<text  x="1190.50" y="239.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="261" width="0.5" height="15.0" fill="rgb(238,185,42)" rx="2" ry="2" />
<text  x="37.15" y="271.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::allocate(unsigned long, void const*) (1 samples, 0.04%)</title><rect x="1180.8" y="261" width="0.5" height="15.0" fill="rgb(243,47,14)" rx="2" ry="2" />
<text  x="1183.84" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="242.3" y="501" width="0.5" height="15.0" fill="rgb(237,138,44)" rx="2" ry="2" />
<text  x="245.34" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1177.9" y="629" width="0.4" height="15.0" fill="rgb(231,16,2)" rx="2" ry="2" />
<text  x="1180.93" y="639.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (1 samples, 0.04%)</title><rect x="72.5" y="645" width="0.4" height="15.0" fill="rgb(243,217,14)" rx="2" ry="2" />
<text  x="75.46" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="410.1" y="613" width="0.5" height="15.0" fill="rgb(246,207,39)" rx="2" ry="2" />
<text  x="413.13" y="623.5" ></text>
</g>
<g >
<title>0x00007f80daf061ee (1 samples, 0.04%)</title><rect x="36.2" y="645" width="0.4" height="15.0" fill="rgb(230,38,8)" rx="2" ry="2" />
<text  x="39.23" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (1 samples, 0.04%)</title><rect x="1180.0" y="613" width="0.4" height="15.0" fill="rgb(206,49,21)" rx="2" ry="2" />
<text  x="1183.01" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (8 samples, 0.28%)</title><rect x="1182.9" y="229" width="3.4" height="15.0" fill="rgb(224,32,20)" rx="2" ry="2" />
<text  x="1185.92" y="239.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.07%)</title><rect x="1187.5" y="309" width="0.8" height="15.0" fill="rgb(227,180,46)" rx="2" ry="2" />
<text  x="1190.50" y="319.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (23 samples, 0.81%)</title><rect x="698.3" y="565" width="9.5" height="15.0" fill="rgb(226,28,52)" rx="2" ry="2" />
<text  x="701.26" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (13 samples, 0.46%)</title><rect x="1180.8" y="405" width="5.5" height="15.0" fill="rgb(223,129,48)" rx="2" ry="2" />
<text  x="1183.84" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="35.4" y="613" width="0.4" height="15.0" fill="rgb(224,35,33)" rx="2" ry="2" />
<text  x="38.40" y="623.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;0000000000069970&gt; (1 samples, 0.04%)</title><rect x="1160.4" y="581" width="0.5" height="15.0" fill="rgb(230,127,48)" rx="2" ry="2" />
<text  x="1163.44" y="591.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="366.0" y="597" width="0.4" height="15.0" fill="rgb(245,45,32)" rx="2" ry="2" />
<text  x="369.00" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="420.5" y="661" width="0.5" height="15.0" fill="rgb(213,80,39)" rx="2" ry="2" />
<text  x="423.54" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (2 samples, 0.07%)</title><rect x="1188.3" y="213" width="0.9" height="15.0" fill="rgb(209,114,43)" rx="2" ry="2" />
<text  x="1191.33" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="419.7" y="549" width="0.4" height="15.0" fill="rgb(223,19,49)" rx="2" ry="2" />
<text  x="422.71" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="416.8" y="565" width="0.4" height="15.0" fill="rgb(225,162,27)" rx="2" ry="2" />
<text  x="419.80" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (2 samples, 0.07%)</title><rect x="1187.5" y="149" width="0.8" height="15.0" fill="rgb(247,107,50)" rx="2" ry="2" />
<text  x="1190.50" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="1160.9" y="517" width="0.4" height="15.0" fill="rgb(229,146,16)" rx="2" ry="2" />
<text  x="1163.85" y="527.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1176.7" y="677" width="0.4" height="15.0" fill="rgb(210,151,7)" rx="2" ry="2" />
<text  x="1179.68" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="416.4" y="629" width="0.4" height="15.0" fill="rgb(218,159,30)" rx="2" ry="2" />
<text  x="419.38" y="639.5" ></text>
</g>
<g >
<title>xcb_present_pixmap&lt;00000000000013a0&gt; (1 samples, 0.04%)</title><rect x="428.9" y="645" width="0.4" height="15.0" fill="rgb(246,116,5)" rx="2" ry="2" />
<text  x="431.87" y="655.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;00000000000817b0&gt; (9 samples, 0.32%)</title><rect x="405.1" y="661" width="3.8" height="15.0" fill="rgb(254,117,27)" rx="2" ry="2" />
<text  x="408.14" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1188.3" y="661" width="0.9" height="15.0" fill="rgb(220,111,5)" rx="2" ry="2" />
<text  x="1191.33" y="671.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.07%)</title><rect x="32.1" y="389" width="0.8" height="15.0" fill="rgb(208,126,5)" rx="2" ry="2" />
<text  x="35.07" y="399.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="34.1" y="229" width="0.5" height="15.0" fill="rgb(207,201,14)" rx="2" ry="2" />
<text  x="37.15" y="239.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1150.9" y="613" width="0.4" height="15.0" fill="rgb(215,185,14)" rx="2" ry="2" />
<text  x="1153.86" y="623.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (4 samples, 0.14%)</title><rect x="1187.5" y="725" width="1.7" height="15.0" fill="rgb(206,157,23)" rx="2" ry="2" />
<text  x="1190.50" y="735.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1172.5" y="453" width="0.4" height="15.0" fill="rgb(223,215,43)" rx="2" ry="2" />
<text  x="1175.51" y="463.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (3 samples, 0.11%)</title><rect x="406.4" y="597" width="1.2" height="15.0" fill="rgb(209,108,10)" rx="2" ry="2" />
<text  x="409.39" y="607.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (877 samples, 30.95%)</title><rect x="37.9" y="677" width="365.2" height="15.0" fill="rgb(217,131,15)" rx="2" ry="2" />
<text  x="40.90" y="687.5" >TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="416.4" y="613" width="0.4" height="15.0" fill="rgb(227,179,20)" rx="2" ry="2" />
<text  x="419.38" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000d2460&gt; (2 samples, 0.07%)</title><rect x="1165.0" y="485" width="0.9" height="15.0" fill="rgb(215,135,51)" rx="2" ry="2" />
<text  x="1168.02" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="413.0" y="613" width="0.5" height="15.0" fill="rgb(238,87,22)" rx="2" ry="2" />
<text  x="416.05" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1177.9" y="645" width="0.4" height="15.0" fill="rgb(227,229,48)" rx="2" ry="2" />
<text  x="1180.93" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="412.6" y="661" width="0.4" height="15.0" fill="rgb(247,12,3)" rx="2" ry="2" />
<text  x="415.63" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="417.6" y="613" width="0.4" height="15.0" fill="rgb(245,31,10)" rx="2" ry="2" />
<text  x="420.63" y="623.5" ></text>
</g>
<g >
<title>~__shared_count (2 samples, 0.07%)</title><rect x="1179.2" y="709" width="0.8" height="15.0" fill="rgb(210,7,27)" rx="2" ry="2" />
<text  x="1182.17" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (8 samples, 0.28%)</title><rect x="1182.9" y="261" width="3.4" height="15.0" fill="rgb(246,125,51)" rx="2" ry="2" />
<text  x="1185.92" y="271.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (3 samples, 0.11%)</title><rect x="32.9" y="533" width="1.2" height="15.0" fill="rgb(219,142,3)" rx="2" ry="2" />
<text  x="35.90" y="543.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="34.1" y="517" width="0.5" height="15.0" fill="rgb(227,11,12)" rx="2" ry="2" />
<text  x="37.15" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1160.0" y="517" width="0.4" height="15.0" fill="rgb(244,112,43)" rx="2" ry="2" />
<text  x="1163.02" y="527.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.04%)</title><rect x="413.5" y="581" width="0.4" height="15.0" fill="rgb(219,45,31)" rx="2" ry="2" />
<text  x="416.47" y="591.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1178.8" y="549" width="0.4" height="15.0" fill="rgb(206,127,9)" rx="2" ry="2" />
<text  x="1181.76" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1162.1" y="565" width="0.4" height="15.0" fill="rgb(230,0,35)" rx="2" ry="2" />
<text  x="1165.10" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (8 samples, 0.28%)</title><rect x="343.5" y="645" width="3.3" height="15.0" fill="rgb(247,139,51)" rx="2" ry="2" />
<text  x="346.51" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1188.3" y="469" width="0.9" height="15.0" fill="rgb(249,224,44)" rx="2" ry="2" />
<text  x="1191.33" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="407.2" y="581" width="0.4" height="15.0" fill="rgb(232,67,25)" rx="2" ry="2" />
<text  x="410.22" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.04%)</title><rect x="1152.5" y="565" width="0.4" height="15.0" fill="rgb(209,221,37)" rx="2" ry="2" />
<text  x="1155.53" y="575.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1156.3" y="549" width="0.4" height="15.0" fill="rgb(216,128,52)" rx="2" ry="2" />
<text  x="1159.27" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.0" y="645" width="0.4" height="15.0" fill="rgb(251,3,4)" rx="2" ry="2" />
<text  x="1183.01" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="408.1" y="629" width="0.8" height="15.0" fill="rgb(246,65,6)" rx="2" ry="2" />
<text  x="411.05" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (7 samples, 0.25%)</title><rect x="289.0" y="613" width="2.9" height="15.0" fill="rgb(222,46,7)" rx="2" ry="2" />
<text  x="291.97" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.04%)</title><rect x="1178.8" y="533" width="0.4" height="15.0" fill="rgb(246,178,16)" rx="2" ry="2" />
<text  x="1181.76" y="543.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (15 samples, 0.53%)</title><rect x="1123.0" y="597" width="6.2" height="15.0" fill="rgb(230,3,5)" rx="2" ry="2" />
<text  x="1125.96" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1172.5" y="533" width="0.4" height="15.0" fill="rgb(242,10,53)" rx="2" ry="2" />
<text  x="1175.51" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="149.5" y="581" width="0.4" height="15.0" fill="rgb(210,2,50)" rx="2" ry="2" />
<text  x="152.48" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (2 samples, 0.07%)</title><rect x="34.6" y="613" width="0.8" height="15.0" fill="rgb(221,197,19)" rx="2" ry="2" />
<text  x="37.57" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (2 samples, 0.07%)</title><rect x="1188.3" y="709" width="0.9" height="15.0" fill="rgb(224,131,11)" rx="2" ry="2" />
<text  x="1191.33" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="34.1" y="469" width="0.5" height="15.0" fill="rgb(207,192,51)" rx="2" ry="2" />
<text  x="37.15" y="479.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.04%)</title><rect x="242.3" y="549" width="0.5" height="15.0" fill="rgb(211,171,3)" rx="2" ry="2" />
<text  x="245.34" y="559.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (6 samples, 0.21%)</title><rect x="31.7" y="549" width="2.4" height="15.0" fill="rgb(250,96,25)" rx="2" ry="2" />
<text  x="34.65" y="559.5" ></text>
</g>
<g >
<title>0x00007f80daf02bfe (1 samples, 0.04%)</title><rect x="35.8" y="661" width="0.4" height="15.0" fill="rgb(213,197,9)" rx="2" ry="2" />
<text  x="38.82" y="671.5" ></text>
</g>
<g >
<title>_Safe_iterator (13 samples, 0.46%)</title><rect x="1180.8" y="357" width="5.5" height="15.0" fill="rgb(214,20,3)" rx="2" ry="2" />
<text  x="1183.84" y="367.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1180.4" y="597" width="0.4" height="15.0" fill="rgb(229,178,25)" rx="2" ry="2" />
<text  x="1183.42" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (28 samples, 0.99%)</title><rect x="390.1" y="613" width="11.7" height="15.0" fill="rgb(220,1,15)" rx="2" ry="2" />
<text  x="393.15" y="623.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate(unsigned long, void const*) (1 samples, 0.04%)</title><rect x="1186.3" y="469" width="0.4" height="15.0" fill="rgb(240,100,26)" rx="2" ry="2" />
<text  x="1189.25" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1171.7" y="565" width="0.8" height="15.0" fill="rgb(213,45,25)" rx="2" ry="2" />
<text  x="1174.68" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (4 samples, 0.14%)</title><rect x="1181.3" y="261" width="1.6" height="15.0" fill="rgb(231,168,12)" rx="2" ry="2" />
<text  x="1184.26" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="410.1" y="629" width="1.3" height="15.0" fill="rgb(217,149,14)" rx="2" ry="2" />
<text  x="413.13" y="639.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="420.1" y="597" width="0.4" height="15.0" fill="rgb(241,127,30)" rx="2" ry="2" />
<text  x="423.13" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1176.3" y="597" width="0.4" height="15.0" fill="rgb(206,67,31)" rx="2" ry="2" />
<text  x="1179.26" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::__addressof&lt;Triangle&gt;(Triangle&amp;) (1 samples, 0.04%)</title><rect x="413.9" y="581" width="0.4" height="15.0" fill="rgb(234,132,22)" rx="2" ry="2" />
<text  x="416.88" y="591.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.07%)</title><rect x="336.0" y="629" width="0.9" height="15.0" fill="rgb(240,146,39)" rx="2" ry="2" />
<text  x="339.02" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.32%)</title><rect x="1166.7" y="597" width="3.7" height="15.0" fill="rgb(215,89,48)" rx="2" ry="2" />
<text  x="1169.68" y="607.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047cf0&gt; (175 samples, 6.18%)</title><rect x="72.9" y="645" width="72.8" height="15.0" fill="rgb(205,102,35)" rx="2" ry="2" />
<text  x="75.87" y="655.5" >TextureP..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1169.6" y="565" width="0.4" height="15.0" fill="rgb(238,44,3)" rx="2" ry="2" />
<text  x="1172.60" y="575.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.07%)</title><rect x="1165.0" y="517" width="0.9" height="15.0" fill="rgb(219,46,31)" rx="2" ry="2" />
<text  x="1168.02" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="425.5" y="629" width="0.5" height="15.0" fill="rgb(246,70,36)" rx="2" ry="2" />
<text  x="428.54" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1187.5" y="661" width="0.8" height="15.0" fill="rgb(208,19,21)" rx="2" ry="2" />
<text  x="1190.50" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="423.0" y="581" width="0.5" height="15.0" fill="rgb(228,2,9)" rx="2" ry="2" />
<text  x="426.04" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.04%)</title><rect x="427.6" y="661" width="0.4" height="15.0" fill="rgb(213,188,15)" rx="2" ry="2" />
<text  x="430.62" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (2 samples, 0.07%)</title><rect x="1187.5" y="133" width="0.8" height="15.0" fill="rgb(207,20,48)" rx="2" ry="2" />
<text  x="1190.50" y="143.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1164.2" y="549" width="0.4" height="15.0" fill="rgb(214,83,17)" rx="2" ry="2" />
<text  x="1167.18" y="559.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (6 samples, 0.21%)</title><rect x="31.7" y="565" width="2.4" height="15.0" fill="rgb(210,54,45)" rx="2" ry="2" />
<text  x="34.65" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1150.4" y="661" width="0.5" height="15.0" fill="rgb(243,85,45)" rx="2" ry="2" />
<text  x="1153.44" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="412.6" y="645" width="0.4" height="15.0" fill="rgb(219,6,46)" rx="2" ry="2" />
<text  x="415.63" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1170.4" y="533" width="0.9" height="15.0" fill="rgb(205,15,1)" rx="2" ry="2" />
<text  x="1173.43" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="413.0" y="661" width="0.9" height="15.0" fill="rgb(237,132,13)" rx="2" ry="2" />
<text  x="416.05" y="671.5" ></text>
</g>
<g >
<title>_Node_const_iterator (2 samples, 0.07%)</title><rect x="1165.9" y="533" width="0.8" height="15.0" fill="rgb(225,16,15)" rx="2" ry="2" />
<text  x="1168.85" y="543.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (62 samples, 2.19%)</title><rect x="376.0" y="629" width="25.8" height="15.0" fill="rgb(247,4,32)" rx="2" ry="2" />
<text  x="378.99" y="639.5" >S..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="597" width="5.5" height="15.0" fill="rgb(231,50,8)" rx="2" ry="2" />
<text  x="1183.84" y="607.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063e60&gt; (456 samples, 16.09%)</title><rect x="179.0" y="661" width="189.9" height="15.0" fill="rgb(239,79,0)" rx="2" ry="2" />
<text  x="182.05" y="671.5" >TexturemapRasterizer::dr..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1164.6" y="533" width="0.4" height="15.0" fill="rgb(219,224,45)" rx="2" ry="2" />
<text  x="1167.60" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.4" y="613" width="0.4" height="15.0" fill="rgb(206,222,34)" rx="2" ry="2" />
<text  x="1178.43" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1170.4" y="549" width="0.9" height="15.0" fill="rgb(229,41,12)" rx="2" ry="2" />
<text  x="1173.43" y="559.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="1172.5" y="405" width="0.4" height="15.0" fill="rgb(215,200,47)" rx="2" ry="2" />
<text  x="1175.51" y="415.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1178.3" y="597" width="0.9" height="15.0" fill="rgb(252,140,41)" rx="2" ry="2" />
<text  x="1181.34" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="1177.9" y="597" width="0.4" height="15.0" fill="rgb(246,218,16)" rx="2" ry="2" />
<text  x="1180.93" y="607.5" ></text>
</g>
<g >
<title>0x00007f80daf02b4e (1 samples, 0.04%)</title><rect x="35.8" y="645" width="0.4" height="15.0" fill="rgb(232,121,25)" rx="2" ry="2" />
<text  x="38.82" y="655.5" ></text>
</g>
<g >
<title>read@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="35.0" y="581" width="0.4" height="15.0" fill="rgb(245,69,46)" rx="2" ry="2" />
<text  x="37.98" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (8 samples, 0.28%)</title><rect x="1182.9" y="213" width="3.4" height="15.0" fill="rgb(254,56,33)" rx="2" ry="2" />
<text  x="1185.92" y="223.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.07%)</title><rect x="32.1" y="421" width="0.8" height="15.0" fill="rgb(248,111,9)" rx="2" ry="2" />
<text  x="35.07" y="431.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.04%)</title><rect x="1168.8" y="501" width="0.4" height="15.0" fill="rgb(216,98,0)" rx="2" ry="2" />
<text  x="1171.76" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (6 samples, 0.21%)</title><rect x="1147.9" y="581" width="2.5" height="15.0" fill="rgb(250,90,35)" rx="2" ry="2" />
<text  x="1150.95" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1173.3" y="661" width="0.5" height="15.0" fill="rgb(225,160,18)" rx="2" ry="2" />
<text  x="1176.35" y="671.5" ></text>
</g>
<g >
<title>_Safe_vector (1 samples, 0.04%)</title><rect x="416.4" y="677" width="0.4" height="15.0" fill="rgb(215,56,53)" rx="2" ry="2" />
<text  x="419.38" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026540&gt; (2 samples, 0.07%)</title><rect x="1179.2" y="517" width="0.8" height="15.0" fill="rgb(206,224,18)" rx="2" ry="2" />
<text  x="1182.17" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063280&gt; (81 samples, 2.86%)</title><rect x="368.9" y="661" width="33.7" height="15.0" fill="rgb(223,210,19)" rx="2" ry="2" />
<text  x="371.91" y="671.5" >Te..</text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="420.1" y="613" width="0.4" height="15.0" fill="rgb(247,191,48)" rx="2" ry="2" />
<text  x="423.13" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (16 samples, 0.56%)</title><rect x="701.2" y="549" width="6.6" height="15.0" fill="rgb(217,202,35)" rx="2" ry="2" />
<text  x="704.18" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="416.8" y="661" width="0.4" height="15.0" fill="rgb(246,218,36)" rx="2" ry="2" />
<text  x="419.80" y="671.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="245" width="0.5" height="15.0" fill="rgb(223,20,50)" rx="2" ry="2" />
<text  x="37.15" y="255.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (3 samples, 0.11%)</title><rect x="421.0" y="629" width="1.2" height="15.0" fill="rgb(206,143,13)" rx="2" ry="2" />
<text  x="423.96" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (599 samples, 21.14%)</title><rect x="606.2" y="597" width="249.5" height="15.0" fill="rgb(252,227,10)" rx="2" ry="2" />
<text  x="609.25" y="607.5" >__driDriverGetExtensions_d3d12&lt;00..</text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1186.3" y="565" width="0.4" height="15.0" fill="rgb(227,194,52)" rx="2" ry="2" />
<text  x="1189.25" y="575.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="428.5" y="613" width="0.4" height="15.0" fill="rgb(241,160,13)" rx="2" ry="2" />
<text  x="431.45" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1187.5" y="245" width="0.8" height="15.0" fill="rgb(215,93,33)" rx="2" ry="2" />
<text  x="1190.50" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="417.2" y="645" width="0.4" height="15.0" fill="rgb(220,4,5)" rx="2" ry="2" />
<text  x="420.21" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (3 samples, 0.11%)</title><rect x="116.6" y="613" width="1.2" height="15.0" fill="rgb(227,2,39)" rx="2" ry="2" />
<text  x="119.59" y="623.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="423.0" y="565" width="0.5" height="15.0" fill="rgb(249,167,1)" rx="2" ry="2" />
<text  x="426.04" y="575.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="1178.3" y="581" width="0.9" height="15.0" fill="rgb(230,15,44)" rx="2" ry="2" />
<text  x="1181.34" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;::insert_or_assign&lt;TexturePNG&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, TexturePNG&amp;) (1 samples, 0.04%)</title><rect x="1180.8" y="293" width="0.5" height="15.0" fill="rgb(232,99,26)" rx="2" ry="2" />
<text  x="1183.84" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="416.8" y="645" width="0.4" height="15.0" fill="rgb(215,21,11)" rx="2" ry="2" />
<text  x="419.80" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1165.9" y="565" width="0.8" height="15.0" fill="rgb(214,112,24)" rx="2" ry="2" />
<text  x="1168.85" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="416.8" y="533" width="0.4" height="15.0" fill="rgb(245,172,31)" rx="2" ry="2" />
<text  x="419.80" y="543.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1177.9" y="661" width="0.4" height="15.0" fill="rgb(253,20,46)" rx="2" ry="2" />
<text  x="1180.93" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="1154.6" y="581" width="0.8" height="15.0" fill="rgb(254,111,52)" rx="2" ry="2" />
<text  x="1157.61" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="37.5" y="565" width="0.4" height="15.0" fill="rgb(220,83,35)" rx="2" ry="2" />
<text  x="40.48" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1162.1" y="533" width="0.4" height="15.0" fill="rgb(213,33,47)" rx="2" ry="2" />
<text  x="1165.10" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1177.9" y="565" width="0.4" height="15.0" fill="rgb(226,187,29)" rx="2" ry="2" />
<text  x="1180.93" y="575.5" ></text>
</g>
<g >
<title>xcb_flush&lt;000000000000e820&gt; (1 samples, 0.04%)</title><rect x="428.5" y="645" width="0.4" height="15.0" fill="rgb(229,151,13)" rx="2" ry="2" />
<text  x="431.45" y="655.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1168.3" y="533" width="0.5" height="15.0" fill="rgb(238,27,44)" rx="2" ry="2" />
<text  x="1171.35" y="543.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (5 samples, 0.18%)</title><rect x="705.8" y="533" width="2.0" height="15.0" fill="rgb(219,60,31)" rx="2" ry="2" />
<text  x="708.76" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="1152.5" y="597" width="0.4" height="15.0" fill="rgb(219,78,29)" rx="2" ry="2" />
<text  x="1155.53" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::SearchFreeAndLargeLists(unsigned long)&lt;0000000000027ab0&gt; (1 samples, 0.04%)</title><rect x="1185.8" y="181" width="0.5" height="15.0" fill="rgb(237,180,28)" rx="2" ry="2" />
<text  x="1188.84" y="191.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;00000000000fcad0&gt; (1 samples, 0.04%)</title><rect x="428.5" y="581" width="0.4" height="15.0" fill="rgb(231,58,15)" rx="2" ry="2" />
<text  x="431.45" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1160.0" y="533" width="0.4" height="15.0" fill="rgb(219,161,38)" rx="2" ry="2" />
<text  x="1163.02" y="543.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.04%)</title><rect x="420.1" y="581" width="0.4" height="15.0" fill="rgb(241,174,28)" rx="2" ry="2" />
<text  x="423.13" y="591.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.04%)</title><rect x="1178.8" y="517" width="0.4" height="15.0" fill="rgb(210,5,0)" rx="2" ry="2" />
<text  x="1181.76" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="417.2" y="661" width="0.4" height="15.0" fill="rgb(225,61,54)" rx="2" ry="2" />
<text  x="420.21" y="671.5" ></text>
</g>
<g >
<title>_Guard (1 samples, 0.04%)</title><rect x="1186.3" y="501" width="0.4" height="15.0" fill="rgb(252,49,25)" rx="2" ry="2" />
<text  x="1189.25" y="511.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;00000000000622a0&gt; (1 samples, 0.04%)</title><rect x="403.1" y="677" width="0.4" height="15.0" fill="rgb(221,204,17)" rx="2" ry="2" />
<text  x="406.06" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="1187.5" y="53" width="0.4" height="15.0" fill="rgb(217,124,49)" rx="2" ry="2" />
<text  x="1190.50" y="63.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1177.9" y="549" width="0.4" height="15.0" fill="rgb(224,25,51)" rx="2" ry="2" />
<text  x="1180.93" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1187.5" y="325" width="0.8" height="15.0" fill="rgb(230,183,46)" rx="2" ry="2" />
<text  x="1190.50" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1162.1" y="581" width="0.4" height="15.0" fill="rgb(246,136,8)" rx="2" ry="2" />
<text  x="1165.10" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1174.2" y="693" width="0.4" height="15.0" fill="rgb(238,195,29)" rx="2" ry="2" />
<text  x="1177.18" y="703.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="34.1" y="405" width="0.5" height="15.0" fill="rgb(221,3,11)" rx="2" ry="2" />
<text  x="37.15" y="415.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="409.7" y="629" width="0.4" height="15.0" fill="rgb(231,46,35)" rx="2" ry="2" />
<text  x="412.72" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.07%)</title><rect x="1175.4" y="629" width="0.9" height="15.0" fill="rgb(216,219,20)" rx="2" ry="2" />
<text  x="1178.43" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.07%)</title><rect x="1188.3" y="405" width="0.9" height="15.0" fill="rgb(206,44,32)" rx="2" ry="2" />
<text  x="1191.33" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="412.2" y="581" width="0.4" height="15.0" fill="rgb(221,141,15)" rx="2" ry="2" />
<text  x="415.22" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="33.7" y="517" width="0.4" height="15.0" fill="rgb(233,120,8)" rx="2" ry="2" />
<text  x="36.73" y="527.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1186.3" y="645" width="0.4" height="15.0" fill="rgb(205,220,39)" rx="2" ry="2" />
<text  x="1189.25" y="655.5" ></text>
</g>
<g >
<title>_Safe_sequence_base (1 samples, 0.04%)</title><rect x="1172.9" y="693" width="0.4" height="15.0" fill="rgb(244,67,33)" rx="2" ry="2" />
<text  x="1175.93" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.14%)</title><rect x="1181.3" y="309" width="1.6" height="15.0" fill="rgb(224,180,40)" rx="2" ry="2" />
<text  x="1184.26" y="319.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="402.6" y="661" width="0.5" height="15.0" fill="rgb(239,73,45)" rx="2" ry="2" />
<text  x="405.64" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="31.7" y="533" width="0.4" height="15.0" fill="rgb(252,166,37)" rx="2" ry="2" />
<text  x="34.65" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1152.1" y="581" width="0.4" height="15.0" fill="rgb(249,99,22)" rx="2" ry="2" />
<text  x="1155.11" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.04%)</title><rect x="1180.0" y="581" width="0.4" height="15.0" fill="rgb(240,18,5)" rx="2" ry="2" />
<text  x="1183.01" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="419.7" y="581" width="0.4" height="15.0" fill="rgb(243,173,4)" rx="2" ry="2" />
<text  x="422.71" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="1187.9" y="53" width="0.4" height="15.0" fill="rgb(241,177,27)" rx="2" ry="2" />
<text  x="1190.92" y="63.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (2 samples, 0.07%)</title><rect x="1165.9" y="501" width="0.8" height="15.0" fill="rgb(220,228,41)" rx="2" ry="2" />
<text  x="1168.85" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060410&gt; (1 samples, 0.04%)</title><rect x="1174.6" y="693" width="0.4" height="15.0" fill="rgb(212,205,19)" rx="2" ry="2" />
<text  x="1177.59" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="342.3" y="581" width="0.8" height="15.0" fill="rgb(236,195,29)" rx="2" ry="2" />
<text  x="345.27" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018ba0&gt; (1 samples, 0.04%)</title><rect x="416.8" y="597" width="0.4" height="15.0" fill="rgb(233,28,23)" rx="2" ry="2" />
<text  x="419.80" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="423.5" y="677" width="0.4" height="15.0" fill="rgb(230,164,36)" rx="2" ry="2" />
<text  x="426.46" y="687.5" ></text>
</g>
<g >
<title>_Parameter (2 samples, 0.07%)</title><rect x="309.8" y="613" width="0.8" height="15.0" fill="rgb(252,65,49)" rx="2" ry="2" />
<text  x="312.79" y="623.5" ></text>
</g>
<g >
<title>glXGetCurrentContext&lt;00000000000173b0&gt; (1 samples, 0.04%)</title><rect x="34.1" y="597" width="0.5" height="15.0" fill="rgb(251,89,18)" rx="2" ry="2" />
<text  x="37.15" y="607.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="402.6" y="629" width="0.5" height="15.0" fill="rgb(253,70,49)" rx="2" ry="2" />
<text  x="405.64" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1170.8" y="485" width="0.5" height="15.0" fill="rgb(209,206,14)" rx="2" ry="2" />
<text  x="1173.85" y="495.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1150.4" y="693" width="0.5" height="15.0" fill="rgb(237,70,51)" rx="2" ry="2" />
<text  x="1153.44" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::end() const (1 samples, 0.04%)</title><rect x="1180.0" y="533" width="0.4" height="15.0" fill="rgb(245,59,45)" rx="2" ry="2" />
<text  x="1183.01" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (33 samples, 1.16%)</title><rect x="130.3" y="613" width="13.8" height="15.0" fill="rgb(227,29,54)" rx="2" ry="2" />
<text  x="133.33" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1152.1" y="565" width="0.4" height="15.0" fill="rgb(230,78,21)" rx="2" ry="2" />
<text  x="1155.11" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="501" width="5.5" height="15.0" fill="rgb(212,112,29)" rx="2" ry="2" />
<text  x="1183.84" y="511.5" ></text>
</g>
<g >
<title>pthread_sigmask@@GLIBC_2.32 (2 samples, 0.07%)</title><rect x="1189.2" y="789" width="0.8" height="15.0" fill="rgb(207,23,3)" rx="2" ry="2" />
<text  x="1192.17" y="799.5" ></text>
</g>
<g >
<title>__sqrtf_finite@GLIBC_2.15&lt;000000000003d270&gt; (1 samples, 0.04%)</title><rect x="406.8" y="565" width="0.4" height="15.0" fill="rgb(223,144,34)" rx="2" ry="2" />
<text  x="409.80" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (2 samples, 0.07%)</title><rect x="34.6" y="597" width="0.8" height="15.0" fill="rgb(211,182,38)" rx="2" ry="2" />
<text  x="37.57" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1187.5" y="485" width="0.8" height="15.0" fill="rgb(224,229,39)" rx="2" ry="2" />
<text  x="1190.50" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1169.6" y="549" width="0.4" height="15.0" fill="rgb(220,74,35)" rx="2" ry="2" />
<text  x="1172.60" y="559.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (2 samples, 0.07%)</title><rect x="1187.5" y="693" width="0.8" height="15.0" fill="rgb(217,39,48)" rx="2" ry="2" />
<text  x="1190.50" y="703.5" ></text>
</g>
<g >
<title>0x00007f80daf0f42e (1 samples, 0.04%)</title><rect x="36.2" y="613" width="0.4" height="15.0" fill="rgb(247,42,38)" rx="2" ry="2" />
<text  x="39.23" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (8 samples, 0.28%)</title><rect x="298.5" y="597" width="3.4" height="15.0" fill="rgb(245,58,31)" rx="2" ry="2" />
<text  x="301.55" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (3 samples, 0.11%)</title><rect x="34.6" y="661" width="1.2" height="15.0" fill="rgb(246,140,42)" rx="2" ry="2" />
<text  x="37.57" y="671.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.04%)</title><rect x="401.4" y="597" width="0.4" height="15.0" fill="rgb(220,219,33)" rx="2" ry="2" />
<text  x="404.39" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="417.6" y="597" width="0.4" height="15.0" fill="rgb(219,54,5)" rx="2" ry="2" />
<text  x="420.63" y="607.5" ></text>
</g>
<g >
<title>mrand48_r@@GLIBC_2.2.5&lt;000000000003c3a0&gt; (1 samples, 0.04%)</title><rect x="37.5" y="581" width="0.4" height="15.0" fill="rgb(222,176,0)" rx="2" ry="2" />
<text  x="40.48" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="413.0" y="549" width="0.5" height="15.0" fill="rgb(234,83,3)" rx="2" ry="2" />
<text  x="416.05" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="421.0" y="645" width="1.2" height="15.0" fill="rgb(237,52,47)" rx="2" ry="2" />
<text  x="423.96" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="413.9" y="597" width="0.4" height="15.0" fill="rgb(205,6,17)" rx="2" ry="2" />
<text  x="416.88" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1171.7" y="549" width="0.8" height="15.0" fill="rgb(230,157,4)" rx="2" ry="2" />
<text  x="1174.68" y="559.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1166.3" y="485" width="0.4" height="15.0" fill="rgb(226,169,45)" rx="2" ry="2" />
<text  x="1169.27" y="495.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1154.2" y="517" width="0.4" height="15.0" fill="rgb(208,155,14)" rx="2" ry="2" />
<text  x="1157.19" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (4 samples, 0.14%)</title><rect x="114.5" y="597" width="1.7" height="15.0" fill="rgb(245,130,17)" rx="2" ry="2" />
<text  x="117.51" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (3 samples, 0.11%)</title><rect x="71.2" y="645" width="1.3" height="15.0" fill="rgb(230,83,51)" rx="2" ry="2" />
<text  x="74.21" y="655.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003ac50&gt; (1 samples, 0.04%)</title><rect x="1180.0" y="661" width="0.4" height="15.0" fill="rgb(212,87,41)" rx="2" ry="2" />
<text  x="1183.01" y="671.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="34.1" y="293" width="0.5" height="15.0" fill="rgb(206,151,10)" rx="2" ry="2" />
<text  x="37.15" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.4" y="565" width="0.4" height="15.0" fill="rgb(220,91,21)" rx="2" ry="2" />
<text  x="1183.42" y="575.5" ></text>
</g>
<g >
<title>read@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="36.2" y="597" width="0.4" height="15.0" fill="rgb(254,116,3)" rx="2" ry="2" />
<text  x="39.23" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (46 samples, 1.62%)</title><rect x="316.9" y="613" width="19.1" height="15.0" fill="rgb(237,108,53)" rx="2" ry="2" />
<text  x="319.87" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="420.1" y="645" width="0.4" height="15.0" fill="rgb(234,180,52)" rx="2" ry="2" />
<text  x="423.13" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.07%)</title><rect x="1154.6" y="565" width="0.8" height="15.0" fill="rgb(236,209,22)" rx="2" ry="2" />
<text  x="1157.61" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1179.2" y="597" width="0.8" height="15.0" fill="rgb(232,118,16)" rx="2" ry="2" />
<text  x="1182.17" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (28 samples, 0.99%)</title><rect x="291.9" y="613" width="11.6" height="15.0" fill="rgb(211,15,28)" rx="2" ry="2" />
<text  x="294.88" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="413.0" y="565" width="0.5" height="15.0" fill="rgb(209,156,20)" rx="2" ry="2" />
<text  x="416.05" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (26 samples, 0.92%)</title><rect x="1139.6" y="597" width="10.8" height="15.0" fill="rgb(225,12,31)" rx="2" ry="2" />
<text  x="1142.62" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1161.7" y="501" width="0.4" height="15.0" fill="rgb(247,141,16)" rx="2" ry="2" />
<text  x="1164.69" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;long, __gnu_debug::_Distance_precision&gt;::pair&lt;long, __gnu_debug::_Distance_precision, true&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (4 samples, 0.14%)</title><rect x="1181.3" y="213" width="1.6" height="15.0" fill="rgb(242,136,49)" rx="2" ry="2" />
<text  x="1184.26" y="223.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="419.7" y="533" width="0.4" height="15.0" fill="rgb(234,78,8)" rx="2" ry="2" />
<text  x="422.71" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1150.4" y="629" width="0.5" height="15.0" fill="rgb(221,173,50)" rx="2" ry="2" />
<text  x="1153.44" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.3" y="613" width="0.9" height="15.0" fill="rgb(207,120,5)" rx="2" ry="2" />
<text  x="1191.33" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1165.9" y="549" width="0.8" height="15.0" fill="rgb(220,89,33)" rx="2" ry="2" />
<text  x="1168.85" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (8 samples, 0.28%)</title><rect x="1182.9" y="277" width="3.4" height="15.0" fill="rgb(215,128,2)" rx="2" ry="2" />
<text  x="1185.92" y="287.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (21 samples, 0.74%)</title><rect x="441.4" y="645" width="8.7" height="15.0" fill="rgb(220,188,30)" rx="2" ry="2" />
<text  x="444.36" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::RecordSpan(tcmalloc::Span*)[inline] (1 samples, 0.04%)</title><rect x="35.4" y="517" width="0.4" height="15.0" fill="rgb(241,179,0)" rx="2" ry="2" />
<text  x="38.40" y="527.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="419.3" y="613" width="0.8" height="15.0" fill="rgb(220,25,8)" rx="2" ry="2" />
<text  x="422.29" y="623.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="426.0" y="629" width="0.8" height="15.0" fill="rgb(251,71,29)" rx="2" ry="2" />
<text  x="428.96" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1186.3" y="533" width="0.4" height="15.0" fill="rgb(238,1,53)" rx="2" ry="2" />
<text  x="1189.25" y="543.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.07%)</title><rect x="1187.5" y="277" width="0.8" height="15.0" fill="rgb(222,31,2)" rx="2" ry="2" />
<text  x="1190.50" y="287.5" ></text>
</g>
<g >
<title>vector (3 samples, 0.11%)</title><rect x="144.5" y="629" width="1.2" height="15.0" fill="rgb(253,109,5)" rx="2" ry="2" />
<text  x="147.49" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 0.25%)</title><rect x="31.7" y="645" width="2.9" height="15.0" fill="rgb(243,12,2)" rx="2" ry="2" />
<text  x="34.65" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1177.9" y="613" width="0.4" height="15.0" fill="rgb(217,225,49)" rx="2" ry="2" />
<text  x="1180.93" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1187.5" y="469" width="0.8" height="15.0" fill="rgb(251,112,48)" rx="2" ry="2" />
<text  x="1190.50" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (2 samples, 0.07%)</title><rect x="1157.1" y="533" width="0.8" height="15.0" fill="rgb(242,28,20)" rx="2" ry="2" />
<text  x="1160.11" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="485" width="5.5" height="15.0" fill="rgb(241,133,1)" rx="2" ry="2" />
<text  x="1183.84" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() (1 samples, 0.04%)</title><rect x="411.0" y="613" width="0.4" height="15.0" fill="rgb(225,173,3)" rx="2" ry="2" />
<text  x="413.97" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (11 samples, 0.39%)</title><rect x="360.2" y="597" width="4.5" height="15.0" fill="rgb(244,105,28)" rx="2" ry="2" />
<text  x="363.17" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1150.4" y="645" width="0.5" height="15.0" fill="rgb(231,100,13)" rx="2" ry="2" />
<text  x="1153.44" y="655.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;0000000000081280&gt; (1 samples, 0.04%)</title><rect x="415.5" y="677" width="0.5" height="15.0" fill="rgb(241,111,7)" rx="2" ry="2" />
<text  x="418.55" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1160.9" y="549" width="0.4" height="15.0" fill="rgb(250,111,36)" rx="2" ry="2" />
<text  x="1163.85" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="338.1" y="613" width="0.8" height="15.0" fill="rgb(248,30,19)" rx="2" ry="2" />
<text  x="341.10" y="623.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.04%)</title><rect x="426.8" y="565" width="0.4" height="15.0" fill="rgb(217,95,45)" rx="2" ry="2" />
<text  x="429.79" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="406.0" y="629" width="0.4" height="15.0" fill="rgb(225,110,21)" rx="2" ry="2" />
<text  x="408.97" y="639.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (14 samples, 0.49%)</title><rect x="1150.9" y="645" width="5.8" height="15.0" fill="rgb(223,182,39)" rx="2" ry="2" />
<text  x="1153.86" y="655.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1150.9" y="629" width="0.4" height="15.0" fill="rgb(245,45,31)" rx="2" ry="2" />
<text  x="1153.86" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="420.1" y="661" width="0.4" height="15.0" fill="rgb(207,94,2)" rx="2" ry="2" />
<text  x="423.13" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (3 samples, 0.11%)</title><rect x="403.9" y="661" width="1.2" height="15.0" fill="rgb(248,13,1)" rx="2" ry="2" />
<text  x="406.89" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="412.2" y="549" width="0.4" height="15.0" fill="rgb(212,61,25)" rx="2" ry="2" />
<text  x="415.22" y="559.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (10 samples, 0.35%)</title><rect x="31.7" y="709" width="4.1" height="15.0" fill="rgb(250,102,52)" rx="2" ry="2" />
<text  x="34.65" y="719.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.07%)</title><rect x="401.8" y="645" width="0.8" height="15.0" fill="rgb(214,61,30)" rx="2" ry="2" />
<text  x="404.81" y="655.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.04%)</title><rect x="401.4" y="565" width="0.4" height="15.0" fill="rgb(207,63,43)" rx="2" ry="2" />
<text  x="404.39" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (17 samples, 0.60%)</title><rect x="162.0" y="597" width="7.1" height="15.0" fill="rgb(244,109,4)" rx="2" ry="2" />
<text  x="164.98" y="607.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (4 samples, 0.14%)</title><rect x="121.2" y="613" width="1.6" height="15.0" fill="rgb(229,122,32)" rx="2" ry="2" />
<text  x="124.17" y="623.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="32.1" y="405" width="0.8" height="15.0" fill="rgb(241,33,41)" rx="2" ry="2" />
<text  x="35.07" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New(unsigned long)&lt;0000000000027ea0&gt; (1 samples, 0.04%)</title><rect x="1185.8" y="197" width="0.5" height="15.0" fill="rgb(246,118,32)" rx="2" ry="2" />
<text  x="1188.84" y="207.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="413.9" y="645" width="0.4" height="15.0" fill="rgb(244,75,34)" rx="2" ry="2" />
<text  x="416.88" y="655.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (1 samples, 0.04%)</title><rect x="31.7" y="437" width="0.4" height="15.0" fill="rgb(226,41,1)" rx="2" ry="2" />
<text  x="34.65" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1162.1" y="517" width="0.4" height="15.0" fill="rgb(222,156,6)" rx="2" ry="2" />
<text  x="1165.10" y="527.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="427.2" y="597" width="0.4" height="15.0" fill="rgb(232,49,10)" rx="2" ry="2" />
<text  x="430.21" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1188.3" y="437" width="0.9" height="15.0" fill="rgb(215,209,30)" rx="2" ry="2" />
<text  x="1191.33" y="447.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1158.8" y="549" width="0.4" height="15.0" fill="rgb(223,156,41)" rx="2" ry="2" />
<text  x="1161.77" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (8 samples, 0.28%)</title><rect x="1182.9" y="341" width="3.4" height="15.0" fill="rgb(237,26,36)" rx="2" ry="2" />
<text  x="1185.92" y="351.5" ></text>
</g>
<g >
<title>0x00007f80daf1233f (1 samples, 0.04%)</title><rect x="35.8" y="613" width="0.4" height="15.0" fill="rgb(213,30,21)" rx="2" ry="2" />
<text  x="38.82" y="623.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1172.5" y="565" width="0.4" height="15.0" fill="rgb(238,170,12)" rx="2" ry="2" />
<text  x="1175.51" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="549" width="5.5" height="15.0" fill="rgb(233,41,2)" rx="2" ry="2" />
<text  x="1183.84" y="559.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (18 samples, 0.64%)</title><rect x="1180.0" y="677" width="7.5" height="15.0" fill="rgb(238,75,42)" rx="2" ry="2" />
<text  x="1183.01" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1187.5" y="453" width="0.8" height="15.0" fill="rgb(250,137,3)" rx="2" ry="2" />
<text  x="1190.50" y="463.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.07%)</title><rect x="1188.3" y="389" width="0.9" height="15.0" fill="rgb(243,108,48)" rx="2" ry="2" />
<text  x="1191.33" y="399.5" ></text>
</g>
<g >
<title>xcb_send_request&lt;0000000000014710&gt; (1 samples, 0.04%)</title><rect x="428.9" y="629" width="0.4" height="15.0" fill="rgb(234,115,20)" rx="2" ry="2" />
<text  x="431.87" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1176.3" y="613" width="0.4" height="15.0" fill="rgb(236,195,7)" rx="2" ry="2" />
<text  x="1179.26" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="501" width="0.4" height="15.0" fill="rgb(235,61,15)" rx="2" ry="2" />
<text  x="1179.26" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1169.2" y="517" width="0.4" height="15.0" fill="rgb(209,137,1)" rx="2" ry="2" />
<text  x="1172.18" y="527.5" ></text>
</g>
<g >
<title>syscall@@GLIBC_2.2.5&lt;0000000000100550&gt; (1 samples, 0.04%)</title><rect x="428.0" y="565" width="0.5" height="15.0" fill="rgb(207,32,52)" rx="2" ry="2" />
<text  x="431.04" y="575.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="32.1" y="373" width="0.8" height="15.0" fill="rgb(248,35,20)" rx="2" ry="2" />
<text  x="35.07" y="383.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;) (1 samples, 0.04%)</title><rect x="406.8" y="581" width="0.4" height="15.0" fill="rgb(224,35,31)" rx="2" ry="2" />
<text  x="409.80" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.04%)</title><rect x="427.6" y="629" width="0.4" height="15.0" fill="rgb(232,87,18)" rx="2" ry="2" />
<text  x="430.62" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1179.2" y="533" width="0.8" height="15.0" fill="rgb(208,78,1)" rx="2" ry="2" />
<text  x="1182.17" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="416.4" y="645" width="0.4" height="15.0" fill="rgb(211,3,32)" rx="2" ry="2" />
<text  x="419.38" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="412.2" y="629" width="0.4" height="15.0" fill="rgb(212,54,52)" rx="2" ry="2" />
<text  x="415.22" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (13 samples, 0.46%)</title><rect x="1180.8" y="565" width="5.5" height="15.0" fill="rgb(242,192,36)" rx="2" ry="2" />
<text  x="1183.84" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.39%)</title><rect x="1162.1" y="613" width="4.6" height="15.0" fill="rgb(211,166,48)" rx="2" ry="2" />
<text  x="1165.10" y="623.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (1 samples, 0.04%)</title><rect x="31.7" y="453" width="0.4" height="15.0" fill="rgb(227,131,20)" rx="2" ry="2" />
<text  x="34.65" y="463.5" ></text>
</g>
<g >
<title>_Vector_impl (10 samples, 0.35%)</title><rect x="279.4" y="629" width="4.2" height="15.0" fill="rgb(249,149,50)" rx="2" ry="2" />
<text  x="282.39" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1179.2" y="613" width="0.8" height="15.0" fill="rgb(234,128,7)" rx="2" ry="2" />
<text  x="1182.17" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="423.0" y="677" width="0.5" height="15.0" fill="rgb(210,193,49)" rx="2" ry="2" />
<text  x="426.04" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1169.2" y="533" width="0.4" height="15.0" fill="rgb(227,76,17)" rx="2" ry="2" />
<text  x="1172.18" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1187.9" y="85" width="0.4" height="15.0" fill="rgb(214,43,40)" rx="2" ry="2" />
<text  x="1190.92" y="95.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (11 samples, 0.39%)</title><rect x="417.6" y="677" width="4.6" height="15.0" fill="rgb(213,16,35)" rx="2" ry="2" />
<text  x="420.63" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.07%)</title><rect x="1188.3" y="341" width="0.9" height="15.0" fill="rgb(245,5,39)" rx="2" ry="2" />
<text  x="1191.33" y="351.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.04%)</title><rect x="242.3" y="581" width="0.5" height="15.0" fill="rgb(212,201,17)" rx="2" ry="2" />
<text  x="245.34" y="591.5" ></text>
</g>
<g >
<title>__libc_calloc[inline] (1 samples, 0.04%)</title><rect x="241.9" y="581" width="0.4" height="15.0" fill="rgb(240,213,41)" rx="2" ry="2" />
<text  x="244.92" y="591.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;00000000000682a0&gt; (2,735 samples, 96.51%)</title><rect x="37.9" y="709" width="1138.8" height="15.0" fill="rgb(221,40,1)" rx="2" ry="2" />
<text  x="40.90" y="719.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;00000000000682a0&gt;</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1160.0" y="549" width="0.4" height="15.0" fill="rgb(238,97,21)" rx="2" ry="2" />
<text  x="1163.02" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="1177.1" y="661" width="0.4" height="15.0" fill="rgb(210,39,17)" rx="2" ry="2" />
<text  x="1180.09" y="671.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.04%)</title><rect x="1180.0" y="597" width="0.4" height="15.0" fill="rgb(217,214,5)" rx="2" ry="2" />
<text  x="1183.01" y="607.5" ></text>
</g>
</g>
</svg>
