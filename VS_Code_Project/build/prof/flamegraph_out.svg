<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="790.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="773" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="773" > </text>
<g id="frames">
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.21%)</title><rect x="615.0" y="565" width="2.5" height="15.0" fill="rgb(219,178,26)" rx="2" ry="2" />
<text  x="618.00" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (2 samples, 0.42%)</title><rect x="1172.5" y="517" width="5.0" height="15.0" fill="rgb(205,161,53)" rx="2" ry="2" />
<text  x="1175.50" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;) (1 samples, 0.21%)</title><rect x="1112.5" y="357" width="2.5" height="15.0" fill="rgb(248,198,26)" rx="2" ry="2" />
<text  x="1115.50" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.42%)</title><rect x="597.5" y="533" width="5.0" height="15.0" fill="rgb(249,98,25)" rx="2" ry="2" />
<text  x="600.50" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (1 samples, 0.21%)</title><rect x="1112.5" y="373" width="2.5" height="15.0" fill="rgb(248,144,33)" rx="2" ry="2" />
<text  x="1115.50" y="383.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::construct&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;&amp;&amp;) (1 samples, 0.21%)</title><rect x="1107.5" y="533" width="2.5" height="15.0" fill="rgb(242,41,17)" rx="2" ry="2" />
<text  x="1110.50" y="543.5" ></text>
</g>
<g >
<title>ZSTD_decompressBlock_internal&lt;0000000000082050&gt; (1 samples, 0.21%)</title><rect x="30.0" y="421" width="2.5" height="15.0" fill="rgb(235,107,44)" rx="2" ry="2" />
<text  x="33.00" y="431.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (4 samples, 0.85%)</title><rect x="265.0" y="581" width="10.0" height="15.0" fill="rgb(236,197,12)" rx="2" ry="2" />
<text  x="268.00" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (175 samples, 37.08%)</title><rect x="642.5" y="597" width="437.5" height="15.0" fill="rgb(207,63,6)" rx="2" ry="2" />
<text  x="645.50" y="607.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.42%)</title><rect x="1095.0" y="581" width="5.0" height="15.0" fill="rgb(229,84,7)" rx="2" ry="2" />
<text  x="1098.00" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="581" width="2.5" height="15.0" fill="rgb(213,168,17)" rx="2" ry="2" />
<text  x="1105.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.21%)</title><rect x="620.0" y="565" width="2.5" height="15.0" fill="rgb(232,136,2)" rx="2" ry="2" />
<text  x="623.00" y="575.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.21%)</title><rect x="262.5" y="565" width="2.5" height="15.0" fill="rgb(205,212,23)" rx="2" ry="2" />
<text  x="265.50" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.42%)</title><rect x="1095.0" y="533" width="5.0" height="15.0" fill="rgb(238,140,10)" rx="2" ry="2" />
<text  x="1098.00" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.21%)</title><rect x="1092.5" y="469" width="2.5" height="15.0" fill="rgb(233,126,37)" rx="2" ry="2" />
<text  x="1095.50" y="479.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 1.27%)</title><rect x="15.0" y="581" width="15.0" height="15.0" fill="rgb(238,129,39)" rx="2" ry="2" />
<text  x="18.00" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (9 samples, 1.91%)</title><rect x="582.5" y="581" width="22.5" height="15.0" fill="rgb(208,85,24)" rx="2" ry="2" />
<text  x="585.50" y="591.5" >s..</text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (103 samples, 21.82%)</title><rect x="50.0" y="597" width="257.5" height="15.0" fill="rgb(230,46,22)" rx="2" ry="2" />
<text  x="53.00" y="607.5" >ScanlineRasterizer::drawFlatTopTri..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow() (1 samples, 0.21%)</title><rect x="1170.0" y="533" width="2.5" height="15.0" fill="rgb(248,6,16)" rx="2" ry="2" />
<text  x="1173.00" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="437" width="47.5" height="15.0" fill="rgb(243,70,24)" rx="2" ry="2" />
<text  x="1120.50" y="447.5" >std:..</text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (2 samples, 0.42%)</title><rect x="1172.5" y="341" width="5.0" height="15.0" fill="rgb(253,229,9)" rx="2" ry="2" />
<text  x="1175.50" y="351.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.21%)</title><rect x="625.0" y="597" width="2.5" height="15.0" fill="rgb(228,205,53)" rx="2" ry="2" />
<text  x="628.00" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.21%)</title><rect x="22.5" y="453" width="2.5" height="15.0" fill="rgb(232,213,16)" rx="2" ry="2" />
<text  x="25.50" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (11 samples, 2.33%)</title><rect x="1135.0" y="277" width="27.5" height="15.0" fill="rgb(215,34,54)" rx="2" ry="2" />
<text  x="1138.00" y="287.5" >_..</text>
</g>
<g >
<title>void std::__new_allocator&lt;OBJ_Lex_triFace&gt;::construct&lt;OBJ_Lex_triFace, OBJ_Lex_triFace const&amp;&gt;(OBJ_Lex_triFace*, OBJ_Lex_triFace const&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="517" width="2.5" height="15.0" fill="rgb(210,18,21)" rx="2" ry="2" />
<text  x="1115.50" y="527.5" ></text>
</g>
<g >
<title>0x00007fcfc6f69fec (1 samples, 0.21%)</title><rect x="40.0" y="581" width="2.5" height="15.0" fill="rgb(244,23,39)" rx="2" ry="2" />
<text  x="43.00" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="421" width="2.5" height="15.0" fill="rgb(214,194,52)" rx="2" ry="2" />
<text  x="1113.00" y="431.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (7 samples, 1.48%)</title><rect x="550.0" y="581" width="17.5" height="15.0" fill="rgb(225,193,32)" rx="2" ry="2" />
<text  x="553.00" y="591.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;0000000000026230&gt; (2 samples, 0.42%)</title><rect x="1177.5" y="565" width="5.0" height="15.0" fill="rgb(235,220,53)" rx="2" ry="2" />
<text  x="1180.50" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="613" width="2.5" height="15.0" fill="rgb(228,172,19)" rx="2" ry="2" />
<text  x="1105.50" y="623.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000067450&gt; (226 samples, 47.88%)</title><rect x="50.0" y="629" width="565.0" height="15.0" fill="rgb(225,119,34)" rx="2" ry="2" />
<text  x="53.00" y="639.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000067450&gt;</text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="501" width="2.5" height="15.0" fill="rgb(209,197,22)" rx="2" ry="2" />
<text  x="1113.00" y="511.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.42%)</title><rect x="1080.0" y="565" width="5.0" height="15.0" fill="rgb(240,134,54)" rx="2" ry="2" />
<text  x="1083.00" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.21%)</title><rect x="1102.5" y="533" width="2.5" height="15.0" fill="rgb(231,197,15)" rx="2" ry="2" />
<text  x="1105.50" y="543.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.21%)</title><rect x="567.5" y="581" width="2.5" height="15.0" fill="rgb(212,38,1)" rx="2" ry="2" />
<text  x="570.50" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (159 samples, 33.69%)</title><rect x="682.5" y="581" width="397.5" height="15.0" fill="rgb(210,224,46)" rx="2" ry="2" />
<text  x="685.50" y="591.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt;</text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (2 samples, 0.42%)</title><rect x="1127.5" y="213" width="5.0" height="15.0" fill="rgb(238,18,23)" rx="2" ry="2" />
<text  x="1130.50" y="223.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (10 samples, 2.12%)</title><rect x="280.0" y="581" width="25.0" height="15.0" fill="rgb(250,43,21)" rx="2" ry="2" />
<text  x="283.00" y="591.5" >s..</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn(char*, long) (1 samples, 0.21%)</title><rect x="1170.0" y="517" width="2.5" height="15.0" fill="rgb(231,4,4)" rx="2" ry="2" />
<text  x="1173.00" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1167.5" y="517" width="2.5" height="15.0" fill="rgb(240,127,5)" rx="2" ry="2" />
<text  x="1170.50" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.42%)</title><rect x="1172.5" y="389" width="5.0" height="15.0" fill="rgb(241,127,28)" rx="2" ry="2" />
<text  x="1175.50" y="399.5" ></text>
</g>
<g >
<title>Vec2d::setX(float const&amp;)&lt;0000000000080020&gt; (1 samples, 0.21%)</title><rect x="635.0" y="581" width="2.5" height="15.0" fill="rgb(246,28,42)" rx="2" ry="2" />
<text  x="638.00" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.21%)</title><rect x="620.0" y="581" width="2.5" height="15.0" fill="rgb(220,68,48)" rx="2" ry="2" />
<text  x="623.00" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (69 samples, 14.62%)</title><rect x="907.5" y="565" width="172.5" height="15.0" fill="rgb(248,205,50)" rx="2" ry="2" />
<text  x="910.50" y="575.5" >nouveau_drm_screen_cre..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.21%)</title><rect x="622.5" y="565" width="2.5" height="15.0" fill="rgb(210,96,9)" rx="2" ry="2" />
<text  x="625.50" y="575.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::allocate(unsigned long, void const*) (1 samples, 0.21%)</title><rect x="1125.0" y="197" width="2.5" height="15.0" fill="rgb(228,101,53)" rx="2" ry="2" />
<text  x="1128.00" y="207.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;0000000000082330&gt; (1 samples, 0.21%)</title><rect x="627.5" y="581" width="2.5" height="15.0" fill="rgb(233,164,25)" rx="2" ry="2" />
<text  x="630.50" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.42%)</title><rect x="1177.5" y="613" width="5.0" height="15.0" fill="rgb(218,28,11)" rx="2" ry="2" />
<text  x="1180.50" y="623.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1167.5" y="549" width="2.5" height="15.0" fill="rgb(252,141,21)" rx="2" ry="2" />
<text  x="1170.50" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.21%)</title><rect x="1082.5" y="437" width="2.5" height="15.0" fill="rgb(208,114,52)" rx="2" ry="2" />
<text  x="1085.50" y="447.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (1 samples, 0.21%)</title><rect x="17.5" y="405" width="2.5" height="15.0" fill="rgb(235,134,48)" rx="2" ry="2" />
<text  x="20.50" y="415.5" ></text>
</g>
<g >
<title>tc_realloc[inline] (1 samples, 0.21%)</title><rect x="372.5" y="485" width="2.5" height="15.0" fill="rgb(248,130,23)" rx="2" ry="2" />
<text  x="375.50" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.21%)</title><rect x="625.0" y="581" width="2.5" height="15.0" fill="rgb(205,60,48)" rx="2" ry="2" />
<text  x="628.00" y="591.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (18 samples, 3.81%)</title><rect x="460.0" y="549" width="45.0" height="15.0" fill="rgb(251,218,18)" rx="2" ry="2" />
<text  x="463.00" y="559.5" >_Par..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.21%)</title><rect x="622.5" y="549" width="2.5" height="15.0" fill="rgb(213,109,41)" rx="2" ry="2" />
<text  x="625.50" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (2 samples, 0.42%)</title><rect x="1127.5" y="229" width="5.0" height="15.0" fill="rgb(218,62,4)" rx="2" ry="2" />
<text  x="1130.50" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate(unsigned long, void const*) (1 samples, 0.21%)</title><rect x="1180.0" y="165" width="2.5" height="15.0" fill="rgb(215,152,38)" rx="2" ry="2" />
<text  x="1183.00" y="175.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.21%)</title><rect x="37.5" y="437" width="2.5" height="15.0" fill="rgb(251,72,45)" rx="2" ry="2" />
<text  x="40.50" y="447.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.21%)</title><rect x="27.5" y="405" width="2.5" height="15.0" fill="rgb(250,125,14)" rx="2" ry="2" />
<text  x="30.50" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.21%)</title><rect x="1090.0" y="469" width="2.5" height="15.0" fill="rgb(213,56,12)" rx="2" ry="2" />
<text  x="1093.00" y="479.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.21%)</title><rect x="27.5" y="501" width="2.5" height="15.0" fill="rgb(240,207,10)" rx="2" ry="2" />
<text  x="30.50" y="511.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000067af0&gt; (10 samples, 2.12%)</title><rect x="615.0" y="629" width="25.0" height="15.0" fill="rgb(252,15,50)" rx="2" ry="2" />
<text  x="618.00" y="639.5" >R..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 1.06%)</title><rect x="37.5" y="597" width="12.5" height="15.0" fill="rgb(234,122,8)" rx="2" ry="2" />
<text  x="40.50" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.42%)</title><rect x="1172.5" y="533" width="5.0" height="15.0" fill="rgb(224,145,39)" rx="2" ry="2" />
<text  x="1175.50" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.42%)</title><rect x="1172.5" y="373" width="5.0" height="15.0" fill="rgb(254,97,50)" rx="2" ry="2" />
<text  x="1175.50" y="383.5" ></text>
</g>
<g >
<title>pthread_sigmask@@GLIBC_2.32 (3 samples, 0.64%)</title><rect x="1182.5" y="725" width="7.5" height="15.0" fill="rgb(248,5,48)" rx="2" ry="2" />
<text  x="1185.50" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="469" width="2.5" height="15.0" fill="rgb(241,38,16)" rx="2" ry="2" />
<text  x="1115.50" y="479.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.21%)</title><rect x="27.5" y="421" width="2.5" height="15.0" fill="rgb(210,131,6)" rx="2" ry="2" />
<text  x="30.50" y="431.5" ></text>
</g>
<g >
<title>_Safe_iterator_base (1 samples, 0.21%)</title><rect x="617.5" y="581" width="2.5" height="15.0" fill="rgb(229,144,14)" rx="2" ry="2" />
<text  x="620.50" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="421" width="47.5" height="15.0" fill="rgb(224,199,20)" rx="2" ry="2" />
<text  x="1120.50" y="431.5" >std:..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.21%)</title><rect x="42.5" y="581" width="2.5" height="15.0" fill="rgb(235,174,54)" rx="2" ry="2" />
<text  x="45.50" y="591.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="1082.5" y="389" width="2.5" height="15.0" fill="rgb(222,184,2)" rx="2" ry="2" />
<text  x="1085.50" y="399.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.21%)</title><rect x="17.5" y="325" width="2.5" height="15.0" fill="rgb(250,161,37)" rx="2" ry="2" />
<text  x="20.50" y="335.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (1 samples, 0.21%)</title><rect x="27.5" y="485" width="2.5" height="15.0" fill="rgb(217,155,44)" rx="2" ry="2" />
<text  x="30.50" y="495.5" ></text>
</g>
<g >
<title>~__shared_ptr (2 samples, 0.42%)</title><rect x="1177.5" y="629" width="5.0" height="15.0" fill="rgb(247,161,49)" rx="2" ry="2" />
<text  x="1180.50" y="639.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.85%)</title><rect x="1085.0" y="581" width="10.0" height="15.0" fill="rgb(223,20,25)" rx="2" ry="2" />
<text  x="1088.00" y="591.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (7 samples, 1.48%)</title><rect x="950.0" y="549" width="17.5" height="15.0" fill="rgb(234,180,31)" rx="2" ry="2" />
<text  x="953.00" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 1.48%)</title><rect x="15.0" y="629" width="17.5" height="15.0" fill="rgb(238,87,47)" rx="2" ry="2" />
<text  x="18.00" y="639.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000075ff0&gt; (27 samples, 5.72%)</title><rect x="1105.0" y="645" width="67.5" height="15.0" fill="rgb(235,28,26)" rx="2" ry="2" />
<text  x="1108.00" y="655.5" >Mesh_Pi..</text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="1085.0" y="389" width="2.5" height="15.0" fill="rgb(216,106,3)" rx="2" ry="2" />
<text  x="1088.00" y="399.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (6 samples, 1.27%)</title><rect x="1080.0" y="613" width="15.0" height="15.0" fill="rgb(237,21,50)" rx="2" ry="2" />
<text  x="1083.00" y="623.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;SDL_Color&gt;::construct&lt;SDL_Color, SDL_Color&gt;(SDL_Color*, SDL_Color&amp;&amp;) (1 samples, 0.21%)</title><rect x="1105.0" y="485" width="2.5" height="15.0" fill="rgb(214,92,16)" rx="2" ry="2" />
<text  x="1108.00" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="549" width="47.5" height="15.0" fill="rgb(236,205,53)" rx="2" ry="2" />
<text  x="1120.50" y="559.5" >std:..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.21%)</title><rect x="602.5" y="533" width="2.5" height="15.0" fill="rgb(239,136,51)" rx="2" ry="2" />
<text  x="605.50" y="543.5" ></text>
</g>
<g >
<title>FSE_decompress_wksp_bmi2&lt;000000000000f5f0&gt; (1 samples, 0.21%)</title><rect x="30.0" y="341" width="2.5" height="15.0" fill="rgb(233,117,50)" rx="2" ry="2" />
<text  x="33.00" y="351.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (1 samples, 0.21%)</title><rect x="10.0" y="725" width="2.5" height="15.0" fill="rgb(227,126,10)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.85%)</title><rect x="15.0" y="517" width="10.0" height="15.0" fill="rgb(249,192,0)" rx="2" ry="2" />
<text  x="18.00" y="527.5" ></text>
</g>
<g >
<title>_Vector_impl (2 samples, 0.42%)</title><rect x="132.5" y="565" width="5.0" height="15.0" fill="rgb(212,36,30)" rx="2" ry="2" />
<text  x="135.50" y="575.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;0000000000053620&gt; (2 samples, 0.42%)</title><rect x="1167.5" y="597" width="5.0" height="15.0" fill="rgb(249,45,4)" rx="2" ry="2" />
<text  x="1170.50" y="607.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (12 samples, 2.54%)</title><rect x="232.5" y="533" width="30.0" height="15.0" fill="rgb(221,128,36)" rx="2" ry="2" />
<text  x="235.50" y="543.5" >_P..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000029620&gt; (9 samples, 1.91%)</title><rect x="1140.0" y="213" width="22.5" height="15.0" fill="rgb(217,21,45)" rx="2" ry="2" />
<text  x="1143.00" y="223.5" >t..</text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.21%)</title><rect x="630.0" y="485" width="2.5" height="15.0" fill="rgb(207,130,34)" rx="2" ry="2" />
<text  x="633.00" y="495.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.21%)</title><rect x="22.5" y="437" width="2.5" height="15.0" fill="rgb(247,32,14)" rx="2" ry="2" />
<text  x="25.50" y="447.5" ></text>
</g>
<g >
<title>~vector (7 samples, 1.48%)</title><rect x="550.0" y="565" width="17.5" height="15.0" fill="rgb(239,56,10)" rx="2" ry="2" />
<text  x="553.00" y="575.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.21%)</title><rect x="635.0" y="597" width="2.5" height="15.0" fill="rgb(207,153,32)" rx="2" ry="2" />
<text  x="638.00" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (17 samples, 3.60%)</title><rect x="332.5" y="581" width="42.5" height="15.0" fill="rgb(246,149,53)" rx="2" ry="2" />
<text  x="335.50" y="591.5" >SDL_..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (2 samples, 0.42%)</title><rect x="1177.5" y="645" width="5.0" height="15.0" fill="rgb(238,70,21)" rx="2" ry="2" />
<text  x="1180.50" y="655.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.21%)</title><rect x="30.0" y="517" width="2.5" height="15.0" fill="rgb(242,197,22)" rx="2" ry="2" />
<text  x="33.00" y="527.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000082450&gt; (1 samples, 0.21%)</title><rect x="627.5" y="597" width="2.5" height="15.0" fill="rgb(223,63,11)" rx="2" ry="2" />
<text  x="630.50" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.21%)</title><rect x="1177.5" y="133" width="2.5" height="15.0" fill="rgb(208,114,4)" rx="2" ry="2" />
<text  x="1180.50" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.21%)</title><rect x="1115.0" y="565" width="2.5" height="15.0" fill="rgb(241,117,16)" rx="2" ry="2" />
<text  x="1118.00" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 1.48%)</title><rect x="15.0" y="613" width="17.5" height="15.0" fill="rgb(239,193,41)" rx="2" ry="2" />
<text  x="18.00" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.21%)</title><rect x="630.0" y="533" width="2.5" height="15.0" fill="rgb(243,197,33)" rx="2" ry="2" />
<text  x="633.00" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.21%)</title><rect x="1165.0" y="581" width="2.5" height="15.0" fill="rgb(210,136,46)" rx="2" ry="2" />
<text  x="1168.00" y="591.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.21%)</title><rect x="27.5" y="453" width="2.5" height="15.0" fill="rgb(219,38,20)" rx="2" ry="2" />
<text  x="30.50" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.42%)</title><rect x="1172.5" y="357" width="5.0" height="15.0" fill="rgb(250,165,7)" rx="2" ry="2" />
<text  x="1175.50" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.21%)</title><rect x="1082.5" y="421" width="2.5" height="15.0" fill="rgb(212,91,21)" rx="2" ry="2" />
<text  x="1085.50" y="431.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (19 samples, 4.03%)</title><rect x="1117.5" y="389" width="47.5" height="15.0" fill="rgb(253,53,42)" rx="2" ry="2" />
<text  x="1120.50" y="399.5" >std:..</text>
</g>
<g >
<title>_Safe_sequence (1 samples, 0.21%)</title><rect x="390.0" y="565" width="2.5" height="15.0" fill="rgb(233,50,41)" rx="2" ry="2" />
<text  x="393.00" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.85%)</title><rect x="100.0" y="549" width="10.0" height="15.0" fill="rgb(229,43,54)" rx="2" ry="2" />
<text  x="103.00" y="559.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;0000000000109840&gt; (1 samples, 0.21%)</title><rect x="25.0" y="437" width="2.5" height="15.0" fill="rgb(207,171,52)" rx="2" ry="2" />
<text  x="28.00" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.42%)</title><rect x="1177.5" y="293" width="5.0" height="15.0" fill="rgb(224,148,1)" rx="2" ry="2" />
<text  x="1180.50" y="303.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.21%)</title><rect x="1110.0" y="405" width="2.5" height="15.0" fill="rgb(248,168,28)" rx="2" ry="2" />
<text  x="1113.00" y="415.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000064250&gt; (120 samples, 25.42%)</title><rect x="307.5" y="597" width="300.0" height="15.0" fill="rgb(236,220,22)" rx="2" ry="2" />
<text  x="310.50" y="607.5" >TexturemapRasterizer::drawFlatBottomTri(..</text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.42%)</title><rect x="627.5" y="613" width="5.0" height="15.0" fill="rgb(243,226,37)" rx="2" ry="2" />
<text  x="630.50" y="623.5" ></text>
</g>
<g >
<title>__shared_ptr (1 samples, 0.21%)</title><rect x="277.5" y="581" width="2.5" height="15.0" fill="rgb(249,171,9)" rx="2" ry="2" />
<text  x="280.50" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="597" width="2.5" height="15.0" fill="rgb(219,110,29)" rx="2" ry="2" />
<text  x="1105.50" y="607.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (3 samples, 0.64%)</title><rect x="1065.0" y="517" width="7.5" height="15.0" fill="rgb(213,10,41)" rx="2" ry="2" />
<text  x="1068.00" y="527.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (10 samples, 2.12%)</title><rect x="1137.5" y="229" width="25.0" height="15.0" fill="rgb(208,26,43)" rx="2" ry="2" />
<text  x="1140.50" y="239.5" >s..</text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (1 samples, 0.21%)</title><rect x="625.0" y="613" width="2.5" height="15.0" fill="rgb(208,88,32)" rx="2" ry="2" />
<text  x="628.00" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="405" width="47.5" height="15.0" fill="rgb(240,14,12)" rx="2" ry="2" />
<text  x="1120.50" y="415.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.21%)</title><rect x="1117.5" y="341" width="2.5" height="15.0" fill="rgb(220,220,44)" rx="2" ry="2" />
<text  x="1120.50" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.42%)</title><rect x="1177.5" y="373" width="5.0" height="15.0" fill="rgb(242,82,21)" rx="2" ry="2" />
<text  x="1180.50" y="383.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000069f80&gt; (2 samples, 0.42%)</title><rect x="1100.0" y="645" width="5.0" height="15.0" fill="rgb(232,194,3)" rx="2" ry="2" />
<text  x="1103.00" y="655.5" ></text>
</g>
<g >
<title>~vector (4 samples, 0.85%)</title><rect x="265.0" y="565" width="10.0" height="15.0" fill="rgb(241,144,29)" rx="2" ry="2" />
<text  x="268.00" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1092.5" y="533" width="2.5" height="15.0" fill="rgb(249,138,46)" rx="2" ry="2" />
<text  x="1095.50" y="543.5" ></text>
</g>
<g >
<title>tc_realloc (1 samples, 0.21%)</title><rect x="37.5" y="485" width="2.5" height="15.0" fill="rgb(244,26,2)" rx="2" ry="2" />
<text  x="40.50" y="495.5" ></text>
</g>
<g >
<title>HUF_readDTableX1_wksp_bmi2&lt;00000000000789b0&gt; (1 samples, 0.21%)</title><rect x="30.0" y="357" width="2.5" height="15.0" fill="rgb(226,131,17)" rx="2" ry="2" />
<text  x="33.00" y="367.5" ></text>
</g>
<g >
<title>__dynamic_cast&lt;00000000000a4730&gt; (1 samples, 0.21%)</title><rect x="1115.0" y="469" width="2.5" height="15.0" fill="rgb(228,27,5)" rx="2" ry="2" />
<text  x="1118.00" y="479.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="620.0" y="549" width="2.5" height="15.0" fill="rgb(209,139,37)" rx="2" ry="2" />
<text  x="623.00" y="559.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (1 samples, 0.21%)</title><rect x="610.0" y="597" width="2.5" height="15.0" fill="rgb(240,23,21)" rx="2" ry="2" />
<text  x="613.00" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (47 samples, 9.96%)</title><rect x="780.0" y="533" width="117.5" height="15.0" fill="rgb(224,39,18)" rx="2" ry="2" />
<text  x="783.00" y="543.5" >__driDriverGet..</text>
</g>
<g >
<title>tcmalloc::Sampler::RecordAllocation(unsigned long)[inline] (1 samples, 0.21%)</title><rect x="37.5" y="389" width="2.5" height="15.0" fill="rgb(206,50,37)" rx="2" ry="2" />
<text  x="40.50" y="399.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.42%)</title><rect x="1080.0" y="501" width="5.0" height="15.0" fill="rgb(208,38,48)" rx="2" ry="2" />
<text  x="1083.00" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="485" width="2.5" height="15.0" fill="rgb(230,38,12)" rx="2" ry="2" />
<text  x="33.00" y="495.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1097.5" y="517" width="2.5" height="15.0" fill="rgb(215,62,0)" rx="2" ry="2" />
<text  x="1100.50" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.21%)</title><rect x="612.5" y="565" width="2.5" height="15.0" fill="rgb(218,207,8)" rx="2" ry="2" />
<text  x="615.50" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.42%)</title><rect x="1090.0" y="565" width="5.0" height="15.0" fill="rgb(215,114,45)" rx="2" ry="2" />
<text  x="1093.00" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 1.27%)</title><rect x="552.5" y="549" width="15.0" height="15.0" fill="rgb(217,0,51)" rx="2" ry="2" />
<text  x="555.50" y="559.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (7 samples, 1.48%)</title><rect x="15.0" y="645" width="17.5" height="15.0" fill="rgb(250,157,22)" rx="2" ry="2" />
<text  x="18.00" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.21%)</title><rect x="1085.0" y="405" width="2.5" height="15.0" fill="rgb(206,127,20)" rx="2" ry="2" />
<text  x="1088.00" y="415.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.42%)</title><rect x="1177.5" y="325" width="5.0" height="15.0" fill="rgb(222,187,49)" rx="2" ry="2" />
<text  x="1180.50" y="335.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="637.5" y="549" width="2.5" height="15.0" fill="rgb(206,46,2)" rx="2" ry="2" />
<text  x="640.50" y="559.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (4 samples, 0.85%)</title><rect x="1125.0" y="261" width="10.0" height="15.0" fill="rgb(247,22,37)" rx="2" ry="2" />
<text  x="1128.00" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.21%)</title><rect x="407.5" y="549" width="2.5" height="15.0" fill="rgb(223,105,35)" rx="2" ry="2" />
<text  x="410.50" y="559.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="485" width="2.5" height="15.0" fill="rgb(224,34,38)" rx="2" ry="2" />
<text  x="1105.50" y="495.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (11 samples, 2.33%)</title><rect x="870.0" y="501" width="27.5" height="15.0" fill="rgb(206,158,31)" rx="2" ry="2" />
<text  x="873.00" y="511.5" >n..</text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.21%)</title><rect x="15.0" y="453" width="2.5" height="15.0" fill="rgb(228,104,14)" rx="2" ry="2" />
<text  x="18.00" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.42%)</title><rect x="1172.5" y="181" width="5.0" height="15.0" fill="rgb(225,203,45)" rx="2" ry="2" />
<text  x="1175.50" y="191.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="533" width="2.5" height="15.0" fill="rgb(233,95,3)" rx="2" ry="2" />
<text  x="1113.00" y="543.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 1.27%)</title><rect x="15.0" y="565" width="15.0" height="15.0" fill="rgb(244,23,52)" rx="2" ry="2" />
<text  x="18.00" y="575.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.21%)</title><rect x="372.5" y="469" width="2.5" height="15.0" fill="rgb(231,133,23)" rx="2" ry="2" />
<text  x="375.50" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.21%)</title><rect x="622.5" y="533" width="2.5" height="15.0" fill="rgb(216,105,30)" rx="2" ry="2" />
<text  x="625.50" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1092.5" y="501" width="2.5" height="15.0" fill="rgb(219,107,22)" rx="2" ry="2" />
<text  x="1095.50" y="511.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (2 samples, 0.42%)</title><rect x="20.0" y="469" width="5.0" height="15.0" fill="rgb(236,191,24)" rx="2" ry="2" />
<text  x="23.00" y="479.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.21%)</title><rect x="1120.0" y="309" width="2.5" height="15.0" fill="rgb(210,203,22)" rx="2" ry="2" />
<text  x="1123.00" y="319.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003aca0&gt; (2 samples, 0.42%)</title><rect x="1105.0" y="597" width="5.0" height="15.0" fill="rgb(245,153,51)" rx="2" ry="2" />
<text  x="1108.00" y="607.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_refn&lt;00000000000059a0&gt; (9 samples, 1.91%)</title><rect x="1057.5" y="533" width="22.5" height="15.0" fill="rgb(233,96,37)" rx="2" ry="2" />
<text  x="1060.50" y="543.5" >n..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.42%)</title><rect x="1177.5" y="213" width="5.0" height="15.0" fill="rgb(212,219,7)" rx="2" ry="2" />
<text  x="1180.50" y="223.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.21%)</title><rect x="1100.0" y="613" width="2.5" height="15.0" fill="rgb(252,18,20)" rx="2" ry="2" />
<text  x="1103.00" y="623.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3f6af (1 samples, 0.21%)</title><rect x="37.5" y="565" width="2.5" height="15.0" fill="rgb(223,101,36)" rx="2" ry="2" />
<text  x="40.50" y="575.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (2 samples, 0.42%)</title><rect x="72.5" y="581" width="5.0" height="15.0" fill="rgb(215,23,30)" rx="2" ry="2" />
<text  x="75.50" y="591.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="27.5" y="533" width="2.5" height="15.0" fill="rgb(209,165,0)" rx="2" ry="2" />
<text  x="30.50" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;::insert_or_assign&lt;TexturePNG&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, TexturePNG&amp;) (1 samples, 0.21%)</title><rect x="1125.0" y="229" width="2.5" height="15.0" fill="rgb(253,9,41)" rx="2" ry="2" />
<text  x="1128.00" y="239.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (12 samples, 2.54%)</title><rect x="410.0" y="549" width="30.0" height="15.0" fill="rgb(219,81,22)" rx="2" ry="2" />
<text  x="413.00" y="559.5" >st..</text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (19 samples, 4.03%)</title><rect x="1117.5" y="357" width="47.5" height="15.0" fill="rgb(212,123,36)" rx="2" ry="2" />
<text  x="1120.50" y="367.5" >std:..</text>
</g>
<g >
<title>setsockopt@@GLIBC_2.2.5&lt;0000000000109b10&gt; (1 samples, 0.21%)</title><rect x="40.0" y="517" width="2.5" height="15.0" fill="rgb(249,61,5)" rx="2" ry="2" />
<text  x="43.00" y="527.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (2 samples, 0.42%)</title><rect x="45.0" y="517" width="5.0" height="15.0" fill="rgb(247,35,15)" rx="2" ry="2" />
<text  x="48.00" y="527.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.21%)</title><rect x="27.5" y="437" width="2.5" height="15.0" fill="rgb(223,117,21)" rx="2" ry="2" />
<text  x="30.50" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.21%)</title><rect x="1090.0" y="485" width="2.5" height="15.0" fill="rgb(253,5,35)" rx="2" ry="2" />
<text  x="1093.00" y="495.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="501" width="2.5" height="15.0" fill="rgb(214,116,28)" rx="2" ry="2" />
<text  x="1105.50" y="511.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (15 samples, 3.18%)</title><rect x="402.5" y="565" width="37.5" height="15.0" fill="rgb(231,143,32)" rx="2" ry="2" />
<text  x="405.50" y="575.5" >std..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="597" width="2.5" height="15.0" fill="rgb(226,129,0)" rx="2" ry="2" />
<text  x="33.00" y="607.5" ></text>
</g>
<g >
<title>nouveau_bufctx_refn&lt;0000000000005d80&gt; (2 samples, 0.42%)</title><rect x="945.0" y="549" width="5.0" height="15.0" fill="rgb(223,132,36)" rx="2" ry="2" />
<text  x="948.00" y="559.5" ></text>
</g>
<g >
<title>0x00007fcfc6f4afc2 (1 samples, 0.21%)</title><rect x="35.0" y="533" width="2.5" height="15.0" fill="rgb(237,7,16)" rx="2" ry="2" />
<text  x="38.00" y="543.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.21%)</title><rect x="1110.0" y="485" width="2.5" height="15.0" fill="rgb(250,46,39)" rx="2" ry="2" />
<text  x="1113.00" y="495.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (467 samples, 98.94%)</title><rect x="15.0" y="725" width="1167.5" height="15.0" fill="rgb(248,22,20)" rx="2" ry="2" />
<text  x="18.00" y="735.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::random_access_iterator_tag) (1 samples, 0.21%)</title><rect x="1112.5" y="341" width="2.5" height="15.0" fill="rgb(219,40,20)" rx="2" ry="2" />
<text  x="1115.50" y="351.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (19 samples, 4.03%)</title><rect x="1117.5" y="373" width="47.5" height="15.0" fill="rgb(247,109,51)" rx="2" ry="2" />
<text  x="1120.50" y="383.5" >std:..</text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="389" width="2.5" height="15.0" fill="rgb(246,77,19)" rx="2" ry="2" />
<text  x="1115.50" y="399.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.42%)</title><rect x="1177.5" y="517" width="5.0" height="15.0" fill="rgb(254,12,9)" rx="2" ry="2" />
<text  x="1180.50" y="527.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.21%)</title><rect x="1137.5" y="213" width="2.5" height="15.0" fill="rgb(223,179,12)" rx="2" ry="2" />
<text  x="1140.50" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt;[inline] (8 samples, 1.69%)</title><rect x="1142.5" y="165" width="20.0" height="15.0" fill="rgb(213,208,33)" rx="2" ry="2" />
<text  x="1145.50" y="175.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (1 samples, 0.21%)</title><rect x="17.5" y="437" width="2.5" height="15.0" fill="rgb(226,144,8)" rx="2" ry="2" />
<text  x="20.50" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.21%)</title><rect x="622.5" y="597" width="2.5" height="15.0" fill="rgb(233,121,29)" rx="2" ry="2" />
<text  x="625.50" y="607.5" ></text>
</g>
<g >
<title>realpath@@GLIBC_2.3&lt;0000000000039e70&gt; (1 samples, 0.21%)</title><rect x="15.0" y="421" width="2.5" height="15.0" fill="rgb(237,12,11)" rx="2" ry="2" />
<text  x="18.00" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.21%)</title><rect x="610.0" y="533" width="2.5" height="15.0" fill="rgb(231,200,40)" rx="2" ry="2" />
<text  x="613.00" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (18 samples, 3.81%)</title><rect x="1120.0" y="341" width="45.0" height="15.0" fill="rgb(233,25,22)" rx="2" ry="2" />
<text  x="1123.00" y="351.5" >std:..</text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (4 samples, 0.85%)</title><rect x="1125.0" y="277" width="10.0" height="15.0" fill="rgb(205,205,5)" rx="2" ry="2" />
<text  x="1128.00" y="287.5" ></text>
</g>
<g >
<title>_XGetWindowAttributes&lt;0000000000024c70&gt; (1 samples, 0.21%)</title><rect x="25.0" y="533" width="2.5" height="15.0" fill="rgb(231,31,19)" rx="2" ry="2" />
<text  x="28.00" y="543.5" ></text>
</g>
<g >
<title>0x00007fcfc6f41791 (2 samples, 0.42%)</title><rect x="32.5" y="597" width="5.0" height="15.0" fill="rgb(205,95,33)" rx="2" ry="2" />
<text  x="35.50" y="607.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="485" width="47.5" height="15.0" fill="rgb(235,55,7)" rx="2" ry="2" />
<text  x="1120.50" y="495.5" >void..</text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.42%)</title><rect x="1172.5" y="229" width="5.0" height="15.0" fill="rgb(214,89,44)" rx="2" ry="2" />
<text  x="1175.50" y="239.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1167.5" y="581" width="2.5" height="15.0" fill="rgb(216,151,30)" rx="2" ry="2" />
<text  x="1170.50" y="591.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.21%)</title><rect x="867.5" y="517" width="2.5" height="15.0" fill="rgb(209,229,17)" rx="2" ry="2" />
<text  x="870.50" y="527.5" ></text>
</g>
<g >
<title>0x00007fcfc6f4075a (1 samples, 0.21%)</title><rect x="32.5" y="565" width="2.5" height="15.0" fill="rgb(232,72,0)" rx="2" ry="2" />
<text  x="35.50" y="575.5" ></text>
</g>
<g >
<title>ZSTD_decompress&lt;0000000000084970&gt; (1 samples, 0.21%)</title><rect x="30.0" y="453" width="2.5" height="15.0" fill="rgb(219,219,41)" rx="2" ry="2" />
<text  x="33.00" y="463.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.21%)</title><rect x="17.5" y="293" width="2.5" height="15.0" fill="rgb(242,117,19)" rx="2" ry="2" />
<text  x="20.50" y="303.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.42%)</title><rect x="1177.5" y="533" width="5.0" height="15.0" fill="rgb(243,135,12)" rx="2" ry="2" />
<text  x="1180.50" y="543.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (13 samples, 2.75%)</title><rect x="517.5" y="533" width="32.5" height="15.0" fill="rgb(234,152,34)" rx="2" ry="2" />
<text  x="520.50" y="543.5" >_P..</text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.42%)</title><rect x="1095.0" y="549" width="5.0" height="15.0" fill="rgb(210,58,10)" rx="2" ry="2" />
<text  x="1098.00" y="559.5" ></text>
</g>
<g >
<title>__shared_ptr (3 samples, 0.64%)</title><rect x="575.0" y="581" width="7.5" height="15.0" fill="rgb(254,122,18)" rx="2" ry="2" />
<text  x="578.00" y="591.5" ></text>
</g>
<g >
<title>0x00007fcfc6f49ee6 (1 samples, 0.21%)</title><rect x="37.5" y="517" width="2.5" height="15.0" fill="rgb(245,100,45)" rx="2" ry="2" />
<text  x="40.50" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.21%)</title><rect x="1177.5" y="101" width="2.5" height="15.0" fill="rgb(228,157,19)" rx="2" ry="2" />
<text  x="1180.50" y="111.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.42%)</title><rect x="1085.0" y="565" width="5.0" height="15.0" fill="rgb(217,118,21)" rx="2" ry="2" />
<text  x="1088.00" y="575.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000056310&gt; (2 samples, 0.42%)</title><rect x="1172.5" y="453" width="5.0" height="15.0" fill="rgb(251,185,23)" rx="2" ry="2" />
<text  x="1175.50" y="463.5" ></text>
</g>
<g >
<title>XGetWindowAttributes&lt;0000000000024e70&gt; (1 samples, 0.21%)</title><rect x="25.0" y="549" width="2.5" height="15.0" fill="rgb(208,194,34)" rx="2" ry="2" />
<text  x="28.00" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1090.0" y="549" width="2.5" height="15.0" fill="rgb(244,184,28)" rx="2" ry="2" />
<text  x="1093.00" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.21%)</title><rect x="630.0" y="469" width="2.5" height="15.0" fill="rgb(234,5,17)" rx="2" ry="2" />
<text  x="633.00" y="479.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.42%)</title><rect x="1172.5" y="213" width="5.0" height="15.0" fill="rgb(238,74,12)" rx="2" ry="2" />
<text  x="1175.50" y="223.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (1 samples, 0.21%)</title><rect x="75.0" y="565" width="2.5" height="15.0" fill="rgb(244,39,12)" rx="2" ry="2" />
<text  x="78.00" y="575.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.21%)</title><rect x="605.0" y="581" width="2.5" height="15.0" fill="rgb(243,217,41)" rx="2" ry="2" />
<text  x="608.00" y="591.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.21%)</title><rect x="1105.0" y="533" width="2.5" height="15.0" fill="rgb(244,180,48)" rx="2" ry="2" />
<text  x="1108.00" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.42%)</title><rect x="1177.5" y="549" width="5.0" height="15.0" fill="rgb(228,178,41)" rx="2" ry="2" />
<text  x="1180.50" y="559.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (1 samples, 0.21%)</title><rect x="27.5" y="389" width="2.5" height="15.0" fill="rgb(216,86,4)" rx="2" ry="2" />
<text  x="30.50" y="399.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3f999 (1 samples, 0.21%)</title><rect x="37.5" y="581" width="2.5" height="15.0" fill="rgb(214,32,33)" rx="2" ry="2" />
<text  x="40.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (10 samples, 2.12%)</title><rect x="1137.5" y="245" width="25.0" height="15.0" fill="rgb(238,27,46)" rx="2" ry="2" />
<text  x="1140.50" y="255.5" >_..</text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.21%)</title><rect x="1177.5" y="149" width="2.5" height="15.0" fill="rgb(246,191,46)" rx="2" ry="2" />
<text  x="1180.50" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sgetc()[inline] (1 samples, 0.21%)</title><rect x="1170.0" y="549" width="2.5" height="15.0" fill="rgb(222,146,31)" rx="2" ry="2" />
<text  x="1173.00" y="559.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.42%)</title><rect x="1177.5" y="405" width="5.0" height="15.0" fill="rgb(229,105,51)" rx="2" ry="2" />
<text  x="1180.50" y="415.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::capacity() const (1 samples, 0.21%)</title><rect x="1107.5" y="485" width="2.5" height="15.0" fill="rgb(241,71,5)" rx="2" ry="2" />
<text  x="1110.50" y="495.5" ></text>
</g>
<g >
<title>int* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.21%)</title><rect x="1112.5" y="437" width="2.5" height="15.0" fill="rgb(211,178,16)" rx="2" ry="2" />
<text  x="1115.50" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="533" width="47.5" height="15.0" fill="rgb(239,183,5)" rx="2" ry="2" />
<text  x="1120.50" y="543.5" >std:..</text>
</g>
<g >
<title>nouveau_pushbuf_data&lt;0000000000004a40&gt; (2 samples, 0.42%)</title><rect x="1075.0" y="501" width="5.0" height="15.0" fill="rgb(250,119,1)" rx="2" ry="2" />
<text  x="1078.00" y="511.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.21%)</title><rect x="305.0" y="581" width="2.5" height="15.0" fill="rgb(244,215,31)" rx="2" ry="2" />
<text  x="308.00" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (7 samples, 1.48%)</title><rect x="877.5" y="485" width="17.5" height="15.0" fill="rgb(221,77,43)" rx="2" ry="2" />
<text  x="880.50" y="495.5" ></text>
</g>
<g >
<title>int* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, std::allocator&lt;int&gt;&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="453" width="2.5" height="15.0" fill="rgb(214,124,46)" rx="2" ry="2" />
<text  x="1115.50" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (4 samples, 0.85%)</title><rect x="557.5" y="517" width="10.0" height="15.0" fill="rgb(230,14,10)" rx="2" ry="2" />
<text  x="560.50" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (44 samples, 9.32%)</title><rect x="440.0" y="565" width="110.0" height="15.0" fill="rgb(231,158,27)" rx="2" ry="2" />
<text  x="443.00" y="575.5" >std::__debug:..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream()[inline] (1 samples, 0.21%)</title><rect x="1115.0" y="533" width="2.5" height="15.0" fill="rgb(205,84,19)" rx="2" ry="2" />
<text  x="1118.00" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.21%)</title><rect x="1172.5" y="69" width="2.5" height="15.0" fill="rgb(229,6,49)" rx="2" ry="2" />
<text  x="1175.50" y="79.5" ></text>
</g>
<g >
<title>_Vector_impl (2 samples, 0.42%)</title><rect x="392.5" y="565" width="5.0" height="15.0" fill="rgb(232,117,49)" rx="2" ry="2" />
<text  x="395.50" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.42%)</title><rect x="1172.5" y="197" width="5.0" height="15.0" fill="rgb(216,95,5)" rx="2" ry="2" />
<text  x="1175.50" y="207.5" ></text>
</g>
<g >
<title>HUF_getErrorName&lt;000000000000de90&gt; (1 samples, 0.21%)</title><rect x="30.0" y="325" width="2.5" height="15.0" fill="rgb(214,164,4)" rx="2" ry="2" />
<text  x="33.00" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.42%)</title><rect x="1085.0" y="549" width="5.0" height="15.0" fill="rgb(231,104,15)" rx="2" ry="2" />
<text  x="1088.00" y="559.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1100.0" y="629" width="2.5" height="15.0" fill="rgb(244,91,43)" rx="2" ry="2" />
<text  x="1103.00" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.42%)</title><rect x="1172.5" y="501" width="5.0" height="15.0" fill="rgb(218,126,48)" rx="2" ry="2" />
<text  x="1175.50" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.42%)</title><rect x="267.5" y="517" width="5.0" height="15.0" fill="rgb(219,95,13)" rx="2" ry="2" />
<text  x="270.50" y="527.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (467 samples, 98.94%)</title><rect x="15.0" y="709" width="1167.5" height="15.0" fill="rgb(207,192,18)" rx="2" ry="2" />
<text  x="18.00" y="719.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (6 samples, 1.27%)</title><rect x="880.0" y="469" width="15.0" height="15.0" fill="rgb(214,30,25)" rx="2" ry="2" />
<text  x="883.00" y="479.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (1 samples, 0.21%)</title><rect x="1165.0" y="565" width="2.5" height="15.0" fill="rgb(234,8,41)" rx="2" ry="2" />
<text  x="1168.00" y="575.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (11 samples, 2.33%)</title><rect x="870.0" y="517" width="27.5" height="15.0" fill="rgb(231,227,35)" rx="2" ry="2" />
<text  x="873.00" y="527.5" >n..</text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;__gnu_debug::_Distance_precision&gt;::type&gt;::__type&gt; std::make_pair&lt;long, __gnu_debug::_Distance_precision&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="325" width="2.5" height="15.0" fill="rgb(250,222,10)" rx="2" ry="2" />
<text  x="1115.50" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.21%)</title><rect x="1100.0" y="565" width="2.5" height="15.0" fill="rgb(230,131,45)" rx="2" ry="2" />
<text  x="1103.00" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;::push_back(OBJ_Lex_triFace const&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="549" width="2.5" height="15.0" fill="rgb(205,183,26)" rx="2" ry="2" />
<text  x="1115.50" y="559.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3b355 (1 samples, 0.21%)</title><rect x="32.5" y="517" width="2.5" height="15.0" fill="rgb(245,46,22)" rx="2" ry="2" />
<text  x="35.50" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="485" width="2.5" height="15.0" fill="rgb(224,183,16)" rx="2" ry="2" />
<text  x="1115.50" y="495.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (2 samples, 0.42%)</title><rect x="1172.5" y="645" width="5.0" height="15.0" fill="rgb(223,162,43)" rx="2" ry="2" />
<text  x="1175.50" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.42%)</title><rect x="1095.0" y="565" width="5.0" height="15.0" fill="rgb(214,147,43)" rx="2" ry="2" />
<text  x="1098.00" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025d70&gt; (9 samples, 1.91%)</title><rect x="1140.0" y="197" width="22.5" height="15.0" fill="rgb(222,166,16)" rx="2" ry="2" />
<text  x="1143.00" y="207.5" >t..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (4 samples, 0.85%)</title><rect x="995.0" y="533" width="10.0" height="15.0" fill="rgb(246,59,53)" rx="2" ry="2" />
<text  x="998.00" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.42%)</title><rect x="1177.5" y="437" width="5.0" height="15.0" fill="rgb(215,158,46)" rx="2" ry="2" />
<text  x="1180.50" y="447.5" ></text>
</g>
<g >
<title>do_realloc[inline] (1 samples, 0.21%)</title><rect x="372.5" y="501" width="2.5" height="15.0" fill="rgb(233,203,0)" rx="2" ry="2" />
<text  x="375.50" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.42%)</title><rect x="1172.5" y="581" width="5.0" height="15.0" fill="rgb(253,12,38)" rx="2" ry="2" />
<text  x="1175.50" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (11 samples, 2.33%)</title><rect x="347.5" y="565" width="27.5" height="15.0" fill="rgb(254,120,39)" rx="2" ry="2" />
<text  x="350.50" y="575.5" >S..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.42%)</title><rect x="1172.5" y="117" width="5.0" height="15.0" fill="rgb(232,222,14)" rx="2" ry="2" />
<text  x="1175.50" y="127.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.21%)</title><rect x="1087.5" y="533" width="2.5" height="15.0" fill="rgb(238,57,29)" rx="2" ry="2" />
<text  x="1090.50" y="543.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.21%)</title><rect x="1085.0" y="485" width="2.5" height="15.0" fill="rgb(217,17,39)" rx="2" ry="2" />
<text  x="1088.00" y="495.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (1 samples, 0.21%)</title><rect x="17.5" y="469" width="2.5" height="15.0" fill="rgb(251,154,19)" rx="2" ry="2" />
<text  x="20.50" y="479.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (2 samples, 0.42%)</title><rect x="1177.5" y="453" width="5.0" height="15.0" fill="rgb(239,30,46)" rx="2" ry="2" />
<text  x="1180.50" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*, unsigned long) (1 samples, 0.21%)</title><rect x="1127.5" y="181" width="2.5" height="15.0" fill="rgb(245,119,35)" rx="2" ry="2" />
<text  x="1130.50" y="191.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33d0&gt; (1 samples, 0.21%)</title><rect x="15.0" y="469" width="2.5" height="15.0" fill="rgb(234,224,48)" rx="2" ry="2" />
<text  x="18.00" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.42%)</title><rect x="1105.0" y="581" width="5.0" height="15.0" fill="rgb(240,129,13)" rx="2" ry="2" />
<text  x="1108.00" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026590&gt; (1 samples, 0.21%)</title><rect x="612.5" y="597" width="2.5" height="15.0" fill="rgb(241,89,2)" rx="2" ry="2" />
<text  x="615.50" y="607.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.85%)</title><rect x="15.0" y="533" width="10.0" height="15.0" fill="rgb(224,121,40)" rx="2" ry="2" />
<text  x="18.00" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (35 samples, 7.42%)</title><rect x="175.0" y="565" width="87.5" height="15.0" fill="rgb(252,43,34)" rx="2" ry="2" />
<text  x="178.00" y="575.5" >std::__deb..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_M_head(std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;) (1 samples, 0.21%)</title><rect x="1120.0" y="293" width="2.5" height="15.0" fill="rgb(245,217,25)" rx="2" ry="2" />
<text  x="1123.00" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;OBJ_Lex_textureCoord, std::allocator&lt;OBJ_Lex_textureCoord&gt; &gt;, std::__cxx1998::vector&lt;OBJ_Lex_textureCoord, std::allocator&lt;OBJ_Lex_textureCoord&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.21%)</title><rect x="1112.5" y="565" width="2.5" height="15.0" fill="rgb(217,187,20)" rx="2" ry="2" />
<text  x="1115.50" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.21%)</title><rect x="1085.0" y="453" width="2.5" height="15.0" fill="rgb(241,87,43)" rx="2" ry="2" />
<text  x="1088.00" y="463.5" ></text>
</g>
<g >
<title>0x00007fcfc6f4077e (1 samples, 0.21%)</title><rect x="35.0" y="565" width="2.5" height="15.0" fill="rgb(226,209,19)" rx="2" ry="2" />
<text  x="38.00" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.21%)</title><rect x="1165.0" y="549" width="2.5" height="15.0" fill="rgb(222,61,30)" rx="2" ry="2" />
<text  x="1168.00" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.42%)</title><rect x="1177.5" y="357" width="5.0" height="15.0" fill="rgb(240,144,16)" rx="2" ry="2" />
<text  x="1180.50" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.21%)</title><rect x="630.0" y="597" width="2.5" height="15.0" fill="rgb(246,224,1)" rx="2" ry="2" />
<text  x="633.00" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.21%)</title><rect x="1100.0" y="581" width="2.5" height="15.0" fill="rgb(245,74,53)" rx="2" ry="2" />
<text  x="1103.00" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.21%)</title><rect x="612.5" y="581" width="2.5" height="15.0" fill="rgb(239,68,7)" rx="2" ry="2" />
<text  x="615.50" y="591.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3c778 (1 samples, 0.21%)</title><rect x="37.5" y="549" width="2.5" height="15.0" fill="rgb(237,155,50)" rx="2" ry="2" />
<text  x="40.50" y="559.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (1 samples, 0.21%)</title><rect x="12.5" y="725" width="2.5" height="15.0" fill="rgb(231,103,12)" rx="2" ry="2" />
<text  x="15.50" y="735.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="630.0" y="453" width="2.5" height="15.0" fill="rgb(209,120,1)" rx="2" ry="2" />
<text  x="633.00" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.42%)</title><rect x="1172.5" y="421" width="5.0" height="15.0" fill="rgb(222,78,53)" rx="2" ry="2" />
<text  x="1175.50" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.42%)</title><rect x="1177.5" y="309" width="5.0" height="15.0" fill="rgb(209,95,31)" rx="2" ry="2" />
<text  x="1180.50" y="319.5" ></text>
</g>
<g >
<title>0x00007fcfc6f40b56 (2 samples, 0.42%)</title><rect x="32.5" y="581" width="5.0" height="15.0" fill="rgb(254,124,36)" rx="2" ry="2" />
<text  x="35.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.21%)</title><rect x="622.5" y="581" width="2.5" height="15.0" fill="rgb(221,29,35)" rx="2" ry="2" />
<text  x="625.50" y="591.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.21%)</title><rect x="17.5" y="309" width="2.5" height="15.0" fill="rgb(229,161,42)" rx="2" ry="2" />
<text  x="20.50" y="319.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.21%)</title><rect x="1127.5" y="197" width="2.5" height="15.0" fill="rgb(210,161,36)" rx="2" ry="2" />
<text  x="1130.50" y="207.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (5 samples, 1.06%)</title><rect x="855.0" y="501" width="12.5" height="15.0" fill="rgb(227,43,15)" rx="2" ry="2" />
<text  x="858.00" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (2 samples, 0.42%)</title><rect x="1080.0" y="453" width="5.0" height="15.0" fill="rgb(221,156,29)" rx="2" ry="2" />
<text  x="1083.00" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="637.5" y="597" width="2.5" height="15.0" fill="rgb(250,189,45)" rx="2" ry="2" />
<text  x="640.50" y="607.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (4 samples, 0.85%)</title><rect x="15.0" y="485" width="10.0" height="15.0" fill="rgb(227,14,13)" rx="2" ry="2" />
<text  x="18.00" y="495.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (1 samples, 0.21%)</title><rect x="1115.0" y="485" width="2.5" height="15.0" fill="rgb(212,102,50)" rx="2" ry="2" />
<text  x="1118.00" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.21%)</title><rect x="1085.0" y="421" width="2.5" height="15.0" fill="rgb(237,50,13)" rx="2" ry="2" />
<text  x="1088.00" y="431.5" ></text>
</g>
<g >
<title>0x00007fcfc6f4b35a (1 samples, 0.21%)</title><rect x="42.5" y="517" width="2.5" height="15.0" fill="rgb(220,9,20)" rx="2" ry="2" />
<text  x="45.50" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.42%)</title><rect x="1172.5" y="277" width="5.0" height="15.0" fill="rgb(242,103,43)" rx="2" ry="2" />
<text  x="1175.50" y="287.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;000000000006a250&gt; (6 samples, 1.27%)</title><rect x="1080.0" y="629" width="15.0" height="15.0" fill="rgb(251,65,2)" rx="2" ry="2" />
<text  x="1083.00" y="639.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f710&gt; (4 samples, 0.85%)</title><rect x="615.0" y="613" width="10.0" height="15.0" fill="rgb(215,59,41)" rx="2" ry="2" />
<text  x="618.00" y="623.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000023880&gt; (27 samples, 5.72%)</title><rect x="1105.0" y="661" width="67.5" height="15.0" fill="rgb(239,101,26)" rx="2" ry="2" />
<text  x="1108.00" y="671.5" >Engine_..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.42%)</title><rect x="1172.5" y="613" width="5.0" height="15.0" fill="rgb(207,170,47)" rx="2" ry="2" />
<text  x="1175.50" y="623.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3bbfe (1 samples, 0.21%)</title><rect x="42.5" y="565" width="2.5" height="15.0" fill="rgb(213,224,13)" rx="2" ry="2" />
<text  x="45.50" y="575.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.21%)</title><rect x="630.0" y="549" width="2.5" height="15.0" fill="rgb(206,162,27)" rx="2" ry="2" />
<text  x="633.00" y="559.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.21%)</title><rect x="30.0" y="501" width="2.5" height="15.0" fill="rgb(217,7,12)" rx="2" ry="2" />
<text  x="33.00" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.42%)</title><rect x="1172.5" y="597" width="5.0" height="15.0" fill="rgb(244,196,3)" rx="2" ry="2" />
<text  x="1175.50" y="607.5" ></text>
</g>
<g >
<title>0x00007fcfc6f4b33f (1 samples, 0.21%)</title><rect x="32.5" y="501" width="2.5" height="15.0" fill="rgb(226,172,46)" rx="2" ry="2" />
<text  x="35.50" y="511.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063370&gt; (1 samples, 0.21%)</title><rect x="607.5" y="597" width="2.5" height="15.0" fill="rgb(245,83,37)" rx="2" ry="2" />
<text  x="610.50" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1097.5" y="501" width="2.5" height="15.0" fill="rgb(240,60,44)" rx="2" ry="2" />
<text  x="1100.50" y="511.5" ></text>
</g>
<g >
<title>do_realloc_with_callback[inline] (1 samples, 0.21%)</title><rect x="37.5" y="453" width="2.5" height="15.0" fill="rgb(252,40,18)" rx="2" ry="2" />
<text  x="40.50" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.42%)</title><rect x="1172.5" y="133" width="5.0" height="15.0" fill="rgb(209,133,2)" rx="2" ry="2" />
<text  x="1175.50" y="143.5" ></text>
</g>
<g >
<title>_XIOError&lt;0000000000042dc0&gt; (1 samples, 0.21%)</title><rect x="25.0" y="485" width="2.5" height="15.0" fill="rgb(207,3,4)" rx="2" ry="2" />
<text  x="28.00" y="495.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (13 samples, 2.75%)</title><rect x="77.5" y="581" width="32.5" height="15.0" fill="rgb(243,2,5)" rx="2" ry="2" />
<text  x="80.50" y="591.5" >SD..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::get_allocator() const (1 samples, 0.21%)</title><rect x="1132.5" y="229" width="2.5" height="15.0" fill="rgb(218,94,3)" rx="2" ry="2" />
<text  x="1135.50" y="239.5" ></text>
</g>
<g >
<title>0x00007fcfc6f36a11 (1 samples, 0.21%)</title><rect x="40.0" y="533" width="2.5" height="15.0" fill="rgb(210,16,7)" rx="2" ry="2" />
<text  x="43.00" y="543.5" ></text>
</g>
<g >
<title>vector (19 samples, 4.03%)</title><rect x="1117.5" y="453" width="47.5" height="15.0" fill="rgb(241,153,39)" rx="2" ry="2" />
<text  x="1120.50" y="463.5" >vector</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.21%)</title><rect x="1177.5" y="165" width="2.5" height="15.0" fill="rgb(242,185,11)" rx="2" ry="2" />
<text  x="1180.50" y="175.5" ></text>
</g>
<g >
<title>_Safe_iterator (15 samples, 3.18%)</title><rect x="1125.0" y="293" width="37.5" height="15.0" fill="rgb(206,49,36)" rx="2" ry="2" />
<text  x="1128.00" y="303.5" >_Sa..</text>
</g>
<g >
<title>0x00007fcfc6f690c3 (1 samples, 0.21%)</title><rect x="40.0" y="565" width="2.5" height="15.0" fill="rgb(223,204,25)" rx="2" ry="2" />
<text  x="43.00" y="575.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000054830&gt; (23 samples, 4.87%)</title><rect x="1110.0" y="597" width="57.5" height="15.0" fill="rgb(247,15,37)" rx="2" ry="2" />
<text  x="1113.00" y="607.5" >OBJ::a..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.42%)</title><rect x="1080.0" y="533" width="5.0" height="15.0" fill="rgb(213,189,12)" rx="2" ry="2" />
<text  x="1083.00" y="543.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::OBJ_Lex_triFace(OBJ_Lex_triFace const&amp;)&lt;000000000004f050&gt; (1 samples, 0.21%)</title><rect x="1112.5" y="501" width="2.5" height="15.0" fill="rgb(223,72,5)" rx="2" ry="2" />
<text  x="1115.50" y="511.5" ></text>
</g>
<g >
<title>nouveau_bufctx_reset&lt;0000000000005ca0&gt; (1 samples, 0.21%)</title><rect x="895.0" y="485" width="2.5" height="15.0" fill="rgb(242,136,52)" rx="2" ry="2" />
<text  x="898.00" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.21%)</title><rect x="300.0" y="533" width="2.5" height="15.0" fill="rgb(232,78,48)" rx="2" ry="2" />
<text  x="303.00" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (17 samples, 3.60%)</title><rect x="220.0" y="549" width="42.5" height="15.0" fill="rgb(236,138,34)" rx="2" ry="2" />
<text  x="223.00" y="559.5" >std:..</text>
</g>
<g >
<title>0x00007fcfc6f3bb4e (1 samples, 0.21%)</title><rect x="32.5" y="533" width="2.5" height="15.0" fill="rgb(235,169,22)" rx="2" ry="2" />
<text  x="35.50" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.42%)</title><rect x="1177.5" y="229" width="5.0" height="15.0" fill="rgb(211,94,39)" rx="2" ry="2" />
<text  x="1180.50" y="239.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.21%)</title><rect x="1087.5" y="501" width="2.5" height="15.0" fill="rgb(233,212,25)" rx="2" ry="2" />
<text  x="1090.50" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.42%)</title><rect x="1172.5" y="325" width="5.0" height="15.0" fill="rgb(241,64,31)" rx="2" ry="2" />
<text  x="1175.50" y="335.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (3 samples, 0.64%)</title><rect x="367.5" y="549" width="7.5" height="15.0" fill="rgb(229,34,18)" rx="2" ry="2" />
<text  x="370.50" y="559.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.21%)</title><rect x="612.5" y="549" width="2.5" height="15.0" fill="rgb(220,158,18)" rx="2" ry="2" />
<text  x="615.50" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.21%)</title><rect x="1167.5" y="501" width="2.5" height="15.0" fill="rgb(222,164,8)" rx="2" ry="2" />
<text  x="1170.50" y="511.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.21%)</title><rect x="17.5" y="453" width="2.5" height="15.0" fill="rgb(237,74,16)" rx="2" ry="2" />
<text  x="20.50" y="463.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000068c20&gt; (420 samples, 88.98%)</title><rect x="50.0" y="645" width="1050.0" height="15.0" fill="rgb(230,1,23)" rx="2" ry="2" />
<text  x="53.00" y="655.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000068c20&gt;</text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.21%)</title><rect x="37.5" y="421" width="2.5" height="15.0" fill="rgb(228,103,30)" rx="2" ry="2" />
<text  x="40.50" y="431.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000082450&gt; (3 samples, 0.64%)</title><rect x="615.0" y="597" width="7.5" height="15.0" fill="rgb(249,151,5)" rx="2" ry="2" />
<text  x="618.00" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1167.5" y="565" width="2.5" height="15.0" fill="rgb(232,134,16)" rx="2" ry="2" />
<text  x="1170.50" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="565" width="2.5" height="15.0" fill="rgb(211,204,42)" rx="2" ry="2" />
<text  x="1113.00" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.21%)</title><rect x="1090.0" y="517" width="2.5" height="15.0" fill="rgb(221,48,36)" rx="2" ry="2" />
<text  x="1093.00" y="527.5" ></text>
</g>
<g >
<title>_Alloc_hider (1 samples, 0.21%)</title><rect x="1092.5" y="437" width="2.5" height="15.0" fill="rgb(225,180,49)" rx="2" ry="2" />
<text  x="1095.50" y="447.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="565" width="2.5" height="15.0" fill="rgb(236,126,53)" rx="2" ry="2" />
<text  x="33.00" y="575.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.21%)</title><rect x="1085.0" y="501" width="2.5" height="15.0" fill="rgb(234,59,48)" rx="2" ry="2" />
<text  x="1088.00" y="511.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1120.0" y="325" width="2.5" height="15.0" fill="rgb(235,20,10)" rx="2" ry="2" />
<text  x="1123.00" y="335.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3b355 (1 samples, 0.21%)</title><rect x="42.5" y="533" width="2.5" height="15.0" fill="rgb(220,153,22)" rx="2" ry="2" />
<text  x="45.50" y="543.5" ></text>
</g>
<g >
<title>do_realloc[inline] (1 samples, 0.21%)</title><rect x="37.5" y="469" width="2.5" height="15.0" fill="rgb(254,93,41)" rx="2" ry="2" />
<text  x="40.50" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.42%)</title><rect x="435.0" y="533" width="5.0" height="15.0" fill="rgb(248,167,35)" rx="2" ry="2" />
<text  x="438.00" y="543.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (45 samples, 9.53%)</title><rect x="967.5" y="549" width="112.5" height="15.0" fill="rgb(252,110,18)" rx="2" ry="2" />
<text  x="970.50" y="559.5" >nouveau_drm_s..</text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.21%)</title><rect x="1110.0" y="389" width="2.5" height="15.0" fill="rgb(231,145,14)" rx="2" ry="2" />
<text  x="1113.00" y="399.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.21%)</title><rect x="515.0" y="533" width="2.5" height="15.0" fill="rgb(214,23,2)" rx="2" ry="2" />
<text  x="518.00" y="543.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.21%)</title><rect x="42.5" y="501" width="2.5" height="15.0" fill="rgb(215,114,53)" rx="2" ry="2" />
<text  x="45.50" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (3 samples, 0.64%)</title><rect x="267.5" y="533" width="7.5" height="15.0" fill="rgb(245,130,19)" rx="2" ry="2" />
<text  x="270.50" y="543.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.21%)</title><rect x="1055.0" y="501" width="2.5" height="15.0" fill="rgb(239,89,7)" rx="2" ry="2" />
<text  x="1058.00" y="511.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.21%)</title><rect x="27.5" y="469" width="2.5" height="15.0" fill="rgb(252,39,41)" rx="2" ry="2" />
<text  x="30.50" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.21%)</title><rect x="1085.0" y="533" width="2.5" height="15.0" fill="rgb(252,1,12)" rx="2" ry="2" />
<text  x="1088.00" y="543.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (1 samples, 0.21%)</title><rect x="640.0" y="629" width="2.5" height="15.0" fill="rgb(222,114,23)" rx="2" ry="2" />
<text  x="643.00" y="639.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003d670&gt; (1 samples, 0.21%)</title><rect x="110.0" y="581" width="2.5" height="15.0" fill="rgb(218,202,8)" rx="2" ry="2" />
<text  x="113.00" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (17 samples, 3.60%)</title><rect x="1122.5" y="309" width="42.5" height="15.0" fill="rgb(254,206,51)" rx="2" ry="2" />
<text  x="1125.50" y="319.5" >std:..</text>
</g>
<g >
<title>std::pair&lt;long, __gnu_debug::_Distance_precision&gt;::pair&lt;long, __gnu_debug::_Distance_precision, true&gt;(long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="309" width="2.5" height="15.0" fill="rgb(226,4,53)" rx="2" ry="2" />
<text  x="1115.50" y="319.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (2 samples, 0.42%)</title><rect x="45.0" y="581" width="5.0" height="15.0" fill="rgb(213,16,50)" rx="2" ry="2" />
<text  x="48.00" y="591.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (1 samples, 0.21%)</title><rect x="27.5" y="549" width="2.5" height="15.0" fill="rgb(250,214,50)" rx="2" ry="2" />
<text  x="30.50" y="559.5" ></text>
</g>
<g >
<title>TexturePNG&amp; std::__get_helper&lt;0ul, TexturePNG&amp;&gt;(std::_Tuple_impl&lt;0ul, TexturePNG&amp;&gt;&amp;) (1 samples, 0.21%)</title><rect x="1120.0" y="277" width="2.5" height="15.0" fill="rgb(207,61,35)" rx="2" ry="2" />
<text  x="1123.00" y="287.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.21%)</title><rect x="1172.5" y="53" width="2.5" height="15.0" fill="rgb(239,8,31)" rx="2" ry="2" />
<text  x="1175.50" y="63.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="549" width="2.5" height="15.0" fill="rgb(230,56,53)" rx="2" ry="2" />
<text  x="33.00" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.42%)</title><rect x="1172.5" y="101" width="5.0" height="15.0" fill="rgb(220,114,13)" rx="2" ry="2" />
<text  x="1175.50" y="111.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.21%)</title><rect x="452.5" y="549" width="2.5" height="15.0" fill="rgb(241,2,45)" rx="2" ry="2" />
<text  x="455.50" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.21%)</title><rect x="1162.5" y="293" width="2.5" height="15.0" fill="rgb(216,224,53)" rx="2" ry="2" />
<text  x="1165.50" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (4 samples, 0.85%)</title><rect x="152.5" y="549" width="10.0" height="15.0" fill="rgb(224,173,30)" rx="2" ry="2" />
<text  x="155.50" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (14 samples, 2.97%)</title><rect x="832.5" y="517" width="35.0" height="15.0" fill="rgb(214,66,40)" rx="2" ry="2" />
<text  x="835.50" y="527.5" >__..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.21%)</title><rect x="610.0" y="565" width="2.5" height="15.0" fill="rgb(212,146,32)" rx="2" ry="2" />
<text  x="613.00" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1092.5" y="549" width="2.5" height="15.0" fill="rgb(222,9,25)" rx="2" ry="2" />
<text  x="1095.50" y="559.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.21%)</title><rect x="637.5" y="501" width="2.5" height="15.0" fill="rgb(226,167,14)" rx="2" ry="2" />
<text  x="640.50" y="511.5" ></text>
</g>
<g >
<title>0x00007fcfc6f49811 (1 samples, 0.21%)</title><rect x="37.5" y="501" width="2.5" height="15.0" fill="rgb(239,113,36)" rx="2" ry="2" />
<text  x="40.50" y="511.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.21%)</title><rect x="630.0" y="565" width="2.5" height="15.0" fill="rgb(230,136,15)" rx="2" ry="2" />
<text  x="633.00" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.21%)</title><rect x="1172.5" y="85" width="2.5" height="15.0" fill="rgb(213,116,13)" rx="2" ry="2" />
<text  x="1175.50" y="95.5" ></text>
</g>
<g >
<title>0x00007fcfc6f39dc6 (1 samples, 0.21%)</title><rect x="40.0" y="549" width="2.5" height="15.0" fill="rgb(228,13,9)" rx="2" ry="2" />
<text  x="43.00" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (2 samples, 0.42%)</title><rect x="1105.0" y="549" width="5.0" height="15.0" fill="rgb(223,84,0)" rx="2" ry="2" />
<text  x="1108.00" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.42%)</title><rect x="677.5" y="581" width="5.0" height="15.0" fill="rgb(218,133,38)" rx="2" ry="2" />
<text  x="680.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.21%)</title><rect x="1090.0" y="501" width="2.5" height="15.0" fill="rgb(230,138,51)" rx="2" ry="2" />
<text  x="1093.00" y="511.5" ></text>
</g>
<g >
<title>readlinkat@@GLIBC_2.4&lt;00000000000f86b0&gt; (1 samples, 0.21%)</title><rect x="35.0" y="501" width="2.5" height="15.0" fill="rgb(226,48,54)" rx="2" ry="2" />
<text  x="38.00" y="511.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (175 samples, 37.08%)</title><rect x="642.5" y="629" width="437.5" height="15.0" fill="rgb(228,102,41)" rx="2" ry="2" />
<text  x="645.50" y="639.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.21%)</title><rect x="1082.5" y="405" width="2.5" height="15.0" fill="rgb(246,6,12)" rx="2" ry="2" />
<text  x="1085.50" y="415.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.42%)</title><rect x="1080.0" y="469" width="5.0" height="15.0" fill="rgb(227,112,17)" rx="2" ry="2" />
<text  x="1083.00" y="479.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.21%)</title><rect x="1107.5" y="501" width="2.5" height="15.0" fill="rgb(229,142,34)" rx="2" ry="2" />
<text  x="1110.50" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.64%)</title><rect x="575.0" y="565" width="7.5" height="15.0" fill="rgb(209,93,35)" rx="2" ry="2" />
<text  x="578.00" y="575.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (226 samples, 47.88%)</title><rect x="50.0" y="613" width="565.0" height="15.0" fill="rgb(236,220,15)" rx="2" ry="2" />
<text  x="53.00" y="623.5" >TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)</text>
</g>
<g >
<title>fgetc (2 samples, 0.42%)</title><rect x="45.0" y="501" width="5.0" height="15.0" fill="rgb(209,32,28)" rx="2" ry="2" />
<text  x="48.00" y="511.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047d40&gt; (61 samples, 12.92%)</title><rect x="112.5" y="581" width="152.5" height="15.0" fill="rgb(205,33,18)" rx="2" ry="2" />
<text  x="115.50" y="591.5" >TexturePNG::getPixe..</text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e2c0&gt; (19 samples, 4.03%)</title><rect x="1117.5" y="581" width="47.5" height="15.0" fill="rgb(221,44,33)" rx="2" ry="2" />
<text  x="1120.50" y="591.5" >Text..</text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (1 samples, 0.21%)</title><rect x="17.5" y="373" width="2.5" height="15.0" fill="rgb(222,123,45)" rx="2" ry="2" />
<text  x="20.50" y="383.5" ></text>
</g>
<g >
<title>~_Safe_sequence_base (2 samples, 0.42%)</title><rect x="1095.0" y="629" width="5.0" height="15.0" fill="rgb(240,198,14)" rx="2" ry="2" />
<text  x="1098.00" y="639.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn(char*, long)[inline] (1 samples, 0.21%)</title><rect x="1170.0" y="501" width="2.5" height="15.0" fill="rgb(224,151,20)" rx="2" ry="2" />
<text  x="1173.00" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.85%)</title><rect x="265.0" y="549" width="10.0" height="15.0" fill="rgb(209,53,23)" rx="2" ry="2" />
<text  x="268.00" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string(int) (1 samples, 0.21%)</title><rect x="635.0" y="613" width="2.5" height="15.0" fill="rgb(219,100,7)" rx="2" ry="2" />
<text  x="638.00" y="623.5" ></text>
</g>
<g >
<title>ZSTD_decodeLiteralsBlock&lt;000000000007f2a0&gt; (1 samples, 0.21%)</title><rect x="30.0" y="389" width="2.5" height="15.0" fill="rgb(250,213,41)" rx="2" ry="2" />
<text  x="33.00" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025a70&gt; (8 samples, 1.69%)</title><rect x="1142.5" y="149" width="20.0" height="15.0" fill="rgb(239,138,24)" rx="2" ry="2" />
<text  x="1145.50" y="159.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (175 samples, 37.08%)</title><rect x="642.5" y="613" width="437.5" height="15.0" fill="rgb(215,135,52)" rx="2" ry="2" />
<text  x="645.50" y="623.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.21%)</title><rect x="1085.0" y="517" width="2.5" height="15.0" fill="rgb(253,30,38)" rx="2" ry="2" />
<text  x="1088.00" y="527.5" ></text>
</g>
<g >
<title>operator/(Vec3d const&amp;, float const&amp;)&lt;0000000000081190&gt; (1 samples, 0.21%)</title><rect x="632.5" y="613" width="2.5" height="15.0" fill="rgb(226,138,25)" rx="2" ry="2" />
<text  x="635.50" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.21%)</title><rect x="637.5" y="485" width="2.5" height="15.0" fill="rgb(227,118,3)" rx="2" ry="2" />
<text  x="640.50" y="495.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.21%)</title><rect x="1085.0" y="469" width="2.5" height="15.0" fill="rgb(209,44,27)" rx="2" ry="2" />
<text  x="1088.00" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.42%)</title><rect x="1172.5" y="485" width="5.0" height="15.0" fill="rgb(233,187,44)" rx="2" ry="2" />
<text  x="1175.50" y="495.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (4 samples, 0.85%)</title><rect x="1172.5" y="661" width="10.0" height="15.0" fill="rgb(249,162,38)" rx="2" ry="2" />
<text  x="1175.50" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (2 samples, 0.42%)</title><rect x="1172.5" y="565" width="5.0" height="15.0" fill="rgb(211,123,32)" rx="2" ry="2" />
<text  x="1175.50" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (9 samples, 1.91%)</title><rect x="582.5" y="565" width="22.5" height="15.0" fill="rgb(250,200,17)" rx="2" ry="2" />
<text  x="585.50" y="575.5" >s..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 1.48%)</title><rect x="32.5" y="613" width="17.5" height="15.0" fill="rgb(254,136,45)" rx="2" ry="2" />
<text  x="35.50" y="623.5" ></text>
</g>
<g >
<title>_Parameter (3 samples, 0.64%)</title><rect x="187.5" y="549" width="7.5" height="15.0" fill="rgb(240,39,4)" rx="2" ry="2" />
<text  x="190.50" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.42%)</title><rect x="1177.5" y="581" width="5.0" height="15.0" fill="rgb(243,221,29)" rx="2" ry="2" />
<text  x="1180.50" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.42%)</title><rect x="1172.5" y="261" width="5.0" height="15.0" fill="rgb(213,185,19)" rx="2" ry="2" />
<text  x="1175.50" y="271.5" ></text>
</g>
<g >
<title>int* std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.21%)</title><rect x="1112.5" y="405" width="2.5" height="15.0" fill="rgb(208,144,5)" rx="2" ry="2" />
<text  x="1115.50" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.42%)</title><rect x="1172.5" y="469" width="5.0" height="15.0" fill="rgb(238,191,31)" rx="2" ry="2" />
<text  x="1175.50" y="479.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (2 samples, 0.42%)</title><rect x="45.0" y="533" width="5.0" height="15.0" fill="rgb(205,201,20)" rx="2" ry="2" />
<text  x="48.00" y="543.5" ></text>
</g>
<g >
<title>Mesh::add3dTriangle(Triangle&amp;)&lt;000000000007be00&gt; (1 samples, 0.21%)</title><rect x="1110.0" y="581" width="2.5" height="15.0" fill="rgb(226,203,28)" rx="2" ry="2" />
<text  x="1113.00" y="591.5" ></text>
</g>
<g >
<title>HUF_decompress4X_hufOnly_wksp_bmi2&lt;0000000000079c00&gt; (1 samples, 0.21%)</title><rect x="30.0" y="373" width="2.5" height="15.0" fill="rgb(240,184,3)" rx="2" ry="2" />
<text  x="33.00" y="383.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.42%)</title><rect x="1172.5" y="437" width="5.0" height="15.0" fill="rgb(231,220,22)" rx="2" ry="2" />
<text  x="1175.50" y="447.5" ></text>
</g>
<g >
<title>int* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt;(__gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;int const*, std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*) (1 samples, 0.21%)</title><rect x="1112.5" y="421" width="2.5" height="15.0" fill="rgb(224,33,18)" rx="2" ry="2" />
<text  x="1115.50" y="431.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="637.5" y="565" width="2.5" height="15.0" fill="rgb(246,137,13)" rx="2" ry="2" />
<text  x="640.50" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.21%)</title><rect x="1172.5" y="37" width="2.5" height="15.0" fill="rgb(235,170,31)" rx="2" ry="2" />
<text  x="1175.50" y="47.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (1 samples, 0.21%)</title><rect x="17.5" y="357" width="2.5" height="15.0" fill="rgb(212,41,31)" rx="2" ry="2" />
<text  x="20.50" y="367.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.42%)</title><rect x="1080.0" y="549" width="5.0" height="15.0" fill="rgb(239,102,51)" rx="2" ry="2" />
<text  x="1083.00" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::SampleAllocation(unsigned long)[inline] (1 samples, 0.21%)</title><rect x="37.5" y="405" width="2.5" height="15.0" fill="rgb(245,59,45)" rx="2" ry="2" />
<text  x="40.50" y="415.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (467 samples, 98.94%)</title><rect x="15.0" y="677" width="1167.5" height="15.0" fill="rgb(251,91,20)" rx="2" ry="2" />
<text  x="18.00" y="687.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.42%)</title><rect x="570.0" y="581" width="5.0" height="15.0" fill="rgb(253,147,44)" rx="2" ry="2" />
<text  x="573.00" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.21%)</title><rect x="277.5" y="565" width="2.5" height="15.0" fill="rgb(231,105,0)" rx="2" ry="2" />
<text  x="280.50" y="575.5" ></text>
</g>
<g >
<title>all (472 samples, 100%)</title><rect x="10.0" y="741" width="1180.0" height="15.0" fill="rgb(224,23,25)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (2 samples, 0.42%)</title><rect x="862.5" y="485" width="5.0" height="15.0" fill="rgb(228,167,33)" rx="2" ry="2" />
<text  x="865.50" y="495.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3b096 (1 samples, 0.21%)</title><rect x="37.5" y="533" width="2.5" height="15.0" fill="rgb(249,74,48)" rx="2" ry="2" />
<text  x="40.50" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (1 samples, 0.21%)</title><rect x="1125.0" y="213" width="2.5" height="15.0" fill="rgb(215,195,32)" rx="2" ry="2" />
<text  x="1128.00" y="223.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sgetc()[inline] (1 samples, 0.21%)</title><rect x="1170.0" y="565" width="2.5" height="15.0" fill="rgb(231,117,32)" rx="2" ry="2" />
<text  x="1173.00" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (3 samples, 0.64%)</title><rect x="1127.5" y="245" width="7.5" height="15.0" fill="rgb(245,89,50)" rx="2" ry="2" />
<text  x="1130.50" y="255.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.42%)</title><rect x="1080.0" y="581" width="5.0" height="15.0" fill="rgb(218,210,42)" rx="2" ry="2" />
<text  x="1083.00" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.42%)</title><rect x="1177.5" y="469" width="5.0" height="15.0" fill="rgb(213,47,35)" rx="2" ry="2" />
<text  x="1180.50" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.42%)</title><rect x="1177.5" y="389" width="5.0" height="15.0" fill="rgb(233,130,12)" rx="2" ry="2" />
<text  x="1180.50" y="399.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.42%)</title><rect x="1080.0" y="485" width="5.0" height="15.0" fill="rgb(236,39,49)" rx="2" ry="2" />
<text  x="1083.00" y="495.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (2 samples, 0.42%)</title><rect x="1172.5" y="629" width="5.0" height="15.0" fill="rgb(222,182,41)" rx="2" ry="2" />
<text  x="1175.50" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 1.48%)</title><rect x="32.5" y="629" width="17.5" height="15.0" fill="rgb(235,192,7)" rx="2" ry="2" />
<text  x="35.50" y="639.5" ></text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (2 samples, 0.42%)</title><rect x="45.0" y="565" width="5.0" height="15.0" fill="rgb(210,25,1)" rx="2" ry="2" />
<text  x="48.00" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.42%)</title><rect x="1095.0" y="597" width="5.0" height="15.0" fill="rgb(224,209,8)" rx="2" ry="2" />
<text  x="1098.00" y="607.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (7 samples, 1.48%)</title><rect x="287.5" y="549" width="17.5" height="15.0" fill="rgb(215,2,19)" rx="2" ry="2" />
<text  x="290.50" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.21%)</title><rect x="1085.0" y="437" width="2.5" height="15.0" fill="rgb(235,222,45)" rx="2" ry="2" />
<text  x="1088.00" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.21%)</title><rect x="1102.5" y="517" width="2.5" height="15.0" fill="rgb(238,138,50)" rx="2" ry="2" />
<text  x="1105.50" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025d10&gt; (9 samples, 1.91%)</title><rect x="1140.0" y="181" width="22.5" height="15.0" fill="rgb(224,32,49)" rx="2" ry="2" />
<text  x="1143.00" y="191.5" >t..</text>
</g>
<g >
<title>vector (1 samples, 0.21%)</title><rect x="1107.5" y="517" width="2.5" height="15.0" fill="rgb(229,225,44)" rx="2" ry="2" />
<text  x="1110.50" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.21%)</title><rect x="630.0" y="581" width="2.5" height="15.0" fill="rgb(220,51,35)" rx="2" ry="2" />
<text  x="633.00" y="591.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.21%)</title><rect x="25.0" y="469" width="2.5" height="15.0" fill="rgb(249,131,9)" rx="2" ry="2" />
<text  x="28.00" y="479.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="637.5" y="517" width="2.5" height="15.0" fill="rgb(221,200,26)" rx="2" ry="2" />
<text  x="640.50" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.21%)</title><rect x="1087.5" y="485" width="2.5" height="15.0" fill="rgb(251,149,11)" rx="2" ry="2" />
<text  x="1090.50" y="495.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.21%)</title><rect x="372.5" y="533" width="2.5" height="15.0" fill="rgb(205,81,25)" rx="2" ry="2" />
<text  x="375.50" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.21%)</title><rect x="1177.5" y="181" width="2.5" height="15.0" fill="rgb(214,178,43)" rx="2" ry="2" />
<text  x="1180.50" y="191.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3bb4e (1 samples, 0.21%)</title><rect x="42.5" y="549" width="2.5" height="15.0" fill="rgb(227,79,9)" rx="2" ry="2" />
<text  x="45.50" y="559.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003c470&gt; (7 samples, 1.48%)</title><rect x="32.5" y="645" width="17.5" height="15.0" fill="rgb(244,76,38)" rx="2" ry="2" />
<text  x="35.50" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.21%)</title><rect x="630.0" y="517" width="2.5" height="15.0" fill="rgb(247,90,24)" rx="2" ry="2" />
<text  x="633.00" y="527.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047d40&gt; (70 samples, 14.83%)</title><rect x="375.0" y="581" width="175.0" height="15.0" fill="rgb(238,211,24)" rx="2" ry="2" />
<text  x="378.00" y="591.5" >TexturePNG::getPixelAt..</text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (467 samples, 98.94%)</title><rect x="15.0" y="693" width="1167.5" height="15.0" fill="rgb(232,192,16)" rx="2" ry="2" />
<text  x="18.00" y="703.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="637.5" y="533" width="2.5" height="15.0" fill="rgb(238,181,7)" rx="2" ry="2" />
<text  x="640.50" y="543.5" ></text>
</g>
<g >
<title>ZSTD_decompressBlock_internal&lt;0000000000082050&gt; (1 samples, 0.21%)</title><rect x="30.0" y="405" width="2.5" height="15.0" fill="rgb(251,124,39)" rx="2" ry="2" />
<text  x="33.00" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.21%)</title><rect x="272.5" y="517" width="2.5" height="15.0" fill="rgb(245,2,6)" rx="2" ry="2" />
<text  x="275.50" y="527.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 1.27%)</title><rect x="15.0" y="597" width="15.0" height="15.0" fill="rgb(249,127,49)" rx="2" ry="2" />
<text  x="18.00" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate(std::allocator&lt;std::__detail::_Hash_node_base*&gt;&amp;, unsigned long) (1 samples, 0.21%)</title><rect x="1175.0" y="85" width="2.5" height="15.0" fill="rgb(251,212,26)" rx="2" ry="2" />
<text  x="1178.00" y="95.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.42%)</title><rect x="1177.5" y="341" width="5.0" height="15.0" fill="rgb(252,50,12)" rx="2" ry="2" />
<text  x="1180.50" y="351.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.42%)</title><rect x="1172.5" y="405" width="5.0" height="15.0" fill="rgb(236,26,32)" rx="2" ry="2" />
<text  x="1175.50" y="415.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (80 samples, 16.95%)</title><rect x="707.5" y="565" width="200.0" height="15.0" fill="rgb(239,187,34)" rx="2" ry="2" />
<text  x="710.50" y="575.5" >__driDriverGetExtensions_d..</text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (15 samples, 3.18%)</title><rect x="137.5" y="565" width="37.5" height="15.0" fill="rgb(248,98,10)" rx="2" ry="2" />
<text  x="140.50" y="575.5" >std..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (7 samples, 1.48%)</title><rect x="587.5" y="549" width="17.5" height="15.0" fill="rgb(211,16,20)" rx="2" ry="2" />
<text  x="590.50" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="565" width="2.5" height="15.0" fill="rgb(230,156,12)" rx="2" ry="2" />
<text  x="1105.50" y="575.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (2 samples, 0.42%)</title><rect x="182.5" y="549" width="5.0" height="15.0" fill="rgb(214,3,51)" rx="2" ry="2" />
<text  x="185.50" y="559.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (1 samples, 0.21%)</title><rect x="27.5" y="517" width="2.5" height="15.0" fill="rgb(238,44,12)" rx="2" ry="2" />
<text  x="30.50" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.42%)</title><rect x="577.5" y="549" width="5.0" height="15.0" fill="rgb(248,178,26)" rx="2" ry="2" />
<text  x="580.50" y="559.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.21%)</title><rect x="25.0" y="453" width="2.5" height="15.0" fill="rgb(243,82,53)" rx="2" ry="2" />
<text  x="28.00" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.42%)</title><rect x="1172.5" y="165" width="5.0" height="15.0" fill="rgb(217,81,7)" rx="2" ry="2" />
<text  x="1175.50" y="175.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_base() (1 samples, 0.21%)</title><rect x="622.5" y="517" width="2.5" height="15.0" fill="rgb(250,15,30)" rx="2" ry="2" />
<text  x="625.50" y="527.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (8 samples, 1.69%)</title><rect x="90.0" y="565" width="20.0" height="15.0" fill="rgb(242,115,29)" rx="2" ry="2" />
<text  x="93.00" y="575.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.85%)</title><rect x="15.0" y="501" width="10.0" height="15.0" fill="rgb(247,46,25)" rx="2" ry="2" />
<text  x="18.00" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.42%)</title><rect x="1177.5" y="245" width="5.0" height="15.0" fill="rgb(228,131,23)" rx="2" ry="2" />
<text  x="1180.50" y="255.5" ></text>
</g>
<g >
<title>nouveau_bufctx_refn&lt;0000000000005d80&gt; (2 samples, 0.42%)</title><rect x="1047.5" y="517" width="5.0" height="15.0" fill="rgb(234,190,44)" rx="2" ry="2" />
<text  x="1050.50" y="527.5" ></text>
</g>
<g >
<title>ZSTD_decompress_usingDDict&lt;00000000000848b0&gt; (1 samples, 0.21%)</title><rect x="30.0" y="437" width="2.5" height="15.0" fill="rgb(236,85,41)" rx="2" ry="2" />
<text  x="33.00" y="447.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::input_iterator_tag) (1 samples, 0.21%)</title><rect x="1130.0" y="197" width="2.5" height="15.0" fill="rgb(230,191,0)" rx="2" ry="2" />
<text  x="1133.00" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.42%)</title><rect x="1177.5" y="597" width="5.0" height="15.0" fill="rgb(209,113,1)" rx="2" ry="2" />
<text  x="1180.50" y="607.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3bf9d (1 samples, 0.21%)</title><rect x="32.5" y="549" width="2.5" height="15.0" fill="rgb(226,12,33)" rx="2" ry="2" />
<text  x="35.50" y="559.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.42%)</title><rect x="1172.5" y="149" width="5.0" height="15.0" fill="rgb(243,51,40)" rx="2" ry="2" />
<text  x="1175.50" y="159.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (10 samples, 2.12%)</title><rect x="195.0" y="549" width="25.0" height="15.0" fill="rgb(230,63,39)" rx="2" ry="2" />
<text  x="198.00" y="559.5" >_..</text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="565" width="47.5" height="15.0" fill="rgb(237,103,23)" rx="2" ry="2" />
<text  x="1120.50" y="575.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (1 samples, 0.21%)</title><rect x="610.0" y="549" width="2.5" height="15.0" fill="rgb(232,45,13)" rx="2" ry="2" />
<text  x="613.00" y="559.5" ></text>
</g>
<g >
<title>~_Safe_unordered_container_base (17 samples, 3.60%)</title><rect x="1122.5" y="325" width="42.5" height="15.0" fill="rgb(212,112,4)" rx="2" ry="2" />
<text  x="1125.50" y="335.5" >~_Sa..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (1 samples, 0.21%)</title><rect x="625.0" y="565" width="2.5" height="15.0" fill="rgb(223,189,49)" rx="2" ry="2" />
<text  x="628.00" y="575.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (4 samples, 0.85%)</title><rect x="897.5" y="533" width="10.0" height="15.0" fill="rgb(244,172,41)" rx="2" ry="2" />
<text  x="900.50" y="543.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1092.5" y="517" width="2.5" height="15.0" fill="rgb(241,24,15)" rx="2" ry="2" />
<text  x="1095.50" y="527.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (1 samples, 0.21%)</title><rect x="1170.0" y="581" width="2.5" height="15.0" fill="rgb(237,6,29)" rx="2" ry="2" />
<text  x="1173.00" y="591.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 1.27%)</title><rect x="1080.0" y="597" width="15.0" height="15.0" fill="rgb(227,214,23)" rx="2" ry="2" />
<text  x="1083.00" y="607.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.42%)</title><rect x="1112.5" y="581" width="5.0" height="15.0" fill="rgb(248,92,39)" rx="2" ry="2" />
<text  x="1115.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.21%)</title><rect x="1087.5" y="517" width="2.5" height="15.0" fill="rgb(236,115,19)" rx="2" ry="2" />
<text  x="1090.50" y="527.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.21%)</title><rect x="1115.0" y="549" width="2.5" height="15.0" fill="rgb(241,159,38)" rx="2" ry="2" />
<text  x="1118.00" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.85%)</title><rect x="15.0" y="549" width="10.0" height="15.0" fill="rgb(239,212,8)" rx="2" ry="2" />
<text  x="18.00" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (61 samples, 12.92%)</title><rect x="755.0" y="549" width="152.5" height="15.0" fill="rgb(211,124,36)" rx="2" ry="2" />
<text  x="758.00" y="559.5" >__driDriverGetExten..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.42%)</title><rect x="1080.0" y="517" width="5.0" height="15.0" fill="rgb(250,136,54)" rx="2" ry="2" />
<text  x="1083.00" y="527.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="437" width="2.5" height="15.0" fill="rgb(219,90,11)" rx="2" ry="2" />
<text  x="1113.00" y="447.5" ></text>
</g>
<g >
<title>0x00007fcfc6f3f5e6 (1 samples, 0.21%)</title><rect x="35.0" y="549" width="2.5" height="15.0" fill="rgb(244,33,3)" rx="2" ry="2" />
<text  x="38.00" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (5 samples, 1.06%)</title><rect x="162.5" y="549" width="12.5" height="15.0" fill="rgb(249,40,31)" rx="2" ry="2" />
<text  x="165.50" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1092.5" y="485" width="2.5" height="15.0" fill="rgb(216,224,7)" rx="2" ry="2" />
<text  x="1095.50" y="495.5" ></text>
</g>
<g >
<title>0x00007fcfc6f43d2a (1 samples, 0.21%)</title><rect x="35.0" y="517" width="2.5" height="15.0" fill="rgb(249,50,1)" rx="2" ry="2" />
<text  x="38.00" y="527.5" ></text>
</g>
<g >
<title>_Parameter (2 samples, 0.42%)</title><rect x="455.0" y="549" width="5.0" height="15.0" fill="rgb(251,189,22)" rx="2" ry="2" />
<text  x="458.00" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;OBJ_Lex_triFace&gt; &gt;::construct&lt;OBJ_Lex_triFace, OBJ_Lex_triFace const&amp;&gt;(std::allocator&lt;OBJ_Lex_triFace&gt;&amp;, OBJ_Lex_triFace*, OBJ_Lex_triFace const&amp;) (1 samples, 0.21%)</title><rect x="1112.5" y="533" width="2.5" height="15.0" fill="rgb(222,208,5)" rx="2" ry="2" />
<text  x="1115.50" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.21%)</title><rect x="630.0" y="501" width="2.5" height="15.0" fill="rgb(220,199,34)" rx="2" ry="2" />
<text  x="633.00" y="511.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.21%)</title><rect x="610.0" y="581" width="2.5" height="15.0" fill="rgb(216,10,48)" rx="2" ry="2" />
<text  x="613.00" y="591.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.42%)</title><rect x="1177.5" y="261" width="5.0" height="15.0" fill="rgb(206,215,23)" rx="2" ry="2" />
<text  x="1180.50" y="271.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.21%)</title><rect x="1110.0" y="469" width="2.5" height="15.0" fill="rgb(205,211,16)" rx="2" ry="2" />
<text  x="1113.00" y="479.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.42%)</title><rect x="1172.5" y="245" width="5.0" height="15.0" fill="rgb(222,8,40)" rx="2" ry="2" />
<text  x="1175.50" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.21%)</title><rect x="1180.0" y="197" width="2.5" height="15.0" fill="rgb(217,162,2)" rx="2" ry="2" />
<text  x="1183.00" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="501" width="47.5" height="15.0" fill="rgb(251,212,36)" rx="2" ry="2" />
<text  x="1120.50" y="511.5" >std:..</text>
</g>
<g >
<title>vector (2 samples, 0.42%)</title><rect x="1172.5" y="549" width="5.0" height="15.0" fill="rgb(205,130,13)" rx="2" ry="2" />
<text  x="1175.50" y="559.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.21%)</title><rect x="612.5" y="533" width="2.5" height="15.0" fill="rgb(218,215,22)" rx="2" ry="2" />
<text  x="615.50" y="543.5" ></text>
</g>
<g >
<title>_XIOError&lt;0000000000042dc0&gt; (1 samples, 0.21%)</title><rect x="25.0" y="501" width="2.5" height="15.0" fill="rgb(211,59,54)" rx="2" ry="2" />
<text  x="28.00" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="549" width="2.5" height="15.0" fill="rgb(222,150,47)" rx="2" ry="2" />
<text  x="1113.00" y="559.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (21 samples, 4.45%)</title><rect x="1005.0" y="533" width="52.5" height="15.0" fill="rgb(212,94,54)" rx="2" ry="2" />
<text  x="1008.00" y="543.5" >nouve..</text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.21%)</title><rect x="1125.0" y="245" width="2.5" height="15.0" fill="rgb(249,206,29)" rx="2" ry="2" />
<text  x="1128.00" y="255.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.21%)</title><rect x="1092.5" y="421" width="2.5" height="15.0" fill="rgb(248,172,52)" rx="2" ry="2" />
<text  x="1095.50" y="431.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.21%)</title><rect x="1125.0" y="165" width="2.5" height="15.0" fill="rgb(217,12,18)" rx="2" ry="2" />
<text  x="1128.00" y="175.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.21%)</title><rect x="1167.5" y="533" width="2.5" height="15.0" fill="rgb(230,180,50)" rx="2" ry="2" />
<text  x="1170.50" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (9 samples, 1.91%)</title><rect x="282.5" y="565" width="22.5" height="15.0" fill="rgb(239,52,48)" rx="2" ry="2" />
<text  x="285.50" y="575.5" >s..</text>
</g>
<g >
<title>read@@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="1170.0" y="485" width="2.5" height="15.0" fill="rgb(224,61,19)" rx="2" ry="2" />
<text  x="1173.00" y="495.5" ></text>
</g>
<g >
<title>tc_realloc (1 samples, 0.21%)</title><rect x="372.5" y="517" width="2.5" height="15.0" fill="rgb(226,116,34)" rx="2" ry="2" />
<text  x="375.50" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.85%)</title><rect x="587.5" y="533" width="10.0" height="15.0" fill="rgb(236,109,10)" rx="2" ry="2" />
<text  x="590.50" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.21%)</title><rect x="285.0" y="549" width="2.5" height="15.0" fill="rgb(245,141,38)" rx="2" ry="2" />
<text  x="288.00" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.21%)</title><rect x="637.5" y="613" width="2.5" height="15.0" fill="rgb(236,21,49)" rx="2" ry="2" />
<text  x="640.50" y="623.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.21%)</title><rect x="17.5" y="341" width="2.5" height="15.0" fill="rgb(236,133,48)" rx="2" ry="2" />
<text  x="20.50" y="351.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="637.5" y="581" width="2.5" height="15.0" fill="rgb(206,136,8)" rx="2" ry="2" />
<text  x="640.50" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.21%)</title><rect x="1102.5" y="629" width="2.5" height="15.0" fill="rgb(234,183,54)" rx="2" ry="2" />
<text  x="1105.50" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 1.06%)</title><rect x="287.5" y="533" width="12.5" height="15.0" fill="rgb(251,143,31)" rx="2" ry="2" />
<text  x="290.50" y="543.5" ></text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (2 samples, 0.42%)</title><rect x="45.0" y="549" width="5.0" height="15.0" fill="rgb(218,94,7)" rx="2" ry="2" />
<text  x="48.00" y="559.5" ></text>
</g>
<g >
<title>readlink@@GLIBC_2.2.5&lt;00000000000f8680&gt; (1 samples, 0.21%)</title><rect x="15.0" y="405" width="2.5" height="15.0" fill="rgb(222,52,2)" rx="2" ry="2" />
<text  x="18.00" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.21%)</title><rect x="1177.5" y="197" width="2.5" height="15.0" fill="rgb(225,185,31)" rx="2" ry="2" />
<text  x="1180.50" y="207.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.21%)</title><rect x="275.0" y="581" width="2.5" height="15.0" fill="rgb(217,196,34)" rx="2" ry="2" />
<text  x="278.00" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.21%)</title><rect x="1177.5" y="117" width="2.5" height="15.0" fill="rgb(207,79,28)" rx="2" ry="2" />
<text  x="1180.50" y="127.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.21%)</title><rect x="1087.5" y="469" width="2.5" height="15.0" fill="rgb(228,68,20)" rx="2" ry="2" />
<text  x="1090.50" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="517" width="47.5" height="15.0" fill="rgb(213,123,1)" rx="2" ry="2" />
<text  x="1120.50" y="527.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (6 samples, 1.27%)</title><rect x="552.5" y="533" width="15.0" height="15.0" fill="rgb(227,146,53)" rx="2" ry="2" />
<text  x="555.50" y="543.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.42%)</title><rect x="1172.5" y="293" width="5.0" height="15.0" fill="rgb(233,157,36)" rx="2" ry="2" />
<text  x="1175.50" y="303.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="533" width="2.5" height="15.0" fill="rgb(206,53,4)" rx="2" ry="2" />
<text  x="33.00" y="543.5" ></text>
</g>
<g >
<title>_Safe_sequence (1 samples, 0.21%)</title><rect x="130.0" y="565" width="2.5" height="15.0" fill="rgb(240,72,42)" rx="2" ry="2" />
<text  x="133.00" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="15.0" y="437" width="2.5" height="15.0" fill="rgb(225,223,0)" rx="2" ry="2" />
<text  x="18.00" y="447.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (1 samples, 0.21%)</title><rect x="640.0" y="613" width="2.5" height="15.0" fill="rgb(217,6,43)" rx="2" ry="2" />
<text  x="643.00" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.21%)</title><rect x="1110.0" y="517" width="2.5" height="15.0" fill="rgb(217,61,54)" rx="2" ry="2" />
<text  x="1113.00" y="527.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;000000000006a310&gt; (1 samples, 0.21%)</title><rect x="1092.5" y="453" width="2.5" height="15.0" fill="rgb(213,37,39)" rx="2" ry="2" />
<text  x="1095.50" y="463.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.21%)</title><rect x="302.5" y="533" width="2.5" height="15.0" fill="rgb(210,200,12)" rx="2" ry="2" />
<text  x="305.50" y="543.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.21%)</title><rect x="1105.0" y="517" width="2.5" height="15.0" fill="rgb(223,82,33)" rx="2" ry="2" />
<text  x="1108.00" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.42%)</title><rect x="1177.5" y="421" width="5.0" height="15.0" fill="rgb(212,179,29)" rx="2" ry="2" />
<text  x="1180.50" y="431.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.42%)</title><rect x="397.5" y="565" width="5.0" height="15.0" fill="rgb(224,31,50)" rx="2" ry="2" />
<text  x="400.50" y="575.5" ></text>
</g>
<g >
<title>nouveau_pushbuf_space&lt;0000000000005630&gt; (3 samples, 0.64%)</title><rect x="1072.5" y="517" width="7.5" height="15.0" fill="rgb(238,175,35)" rx="2" ry="2" />
<text  x="1075.50" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (1 samples, 0.21%)</title><rect x="1105.0" y="501" width="2.5" height="15.0" fill="rgb(252,222,28)" rx="2" ry="2" />
<text  x="1108.00" y="511.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (27 samples, 5.72%)</title><rect x="1105.0" y="613" width="67.5" height="15.0" fill="rgb(206,47,46)" rx="2" ry="2" />
<text  x="1108.00" y="623.5" >OBJ::sp..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.21%)</title><rect x="1090.0" y="533" width="2.5" height="15.0" fill="rgb(232,170,16)" rx="2" ry="2" />
<text  x="1093.00" y="543.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="581" width="2.5" height="15.0" fill="rgb(240,129,4)" rx="2" ry="2" />
<text  x="33.00" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (2 samples, 0.42%)</title><rect x="1052.5" y="517" width="5.0" height="15.0" fill="rgb(223,138,29)" rx="2" ry="2" />
<text  x="1055.50" y="527.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate(unsigned long, void const*) (1 samples, 0.21%)</title><rect x="1180.0" y="181" width="2.5" height="15.0" fill="rgb(245,219,50)" rx="2" ry="2" />
<text  x="1183.00" y="191.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.21%)</title><rect x="32.5" y="485" width="2.5" height="15.0" fill="rgb(251,154,6)" rx="2" ry="2" />
<text  x="35.50" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.42%)</title><rect x="1177.5" y="277" width="5.0" height="15.0" fill="rgb(221,6,3)" rx="2" ry="2" />
<text  x="1180.50" y="287.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.21%)</title><rect x="617.5" y="565" width="2.5" height="15.0" fill="rgb(234,186,23)" rx="2" ry="2" />
<text  x="620.50" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.42%)</title><rect x="1177.5" y="485" width="5.0" height="15.0" fill="rgb(219,46,47)" rx="2" ry="2" />
<text  x="1180.50" y="495.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (2 samples, 0.42%)</title><rect x="1105.0" y="565" width="5.0" height="15.0" fill="rgb(211,87,13)" rx="2" ry="2" />
<text  x="1108.00" y="575.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (1 samples, 0.21%)</title><rect x="17.5" y="389" width="2.5" height="15.0" fill="rgb(237,208,22)" rx="2" ry="2" />
<text  x="20.50" y="399.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="17.5" y="421" width="2.5" height="15.0" fill="rgb(238,7,17)" rx="2" ry="2" />
<text  x="20.50" y="431.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;*, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (1 samples, 0.21%)</title><rect x="1125.0" y="181" width="2.5" height="15.0" fill="rgb(221,46,48)" rx="2" ry="2" />
<text  x="1128.00" y="191.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.21%)</title><rect x="1110.0" y="453" width="2.5" height="15.0" fill="rgb(244,13,53)" rx="2" ry="2" />
<text  x="1113.00" y="463.5" ></text>
</g>
<g >
<title>Engine_3D::Engine_3D() (14 samples, 2.97%)</title><rect x="15.0" y="661" width="35.0" height="15.0" fill="rgb(252,17,17)" rx="2" ry="2" />
<text  x="18.00" y="671.5" >En..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.42%)</title><rect x="170.0" y="533" width="5.0" height="15.0" fill="rgb(222,195,7)" rx="2" ry="2" />
<text  x="173.00" y="543.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.21%)</title><rect x="637.5" y="469" width="2.5" height="15.0" fill="rgb(242,0,37)" rx="2" ry="2" />
<text  x="640.50" y="479.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="1177.5" y="85" width="2.5" height="15.0" fill="rgb(212,69,35)" rx="2" ry="2" />
<text  x="1180.50" y="95.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.21%)</title><rect x="1115.0" y="501" width="2.5" height="15.0" fill="rgb(220,149,9)" rx="2" ry="2" />
<text  x="1118.00" y="511.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.21%)</title><rect x="1115.0" y="517" width="2.5" height="15.0" fill="rgb(241,158,28)" rx="2" ry="2" />
<text  x="1118.00" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.42%)</title><rect x="1172.5" y="309" width="5.0" height="15.0" fill="rgb(231,108,2)" rx="2" ry="2" />
<text  x="1175.50" y="319.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.21%)</title><rect x="1102.5" y="549" width="2.5" height="15.0" fill="rgb(227,167,1)" rx="2" ry="2" />
<text  x="1105.50" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3480&gt; (1 samples, 0.21%)</title><rect x="30.0" y="469" width="2.5" height="15.0" fill="rgb(211,4,32)" rx="2" ry="2" />
<text  x="33.00" y="479.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (19 samples, 4.03%)</title><rect x="1117.5" y="469" width="47.5" height="15.0" fill="rgb(239,135,16)" rx="2" ry="2" />
<text  x="1120.50" y="479.5" >void..</text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (1 samples, 0.21%)</title><rect x="17.5" y="277" width="2.5" height="15.0" fill="rgb(249,209,1)" rx="2" ry="2" />
<text  x="20.50" y="287.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (11 samples, 2.33%)</title><rect x="1135.0" y="261" width="27.5" height="15.0" fill="rgb(239,67,32)" rx="2" ry="2" />
<text  x="1138.00" y="271.5" >s..</text>
</g>
<g >
<title>__dynamic_cast&lt;00000000000a4730&gt;[inline] (1 samples, 0.21%)</title><rect x="1115.0" y="453" width="2.5" height="15.0" fill="rgb(245,206,4)" rx="2" ry="2" />
<text  x="1118.00" y="463.5" ></text>
</g>
<g >
<title>_XReply&lt;0000000000047b60&gt; (1 samples, 0.21%)</title><rect x="25.0" y="517" width="2.5" height="15.0" fill="rgb(252,218,51)" rx="2" ry="2" />
<text  x="28.00" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.42%)</title><rect x="1177.5" y="501" width="5.0" height="15.0" fill="rgb(235,6,47)" rx="2" ry="2" />
<text  x="1180.50" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;0000000000082330&gt; (1 samples, 0.21%)</title><rect x="615.0" y="581" width="2.5" height="15.0" fill="rgb(236,180,13)" rx="2" ry="2" />
<text  x="618.00" y="591.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (27 samples, 5.72%)</title><rect x="1105.0" y="629" width="67.5" height="15.0" fill="rgb(218,62,41)" rx="2" ry="2" />
<text  x="1108.00" y="639.5" >OBJ::OB..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.42%)</title><rect x="1095.0" y="613" width="5.0" height="15.0" fill="rgb(218,166,9)" rx="2" ry="2" />
<text  x="1098.00" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.21%)</title><rect x="1100.0" y="597" width="2.5" height="15.0" fill="rgb(224,199,3)" rx="2" ry="2" />
<text  x="1103.00" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (18 samples, 3.81%)</title><rect x="505.0" y="549" width="45.0" height="15.0" fill="rgb(254,113,53)" rx="2" ry="2" />
<text  x="508.00" y="559.5" >std:..</text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000023a00&gt; (422 samples, 89.41%)</title><rect x="50.0" y="661" width="1055.0" height="15.0" fill="rgb(207,199,22)" rx="2" ry="2" />
<text  x="53.00" y="671.5" >Engine_3D::engine_update()&lt;0000000000023a00&gt;</text>
</g>
</g>
</svg>
