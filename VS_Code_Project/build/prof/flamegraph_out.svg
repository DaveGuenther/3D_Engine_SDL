<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="902.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="885" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="885" > </text>
<g id="frames">
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (5 samples, 0.18%)</title><rect x="361.7" y="645" width="2.2" height="15.0" fill="rgb(250,219,6)" rx="2" ry="2" />
<text  x="364.74" y="655.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (7 samples, 0.25%)</title><rect x="299.6" y="693" width="3.0" height="15.0" fill="rgb(224,225,12)" rx="2" ry="2" />
<text  x="302.57" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1167.4" y="613" width="0.5" height="15.0" fill="rgb(228,140,43)" rx="2" ry="2" />
<text  x="1170.43" y="623.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="297.0" y="645" width="0.4" height="15.0" fill="rgb(237,140,53)" rx="2" ry="2" />
<text  x="300.02" y="655.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1179.8" y="517" width="0.8" height="15.0" fill="rgb(244,120,23)" rx="2" ry="2" />
<text  x="1182.78" y="527.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (60 samples, 2.17%)</title><rect x="1130.8" y="661" width="25.6" height="15.0" fill="rgb(248,157,19)" rx="2" ry="2" />
<text  x="1133.81" y="671.5" >n..</text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000023960&gt; (2,676 samples, 96.57%)</title><rect x="41.1" y="773" width="1139.5" height="15.0" fill="rgb(213,58,51)" rx="2" ry="2" />
<text  x="44.09" y="783.5" >Engine_3D::engine_update()&lt;0000000000023960&gt;</text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1170.8" y="533" width="0.5" height="15.0" fill="rgb(253,2,36)" rx="2" ry="2" />
<text  x="1173.84" y="543.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5&lt;000000000007f650&gt; (1 samples, 0.04%)</title><rect x="41.5" y="661" width="0.4" height="15.0" fill="rgb(246,50,31)" rx="2" ry="2" />
<text  x="44.51" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="1177.7" y="725" width="0.4" height="15.0" fill="rgb(250,183,44)" rx="2" ry="2" />
<text  x="1180.65" y="735.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.04%)</title><rect x="1180.6" y="645" width="0.5" height="15.0" fill="rgb(219,92,35)" rx="2" ry="2" />
<text  x="1183.63" y="655.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.04%)</title><rect x="1173.0" y="581" width="0.4" height="15.0" fill="rgb(242,164,47)" rx="2" ry="2" />
<text  x="1175.97" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1172.5" y="549" width="0.5" height="15.0" fill="rgb(238,194,14)" rx="2" ry="2" />
<text  x="1175.54" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="39.0" y="693" width="0.4" height="15.0" fill="rgb(247,112,14)" rx="2" ry="2" />
<text  x="41.96" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1179.8" y="549" width="0.8" height="15.0" fill="rgb(205,43,54)" rx="2" ry="2" />
<text  x="1182.78" y="559.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (8 samples, 0.29%)</title><rect x="36.0" y="757" width="3.4" height="15.0" fill="rgb(253,19,12)" rx="2" ry="2" />
<text  x="38.98" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="259.5" y="709" width="0.5" height="15.0" fill="rgb(238,60,30)" rx="2" ry="2" />
<text  x="262.54" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (15 samples, 0.54%)</title><rect x="357.5" y="677" width="6.4" height="15.0" fill="rgb(234,155,1)" rx="2" ry="2" />
<text  x="360.48" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.04%)</title><rect x="39.0" y="469" width="0.4" height="15.0" fill="rgb(251,88,13)" rx="2" ry="2" />
<text  x="41.96" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="413.3" y="581" width="0.8" height="15.0" fill="rgb(225,207,53)" rx="2" ry="2" />
<text  x="416.27" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (3 samples, 0.11%)</title><rect x="131.4" y="645" width="1.2" height="15.0" fill="rgb(219,176,4)" rx="2" ry="2" />
<text  x="134.36" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.04%)</title><rect x="1164.4" y="549" width="0.5" height="15.0" fill="rgb(241,156,48)" rx="2" ry="2" />
<text  x="1167.45" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1176.4" y="693" width="0.8" height="15.0" fill="rgb(205,91,24)" rx="2" ry="2" />
<text  x="1179.37" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (30 samples, 1.08%)</title><rect x="686.2" y="613" width="12.8" height="15.0" fill="rgb(214,51,48)" rx="2" ry="2" />
<text  x="689.23" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (3 samples, 0.11%)</title><rect x="1183.6" y="357" width="1.3" height="15.0" fill="rgb(216,228,24)" rx="2" ry="2" />
<text  x="1186.61" y="367.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1189.6" y="597" width="0.4" height="15.0" fill="rgb(207,102,20)" rx="2" ry="2" />
<text  x="1192.57" y="607.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="35.6" y="581" width="0.4" height="15.0" fill="rgb(244,41,53)" rx="2" ry="2" />
<text  x="38.55" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.7" y="197" width="0.9" height="15.0" fill="rgb(247,41,30)" rx="2" ry="2" />
<text  x="1191.72" y="207.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (1 samples, 0.04%)</title><rect x="411.6" y="661" width="0.4" height="15.0" fill="rgb(221,115,7)" rx="2" ry="2" />
<text  x="414.57" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="221.6" y="677" width="0.5" height="15.0" fill="rgb(221,94,41)" rx="2" ry="2" />
<text  x="224.64" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (5 samples, 0.18%)</title><rect x="426.0" y="709" width="2.2" height="15.0" fill="rgb(235,166,13)" rx="2" ry="2" />
<text  x="429.04" y="719.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1189.6" y="197" width="0.4" height="15.0" fill="rgb(246,156,6)" rx="2" ry="2" />
<text  x="1192.57" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (5 samples, 0.18%)</title><rect x="426.0" y="725" width="2.2" height="15.0" fill="rgb(215,133,19)" rx="2" ry="2" />
<text  x="429.04" y="735.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.04%)</title><rect x="1189.6" y="373" width="0.4" height="15.0" fill="rgb(215,41,13)" rx="2" ry="2" />
<text  x="1192.57" y="383.5" ></text>
</g>
<g >
<title>~vector (6 samples, 0.22%)</title><rect x="375.8" y="677" width="2.6" height="15.0" fill="rgb(247,78,33)" rx="2" ry="2" />
<text  x="378.80" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.6" y="581" width="0.5" height="15.0" fill="rgb(206,223,10)" rx="2" ry="2" />
<text  x="1183.63" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;Triangle&gt;::~allocator() (1 samples, 0.04%)</title><rect x="431.2" y="693" width="0.4" height="15.0" fill="rgb(208,130,37)" rx="2" ry="2" />
<text  x="434.15" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (50 samples, 1.80%)</title><rect x="90.5" y="677" width="21.3" height="15.0" fill="rgb(222,75,44)" rx="2" ry="2" />
<text  x="93.48" y="687.5" >s..</text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="1181.5" y="485" width="0.4" height="15.0" fill="rgb(213,62,22)" rx="2" ry="2" />
<text  x="1184.48" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1172.5" y="581" width="0.5" height="15.0" fill="rgb(243,64,17)" rx="2" ry="2" />
<text  x="1175.54" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.04%)</title><rect x="430.3" y="725" width="0.4" height="15.0" fill="rgb(225,189,18)" rx="2" ry="2" />
<text  x="433.30" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="1181.5" y="405" width="0.4" height="15.0" fill="rgb(209,137,51)" rx="2" ry="2" />
<text  x="1184.48" y="415.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.14%)</title><rect x="39.4" y="725" width="1.7" height="15.0" fill="rgb(234,21,13)" rx="2" ry="2" />
<text  x="42.38" y="735.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (8 samples, 0.29%)</title><rect x="36.0" y="725" width="3.4" height="15.0" fill="rgb(208,68,38)" rx="2" ry="2" />
<text  x="38.98" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="421.8" y="693" width="1.3" height="15.0" fill="rgb(219,89,2)" rx="2" ry="2" />
<text  x="424.79" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1167.0" y="645" width="0.4" height="15.0" fill="rgb(223,64,24)" rx="2" ry="2" />
<text  x="1170.00" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="418.8" y="725" width="0.9" height="15.0" fill="rgb(249,88,39)" rx="2" ry="2" />
<text  x="421.81" y="735.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;00000000000747e0&gt; (19 samples, 0.69%)</title><rect x="1180.6" y="757" width="8.1" height="15.0" fill="rgb(237,126,42)" rx="2" ry="2" />
<text  x="1183.63" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.32%)</title><rect x="1164.0" y="661" width="3.9" height="15.0" fill="rgb(242,117,4)" rx="2" ry="2" />
<text  x="1167.02" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (4 samples, 0.14%)</title><rect x="1184.9" y="357" width="1.7" height="15.0" fill="rgb(254,52,33)" rx="2" ry="2" />
<text  x="1187.89" y="367.5" ></text>
</g>
<g >
<title>tc_cfree[inline] (1 samples, 0.04%)</title><rect x="1188.7" y="101" width="0.4" height="15.0" fill="rgb(205,14,42)" rx="2" ry="2" />
<text  x="1191.72" y="111.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1188.3" y="645" width="0.4" height="15.0" fill="rgb(225,63,11)" rx="2" ry="2" />
<text  x="1191.30" y="655.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1181.1" y="693" width="0.4" height="15.0" fill="rgb(225,109,46)" rx="2" ry="2" />
<text  x="1184.06" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="1164.0" y="565" width="0.4" height="15.0" fill="rgb(253,187,25)" rx="2" ry="2" />
<text  x="1167.02" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::input_iterator_tag) (1 samples, 0.04%)</title><rect x="1184.5" y="309" width="0.4" height="15.0" fill="rgb(234,123,9)" rx="2" ry="2" />
<text  x="1187.46" y="319.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (14 samples, 0.51%)</title><rect x="452.0" y="693" width="6.0" height="15.0" fill="rgb(222,209,30)" rx="2" ry="2" />
<text  x="455.02" y="703.5" ></text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (1 samples, 0.04%)</title><rect x="40.7" y="677" width="0.4" height="15.0" fill="rgb(233,73,4)" rx="2" ry="2" />
<text  x="43.66" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.11%)</title><rect x="1179.4" y="613" width="1.2" height="15.0" fill="rgb(221,25,44)" rx="2" ry="2" />
<text  x="1182.35" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1189.6" y="549" width="0.4" height="15.0" fill="rgb(208,54,51)" rx="2" ry="2" />
<text  x="1192.57" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="413.3" y="597" width="0.8" height="15.0" fill="rgb(230,92,6)" rx="2" ry="2" />
<text  x="416.27" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (7 samples, 0.25%)</title><rect x="1167.9" y="661" width="2.9" height="15.0" fill="rgb(243,152,39)" rx="2" ry="2" />
<text  x="1170.86" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::stof(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long*)&lt;0000000000050ee0&gt; (1 samples, 0.04%)</title><rect x="1187.9" y="661" width="0.4" height="15.0" fill="rgb(225,28,50)" rx="2" ry="2" />
<text  x="1190.87" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.04%)</title><rect x="1164.9" y="597" width="0.4" height="15.0" fill="rgb(205,178,27)" rx="2" ry="2" />
<text  x="1167.88" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (19 samples, 0.69%)</title><rect x="690.9" y="597" width="8.1" height="15.0" fill="rgb(213,10,4)" rx="2" ry="2" />
<text  x="693.92" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="112.2" y="661" width="0.4" height="15.0" fill="rgb(209,163,29)" rx="2" ry="2" />
<text  x="115.20" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="677" width="0.5" height="15.0" fill="rgb(227,186,32)" rx="2" ry="2" />
<text  x="433.73" y="687.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (14 samples, 0.51%)</title><rect x="1158.1" y="661" width="5.9" height="15.0" fill="rgb(248,177,8)" rx="2" ry="2" />
<text  x="1161.06" y="671.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (5 samples, 0.18%)</title><rect x="36.0" y="613" width="2.1" height="15.0" fill="rgb(218,57,41)" rx="2" ry="2" />
<text  x="38.98" y="623.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (2 samples, 0.07%)</title><rect x="36.0" y="389" width="0.8" height="15.0" fill="rgb(206,78,40)" rx="2" ry="2" />
<text  x="38.98" y="399.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.7" y="533" width="0.9" height="15.0" fill="rgb(249,203,2)" rx="2" ry="2" />
<text  x="1191.72" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (4 samples, 0.14%)</title><rect x="1165.3" y="645" width="1.7" height="15.0" fill="rgb(214,102,4)" rx="2" ry="2" />
<text  x="1168.30" y="655.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (4 samples, 0.14%)</title><rect x="297.9" y="645" width="1.7" height="15.0" fill="rgb(208,186,29)" rx="2" ry="2" />
<text  x="300.87" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="377.5" y="629" width="0.4" height="15.0" fill="rgb(237,72,20)" rx="2" ry="2" />
<text  x="380.50" y="639.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (2,712 samples, 97.87%)</title><rect x="35.1" y="837" width="1154.9" height="15.0" fill="rgb(254,63,2)" rx="2" ry="2" />
<text  x="38.12" y="847.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="429.0" y="725" width="0.5" height="15.0" fill="rgb(247,17,36)" rx="2" ry="2" />
<text  x="432.03" y="735.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e220&gt; (15 samples, 0.54%)</title><rect x="1181.5" y="693" width="6.4" height="15.0" fill="rgb(238,65,1)" rx="2" ry="2" />
<text  x="1184.48" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="1170.8" y="501" width="0.5" height="15.0" fill="rgb(236,111,31)" rx="2" ry="2" />
<text  x="1173.84" y="511.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (12 samples, 0.43%)</title><rect x="111.8" y="693" width="5.1" height="15.0" fill="rgb(227,53,8)" rx="2" ry="2" />
<text  x="114.78" y="703.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.04%)</title><rect x="1161.5" y="581" width="0.4" height="15.0" fill="rgb(246,174,34)" rx="2" ry="2" />
<text  x="1164.47" y="591.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;0000000000068bd0&gt; (1 samples, 0.04%)</title><rect x="1166.2" y="629" width="0.4" height="15.0" fill="rgb(252,24,46)" rx="2" ry="2" />
<text  x="1169.15" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (546 samples, 19.70%)</title><rect x="898.3" y="661" width="232.5" height="15.0" fill="rgb(254,106,1)" rx="2" ry="2" />
<text  x="901.30" y="671.5" >__driDriverGetExtensions_d3d12..</text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (3 samples, 0.11%)</title><rect x="269.3" y="693" width="1.3" height="15.0" fill="rgb(240,102,25)" rx="2" ry="2" />
<text  x="272.34" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="422.2" y="581" width="0.4" height="15.0" fill="rgb(252,20,7)" rx="2" ry="2" />
<text  x="425.21" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1188.7" y="597" width="0.9" height="15.0" fill="rgb(249,66,46)" rx="2" ry="2" />
<text  x="1191.72" y="607.5" ></text>
</g>
<g >
<title>erand48_r@@GLIBC_2.2.5&lt;000000000003acc0&gt; (1 samples, 0.04%)</title><rect x="35.1" y="773" width="0.5" height="15.0" fill="rgb(240,23,38)" rx="2" ry="2" />
<text  x="38.12" y="783.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047ca0&gt; (68 samples, 2.45%)</title><rect x="270.6" y="693" width="29.0" height="15.0" fill="rgb(251,53,5)" rx="2" ry="2" />
<text  x="273.61" y="703.5" >Te..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1159.8" y="597" width="0.4" height="15.0" fill="rgb(231,204,9)" rx="2" ry="2" />
<text  x="1162.77" y="607.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.07%)</title><rect x="36.0" y="565" width="0.8" height="15.0" fill="rgb(211,19,42)" rx="2" ry="2" />
<text  x="38.98" y="575.5" ></text>
</g>
<g >
<title>0x00007fa7bddd46ee (1 samples, 0.04%)</title><rect x="40.2" y="645" width="0.5" height="15.0" fill="rgb(222,6,22)" rx="2" ry="2" />
<text  x="43.23" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (1 samples, 0.04%)</title><rect x="409.0" y="677" width="0.4" height="15.0" fill="rgb(249,70,16)" rx="2" ry="2" />
<text  x="412.01" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="301.3" y="629" width="0.8" height="15.0" fill="rgb(250,44,3)" rx="2" ry="2" />
<text  x="304.27" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="1164.0" y="549" width="0.4" height="15.0" fill="rgb(234,146,30)" rx="2" ry="2" />
<text  x="1167.02" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="432.0" y="661" width="0.4" height="15.0" fill="rgb(225,34,8)" rx="2" ry="2" />
<text  x="435.01" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (12 samples, 0.43%)</title><rect x="358.8" y="661" width="5.1" height="15.0" fill="rgb(214,33,44)" rx="2" ry="2" />
<text  x="361.76" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="1172.1" y="597" width="0.4" height="15.0" fill="rgb(249,218,44)" rx="2" ry="2" />
<text  x="1175.11" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264f0&gt; (1 samples, 0.04%)</title><rect x="1175.9" y="645" width="0.5" height="15.0" fill="rgb(225,157,14)" rx="2" ry="2" />
<text  x="1178.95" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="1173.4" y="533" width="0.4" height="15.0" fill="rgb(243,102,16)" rx="2" ry="2" />
<text  x="1176.39" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1158.1" y="645" width="0.4" height="15.0" fill="rgb(243,139,35)" rx="2" ry="2" />
<text  x="1161.06" y="655.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.07%)</title><rect x="1188.7" y="661" width="0.9" height="15.0" fill="rgb(222,170,31)" rx="2" ry="2" />
<text  x="1191.72" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="377.1" y="661" width="1.3" height="15.0" fill="rgb(214,35,11)" rx="2" ry="2" />
<text  x="380.07" y="671.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (19 samples, 0.69%)</title><rect x="225.5" y="661" width="8.1" height="15.0" fill="rgb(244,10,48)" rx="2" ry="2" />
<text  x="228.47" y="671.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::put(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, double) const[inline] (1 samples, 0.04%)</title><rect x="41.1" y="709" width="0.4" height="15.0" fill="rgb(246,6,3)" rx="2" ry="2" />
<text  x="44.09" y="719.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.54%)</title><rect x="1157.6" y="693" width="6.4" height="15.0" fill="rgb(245,71,32)" rx="2" ry="2" />
<text  x="1160.64" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="409.4" y="693" width="0.9" height="15.0" fill="rgb(240,63,40)" rx="2" ry="2" />
<text  x="412.44" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="597" width="6.4" height="15.0" fill="rgb(238,133,6)" rx="2" ry="2" />
<text  x="1184.48" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1164.0" y="629" width="1.3" height="15.0" fill="rgb(236,149,49)" rx="2" ry="2" />
<text  x="1167.02" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1189.6" y="645" width="0.4" height="15.0" fill="rgb(221,168,3)" rx="2" ry="2" />
<text  x="1192.57" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1175.9" y="741" width="0.5" height="15.0" fill="rgb(235,187,54)" rx="2" ry="2" />
<text  x="1178.95" y="751.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;*, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (3 samples, 0.11%)</title><rect x="1182.3" y="293" width="1.3" height="15.0" fill="rgb(236,202,23)" rx="2" ry="2" />
<text  x="1185.33" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (7 samples, 0.25%)</title><rect x="1167.9" y="645" width="2.9" height="15.0" fill="rgb(219,103,20)" rx="2" ry="2" />
<text  x="1170.86" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (33 samples, 1.19%)</title><rect x="156.9" y="677" width="14.1" height="15.0" fill="rgb(252,87,34)" rx="2" ry="2" />
<text  x="159.91" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::end() const (1 samples, 0.04%)</title><rect x="1187.4" y="405" width="0.5" height="15.0" fill="rgb(245,100,12)" rx="2" ry="2" />
<text  x="1190.44" y="415.5" ></text>
</g>
<g >
<title>0x00007fa7bddcf355 (2 samples, 0.07%)</title><rect x="39.4" y="645" width="0.8" height="15.0" fill="rgb(242,77,13)" rx="2" ry="2" />
<text  x="42.38" y="655.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (1 samples, 0.04%)</title><rect x="36.8" y="469" width="0.5" height="15.0" fill="rgb(241,12,2)" rx="2" ry="2" />
<text  x="39.83" y="479.5" ></text>
</g>
<g >
<title>~__shared_count (2 samples, 0.07%)</title><rect x="257.8" y="693" width="0.9" height="15.0" fill="rgb(246,94,47)" rx="2" ry="2" />
<text  x="260.84" y="703.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (19 samples, 0.69%)</title><rect x="1180.6" y="725" width="8.1" height="15.0" fill="rgb(239,131,43)" rx="2" ry="2" />
<text  x="1183.63" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="416.7" y="709" width="0.8" height="15.0" fill="rgb(209,11,15)" rx="2" ry="2" />
<text  x="419.68" y="719.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="661" width="0.5" height="15.0" fill="rgb(228,99,42)" rx="2" ry="2" />
<text  x="433.73" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="423.1" y="677" width="0.4" height="15.0" fill="rgb(232,208,19)" rx="2" ry="2" />
<text  x="426.06" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1188.7" y="389" width="0.9" height="15.0" fill="rgb(214,80,45)" rx="2" ry="2" />
<text  x="1191.72" y="399.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.04%)</title><rect x="39.0" y="565" width="0.4" height="15.0" fill="rgb(233,37,37)" rx="2" ry="2" />
<text  x="41.96" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="1174.2" y="549" width="0.5" height="15.0" fill="rgb(214,199,0)" rx="2" ry="2" />
<text  x="1177.24" y="559.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000068840&gt; (4 samples, 0.14%)</title><rect x="1177.2" y="757" width="1.7" height="15.0" fill="rgb(253,71,15)" rx="2" ry="2" />
<text  x="1180.22" y="767.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (4 samples, 0.14%)</title><rect x="93.0" y="661" width="1.7" height="15.0" fill="rgb(217,198,6)" rx="2" ry="2" />
<text  x="96.04" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="259.5" y="661" width="0.5" height="15.0" fill="rgb(210,45,32)" rx="2" ry="2" />
<text  x="262.54" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.07%)</title><rect x="1173.8" y="581" width="0.9" height="15.0" fill="rgb(238,53,11)" rx="2" ry="2" />
<text  x="1176.82" y="591.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.04%)</title><rect x="38.1" y="581" width="0.4" height="15.0" fill="rgb(242,115,28)" rx="2" ry="2" />
<text  x="41.11" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264f0&gt; (2 samples, 0.07%)</title><rect x="1188.7" y="453" width="0.9" height="15.0" fill="rgb(242,52,21)" rx="2" ry="2" />
<text  x="1191.72" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.11%)</title><rect x="224.2" y="661" width="1.3" height="15.0" fill="rgb(237,42,32)" rx="2" ry="2" />
<text  x="227.20" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (22 samples, 0.79%)</title><rect x="81.1" y="661" width="9.4" height="15.0" fill="rgb(240,20,22)" rx="2" ry="2" />
<text  x="84.12" y="671.5" ></text>
</g>
<g >
<title>0x00007fa7bddcfb4e (1 samples, 0.04%)</title><rect x="40.2" y="629" width="0.5" height="15.0" fill="rgb(223,56,0)" rx="2" ry="2" />
<text  x="43.23" y="639.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (27 samples, 0.97%)</title><rect x="853.2" y="645" width="11.5" height="15.0" fill="rgb(254,50,52)" rx="2" ry="2" />
<text  x="856.16" y="655.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1178.5" y="709" width="0.4" height="15.0" fill="rgb(242,125,54)" rx="2" ry="2" />
<text  x="1181.50" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (5 samples, 0.18%)</title><rect x="1118.5" y="597" width="2.1" height="15.0" fill="rgb(248,11,8)" rx="2" ry="2" />
<text  x="1121.46" y="607.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047ca0&gt; (80 samples, 2.89%)</title><rect x="341.7" y="693" width="34.1" height="15.0" fill="rgb(236,3,4)" rx="2" ry="2" />
<text  x="344.73" y="703.5" >Te..</text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt; &gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="41.9" y="693" width="0.5" height="15.0" fill="rgb(227,94,49)" rx="2" ry="2" />
<text  x="44.94" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (1 samples, 0.04%)</title><rect x="412.8" y="677" width="0.5" height="15.0" fill="rgb(217,103,29)" rx="2" ry="2" />
<text  x="415.84" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264f0&gt; (2 samples, 0.07%)</title><rect x="413.3" y="613" width="0.8" height="15.0" fill="rgb(253,65,46)" rx="2" ry="2" />
<text  x="416.27" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (10 samples, 0.36%)</title><rect x="295.3" y="661" width="4.3" height="15.0" fill="rgb(225,123,13)" rx="2" ry="2" />
<text  x="298.31" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (1 samples, 0.04%)</title><rect x="1189.6" y="453" width="0.4" height="15.0" fill="rgb(227,11,5)" rx="2" ry="2" />
<text  x="1192.57" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1159.8" y="581" width="0.4" height="15.0" fill="rgb(250,96,24)" rx="2" ry="2" />
<text  x="1162.77" y="591.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.04%)</title><rect x="1181.1" y="645" width="0.4" height="15.0" fill="rgb(254,93,50)" rx="2" ry="2" />
<text  x="1184.06" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1173.8" y="565" width="0.4" height="15.0" fill="rgb(234,210,39)" rx="2" ry="2" />
<text  x="1176.82" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (597 samples, 21.54%)</title><rect x="598.9" y="645" width="254.3" height="15.0" fill="rgb(234,62,28)" rx="2" ry="2" />
<text  x="601.94" y="655.5" >__driDriverGetExtensions_d3d12&lt;00..</text>
</g>
<g >
<title>0x00007fa7bddd4b56 (1 samples, 0.04%)</title><rect x="40.2" y="661" width="0.5" height="15.0" fill="rgb(223,182,14)" rx="2" ry="2" />
<text  x="43.23" y="671.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.54%)</title><rect x="1157.6" y="677" width="6.4" height="15.0" fill="rgb(206,207,34)" rx="2" ry="2" />
<text  x="1160.64" y="687.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1189.6" y="437" width="0.4" height="15.0" fill="rgb(220,159,0)" rx="2" ry="2" />
<text  x="1192.57" y="447.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="35.6" y="677" width="0.4" height="15.0" fill="rgb(215,114,50)" rx="2" ry="2" />
<text  x="38.55" y="687.5" ></text>
</g>
<g >
<title>InOutRasterizer (1 samples, 0.04%)</title><rect x="260.4" y="709" width="0.4" height="15.0" fill="rgb(250,32,43)" rx="2" ry="2" />
<text  x="263.39" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1171.7" y="581" width="0.4" height="15.0" fill="rgb(221,163,34)" rx="2" ry="2" />
<text  x="1174.69" y="591.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;000000000006a830&gt; (1 samples, 0.04%)</title><rect x="1158.5" y="645" width="0.4" height="15.0" fill="rgb(233,147,53)" rx="2" ry="2" />
<text  x="1161.49" y="655.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5&lt;000000000007e2a0&gt; (1 samples, 0.04%)</title><rect x="41.5" y="613" width="0.4" height="15.0" fill="rgb(234,14,50)" rx="2" ry="2" />
<text  x="44.51" y="623.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="39.0" y="629" width="0.4" height="15.0" fill="rgb(209,3,30)" rx="2" ry="2" />
<text  x="41.96" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1188.7" y="437" width="0.9" height="15.0" fill="rgb(232,155,6)" rx="2" ry="2" />
<text  x="1191.72" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (19 samples, 0.69%)</title><rect x="304.3" y="693" width="8.0" height="15.0" fill="rgb(206,93,25)" rx="2" ry="2" />
<text  x="307.25" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.07%)</title><rect x="1188.7" y="213" width="0.9" height="15.0" fill="rgb(252,116,34)" rx="2" ry="2" />
<text  x="1191.72" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.04%)</title><rect x="38.5" y="549" width="0.5" height="15.0" fill="rgb(231,186,25)" rx="2" ry="2" />
<text  x="41.53" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (25 samples, 0.90%)</title><rect x="330.7" y="693" width="10.6" height="15.0" fill="rgb(227,65,21)" rx="2" ry="2" />
<text  x="333.66" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::end() (1 samples, 0.04%)</title><rect x="1178.9" y="725" width="0.5" height="15.0" fill="rgb(246,117,39)" rx="2" ry="2" />
<text  x="1181.93" y="735.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (11 samples, 0.40%)</title><rect x="94.7" y="661" width="4.7" height="15.0" fill="rgb(225,1,29)" rx="2" ry="2" />
<text  x="97.74" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1163.2" y="597" width="0.4" height="15.0" fill="rgb(217,106,49)" rx="2" ry="2" />
<text  x="1166.17" y="607.5" ></text>
</g>
<g >
<title>glXQueryContext&lt;000000000001a840&gt; (1 samples, 0.04%)</title><rect x="38.1" y="661" width="0.4" height="15.0" fill="rgb(247,126,20)" rx="2" ry="2" />
<text  x="41.11" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.7" y="549" width="0.9" height="15.0" fill="rgb(214,151,13)" rx="2" ry="2" />
<text  x="1191.72" y="559.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.04%)</title><rect x="1187.9" y="613" width="0.4" height="15.0" fill="rgb(230,156,25)" rx="2" ry="2" />
<text  x="1190.87" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(226,63,26)" rx="2" ry="2" />
<text  x="1192.57" y="239.5" ></text>
</g>
<g >
<title>__glDispatchMakeCurrent&lt;0000000000042a60&gt; (1 samples, 0.04%)</title><rect x="38.1" y="629" width="0.4" height="15.0" fill="rgb(248,11,31)" rx="2" ry="2" />
<text  x="41.11" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="430.7" y="565" width="0.5" height="15.0" fill="rgb(215,89,42)" rx="2" ry="2" />
<text  x="433.73" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.04%)</title><rect x="423.1" y="645" width="0.4" height="15.0" fill="rgb(212,138,15)" rx="2" ry="2" />
<text  x="426.06" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1189.6" y="405" width="0.4" height="15.0" fill="rgb(215,194,5)" rx="2" ry="2" />
<text  x="1192.57" y="415.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="410.3" y="677" width="0.4" height="15.0" fill="rgb(252,158,20)" rx="2" ry="2" />
<text  x="413.29" y="687.5" ></text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.04%)</title><rect x="404.8" y="597" width="0.4" height="15.0" fill="rgb(248,62,37)" rx="2" ry="2" />
<text  x="407.75" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (4 samples, 0.14%)</title><rect x="1184.9" y="261" width="1.7" height="15.0" fill="rgb(207,142,25)" rx="2" ry="2" />
<text  x="1187.89" y="271.5" ></text>
</g>
<g >
<title>~_Hashtable (1 samples, 0.04%)</title><rect x="1181.5" y="501" width="0.4" height="15.0" fill="rgb(233,67,2)" rx="2" ry="2" />
<text  x="1184.48" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (14 samples, 0.51%)</title><rect x="1181.9" y="453" width="6.0" height="15.0" fill="rgb(206,30,32)" rx="2" ry="2" />
<text  x="1184.91" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="38.5" y="581" width="0.5" height="15.0" fill="rgb(230,201,25)" rx="2" ry="2" />
<text  x="41.53" y="591.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.22%)</title><rect x="1172.1" y="645" width="2.6" height="15.0" fill="rgb(209,226,20)" rx="2" ry="2" />
<text  x="1175.11" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.8" y="613" width="0.5" height="15.0" fill="rgb(213,192,47)" rx="2" ry="2" />
<text  x="1173.84" y="623.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="36.0" y="421" width="0.8" height="15.0" fill="rgb(207,54,42)" rx="2" ry="2" />
<text  x="38.98" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="409.0" y="693" width="0.4" height="15.0" fill="rgb(205,42,38)" rx="2" ry="2" />
<text  x="412.01" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::empty() const (1 samples, 0.04%)</title><rect x="1180.6" y="597" width="0.5" height="15.0" fill="rgb(226,78,51)" rx="2" ry="2" />
<text  x="1183.63" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Deallocate(void*, unsigned int)[inline] (1 samples, 0.04%)</title><rect x="1188.7" y="53" width="0.4" height="15.0" fill="rgb(223,57,19)" rx="2" ry="2" />
<text  x="1191.72" y="63.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.04%)</title><rect x="420.1" y="709" width="0.4" height="15.0" fill="rgb(222,162,19)" rx="2" ry="2" />
<text  x="423.08" y="719.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_istream()[inline] (1 samples, 0.04%)</title><rect x="1188.3" y="661" width="0.4" height="15.0" fill="rgb(250,94,39)" rx="2" ry="2" />
<text  x="1191.30" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (7 samples, 0.25%)</title><rect x="306.8" y="645" width="3.0" height="15.0" fill="rgb(254,120,5)" rx="2" ry="2" />
<text  x="309.81" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="432.0" y="629" width="0.4" height="15.0" fill="rgb(223,60,24)" rx="2" ry="2" />
<text  x="435.01" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.11%)</title><rect x="1179.4" y="645" width="1.2" height="15.0" fill="rgb(249,179,42)" rx="2" ry="2" />
<text  x="1182.35" y="655.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (1 samples, 0.04%)</title><rect x="1188.3" y="613" width="0.4" height="15.0" fill="rgb(241,22,46)" rx="2" ry="2" />
<text  x="1191.30" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="114.3" y="629" width="0.9" height="15.0" fill="rgb(233,70,36)" rx="2" ry="2" />
<text  x="117.33" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.07%)</title><rect x="1171.3" y="613" width="0.8" height="15.0" fill="rgb(239,180,33)" rx="2" ry="2" />
<text  x="1174.26" y="623.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, char, double) const (1 samples, 0.04%)</title><rect x="41.1" y="693" width="0.4" height="15.0" fill="rgb(229,125,52)" rx="2" ry="2" />
<text  x="44.09" y="703.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="597" width="0.5" height="15.0" fill="rgb(225,36,41)" rx="2" ry="2" />
<text  x="1178.95" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="38.5" y="613" width="0.5" height="15.0" fill="rgb(210,95,9)" rx="2" ry="2" />
<text  x="41.53" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.14%)</title><rect x="1172.1" y="613" width="1.7" height="15.0" fill="rgb(253,181,30)" rx="2" ry="2" />
<text  x="1175.11" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (2 samples, 0.07%)</title><rect x="421.8" y="597" width="0.8" height="15.0" fill="rgb(219,217,4)" rx="2" ry="2" />
<text  x="424.79" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="415.0" y="709" width="0.4" height="15.0" fill="rgb(242,24,22)" rx="2" ry="2" />
<text  x="417.97" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1189.6" y="661" width="0.4" height="15.0" fill="rgb(238,54,1)" rx="2" ry="2" />
<text  x="1192.57" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (8 samples, 0.29%)</title><rect x="1153.0" y="629" width="3.4" height="15.0" fill="rgb(213,120,41)" rx="2" ry="2" />
<text  x="1155.95" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="425.6" y="709" width="0.4" height="15.0" fill="rgb(230,46,21)" rx="2" ry="2" />
<text  x="428.62" y="719.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;)&lt;0000000000080490&gt; (1 samples, 0.04%)</title><rect x="407.7" y="693" width="0.5" height="15.0" fill="rgb(223,9,45)" rx="2" ry="2" />
<text  x="410.73" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="423.1" y="709" width="0.4" height="15.0" fill="rgb(216,6,12)" rx="2" ry="2" />
<text  x="426.06" y="719.5" ></text>
</g>
<g >
<title>~__shared_count (3 samples, 0.11%)</title><rect x="1179.4" y="757" width="1.2" height="15.0" fill="rgb(223,178,35)" rx="2" ry="2" />
<text  x="1182.35" y="767.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="413.3" y="661" width="0.8" height="15.0" fill="rgb(223,184,22)" rx="2" ry="2" />
<text  x="416.27" y="671.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (2,712 samples, 97.87%)</title><rect x="35.1" y="821" width="1154.9" height="15.0" fill="rgb(243,46,35)" rx="2" ry="2" />
<text  x="38.12" y="831.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>__cxxabiv1::__class_type_info::__dyncast_result::__dyncast_result(int)[inline] (1 samples, 0.04%)</title><rect x="1188.3" y="581" width="0.4" height="15.0" fill="rgb(244,74,52)" rx="2" ry="2" />
<text  x="1191.30" y="591.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="428.6" y="693" width="0.4" height="15.0" fill="rgb(236,148,27)" rx="2" ry="2" />
<text  x="431.60" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.07%)</title><rect x="427.3" y="661" width="0.9" height="15.0" fill="rgb(246,199,38)" rx="2" ry="2" />
<text  x="430.32" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="1177.7" y="709" width="0.4" height="15.0" fill="rgb(249,178,0)" rx="2" ry="2" />
<text  x="1180.65" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="358.3" y="661" width="0.5" height="15.0" fill="rgb(213,24,3)" rx="2" ry="2" />
<text  x="361.34" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="1169.1" y="565" width="0.5" height="15.0" fill="rgb(247,104,8)" rx="2" ry="2" />
<text  x="1172.13" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.07%)</title><rect x="40.2" y="709" width="0.9" height="15.0" fill="rgb(227,134,4)" rx="2" ry="2" />
<text  x="43.23" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="38.5" y="693" width="0.5" height="15.0" fill="rgb(205,99,12)" rx="2" ry="2" />
<text  x="41.53" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="412.4" y="629" width="0.4" height="15.0" fill="rgb(248,223,43)" rx="2" ry="2" />
<text  x="415.42" y="639.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (25 samples, 0.90%)</title><rect x="1164.0" y="693" width="10.7" height="15.0" fill="rgb(218,33,41)" rx="2" ry="2" />
<text  x="1167.02" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.07%)</title><rect x="1156.8" y="725" width="0.8" height="15.0" fill="rgb(209,171,26)" rx="2" ry="2" />
<text  x="1159.78" y="735.5" ></text>
</g>
<g >
<title>0x00007fa7bdddf51d (1 samples, 0.04%)</title><rect x="39.8" y="629" width="0.4" height="15.0" fill="rgb(221,50,38)" rx="2" ry="2" />
<text  x="42.81" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.07%)</title><rect x="1188.7" y="277" width="0.9" height="15.0" fill="rgb(246,103,1)" rx="2" ry="2" />
<text  x="1191.72" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="428.2" y="725" width="0.4" height="15.0" fill="rgb(231,166,33)" rx="2" ry="2" />
<text  x="431.17" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (3 samples, 0.11%)</title><rect x="1182.3" y="325" width="1.3" height="15.0" fill="rgb(249,136,28)" rx="2" ry="2" />
<text  x="1185.33" y="335.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="581" width="6.4" height="15.0" fill="rgb(223,172,27)" rx="2" ry="2" />
<text  x="1184.48" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (4 samples, 0.14%)</title><rect x="1184.9" y="325" width="1.7" height="15.0" fill="rgb(254,46,51)" rx="2" ry="2" />
<text  x="1187.89" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1177.2" y="709" width="0.5" height="15.0" fill="rgb(253,163,51)" rx="2" ry="2" />
<text  x="1180.22" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="413.3" y="629" width="0.8" height="15.0" fill="rgb(208,10,39)" rx="2" ry="2" />
<text  x="416.27" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.07%)</title><rect x="1172.5" y="597" width="0.9" height="15.0" fill="rgb(233,143,6)" rx="2" ry="2" />
<text  x="1175.54" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="411.1" y="661" width="0.5" height="15.0" fill="rgb(213,217,1)" rx="2" ry="2" />
<text  x="414.14" y="671.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (2 samples, 0.07%)</title><rect x="36.0" y="549" width="0.8" height="15.0" fill="rgb(208,224,49)" rx="2" ry="2" />
<text  x="38.98" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1168.3" y="597" width="0.8" height="15.0" fill="rgb(249,38,8)" rx="2" ry="2" />
<text  x="1171.28" y="607.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003ac00&gt; (1 samples, 0.04%)</title><rect x="1180.6" y="709" width="0.5" height="15.0" fill="rgb(219,85,0)" rx="2" ry="2" />
<text  x="1183.63" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (10 samples, 0.36%)</title><rect x="1118.0" y="613" width="4.3" height="15.0" fill="rgb(214,28,15)" rx="2" ry="2" />
<text  x="1121.03" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="413.3" y="565" width="0.8" height="15.0" fill="rgb(254,152,21)" rx="2" ry="2" />
<text  x="416.27" y="575.5" ></text>
</g>
<g >
<title>exit@@GLIBC_2.2.5&lt;000000000003af90&gt; (1 samples, 0.04%)</title><rect x="35.1" y="789" width="0.5" height="15.0" fill="rgb(230,131,11)" rx="2" ry="2" />
<text  x="38.12" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1175.9" y="629" width="0.5" height="15.0" fill="rgb(249,223,50)" rx="2" ry="2" />
<text  x="1178.95" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="259.5" y="677" width="0.5" height="15.0" fill="rgb(249,195,53)" rx="2" ry="2" />
<text  x="262.54" y="687.5" ></text>
</g>
<g >
<title>SpinLock::SlowLock() (1 samples, 0.04%)</title><rect x="39.0" y="421" width="0.4" height="15.0" fill="rgb(236,165,9)" rx="2" ry="2" />
<text  x="41.96" y="431.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (23 samples, 0.83%)</title><rect x="204.6" y="661" width="9.8" height="15.0" fill="rgb(238,44,40)" rx="2" ry="2" />
<text  x="207.61" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.04%)</title><rect x="39.0" y="549" width="0.4" height="15.0" fill="rgb(214,150,23)" rx="2" ry="2" />
<text  x="41.96" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="407.7" y="661" width="0.5" height="15.0" fill="rgb(233,123,24)" rx="2" ry="2" />
<text  x="410.73" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1159.3" y="629" width="0.9" height="15.0" fill="rgb(224,212,22)" rx="2" ry="2" />
<text  x="1162.34" y="639.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="426.5" y="629" width="0.4" height="15.0" fill="rgb(224,140,49)" rx="2" ry="2" />
<text  x="429.47" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() (1 samples, 0.04%)</title><rect x="1167.4" y="597" width="0.5" height="15.0" fill="rgb(205,155,4)" rx="2" ry="2" />
<text  x="1170.43" y="607.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (1 samples, 0.04%)</title><rect x="36.8" y="437" width="0.5" height="15.0" fill="rgb(228,51,42)" rx="2" ry="2" />
<text  x="39.83" y="447.5" ></text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (1 samples, 0.04%)</title><rect x="40.7" y="661" width="0.4" height="15.0" fill="rgb(248,112,28)" rx="2" ry="2" />
<text  x="43.66" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (5 samples, 0.18%)</title><rect x="300.4" y="645" width="2.2" height="15.0" fill="rgb(217,176,6)" rx="2" ry="2" />
<text  x="303.42" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1173.4" y="581" width="0.4" height="15.0" fill="rgb(224,64,30)" rx="2" ry="2" />
<text  x="1176.39" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.04%)</title><rect x="423.1" y="661" width="0.4" height="15.0" fill="rgb(241,160,16)" rx="2" ry="2" />
<text  x="426.06" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="1181.5" y="437" width="0.4" height="15.0" fill="rgb(243,222,37)" rx="2" ry="2" />
<text  x="1184.48" y="447.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.04%)</title><rect x="302.1" y="629" width="0.5" height="15.0" fill="rgb(250,121,13)" rx="2" ry="2" />
<text  x="305.13" y="639.5" ></text>
</g>
<g >
<title>_Safe_sequence (4 samples, 0.14%)</title><rect x="73.9" y="677" width="1.7" height="15.0" fill="rgb(220,98,43)" rx="2" ry="2" />
<text  x="76.88" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (10 samples, 0.36%)</title><rect x="371.1" y="661" width="4.3" height="15.0" fill="rgb(243,48,32)" rx="2" ry="2" />
<text  x="374.11" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1188.7" y="373" width="0.9" height="15.0" fill="rgb(226,51,34)" rx="2" ry="2" />
<text  x="1191.72" y="383.5" ></text>
</g>
<g >
<title>tc_cfree[inline] (1 samples, 0.04%)</title><rect x="412.8" y="597" width="0.5" height="15.0" fill="rgb(205,115,36)" rx="2" ry="2" />
<text  x="415.84" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1177.2" y="741" width="0.5" height="15.0" fill="rgb(233,145,20)" rx="2" ry="2" />
<text  x="1180.22" y="751.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.04%)</title><rect x="1188.3" y="629" width="0.4" height="15.0" fill="rgb(207,147,0)" rx="2" ry="2" />
<text  x="1191.30" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1178.9" y="757" width="0.5" height="15.0" fill="rgb(252,132,9)" rx="2" ry="2" />
<text  x="1181.93" y="767.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="413.7" y="549" width="0.4" height="15.0" fill="rgb(220,155,37)" rx="2" ry="2" />
<text  x="416.70" y="559.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000054740&gt; (17 samples, 0.61%)</title><rect x="1181.1" y="709" width="7.2" height="15.0" fill="rgb(221,33,48)" rx="2" ry="2" />
<text  x="1184.06" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="1175.1" y="741" width="0.8" height="15.0" fill="rgb(214,82,35)" rx="2" ry="2" />
<text  x="1178.10" y="751.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.07%)</title><rect x="1188.7" y="325" width="0.9" height="15.0" fill="rgb(229,101,24)" rx="2" ry="2" />
<text  x="1191.72" y="335.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="418.4" y="693" width="0.4" height="15.0" fill="rgb(242,40,1)" rx="2" ry="2" />
<text  x="421.38" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="419.7" y="709" width="0.4" height="15.0" fill="rgb(234,208,4)" rx="2" ry="2" />
<text  x="422.66" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long) (1 samples, 0.04%)</title><rect x="412.8" y="645" width="0.5" height="15.0" fill="rgb(227,12,13)" rx="2" ry="2" />
<text  x="415.84" y="655.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (4 samples, 0.14%)</title><rect x="1184.9" y="341" width="1.7" height="15.0" fill="rgb(211,182,48)" rx="2" ry="2" />
<text  x="1187.89" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (3 samples, 0.11%)</title><rect x="130.1" y="645" width="1.3" height="15.0" fill="rgb(240,3,52)" rx="2" ry="2" />
<text  x="133.09" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="35.6" y="693" width="0.4" height="15.0" fill="rgb(217,51,40)" rx="2" ry="2" />
<text  x="38.55" y="703.5" ></text>
</g>
<g >
<title>~vector (12 samples, 0.43%)</title><rect x="111.8" y="677" width="5.1" height="15.0" fill="rgb(223,205,38)" rx="2" ry="2" />
<text  x="114.78" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.04%)</title><rect x="411.6" y="629" width="0.4" height="15.0" fill="rgb(246,191,26)" rx="2" ry="2" />
<text  x="414.57" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (4 samples, 0.14%)</title><rect x="310.6" y="645" width="1.7" height="15.0" fill="rgb(231,123,7)" rx="2" ry="2" />
<text  x="313.64" y="655.5" ></text>
</g>
<g >
<title>_Node_const_iterator (2 samples, 0.07%)</title><rect x="1175.1" y="693" width="0.8" height="15.0" fill="rgb(237,142,32)" rx="2" ry="2" />
<text  x="1178.10" y="703.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1181.1" y="613" width="0.4" height="15.0" fill="rgb(219,193,6)" rx="2" ry="2" />
<text  x="1184.06" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (2 samples, 0.07%)</title><rect x="119.4" y="677" width="0.9" height="15.0" fill="rgb(231,134,53)" rx="2" ry="2" />
<text  x="122.44" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (38 samples, 1.37%)</title><rect x="1140.2" y="645" width="16.2" height="15.0" fill="rgb(210,33,23)" rx="2" ry="2" />
<text  x="1143.18" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.8" y="581" width="0.5" height="15.0" fill="rgb(236,139,22)" rx="2" ry="2" />
<text  x="1173.84" y="591.5" ></text>
</g>
<g >
<title>_Safe_sequence_base (1 samples, 0.04%)</title><rect x="418.4" y="725" width="0.4" height="15.0" fill="rgb(231,193,0)" rx="2" ry="2" />
<text  x="421.38" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (12 samples, 0.43%)</title><rect x="190.1" y="661" width="5.1" height="15.0" fill="rgb(234,62,5)" rx="2" ry="2" />
<text  x="193.13" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::allocate(unsigned long, void const*) (3 samples, 0.11%)</title><rect x="1182.3" y="309" width="1.3" height="15.0" fill="rgb(208,127,49)" rx="2" ry="2" />
<text  x="1185.33" y="319.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.04%)</title><rect x="373.2" y="645" width="0.5" height="15.0" fill="rgb(208,173,12)" rx="2" ry="2" />
<text  x="376.24" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1188.7" y="421" width="0.9" height="15.0" fill="rgb(240,158,15)" rx="2" ry="2" />
<text  x="1191.72" y="431.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1164.0" y="517" width="0.4" height="15.0" fill="rgb(241,212,11)" rx="2" ry="2" />
<text  x="1167.02" y="527.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (3 samples, 0.11%)</title><rect x="103.7" y="645" width="1.3" height="15.0" fill="rgb(235,134,18)" rx="2" ry="2" />
<text  x="106.68" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="41.9" y="741" width="0.5" height="15.0" fill="rgb(212,55,45)" rx="2" ry="2" />
<text  x="44.94" y="751.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;00000000000237e0&gt; (19 samples, 0.69%)</title><rect x="1180.6" y="773" width="8.1" height="15.0" fill="rgb(220,88,19)" rx="2" ry="2" />
<text  x="1183.63" y="783.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (22 samples, 0.79%)</title><rect x="331.9" y="677" width="9.4" height="15.0" fill="rgb(205,10,45)" rx="2" ry="2" />
<text  x="334.93" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (7 samples, 0.25%)</title><rect x="187.1" y="661" width="3.0" height="15.0" fill="rgb(253,130,1)" rx="2" ry="2" />
<text  x="190.15" y="671.5" ></text>
</g>
<g >
<title>~vector (7 samples, 0.25%)</title><rect x="216.1" y="677" width="3.0" height="15.0" fill="rgb(211,180,21)" rx="2" ry="2" />
<text  x="219.11" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="1178.1" y="693" width="0.4" height="15.0" fill="rgb(245,206,6)" rx="2" ry="2" />
<text  x="1181.08" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063910&gt; (174 samples, 6.28%)</title><rect x="312.8" y="709" width="74.1" height="15.0" fill="rgb(229,97,54)" rx="2" ry="2" />
<text  x="315.77" y="719.5" >Texturem..</text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.04%)</title><rect x="1178.1" y="629" width="0.4" height="15.0" fill="rgb(246,119,3)" rx="2" ry="2" />
<text  x="1181.08" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.04%)</title><rect x="39.0" y="485" width="0.4" height="15.0" fill="rgb(223,164,34)" rx="2" ry="2" />
<text  x="41.96" y="495.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047ca0&gt; (126 samples, 4.55%)</title><rect x="58.1" y="693" width="53.7" height="15.0" fill="rgb(217,124,35)" rx="2" ry="2" />
<text  x="61.12" y="703.5" >Textu..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="39.0" y="501" width="0.4" height="15.0" fill="rgb(247,4,5)" rx="2" ry="2" />
<text  x="41.96" y="511.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (1 samples, 0.04%)</title><rect x="38.1" y="597" width="0.4" height="15.0" fill="rgb(231,119,49)" rx="2" ry="2" />
<text  x="41.11" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1167.0" y="517" width="0.4" height="15.0" fill="rgb(220,96,27)" rx="2" ry="2" />
<text  x="1170.00" y="527.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1167.0" y="581" width="0.4" height="15.0" fill="rgb(246,116,7)" rx="2" ry="2" />
<text  x="1170.00" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="1160.2" y="629" width="0.8" height="15.0" fill="rgb(245,73,14)" rx="2" ry="2" />
<text  x="1163.19" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="309.8" y="645" width="0.8" height="15.0" fill="rgb(247,143,30)" rx="2" ry="2" />
<text  x="312.79" y="655.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.04%)</title><rect x="312.3" y="693" width="0.5" height="15.0" fill="rgb(252,7,12)" rx="2" ry="2" />
<text  x="315.35" y="703.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="432.0" y="645" width="0.4" height="15.0" fill="rgb(205,96,24)" rx="2" ry="2" />
<text  x="435.01" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (4 samples, 0.14%)</title><rect x="1184.9" y="293" width="1.7" height="15.0" fill="rgb(231,131,27)" rx="2" ry="2" />
<text  x="1187.89" y="303.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="259.5" y="693" width="0.5" height="15.0" fill="rgb(239,194,34)" rx="2" ry="2" />
<text  x="262.54" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (8 samples, 0.29%)</title><rect x="113.5" y="645" width="3.4" height="15.0" fill="rgb(218,179,12)" rx="2" ry="2" />
<text  x="116.48" y="655.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;00000000000664d0&gt; (62 samples, 2.24%)</title><rect x="405.2" y="741" width="26.4" height="15.0" fill="rgb(210,85,31)" rx="2" ry="2" />
<text  x="408.18" y="751.5" >R..</text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;0000000000010590&gt; (1 samples, 0.04%)</title><rect x="1161.5" y="565" width="0.4" height="15.0" fill="rgb(214,127,30)" rx="2" ry="2" />
<text  x="1164.47" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.04%)</title><rect x="412.4" y="661" width="0.4" height="15.0" fill="rgb(233,1,40)" rx="2" ry="2" />
<text  x="415.42" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1170.8" y="549" width="0.5" height="15.0" fill="rgb(246,99,16)" rx="2" ry="2" />
<text  x="1173.84" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (4 samples, 0.14%)</title><rect x="1184.9" y="277" width="1.7" height="15.0" fill="rgb(218,134,45)" rx="2" ry="2" />
<text  x="1187.89" y="287.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1172.5" y="533" width="0.5" height="15.0" fill="rgb(210,106,17)" rx="2" ry="2" />
<text  x="1175.54" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (14 samples, 0.51%)</title><rect x="1181.9" y="501" width="6.0" height="15.0" fill="rgb(248,97,19)" rx="2" ry="2" />
<text  x="1184.91" y="511.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (20 samples, 0.72%)</title><rect x="291.1" y="677" width="8.5" height="15.0" fill="rgb(233,53,43)" rx="2" ry="2" />
<text  x="294.05" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="432.0" y="677" width="0.4" height="15.0" fill="rgb(216,110,8)" rx="2" ry="2" />
<text  x="435.01" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1177.2" y="645" width="0.5" height="15.0" fill="rgb(239,146,48)" rx="2" ry="2" />
<text  x="1180.22" y="655.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.04%)</title><rect x="1188.7" y="85" width="0.4" height="15.0" fill="rgb(224,23,13)" rx="2" ry="2" />
<text  x="1191.72" y="95.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="35.1" y="757" width="0.5" height="15.0" fill="rgb(227,93,15)" rx="2" ry="2" />
<text  x="38.12" y="767.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="533" width="6.4" height="15.0" fill="rgb(235,16,39)" rx="2" ry="2" />
<text  x="1184.48" y="543.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000031790&gt; (1 samples, 0.04%)</title><rect x="41.9" y="757" width="0.5" height="15.0" fill="rgb(235,124,46)" rx="2" ry="2" />
<text  x="44.94" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.04%)</title><rect x="1169.1" y="597" width="0.5" height="15.0" fill="rgb(212,153,34)" rx="2" ry="2" />
<text  x="1172.13" y="607.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="386.4" y="645" width="0.5" height="15.0" fill="rgb(237,18,4)" rx="2" ry="2" />
<text  x="389.44" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1157.6" y="645" width="0.5" height="15.0" fill="rgb(219,196,30)" rx="2" ry="2" />
<text  x="1160.64" y="655.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="1164.4" y="533" width="0.5" height="15.0" fill="rgb(243,118,19)" rx="2" ry="2" />
<text  x="1167.45" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (1 samples, 0.04%)</title><rect x="411.6" y="645" width="0.4" height="15.0" fill="rgb(249,189,36)" rx="2" ry="2" />
<text  x="414.57" y="655.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="36.8" y="565" width="0.5" height="15.0" fill="rgb(253,212,49)" rx="2" ry="2" />
<text  x="39.83" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.11%)</title><rect x="1179.4" y="661" width="1.2" height="15.0" fill="rgb(239,115,34)" rx="2" ry="2" />
<text  x="1182.35" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,701 samples, 61.39%)</title><rect x="432.0" y="741" width="724.4" height="15.0" fill="rgb(222,170,11)" rx="2" ry="2" />
<text  x="435.01" y="751.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="613" width="6.4" height="15.0" fill="rgb(206,174,40)" rx="2" ry="2" />
<text  x="1184.48" y="623.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1161.0" y="597" width="0.5" height="15.0" fill="rgb(250,125,31)" rx="2" ry="2" />
<text  x="1164.04" y="607.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="432.4" y="645" width="0.5" height="15.0" fill="rgb(206,192,35)" rx="2" ry="2" />
<text  x="435.43" y="655.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (19 samples, 0.69%)</title><rect x="1180.6" y="741" width="8.1" height="15.0" fill="rgb(242,221,2)" rx="2" ry="2" />
<text  x="1183.63" y="751.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="431.2" y="709" width="0.4" height="15.0" fill="rgb(206,56,39)" rx="2" ry="2" />
<text  x="434.15" y="719.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (3 samples, 0.11%)</title><rect x="256.6" y="693" width="1.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="259.56" y="703.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.07%)</title><rect x="36.0" y="437" width="0.8" height="15.0" fill="rgb(227,87,23)" rx="2" ry="2" />
<text  x="38.98" y="447.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1160.2" y="613" width="0.4" height="15.0" fill="rgb(240,26,39)" rx="2" ry="2" />
<text  x="1163.19" y="623.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (1 samples, 0.04%)</title><rect x="36.8" y="453" width="0.5" height="15.0" fill="rgb(214,218,27)" rx="2" ry="2" />
<text  x="39.83" y="463.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="409.4" y="677" width="0.9" height="15.0" fill="rgb(241,108,23)" rx="2" ry="2" />
<text  x="412.44" y="687.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (3 samples, 0.11%)</title><rect x="421.8" y="645" width="1.3" height="15.0" fill="rgb(217,95,16)" rx="2" ry="2" />
<text  x="424.79" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060320&gt; (1 samples, 0.04%)</title><rect x="408.2" y="709" width="0.4" height="15.0" fill="rgb(239,1,1)" rx="2" ry="2" />
<text  x="411.16" y="719.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (40 samples, 1.44%)</title><rect x="1157.6" y="709" width="17.1" height="15.0" fill="rgb(231,199,19)" rx="2" ry="2" />
<text  x="1160.64" y="719.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;0000000000080230&gt; (2 samples, 0.07%)</title><rect x="416.7" y="725" width="0.8" height="15.0" fill="rgb(251,123,31)" rx="2" ry="2" />
<text  x="419.68" y="735.5" ></text>
</g>
<g >
<title>std::__convert_from_v(__locale_struct* const&amp;, char*, int, char const*, ...)&lt;00000000000f7770&gt; (1 samples, 0.04%)</title><rect x="41.1" y="677" width="0.4" height="15.0" fill="rgb(241,83,7)" rx="2" ry="2" />
<text  x="44.09" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.04%)</title><rect x="412.4" y="677" width="0.4" height="15.0" fill="rgb(247,152,40)" rx="2" ry="2" />
<text  x="415.42" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1158.9" y="613" width="0.4" height="15.0" fill="rgb(241,226,25)" rx="2" ry="2" />
<text  x="1161.91" y="623.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="415.8" y="709" width="0.5" height="15.0" fill="rgb(205,111,35)" rx="2" ry="2" />
<text  x="418.82" y="719.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (31 samples, 1.12%)</title><rect x="10.0" y="837" width="13.2" height="15.0" fill="rgb(219,25,33)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.04%)</title><rect x="1184.0" y="309" width="0.5" height="15.0" fill="rgb(241,152,3)" rx="2" ry="2" />
<text  x="1187.04" y="319.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (362 samples, 13.06%)</title><rect x="699.0" y="613" width="154.2" height="15.0" fill="rgb(231,124,25)" rx="2" ry="2" />
<text  x="702.01" y="623.5" >nouveau_drm_screen_..</text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (14 samples, 0.51%)</title><rect x="1181.9" y="469" width="6.0" height="15.0" fill="rgb(218,168,38)" rx="2" ry="2" />
<text  x="1184.91" y="479.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;00000000000806a0&gt; (1 samples, 0.04%)</title><rect x="407.7" y="709" width="0.5" height="15.0" fill="rgb(228,120,12)" rx="2" ry="2" />
<text  x="410.73" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="409.0" y="709" width="0.4" height="15.0" fill="rgb(239,75,12)" rx="2" ry="2" />
<text  x="412.01" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="429.5" y="693" width="0.8" height="15.0" fill="rgb(222,154,44)" rx="2" ry="2" />
<text  x="432.45" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="1172.1" y="581" width="0.4" height="15.0" fill="rgb(222,4,19)" rx="2" ry="2" />
<text  x="1175.11" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1189.6" y="725" width="0.4" height="15.0" fill="rgb(230,169,54)" rx="2" ry="2" />
<text  x="1192.57" y="735.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="409.9" y="645" width="0.4" height="15.0" fill="rgb(229,137,17)" rx="2" ry="2" />
<text  x="412.86" y="655.5" ></text>
</g>
<g >
<title>_IO_enable_locks@@GLIBC_PRIVATE&lt;0000000000080940&gt; (1 samples, 0.04%)</title><rect x="41.1" y="645" width="0.4" height="15.0" fill="rgb(242,42,53)" rx="2" ry="2" />
<text  x="44.09" y="655.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (28 samples, 1.01%)</title><rect x="23.2" y="837" width="11.9" height="15.0" fill="rgb(230,103,7)" rx="2" ry="2" />
<text  x="26.20" y="847.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1173.4" y="597" width="0.4" height="15.0" fill="rgb(225,10,51)" rx="2" ry="2" />
<text  x="1176.39" y="607.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051680&gt; (1 samples, 0.04%)</title><rect x="1181.1" y="677" width="0.4" height="15.0" fill="rgb(242,25,42)" rx="2" ry="2" />
<text  x="1184.06" y="687.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1160.2" y="597" width="0.4" height="15.0" fill="rgb(233,48,14)" rx="2" ry="2" />
<text  x="1163.19" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="303.8" y="677" width="0.5" height="15.0" fill="rgb(246,19,40)" rx="2" ry="2" />
<text  x="306.83" y="687.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.04%)</title><rect x="233.6" y="693" width="0.4" height="15.0" fill="rgb(252,180,5)" rx="2" ry="2" />
<text  x="236.57" y="703.5" ></text>
</g>
<g >
<title>glXGetCurrentContext&lt;00000000000173b0&gt; (1 samples, 0.04%)</title><rect x="38.1" y="645" width="0.4" height="15.0" fill="rgb(244,154,12)" rx="2" ry="2" />
<text  x="41.11" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1175.9" y="693" width="0.5" height="15.0" fill="rgb(245,134,33)" rx="2" ry="2" />
<text  x="1178.95" y="703.5" ></text>
</g>
<g >
<title>strtof32 (1 samples, 0.04%)</title><rect x="1187.9" y="629" width="0.4" height="15.0" fill="rgb(235,172,15)" rx="2" ry="2" />
<text  x="1190.87" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TexturemapRasterizer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="404.3" y="661" width="0.9" height="15.0" fill="rgb(236,173,54)" rx="2" ry="2" />
<text  x="407.33" y="671.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (2 samples, 0.07%)</title><rect x="432.0" y="725" width="0.9" height="15.0" fill="rgb(224,51,10)" rx="2" ry="2" />
<text  x="435.01" y="735.5" ></text>
</g>
<g >
<title>Input_Parser::Input_Parser(GameStateSubject&amp;, std::shared_ptr&lt;Renderer&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (1 samples, 0.04%)</title><rect x="35.6" y="757" width="0.4" height="15.0" fill="rgb(210,167,24)" rx="2" ry="2" />
<text  x="38.55" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1188.7" y="229" width="0.9" height="15.0" fill="rgb(246,37,37)" rx="2" ry="2" />
<text  x="1191.72" y="239.5" ></text>
</g>
<g >
<title>operator() (2 samples, 0.07%)</title><rect x="426.5" y="661" width="0.8" height="15.0" fill="rgb(226,156,43)" rx="2" ry="2" />
<text  x="429.47" y="671.5" ></text>
</g>
<g >
<title>_Safe_iterator (10 samples, 0.36%)</title><rect x="1182.3" y="405" width="4.3" height="15.0" fill="rgb(217,220,22)" rx="2" ry="2" />
<text  x="1185.33" y="415.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (2 samples, 0.07%)</title><rect x="36.0" y="581" width="0.8" height="15.0" fill="rgb(253,202,17)" rx="2" ry="2" />
<text  x="38.98" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (3 samples, 0.11%)</title><rect x="410.7" y="677" width="1.3" height="15.0" fill="rgb(236,226,36)" rx="2" ry="2" />
<text  x="413.71" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="1169.1" y="613" width="0.9" height="15.0" fill="rgb(208,213,46)" rx="2" ry="2" />
<text  x="1172.13" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1157.6" y="629" width="0.5" height="15.0" fill="rgb(210,54,52)" rx="2" ry="2" />
<text  x="1160.64" y="639.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.04%)</title><rect x="297.4" y="645" width="0.5" height="15.0" fill="rgb(215,110,14)" rx="2" ry="2" />
<text  x="300.44" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1156.8" y="693" width="0.8" height="15.0" fill="rgb(210,2,10)" rx="2" ry="2" />
<text  x="1159.78" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="1189.6" y="581" width="0.4" height="15.0" fill="rgb(235,72,9)" rx="2" ry="2" />
<text  x="1192.57" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="429.9" y="661" width="0.4" height="15.0" fill="rgb(249,158,43)" rx="2" ry="2" />
<text  x="432.88" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1176.4" y="645" width="0.8" height="15.0" fill="rgb(213,127,20)" rx="2" ry="2" />
<text  x="1179.37" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="35.6" y="709" width="0.4" height="15.0" fill="rgb(236,197,29)" rx="2" ry="2" />
<text  x="38.55" y="719.5" ></text>
</g>
<g >
<title>__nptl_death_event@@GLIBC_PRIVATE&lt;0000000000083270&gt; (1 samples, 0.04%)</title><rect x="1120.2" y="565" width="0.4" height="15.0" fill="rgb(232,116,15)" rx="2" ry="2" />
<text  x="1123.16" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1158.9" y="645" width="0.4" height="15.0" fill="rgb(222,137,16)" rx="2" ry="2" />
<text  x="1161.91" y="655.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (2,712 samples, 97.87%)</title><rect x="35.1" y="805" width="1154.9" height="15.0" fill="rgb(229,29,15)" rx="2" ry="2" />
<text  x="38.12" y="815.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.7" y="645" width="0.9" height="15.0" fill="rgb(239,160,45)" rx="2" ry="2" />
<text  x="1191.72" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1158.5" y="629" width="0.4" height="15.0" fill="rgb(254,80,17)" rx="2" ry="2" />
<text  x="1161.49" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_TryPop(void**, void**)[inline] (1 samples, 0.04%)</title><rect x="1178.1" y="581" width="0.4" height="15.0" fill="rgb(210,158,45)" rx="2" ry="2" />
<text  x="1181.08" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="1175.9" y="581" width="0.5" height="15.0" fill="rgb(235,96,46)" rx="2" ry="2" />
<text  x="1178.95" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1173.4" y="565" width="0.4" height="15.0" fill="rgb(221,156,6)" rx="2" ry="2" />
<text  x="1176.39" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (7 samples, 0.25%)</title><rect x="219.1" y="693" width="3.0" height="15.0" fill="rgb(249,135,50)" rx="2" ry="2" />
<text  x="222.09" y="703.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.04%)</title><rect x="40.7" y="693" width="0.4" height="15.0" fill="rgb(219,86,18)" rx="2" ry="2" />
<text  x="43.66" y="703.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.04%)</title><rect x="375.4" y="677" width="0.4" height="15.0" fill="rgb(237,146,2)" rx="2" ry="2" />
<text  x="378.37" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1178.1" y="709" width="0.4" height="15.0" fill="rgb(207,83,28)" rx="2" ry="2" />
<text  x="1181.08" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="423.9" y="693" width="0.4" height="15.0" fill="rgb(225,177,1)" rx="2" ry="2" />
<text  x="426.92" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1188.7" y="469" width="0.9" height="15.0" fill="rgb(219,229,30)" rx="2" ry="2" />
<text  x="1191.72" y="479.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (17 samples, 0.61%)</title><rect x="249.3" y="661" width="7.3" height="15.0" fill="rgb(221,81,31)" rx="2" ry="2" />
<text  x="252.32" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1175.1" y="725" width="0.8" height="15.0" fill="rgb(227,173,2)" rx="2" ry="2" />
<text  x="1178.10" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1164.0" y="645" width="1.3" height="15.0" fill="rgb(241,88,6)" rx="2" ry="2" />
<text  x="1167.02" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="426.0" y="629" width="0.5" height="15.0" fill="rgb(253,205,35)" rx="2" ry="2" />
<text  x="429.04" y="639.5" ></text>
</g>
<g >
<title>base::internal::SpinLockDelay(int volatile*, int, int) (1 samples, 0.04%)</title><rect x="39.0" y="405" width="0.4" height="15.0" fill="rgb(233,136,18)" rx="2" ry="2" />
<text  x="41.96" y="415.5" ></text>
</g>
<g >
<title>all (2,771 samples, 100%)</title><rect x="10.0" y="853" width="1180.0" height="15.0" fill="rgb(251,190,23)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1173.4" y="549" width="0.4" height="15.0" fill="rgb(250,195,4)" rx="2" ry="2" />
<text  x="1176.39" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="420.1" y="693" width="0.4" height="15.0" fill="rgb(227,33,15)" rx="2" ry="2" />
<text  x="423.08" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="404.3" y="677" width="0.9" height="15.0" fill="rgb(218,104,41)" rx="2" ry="2" />
<text  x="407.33" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*, unsigned long) (1 samples, 0.04%)</title><rect x="1180.6" y="565" width="0.5" height="15.0" fill="rgb(215,119,0)" rx="2" ry="2" />
<text  x="1183.63" y="575.5" ></text>
</g>
<g >
<title>_Vector_impl (1 samples, 0.04%)</title><rect x="284.2" y="677" width="0.5" height="15.0" fill="rgb(210,77,6)" rx="2" ry="2" />
<text  x="287.24" y="687.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (2 samples, 0.07%)</title><rect x="1188.7" y="149" width="0.9" height="15.0" fill="rgb(208,202,3)" rx="2" ry="2" />
<text  x="1191.72" y="159.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (7 samples, 0.25%)</title><rect x="87.1" y="645" width="3.0" height="15.0" fill="rgb(240,226,33)" rx="2" ry="2" />
<text  x="90.08" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="35.6" y="725" width="0.4" height="15.0" fill="rgb(229,56,40)" rx="2" ry="2" />
<text  x="38.55" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (33 samples, 1.19%)</title><rect x="120.3" y="693" width="14.0" height="15.0" fill="rgb(234,82,38)" rx="2" ry="2" />
<text  x="123.29" y="703.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (2 samples, 0.07%)</title><rect x="1188.7" y="629" width="0.9" height="15.0" fill="rgb(220,217,50)" rx="2" ry="2" />
<text  x="1191.72" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="233.1" y="645" width="0.5" height="15.0" fill="rgb(254,172,46)" rx="2" ry="2" />
<text  x="236.14" y="655.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (3 samples, 0.11%)</title><rect x="421.8" y="661" width="1.3" height="15.0" fill="rgb(249,176,54)" rx="2" ry="2" />
<text  x="424.79" y="671.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.5" y="677" width="0.4" height="15.0" fill="rgb(243,2,2)" rx="2" ry="2" />
<text  x="1178.52" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="39.0" y="661" width="0.4" height="15.0" fill="rgb(224,11,47)" rx="2" ry="2" />
<text  x="41.96" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (3 samples, 0.11%)</title><rect x="377.1" y="645" width="1.3" height="15.0" fill="rgb(239,212,33)" rx="2" ry="2" />
<text  x="380.07" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (10 samples, 0.36%)</title><rect x="112.6" y="661" width="4.3" height="15.0" fill="rgb(208,117,6)" rx="2" ry="2" />
<text  x="115.63" y="671.5" ></text>
</g>
<g >
<title>SpinLock::Lock()[inline] (1 samples, 0.04%)</title><rect x="39.0" y="437" width="0.4" height="15.0" fill="rgb(227,65,36)" rx="2" ry="2" />
<text  x="41.96" y="447.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="38.5" y="645" width="0.5" height="15.0" fill="rgb(216,209,7)" rx="2" ry="2" />
<text  x="41.53" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="423.5" y="693" width="0.4" height="15.0" fill="rgb(233,145,47)" rx="2" ry="2" />
<text  x="426.49" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="423.5" y="709" width="0.8" height="15.0" fill="rgb(209,1,49)" rx="2" ry="2" />
<text  x="426.49" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1159.3" y="645" width="0.9" height="15.0" fill="rgb(233,150,6)" rx="2" ry="2" />
<text  x="1162.34" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1161.0" y="629" width="1.3" height="15.0" fill="rgb(247,63,15)" rx="2" ry="2" />
<text  x="1164.04" y="639.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f590&gt; (19 samples, 0.69%)</title><rect x="406.0" y="725" width="8.1" height="15.0" fill="rgb(222,61,35)" rx="2" ry="2" />
<text  x="409.03" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="1177.7" y="741" width="1.2" height="15.0" fill="rgb(253,27,34)" rx="2" ry="2" />
<text  x="1180.65" y="751.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (5 samples, 0.18%)</title><rect x="56.0" y="693" width="2.1" height="15.0" fill="rgb(238,136,31)" rx="2" ry="2" />
<text  x="58.99" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1161.0" y="613" width="1.3" height="15.0" fill="rgb(242,78,43)" rx="2" ry="2" />
<text  x="1164.04" y="623.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (1 samples, 0.04%)</title><rect x="403.5" y="693" width="0.4" height="15.0" fill="rgb(244,227,42)" rx="2" ry="2" />
<text  x="406.48" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1177.2" y="725" width="0.5" height="15.0" fill="rgb(254,103,41)" rx="2" ry="2" />
<text  x="1180.22" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.04%)</title><rect x="412.4" y="645" width="0.4" height="15.0" fill="rgb(210,200,34)" rx="2" ry="2" />
<text  x="415.42" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1188.7" y="501" width="0.9" height="15.0" fill="rgb(244,94,11)" rx="2" ry="2" />
<text  x="1191.72" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1166.6" y="629" width="0.4" height="15.0" fill="rgb(220,169,13)" rx="2" ry="2" />
<text  x="1169.58" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.04%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(211,187,33)" rx="2" ry="2" />
<text  x="1192.57" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_node(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.04%)</title><rect x="1181.5" y="469" width="0.4" height="15.0" fill="rgb(219,182,45)" rx="2" ry="2" />
<text  x="1184.48" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1167.4" y="629" width="0.5" height="15.0" fill="rgb(234,159,28)" rx="2" ry="2" />
<text  x="1170.43" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.07%)</title><rect x="1188.7" y="165" width="0.9" height="15.0" fill="rgb(224,0,0)" rx="2" ry="2" />
<text  x="1191.72" y="175.5" ></text>
</g>
<g >
<title>_XSend&lt;0000000000043460&gt; (1 samples, 0.04%)</title><rect x="35.6" y="629" width="0.4" height="15.0" fill="rgb(213,221,35)" rx="2" ry="2" />
<text  x="38.55" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (28 samples, 1.01%)</title><rect x="122.4" y="661" width="11.9" height="15.0" fill="rgb(247,193,19)" rx="2" ry="2" />
<text  x="125.42" y="671.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.04%)</title><rect x="1181.1" y="597" width="0.4" height="15.0" fill="rgb(251,102,47)" rx="2" ry="2" />
<text  x="1184.06" y="607.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (214 samples, 7.72%)</title><rect x="43.2" y="709" width="91.1" height="15.0" fill="rgb(220,150,43)" rx="2" ry="2" />
<text  x="46.22" y="719.5" >ScanlineRa..</text>
</g>
<g >
<title>Engine_3D::Engine_3D() (13 samples, 0.47%)</title><rect x="35.6" y="773" width="5.5" height="15.0" fill="rgb(246,15,22)" rx="2" ry="2" />
<text  x="38.55" y="783.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;0000000000068bd0&gt; (1 samples, 0.04%)</title><rect x="1162.7" y="629" width="0.5" height="15.0" fill="rgb(224,212,28)" rx="2" ry="2" />
<text  x="1165.75" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="725" width="0.5" height="15.0" fill="rgb(218,48,48)" rx="2" ry="2" />
<text  x="433.73" y="735.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (404 samples, 14.58%)</title><rect x="681.1" y="629" width="172.1" height="15.0" fill="rgb(207,174,34)" rx="2" ry="2" />
<text  x="684.12" y="639.5" >nouveau_drm_screen_cre..</text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;00000000000630a0&gt; (58 samples, 2.09%)</title><rect x="234.0" y="709" width="24.7" height="15.0" fill="rgb(218,142,3)" rx="2" ry="2" />
<text  x="236.99" y="719.5" >T..</text>
</g>
<g >
<title>_IO_do_write@@GLIBC_2.2.5&lt;000000000007f330&gt; (1 samples, 0.04%)</title><rect x="41.5" y="645" width="0.4" height="15.0" fill="rgb(246,161,52)" rx="2" ry="2" />
<text  x="44.51" y="655.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;0000000000053530&gt; (1 samples, 0.04%)</title><rect x="1188.3" y="709" width="0.4" height="15.0" fill="rgb(212,213,16)" rx="2" ry="2" />
<text  x="1191.30" y="719.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (6 samples, 0.22%)</title><rect x="375.8" y="693" width="2.6" height="15.0" fill="rgb(221,106,30)" rx="2" ry="2" />
<text  x="378.80" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1174.7" y="725" width="0.4" height="15.0" fill="rgb(234,8,44)" rx="2" ry="2" />
<text  x="1177.67" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.14%)</title><rect x="410.3" y="709" width="1.7" height="15.0" fill="rgb(215,127,33)" rx="2" ry="2" />
<text  x="413.29" y="719.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (2 samples, 0.07%)</title><rect x="36.0" y="517" width="0.8" height="15.0" fill="rgb(251,207,10)" rx="2" ry="2" />
<text  x="38.98" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.04%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(217,225,5)" rx="2" ry="2" />
<text  x="1192.57" y="287.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="205.9" y="645" width="0.4" height="15.0" fill="rgb(226,50,17)" rx="2" ry="2" />
<text  x="208.89" y="655.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (40 samples, 1.44%)</title><rect x="1157.6" y="725" width="17.1" height="15.0" fill="rgb(253,117,51)" rx="2" ry="2" />
<text  x="1160.64" y="735.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.04%)</title><rect x="1188.7" y="117" width="0.4" height="15.0" fill="rgb(243,180,31)" rx="2" ry="2" />
<text  x="1191.72" y="127.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="35.1" y="741" width="0.5" height="15.0" fill="rgb(211,166,37)" rx="2" ry="2" />
<text  x="38.12" y="751.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.04%)</title><rect x="1180.6" y="613" width="0.5" height="15.0" fill="rgb(244,120,14)" rx="2" ry="2" />
<text  x="1183.63" y="623.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (4 samples, 0.14%)</title><rect x="1120.6" y="597" width="1.7" height="15.0" fill="rgb(236,216,19)" rx="2" ry="2" />
<text  x="1123.59" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (16 samples, 0.58%)</title><rect x="1167.9" y="677" width="6.8" height="15.0" fill="rgb(210,159,20)" rx="2" ry="2" />
<text  x="1170.86" y="687.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1173.8" y="629" width="0.9" height="15.0" fill="rgb(248,102,54)" rx="2" ry="2" />
<text  x="1176.82" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="1178.1" y="725" width="0.8" height="15.0" fill="rgb(210,124,13)" rx="2" ry="2" />
<text  x="1181.08" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="290.6" y="661" width="0.5" height="15.0" fill="rgb(218,226,41)" rx="2" ry="2" />
<text  x="293.63" y="671.5" ></text>
</g>
<g >
<title>PackedCache&lt;35&gt;::TryGet(unsigned long, unsigned int*) const[inline] (1 samples, 0.04%)</title><rect x="404.8" y="565" width="0.4" height="15.0" fill="rgb(214,63,12)" rx="2" ry="2" />
<text  x="407.75" y="575.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000067570&gt; (2,665 samples, 96.17%)</title><rect x="42.4" y="757" width="1134.8" height="15.0" fill="rgb(233,144,6)" rx="2" ry="2" />
<text  x="45.36" y="767.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000067570&gt;</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.04%)</title><rect x="1189.6" y="357" width="0.4" height="15.0" fill="rgb(254,154,21)" rx="2" ry="2" />
<text  x="1192.57" y="367.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (15 samples, 0.54%)</title><rect x="306.0" y="661" width="6.3" height="15.0" fill="rgb(241,16,52)" rx="2" ry="2" />
<text  x="308.96" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1187.0" y="389" width="0.4" height="15.0" fill="rgb(242,28,40)" rx="2" ry="2" />
<text  x="1190.02" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.04%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(218,14,54)" rx="2" ry="2" />
<text  x="1192.57" y="303.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (2 samples, 0.07%)</title><rect x="1188.7" y="677" width="0.9" height="15.0" fill="rgb(235,127,12)" rx="2" ry="2" />
<text  x="1191.72" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="38.5" y="597" width="0.5" height="15.0" fill="rgb(236,151,24)" rx="2" ry="2" />
<text  x="41.53" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="1169.1" y="629" width="0.9" height="15.0" fill="rgb(227,108,44)" rx="2" ry="2" />
<text  x="1172.13" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="90.1" y="645" width="0.4" height="15.0" fill="rgb(244,157,49)" rx="2" ry="2" />
<text  x="93.06" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.11%)</title><rect x="412.8" y="693" width="1.3" height="15.0" fill="rgb(222,31,53)" rx="2" ry="2" />
<text  x="415.84" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.04%)</title><rect x="1181.1" y="661" width="0.4" height="15.0" fill="rgb(252,146,51)" rx="2" ry="2" />
<text  x="1184.06" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1175.9" y="725" width="0.5" height="15.0" fill="rgb(233,20,34)" rx="2" ry="2" />
<text  x="1178.95" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (4 samples, 0.14%)</title><rect x="1184.9" y="389" width="1.7" height="15.0" fill="rgb(215,24,30)" rx="2" ry="2" />
<text  x="1187.89" y="399.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 0.25%)</title><rect x="36.0" y="709" width="3.0" height="15.0" fill="rgb(223,73,32)" rx="2" ry="2" />
<text  x="38.98" y="719.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="404.3" y="693" width="0.9" height="15.0" fill="rgb(206,153,13)" rx="2" ry="2" />
<text  x="407.33" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (8 samples, 0.29%)</title><rect x="400.1" y="661" width="3.4" height="15.0" fill="rgb(240,154,25)" rx="2" ry="2" />
<text  x="403.07" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (3 samples, 0.11%)</title><rect x="303.0" y="693" width="1.3" height="15.0" fill="rgb(225,200,54)" rx="2" ry="2" />
<text  x="305.98" y="703.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (5 samples, 0.18%)</title><rect x="36.0" y="597" width="2.1" height="15.0" fill="rgb(235,151,25)" rx="2" ry="2" />
<text  x="38.98" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1170.0" y="613" width="0.4" height="15.0" fill="rgb(235,60,46)" rx="2" ry="2" />
<text  x="1172.99" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1162.3" y="629" width="0.4" height="15.0" fill="rgb(223,59,31)" rx="2" ry="2" />
<text  x="1165.32" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (888 samples, 32.05%)</title><rect x="486.5" y="677" width="378.2" height="15.0" fill="rgb(232,139,47)" rx="2" ry="2" />
<text  x="489.51" y="687.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (709 samples, 25.59%)</title><rect x="562.7" y="661" width="302.0" height="15.0" fill="rgb(215,140,44)" rx="2" ry="2" />
<text  x="565.74" y="671.5" >__driDriverGetExtensions_d3d12&lt;000000000..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (37 samples, 1.34%)</title><rect x="155.2" y="693" width="15.8" height="15.0" fill="rgb(217,110,16)" rx="2" ry="2" />
<text  x="158.21" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.04%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(207,77,1)" rx="2" ry="2" />
<text  x="1192.57" y="399.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;0000000000068b10&gt; (40 samples, 1.44%)</title><rect x="1157.6" y="741" width="17.1" height="15.0" fill="rgb(219,71,13)" rx="2" ry="2" />
<text  x="1160.64" y="751.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.04%)</title><rect x="39.0" y="613" width="0.4" height="15.0" fill="rgb(206,169,33)" rx="2" ry="2" />
<text  x="41.96" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="1167.0" y="565" width="0.4" height="15.0" fill="rgb(243,58,12)" rx="2" ry="2" />
<text  x="1170.00" y="575.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1167.0" y="613" width="0.4" height="15.0" fill="rgb(216,56,51)" rx="2" ry="2" />
<text  x="1170.00" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.07%)</title><rect x="1188.7" y="309" width="0.9" height="15.0" fill="rgb(248,126,5)" rx="2" ry="2" />
<text  x="1191.72" y="319.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (3 samples, 0.11%)</title><rect x="1183.6" y="325" width="1.3" height="15.0" fill="rgb(218,178,11)" rx="2" ry="2" />
<text  x="1186.61" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="41.9" y="709" width="0.5" height="15.0" fill="rgb(226,28,32)" rx="2" ry="2" />
<text  x="44.94" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (460 samples, 16.60%)</title><rect x="926.4" y="645" width="195.9" height="15.0" fill="rgb(246,104,34)" rx="2" ry="2" />
<text  x="929.41" y="655.5" >__driDriverGetExtensions_..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index(unsigned long, unsigned long) const (1 samples, 0.04%)</title><rect x="1184.0" y="277" width="0.5" height="15.0" fill="rgb(222,58,36)" rx="2" ry="2" />
<text  x="1187.04" y="287.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1161.0" y="645" width="1.3" height="15.0" fill="rgb(219,89,43)" rx="2" ry="2" />
<text  x="1164.04" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1163.6" y="645" width="0.4" height="15.0" fill="rgb(206,20,42)" rx="2" ry="2" />
<text  x="1166.60" y="655.5" ></text>
</g>
<g >
<title>0x00007fa7bdddf4d2 (1 samples, 0.04%)</title><rect x="39.4" y="629" width="0.4" height="15.0" fill="rgb(250,24,3)" rx="2" ry="2" />
<text  x="42.38" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="289.8" y="645" width="0.8" height="15.0" fill="rgb(219,103,53)" rx="2" ry="2" />
<text  x="292.78" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1157.6" y="613" width="0.5" height="15.0" fill="rgb(220,141,53)" rx="2" ry="2" />
<text  x="1160.64" y="623.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;00000000000fcad0&gt; (1 samples, 0.04%)</title><rect x="35.6" y="565" width="0.4" height="15.0" fill="rgb(225,42,35)" rx="2" ry="2" />
<text  x="38.55" y="575.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (1 samples, 0.04%)</title><rect x="341.3" y="693" width="0.4" height="15.0" fill="rgb(231,225,37)" rx="2" ry="2" />
<text  x="344.30" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.04%)</title><rect x="412.4" y="693" width="0.4" height="15.0" fill="rgb(205,74,1)" rx="2" ry="2" />
<text  x="415.42" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="1189.6" y="501" width="0.4" height="15.0" fill="rgb(221,141,38)" rx="2" ry="2" />
<text  x="1192.57" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (4 samples, 0.14%)</title><rect x="1184.9" y="373" width="1.7" height="15.0" fill="rgb(206,153,3)" rx="2" ry="2" />
<text  x="1187.89" y="383.5" ></text>
</g>
<g >
<title>__shared_ptr (1 samples, 0.04%)</title><rect x="379.2" y="693" width="0.4" height="15.0" fill="rgb(254,201,5)" rx="2" ry="2" />
<text  x="382.20" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.04%)</title><rect x="1160.6" y="597" width="0.4" height="15.0" fill="rgb(206,101,9)" rx="2" ry="2" />
<text  x="1163.62" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1189.6" y="533" width="0.4" height="15.0" fill="rgb(246,80,31)" rx="2" ry="2" />
<text  x="1192.57" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_PopRange(void**, int, void**, void**)[inline] (1 samples, 0.04%)</title><rect x="1189.1" y="69" width="0.5" height="15.0" fill="rgb(218,222,2)" rx="2" ry="2" />
<text  x="1192.15" y="79.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="39.0" y="709" width="0.4" height="15.0" fill="rgb(216,162,54)" rx="2" ry="2" />
<text  x="41.96" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.04%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(205,156,29)" rx="2" ry="2" />
<text  x="1192.57" y="271.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007fcf0&gt; (1 samples, 0.04%)</title><rect x="425.6" y="725" width="0.4" height="15.0" fill="rgb(229,86,9)" rx="2" ry="2" />
<text  x="428.62" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (27 samples, 0.97%)</title><rect x="183.7" y="677" width="11.5" height="15.0" fill="rgb(207,165,51)" rx="2" ry="2" />
<text  x="186.74" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="119.9" y="661" width="0.4" height="15.0" fill="rgb(220,121,26)" rx="2" ry="2" />
<text  x="122.87" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1156.8" y="677" width="0.8" height="15.0" fill="rgb(249,62,33)" rx="2" ry="2" />
<text  x="1159.78" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="194.8" y="645" width="0.4" height="15.0" fill="rgb(209,31,5)" rx="2" ry="2" />
<text  x="197.81" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="417.1" y="693" width="0.4" height="15.0" fill="rgb(228,95,36)" rx="2" ry="2" />
<text  x="420.10" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="430.3" y="709" width="0.4" height="15.0" fill="rgb(219,14,0)" rx="2" ry="2" />
<text  x="433.30" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1167.9" y="613" width="1.2" height="15.0" fill="rgb(242,42,53)" rx="2" ry="2" />
<text  x="1170.86" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="183.3" y="677" width="0.4" height="15.0" fill="rgb(241,137,31)" rx="2" ry="2" />
<text  x="186.32" y="687.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (1 samples, 0.04%)</title><rect x="36.8" y="501" width="0.5" height="15.0" fill="rgb(252,103,18)" rx="2" ry="2" />
<text  x="39.83" y="511.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (4 samples, 0.14%)</title><rect x="1118.5" y="581" width="1.7" height="15.0" fill="rgb(211,101,19)" rx="2" ry="2" />
<text  x="1121.46" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="432.0" y="613" width="0.4" height="15.0" fill="rgb(226,96,51)" rx="2" ry="2" />
<text  x="435.01" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="1175.9" y="661" width="0.5" height="15.0" fill="rgb(238,169,45)" rx="2" ry="2" />
<text  x="1178.95" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.07%)</title><rect x="418.8" y="709" width="0.9" height="15.0" fill="rgb(233,69,40)" rx="2" ry="2" />
<text  x="421.81" y="719.5" ></text>
</g>
<g >
<title>xcb_flush&lt;000000000000e820&gt; (1 samples, 0.04%)</title><rect x="432.4" y="693" width="0.5" height="15.0" fill="rgb(234,123,25)" rx="2" ry="2" />
<text  x="435.43" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (28 samples, 1.01%)</title><rect x="665.8" y="629" width="11.9" height="15.0" fill="rgb(217,145,43)" rx="2" ry="2" />
<text  x="668.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (2 samples, 0.07%)</title><rect x="426.5" y="677" width="0.8" height="15.0" fill="rgb(215,153,30)" rx="2" ry="2" />
<text  x="429.47" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (17 samples, 0.61%)</title><rect x="379.6" y="661" width="7.3" height="15.0" fill="rgb(211,125,32)" rx="2" ry="2" />
<text  x="382.63" y="671.5" ></text>
</g>
<g >
<title>Vec2d::toString[abi:cxx11]() (1 samples, 0.04%)</title><rect x="416.3" y="725" width="0.4" height="15.0" fill="rgb(233,133,40)" rx="2" ry="2" />
<text  x="419.25" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="357.1" y="677" width="0.4" height="15.0" fill="rgb(242,177,40)" rx="2" ry="2" />
<text  x="360.06" y="687.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.04%)</title><rect x="302.6" y="693" width="0.4" height="15.0" fill="rgb(230,38,14)" rx="2" ry="2" />
<text  x="305.55" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.07%)</title><rect x="1188.7" y="341" width="0.9" height="15.0" fill="rgb(224,23,39)" rx="2" ry="2" />
<text  x="1191.72" y="351.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (8 samples, 0.29%)</title><rect x="677.7" y="629" width="3.4" height="15.0" fill="rgb(228,0,53)" rx="2" ry="2" />
<text  x="680.72" y="639.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003ecb0&gt; (4 samples, 0.14%)</title><rect x="39.4" y="757" width="1.7" height="15.0" fill="rgb(230,130,13)" rx="2" ry="2" />
<text  x="42.38" y="767.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.07%)</title><rect x="36.0" y="405" width="0.8" height="15.0" fill="rgb(239,147,51)" rx="2" ry="2" />
<text  x="38.98" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1164.0" y="613" width="1.3" height="15.0" fill="rgb(217,214,2)" rx="2" ry="2" />
<text  x="1167.02" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1179.8" y="533" width="0.8" height="15.0" fill="rgb(214,154,8)" rx="2" ry="2" />
<text  x="1182.78" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_PopRange(void**, int, void**, void**)[inline] (1 samples, 0.04%)</title><rect x="1189.1" y="53" width="0.5" height="15.0" fill="rgb(214,118,29)" rx="2" ry="2" />
<text  x="1192.15" y="63.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1187.0" y="405" width="0.4" height="15.0" fill="rgb(246,93,27)" rx="2" ry="2" />
<text  x="1190.02" y="415.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.32%)</title><rect x="1170.8" y="661" width="3.9" height="15.0" fill="rgb(206,100,39)" rx="2" ry="2" />
<text  x="1173.84" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::allocate(unsigned long, void const*) (1 samples, 0.04%)</title><rect x="1181.5" y="453" width="0.4" height="15.0" fill="rgb(221,181,19)" rx="2" ry="2" />
<text  x="1184.48" y="463.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047ca0&gt; (105 samples, 3.79%)</title><rect x="171.0" y="693" width="44.7" height="15.0" fill="rgb(249,113,47)" rx="2" ry="2" />
<text  x="173.97" y="703.5" >Text..</text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="432.4" y="661" width="0.5" height="15.0" fill="rgb(215,72,10)" rx="2" ry="2" />
<text  x="435.43" y="671.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.04%)</title><rect x="36.4" y="357" width="0.4" height="15.0" fill="rgb(221,117,23)" rx="2" ry="2" />
<text  x="39.40" y="367.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (3 samples, 0.11%)</title><rect x="1162.3" y="645" width="1.3" height="15.0" fill="rgb(246,57,13)" rx="2" ry="2" />
<text  x="1165.32" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long) (1 samples, 0.04%)</title><rect x="411.1" y="645" width="0.5" height="15.0" fill="rgb(235,49,48)" rx="2" ry="2" />
<text  x="414.14" y="655.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (3 samples, 0.11%)</title><rect x="1182.3" y="277" width="1.3" height="15.0" fill="rgb(229,73,51)" rx="2" ry="2" />
<text  x="1185.33" y="287.5" ></text>
</g>
<g >
<title>tc_cfree[inline] (1 samples, 0.04%)</title><rect x="404.8" y="629" width="0.4" height="15.0" fill="rgb(213,184,3)" rx="2" ry="2" />
<text  x="407.75" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (3 samples, 0.11%)</title><rect x="1179.4" y="725" width="1.2" height="15.0" fill="rgb(249,107,32)" rx="2" ry="2" />
<text  x="1182.35" y="735.5" ></text>
</g>
<g >
<title>_Vector_impl (2 samples, 0.07%)</title><rect x="356.2" y="677" width="0.9" height="15.0" fill="rgb(241,212,30)" rx="2" ry="2" />
<text  x="359.21" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="40.2" y="693" width="0.5" height="15.0" fill="rgb(235,193,34)" rx="2" ry="2" />
<text  x="43.23" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long) (1 samples, 0.04%)</title><rect x="1178.1" y="677" width="0.4" height="15.0" fill="rgb(247,228,13)" rx="2" ry="2" />
<text  x="1181.08" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1167.0" y="629" width="0.4" height="15.0" fill="rgb(223,223,32)" rx="2" ry="2" />
<text  x="1170.00" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="423.9" y="629" width="0.4" height="15.0" fill="rgb(211,102,39)" rx="2" ry="2" />
<text  x="426.92" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264f0&gt; (2 samples, 0.07%)</title><rect x="1179.8" y="565" width="0.8" height="15.0" fill="rgb(253,33,6)" rx="2" ry="2" />
<text  x="1182.78" y="575.5" ></text>
</g>
<g >
<title>0x00007fa7bdddf35a (1 samples, 0.04%)</title><rect x="40.2" y="597" width="0.5" height="15.0" fill="rgb(245,43,54)" rx="2" ry="2" />
<text  x="43.23" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.11%)</title><rect x="1179.4" y="581" width="1.2" height="15.0" fill="rgb(239,51,0)" rx="2" ry="2" />
<text  x="1182.35" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.18%)</title><rect x="339.2" y="661" width="2.1" height="15.0" fill="rgb(229,16,19)" rx="2" ry="2" />
<text  x="342.17" y="671.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.04%)</title><rect x="215.3" y="677" width="0.4" height="15.0" fill="rgb(233,129,49)" rx="2" ry="2" />
<text  x="218.25" y="687.5" ></text>
</g>
<g >
<title>tc_new (1 samples, 0.04%)</title><rect x="1178.1" y="645" width="0.4" height="15.0" fill="rgb(223,123,52)" rx="2" ry="2" />
<text  x="1181.08" y="655.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007fcf0&gt; (1 samples, 0.04%)</title><rect x="407.7" y="677" width="0.5" height="15.0" fill="rgb(234,140,51)" rx="2" ry="2" />
<text  x="410.73" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="39.0" y="517" width="0.4" height="15.0" fill="rgb(231,211,2)" rx="2" ry="2" />
<text  x="41.96" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1163.6" y="629" width="0.4" height="15.0" fill="rgb(216,209,10)" rx="2" ry="2" />
<text  x="1166.60" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="423.1" y="693" width="0.4" height="15.0" fill="rgb(206,202,38)" rx="2" ry="2" />
<text  x="426.06" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="39.0" y="645" width="0.4" height="15.0" fill="rgb(254,77,0)" rx="2" ry="2" />
<text  x="41.96" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (1 samples, 0.04%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(227,221,22)" rx="2" ry="2" />
<text  x="1192.57" y="335.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,699 samples, 61.31%)</title><rect x="432.9" y="725" width="723.5" height="15.0" fill="rgb(245,45,54)" rx="2" ry="2" />
<text  x="435.86" y="735.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="1181.5" y="421" width="0.4" height="15.0" fill="rgb(213,88,48)" rx="2" ry="2" />
<text  x="1184.48" y="431.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="132.6" y="645" width="0.5" height="15.0" fill="rgb(231,28,41)" rx="2" ry="2" />
<text  x="135.64" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1163.2" y="613" width="0.4" height="15.0" fill="rgb(213,124,22)" rx="2" ry="2" />
<text  x="1166.17" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1158.9" y="629" width="0.4" height="15.0" fill="rgb(254,61,53)" rx="2" ry="2" />
<text  x="1161.91" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (17 samples, 0.61%)</title><rect x="379.6" y="693" width="7.3" height="15.0" fill="rgb(254,70,26)" rx="2" ry="2" />
<text  x="382.63" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;) (1 samples, 0.04%)</title><rect x="428.6" y="709" width="0.4" height="15.0" fill="rgb(237,123,20)" rx="2" ry="2" />
<text  x="431.60" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="581" width="0.5" height="15.0" fill="rgb(214,52,35)" rx="2" ry="2" />
<text  x="433.73" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (3 samples, 0.11%)</title><rect x="1179.4" y="709" width="1.2" height="15.0" fill="rgb(251,106,7)" rx="2" ry="2" />
<text  x="1182.35" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (4 samples, 0.14%)</title><rect x="406.0" y="709" width="1.7" height="15.0" fill="rgb(225,13,12)" rx="2" ry="2" />
<text  x="409.03" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.22%)</title><rect x="216.5" y="661" width="2.6" height="15.0" fill="rgb(254,132,47)" rx="2" ry="2" />
<text  x="219.53" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1158.1" y="629" width="0.4" height="15.0" fill="rgb(207,148,30)" rx="2" ry="2" />
<text  x="1161.06" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (6 samples, 0.22%)</title><rect x="1182.3" y="373" width="2.6" height="15.0" fill="rgb(207,47,38)" rx="2" ry="2" />
<text  x="1185.33" y="383.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="118.2" y="661" width="0.4" height="15.0" fill="rgb(250,15,36)" rx="2" ry="2" />
<text  x="121.16" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (2 samples, 0.07%)</title><rect x="421.8" y="613" width="0.8" height="15.0" fill="rgb(207,32,16)" rx="2" ry="2" />
<text  x="424.79" y="623.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::deallocate(Triangle*, unsigned long) (1 samples, 0.04%)</title><rect x="412.8" y="629" width="0.5" height="15.0" fill="rgb(229,216,51)" rx="2" ry="2" />
<text  x="415.84" y="639.5" ></text>
</g>
<g >
<title>Triangle::getTriangleZCenter()&lt;000000000007e4f0&gt; (1 samples, 0.04%)</title><rect x="1166.2" y="613" width="0.4" height="15.0" fill="rgb(254,102,45)" rx="2" ry="2" />
<text  x="1169.15" y="623.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.04%)</title><rect x="40.2" y="581" width="0.5" height="15.0" fill="rgb(216,181,14)" rx="2" ry="2" />
<text  x="43.23" y="591.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.04%)</title><rect x="1189.6" y="741" width="0.4" height="15.0" fill="rgb(217,41,52)" rx="2" ry="2" />
<text  x="1192.57" y="751.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1171.3" y="597" width="0.4" height="15.0" fill="rgb(243,84,48)" rx="2" ry="2" />
<text  x="1174.26" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.07%)</title><rect x="404.3" y="709" width="0.9" height="15.0" fill="rgb(210,44,8)" rx="2" ry="2" />
<text  x="407.33" y="719.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (2 samples, 0.07%)</title><rect x="417.5" y="725" width="0.9" height="15.0" fill="rgb(218,149,6)" rx="2" ry="2" />
<text  x="420.53" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000d25a0&gt; (1 samples, 0.04%)</title><rect x="1161.9" y="597" width="0.4" height="15.0" fill="rgb(221,159,50)" rx="2" ry="2" />
<text  x="1164.89" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (3 samples, 0.11%)</title><rect x="1183.6" y="341" width="1.3" height="15.0" fill="rgb(232,153,30)" rx="2" ry="2" />
<text  x="1186.61" y="351.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sputc(char)[inline] (1 samples, 0.04%)</title><rect x="41.5" y="693" width="0.4" height="15.0" fill="rgb(229,37,31)" rx="2" ry="2" />
<text  x="44.51" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="38.5" y="677" width="0.5" height="15.0" fill="rgb(222,213,15)" rx="2" ry="2" />
<text  x="41.53" y="687.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1163.6" y="581" width="0.4" height="15.0" fill="rgb(233,135,21)" rx="2" ry="2" />
<text  x="1166.60" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.07%)</title><rect x="409.4" y="709" width="0.9" height="15.0" fill="rgb(249,4,27)" rx="2" ry="2" />
<text  x="412.44" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.04%)</title><rect x="1164.4" y="565" width="0.5" height="15.0" fill="rgb(229,25,25)" rx="2" ry="2" />
<text  x="1167.45" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (3 samples, 0.11%)</title><rect x="1179.4" y="629" width="1.2" height="15.0" fill="rgb(222,55,0)" rx="2" ry="2" />
<text  x="1182.35" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1170.8" y="485" width="0.5" height="15.0" fill="rgb(254,12,40)" rx="2" ry="2" />
<text  x="1173.84" y="495.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.07%)</title><rect x="1188.7" y="357" width="0.9" height="15.0" fill="rgb(240,9,39)" rx="2" ry="2" />
<text  x="1191.72" y="367.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="36.8" y="581" width="0.5" height="15.0" fill="rgb(223,183,25)" rx="2" ry="2" />
<text  x="39.83" y="591.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000056220&gt; (2 samples, 0.07%)</title><rect x="1188.7" y="565" width="0.9" height="15.0" fill="rgb(219,214,13)" rx="2" ry="2" />
<text  x="1191.72" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="1174.7" y="693" width="0.4" height="15.0" fill="rgb(225,83,39)" rx="2" ry="2" />
<text  x="1177.67" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029a10&gt; (1 samples, 0.04%)</title><rect x="1189.1" y="101" width="0.5" height="15.0" fill="rgb(243,77,22)" rx="2" ry="2" />
<text  x="1192.15" y="111.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.04%)</title><rect x="408.6" y="709" width="0.4" height="15.0" fill="rgb(250,104,11)" rx="2" ry="2" />
<text  x="411.59" y="719.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (685 samples, 24.72%)</title><rect x="864.7" y="677" width="291.7" height="15.0" fill="rgb(218,20,24)" rx="2" ry="2" />
<text  x="867.66" y="687.5" >nouveau_drm_screen_create</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="661" width="6.4" height="15.0" fill="rgb(236,115,27)" rx="2" ry="2" />
<text  x="1184.48" y="671.5" ></text>
</g>
<g >
<title>_Safe_sequence (3 samples, 0.11%)</title><rect x="283.0" y="677" width="1.2" height="15.0" fill="rgb(234,63,10)" rx="2" ry="2" />
<text  x="285.96" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1189.6" y="613" width="0.4" height="15.0" fill="rgb(245,20,14)" rx="2" ry="2" />
<text  x="1192.57" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (3 samples, 0.11%)</title><rect x="385.2" y="645" width="1.2" height="15.0" fill="rgb(222,40,12)" rx="2" ry="2" />
<text  x="388.16" y="655.5" ></text>
</g>
<g >
<title>_glapi_tls_Current&lt;0000000000000000&gt; (1 samples, 0.04%)</title><rect x="38.1" y="613" width="0.4" height="15.0" fill="rgb(243,205,7)" rx="2" ry="2" />
<text  x="41.11" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="1160.6" y="581" width="0.4" height="15.0" fill="rgb(231,108,50)" rx="2" ry="2" />
<text  x="1163.62" y="591.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (8 samples, 0.29%)</title><rect x="215.7" y="693" width="3.4" height="15.0" fill="rgb(235,10,16)" rx="2" ry="2" />
<text  x="218.68" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1170.8" y="565" width="0.5" height="15.0" fill="rgb(254,118,8)" rx="2" ry="2" />
<text  x="1173.84" y="575.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f930&gt; (2 samples, 0.07%)</title><rect x="41.1" y="757" width="0.8" height="15.0" fill="rgb(254,219,5)" rx="2" ry="2" />
<text  x="44.09" y="767.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (5 samples, 0.18%)</title><rect x="36.0" y="629" width="2.1" height="15.0" fill="rgb(206,71,49)" rx="2" ry="2" />
<text  x="38.98" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1176.4" y="661" width="0.8" height="15.0" fill="rgb(243,118,13)" rx="2" ry="2" />
<text  x="1179.37" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (1 samples, 0.04%)</title><rect x="1189.6" y="469" width="0.4" height="15.0" fill="rgb(248,106,43)" rx="2" ry="2" />
<text  x="1192.57" y="479.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,699 samples, 61.31%)</title><rect x="432.9" y="709" width="723.5" height="15.0" fill="rgb(211,89,17)" rx="2" ry="2" />
<text  x="435.86" y="719.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.11%)</title><rect x="1179.4" y="597" width="1.2" height="15.0" fill="rgb(217,197,30)" rx="2" ry="2" />
<text  x="1182.35" y="607.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1167.0" y="597" width="0.4" height="15.0" fill="rgb(235,93,15)" rx="2" ry="2" />
<text  x="1170.00" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="377.9" y="629" width="0.5" height="15.0" fill="rgb(231,81,38)" rx="2" ry="2" />
<text  x="380.92" y="639.5" ></text>
</g>
<g >
<title>0x00007fa7bdddf07a (1 samples, 0.04%)</title><rect x="39.4" y="613" width="0.4" height="15.0" fill="rgb(234,75,4)" rx="2" ry="2" />
<text  x="42.38" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="118.2" y="677" width="0.4" height="15.0" fill="rgb(207,133,25)" rx="2" ry="2" />
<text  x="121.16" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (413 samples, 14.90%)</title><rect x="946.4" y="629" width="175.9" height="15.0" fill="rgb(210,154,39)" rx="2" ry="2" />
<text  x="949.42" y="639.5" >__driDriverGetExtensio..</text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (1 samples, 0.04%)</title><rect x="1189.6" y="421" width="0.4" height="15.0" fill="rgb(223,101,4)" rx="2" ry="2" />
<text  x="1192.57" y="431.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (1 samples, 0.04%)</title><rect x="431.6" y="725" width="0.4" height="15.0" fill="rgb(214,49,16)" rx="2" ry="2" />
<text  x="434.58" y="735.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.04%)</title><rect x="1180.6" y="677" width="0.5" height="15.0" fill="rgb(214,63,46)" rx="2" ry="2" />
<text  x="1183.63" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1165.7" y="613" width="0.5" height="15.0" fill="rgb(251,201,33)" rx="2" ry="2" />
<text  x="1168.73" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1173.8" y="597" width="0.9" height="15.0" fill="rgb(226,219,8)" rx="2" ry="2" />
<text  x="1176.82" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (23 samples, 0.83%)</title><rect x="393.7" y="677" width="9.8" height="15.0" fill="rgb(213,52,17)" rx="2" ry="2" />
<text  x="396.68" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1170.0" y="597" width="0.4" height="15.0" fill="rgb(232,201,9)" rx="2" ry="2" />
<text  x="1172.99" y="607.5" ></text>
</g>
<g >
<title>InOutRasterizer (2 samples, 0.07%)</title><rect x="42.4" y="709" width="0.8" height="15.0" fill="rgb(216,109,3)" rx="2" ry="2" />
<text  x="45.36" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="1167.9" y="629" width="1.2" height="15.0" fill="rgb(214,95,8)" rx="2" ry="2" />
<text  x="1170.86" y="639.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.04%)</title><rect x="1180.6" y="629" width="0.5" height="15.0" fill="rgb(225,138,43)" rx="2" ry="2" />
<text  x="1183.63" y="639.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.07%)</title><rect x="36.0" y="469" width="0.8" height="15.0" fill="rgb(240,180,38)" rx="2" ry="2" />
<text  x="38.98" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.8" y="597" width="0.5" height="15.0" fill="rgb(208,36,49)" rx="2" ry="2" />
<text  x="1173.84" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1173.8" y="613" width="0.9" height="15.0" fill="rgb(224,56,54)" rx="2" ry="2" />
<text  x="1176.82" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1167.0" y="501" width="0.4" height="15.0" fill="rgb(222,97,26)" rx="2" ry="2" />
<text  x="1170.00" y="511.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (1 samples, 0.04%)</title><rect x="1180.6" y="661" width="0.5" height="15.0" fill="rgb(212,52,49)" rx="2" ry="2" />
<text  x="1183.63" y="671.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (2,711 samples, 97.83%)</title><rect x="35.6" y="789" width="1154.4" height="15.0" fill="rgb(223,95,16)" rx="2" ry="2" />
<text  x="38.55" y="799.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.11%)</title><rect x="1170.8" y="645" width="1.3" height="15.0" fill="rgb(207,10,14)" rx="2" ry="2" />
<text  x="1173.84" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="431.2" y="725" width="0.4" height="15.0" fill="rgb(249,9,39)" rx="2" ry="2" />
<text  x="434.15" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (6 samples, 0.22%)</title><rect x="229.7" y="645" width="2.6" height="15.0" fill="rgb(214,159,7)" rx="2" ry="2" />
<text  x="232.73" y="655.5" ></text>
</g>
<g >
<title>XGetAtomName&lt;0000000000025fa0&gt; (1 samples, 0.04%)</title><rect x="35.6" y="661" width="0.4" height="15.0" fill="rgb(218,10,42)" rx="2" ry="2" />
<text  x="38.55" y="671.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (20 samples, 0.72%)</title><rect x="1122.3" y="645" width="8.5" height="15.0" fill="rgb(252,101,34)" rx="2" ry="2" />
<text  x="1125.29" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="413.3" y="645" width="0.8" height="15.0" fill="rgb(249,45,11)" rx="2" ry="2" />
<text  x="416.27" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (15 samples, 0.54%)</title><rect x="284.7" y="677" width="6.4" height="15.0" fill="rgb(210,102,25)" rx="2" ry="2" />
<text  x="287.67" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1175.9" y="613" width="0.5" height="15.0" fill="rgb(253,68,13)" rx="2" ry="2" />
<text  x="1178.95" y="623.5" ></text>
</g>
<g >
<title>_Safe_sequence (2 samples, 0.07%)</title><rect x="355.4" y="677" width="0.8" height="15.0" fill="rgb(226,104,3)" rx="2" ry="2" />
<text  x="358.36" y="687.5" ></text>
</g>
<g >
<title>0x00007fa7bddd5791 (2 samples, 0.07%)</title><rect x="39.4" y="709" width="0.8" height="15.0" fill="rgb(224,155,44)" rx="2" ry="2" />
<text  x="42.38" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.04%)</title><rect x="1181.5" y="373" width="0.4" height="15.0" fill="rgb(224,56,14)" rx="2" ry="2" />
<text  x="1184.48" y="383.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (2 samples, 0.07%)</title><rect x="1188.7" y="757" width="0.9" height="15.0" fill="rgb(250,117,5)" rx="2" ry="2" />
<text  x="1191.72" y="767.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (3 samples, 0.11%)</title><rect x="1188.7" y="773" width="1.3" height="15.0" fill="rgb(212,209,7)" rx="2" ry="2" />
<text  x="1191.72" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(254,69,27)" rx="2" ry="2" />
<text  x="1192.57" y="223.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="365.6" y="661" width="0.4" height="15.0" fill="rgb(218,126,10)" rx="2" ry="2" />
<text  x="368.58" y="671.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.04%)</title><rect x="39.8" y="613" width="0.4" height="15.0" fill="rgb(238,107,54)" rx="2" ry="2" />
<text  x="42.81" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="1189.6" y="709" width="0.4" height="15.0" fill="rgb(233,219,38)" rx="2" ry="2" />
<text  x="1192.57" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(218,181,3)" rx="2" ry="2" />
<text  x="1192.57" y="255.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (3 samples, 0.11%)</title><rect x="421.8" y="709" width="1.3" height="15.0" fill="rgb(251,70,22)" rx="2" ry="2" />
<text  x="424.79" y="719.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="35.6" y="597" width="0.4" height="15.0" fill="rgb(225,76,20)" rx="2" ry="2" />
<text  x="38.55" y="607.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.04%)</title><rect x="1177.2" y="677" width="0.5" height="15.0" fill="rgb(227,142,36)" rx="2" ry="2" />
<text  x="1180.22" y="687.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000481c0&gt; (2 samples, 0.07%)</title><rect x="214.4" y="677" width="0.9" height="15.0" fill="rgb(220,97,23)" rx="2" ry="2" />
<text  x="217.40" y="687.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (14 samples, 0.51%)</title><rect x="198.6" y="661" width="6.0" height="15.0" fill="rgb(215,65,36)" rx="2" ry="2" />
<text  x="201.65" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (14 samples, 0.51%)</title><rect x="124.1" y="645" width="6.0" height="15.0" fill="rgb(239,148,51)" rx="2" ry="2" />
<text  x="127.12" y="655.5" ></text>
</g>
<g >
<title>float __gnu_cxx::__stoa&lt;float, float, char&gt;(float (*)(char const*, char**), char const*, char const*, unsigned long*) (1 samples, 0.04%)</title><rect x="1187.9" y="645" width="0.4" height="15.0" fill="rgb(229,49,34)" rx="2" ry="2" />
<text  x="1190.87" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="709" width="0.5" height="15.0" fill="rgb(212,217,6)" rx="2" ry="2" />
<text  x="433.73" y="719.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1188.7" y="725" width="0.9" height="15.0" fill="rgb(254,29,37)" rx="2" ry="2" />
<text  x="1191.72" y="735.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="36.8" y="549" width="0.5" height="15.0" fill="rgb(240,213,4)" rx="2" ry="2" />
<text  x="39.83" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (5 samples, 0.18%)</title><rect x="217.0" y="645" width="2.1" height="15.0" fill="rgb(206,37,17)" rx="2" ry="2" />
<text  x="219.96" y="655.5" ></text>
</g>
<g >
<title>Triangle::getTriangleZCenter()&lt;000000000007e4f0&gt; (1 samples, 0.04%)</title><rect x="1162.7" y="613" width="0.5" height="15.0" fill="rgb(232,10,50)" rx="2" ry="2" />
<text  x="1165.75" y="623.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.04%)</title><rect x="36.4" y="373" width="0.4" height="15.0" fill="rgb(243,135,1)" rx="2" ry="2" />
<text  x="39.40" y="383.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063910&gt; (234 samples, 8.44%)</title><rect x="134.3" y="709" width="99.7" height="15.0" fill="rgb(220,214,14)" rx="2" ry="2" />
<text  x="137.35" y="719.5" >TexturemapRa..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TrianglePipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (3 samples, 0.11%)</title><rect x="1179.4" y="693" width="1.2" height="15.0" fill="rgb(248,48,8)" rx="2" ry="2" />
<text  x="1182.35" y="703.5" ></text>
</g>
<g >
<title>TrianglePipeline::~TrianglePipeline()&lt;0000000000027800&gt; (3 samples, 0.11%)</title><rect x="1179.4" y="677" width="1.2" height="15.0" fill="rgb(250,128,45)" rx="2" ry="2" />
<text  x="1182.35" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.07%)</title><rect x="427.3" y="645" width="0.9" height="15.0" fill="rgb(235,4,33)" rx="2" ry="2" />
<text  x="430.32" y="655.5" ></text>
</g>
<g >
<title>_XReply&lt;0000000000047b60&gt; (1 samples, 0.04%)</title><rect x="35.6" y="645" width="0.4" height="15.0" fill="rgb(224,192,1)" rx="2" ry="2" />
<text  x="38.55" y="655.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (3 samples, 0.11%)</title><rect x="421.8" y="677" width="1.3" height="15.0" fill="rgb(231,204,28)" rx="2" ry="2" />
<text  x="424.79" y="687.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (2 samples, 0.07%)</title><rect x="36.0" y="485" width="0.8" height="15.0" fill="rgb(223,60,50)" rx="2" ry="2" />
<text  x="38.98" y="495.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="412.4" y="581" width="0.4" height="15.0" fill="rgb(247,41,24)" rx="2" ry="2" />
<text  x="415.42" y="591.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="36.0" y="533" width="0.8" height="15.0" fill="rgb(232,169,12)" rx="2" ry="2" />
<text  x="38.98" y="543.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.04%)</title><rect x="39.0" y="597" width="0.4" height="15.0" fill="rgb(247,109,38)" rx="2" ry="2" />
<text  x="41.96" y="607.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (2 samples, 0.07%)</title><rect x="218.2" y="629" width="0.9" height="15.0" fill="rgb(244,122,10)" rx="2" ry="2" />
<text  x="221.24" y="639.5" ></text>
</g>
<g >
<title>__shared_count (2 samples, 0.07%)</title><rect x="404.3" y="725" width="0.9" height="15.0" fill="rgb(218,172,22)" rx="2" ry="2" />
<text  x="407.33" y="735.5" ></text>
</g>
<g >
<title>SpinLockHolder::SpinLockHolder(SpinLock*)[inline] (1 samples, 0.04%)</title><rect x="39.0" y="453" width="0.4" height="15.0" fill="rgb(226,187,20)" rx="2" ry="2" />
<text  x="41.96" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (14 samples, 0.51%)</title><rect x="1181.9" y="517" width="6.0" height="15.0" fill="rgb(211,4,30)" rx="2" ry="2" />
<text  x="1184.91" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.04%)</title><rect x="38.5" y="565" width="0.5" height="15.0" fill="rgb(254,125,39)" rx="2" ry="2" />
<text  x="41.53" y="575.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (511 samples, 18.44%)</title><rect x="42.4" y="725" width="217.6" height="15.0" fill="rgb(237,40,23)" rx="2" ry="2" />
<text  x="45.36" y="735.5" >TexturemapRasterizer::drawFl..</text>
</g>
<g >
<title>~_Safe_unordered_container_base (14 samples, 0.51%)</title><rect x="1181.9" y="437" width="6.0" height="15.0" fill="rgb(244,142,34)" rx="2" ry="2" />
<text  x="1184.91" y="447.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="41.5" y="741" width="0.4" height="15.0" fill="rgb(239,117,32)" rx="2" ry="2" />
<text  x="44.51" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="376.6" y="661" width="0.5" height="15.0" fill="rgb(250,66,11)" rx="2" ry="2" />
<text  x="379.65" y="671.5" ></text>
</g>
<g >
<title>vector (15 samples, 0.54%)</title><rect x="1181.5" y="565" width="6.4" height="15.0" fill="rgb(238,88,10)" rx="2" ry="2" />
<text  x="1184.48" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1174.2" y="565" width="0.5" height="15.0" fill="rgb(253,43,19)" rx="2" ry="2" />
<text  x="1177.24" y="575.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="415.8" y="693" width="0.5" height="15.0" fill="rgb(245,188,40)" rx="2" ry="2" />
<text  x="418.82" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="419.2" y="677" width="0.5" height="15.0" fill="rgb(227,94,11)" rx="2" ry="2" />
<text  x="422.23" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1158.5" y="613" width="0.4" height="15.0" fill="rgb(206,30,4)" rx="2" ry="2" />
<text  x="1161.49" y="623.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="415.8" y="725" width="0.5" height="15.0" fill="rgb(230,60,8)" rx="2" ry="2" />
<text  x="418.82" y="735.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.04%)</title><rect x="1188.3" y="677" width="0.4" height="15.0" fill="rgb(206,214,5)" rx="2" ry="2" />
<text  x="1191.30" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (1 samples, 0.04%)</title><rect x="412.8" y="661" width="0.5" height="15.0" fill="rgb(246,189,13)" rx="2" ry="2" />
<text  x="415.84" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="1163.6" y="565" width="0.4" height="15.0" fill="rgb(230,126,5)" rx="2" ry="2" />
<text  x="1166.60" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (27 samples, 0.97%)</title><rect x="363.9" y="677" width="11.5" height="15.0" fill="rgb(235,145,13)" rx="2" ry="2" />
<text  x="366.87" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (10 samples, 0.36%)</title><rect x="420.5" y="725" width="4.3" height="15.0" fill="rgb(218,205,34)" rx="2" ry="2" />
<text  x="423.51" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::end() const (1 samples, 0.04%)</title><rect x="41.9" y="677" width="0.5" height="15.0" fill="rgb(243,13,0)" rx="2" ry="2" />
<text  x="44.94" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (1 samples, 0.04%)</title><rect x="1189.6" y="341" width="0.4" height="15.0" fill="rgb(229,221,34)" rx="2" ry="2" />
<text  x="1192.57" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1165.7" y="597" width="0.5" height="15.0" fill="rgb(249,224,5)" rx="2" ry="2" />
<text  x="1168.73" y="607.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (2 samples, 0.07%)</title><rect x="1188.7" y="741" width="0.9" height="15.0" fill="rgb(207,4,18)" rx="2" ry="2" />
<text  x="1191.72" y="751.5" ></text>
</g>
<g >
<title>~vector (6 samples, 0.22%)</title><rect x="300.0" y="677" width="2.6" height="15.0" fill="rgb(214,109,48)" rx="2" ry="2" />
<text  x="303.00" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="406.9" y="693" width="0.8" height="15.0" fill="rgb(223,29,36)" rx="2" ry="2" />
<text  x="409.88" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1167.0" y="533" width="0.4" height="15.0" fill="rgb(226,5,35)" rx="2" ry="2" />
<text  x="1170.00" y="543.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1188.7" y="405" width="0.9" height="15.0" fill="rgb(225,133,47)" rx="2" ry="2" />
<text  x="1191.72" y="415.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (38 samples, 1.37%)</title><rect x="240.4" y="677" width="16.2" height="15.0" fill="rgb(219,68,22)" rx="2" ry="2" />
<text  x="243.38" y="687.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e050&gt; (1 samples, 0.04%)</title><rect x="432.4" y="677" width="0.5" height="15.0" fill="rgb(244,162,53)" rx="2" ry="2" />
<text  x="435.43" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.22%)</title><rect x="36.0" y="693" width="2.5" height="15.0" fill="rgb(234,31,25)" rx="2" ry="2" />
<text  x="38.98" y="703.5" ></text>
</g>
<g >
<title>operator*(float const&amp;, Vec3d const&amp;)&lt;000000000007fb50&gt; (1 samples, 0.04%)</title><rect x="259.1" y="709" width="0.4" height="15.0" fill="rgb(237,188,40)" rx="2" ry="2" />
<text  x="262.12" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.07%)</title><rect x="1164.0" y="597" width="0.9" height="15.0" fill="rgb(222,229,51)" rx="2" ry="2" />
<text  x="1167.02" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1158.5" y="597" width="0.4" height="15.0" fill="rgb(227,181,54)" rx="2" ry="2" />
<text  x="1161.49" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (2 samples, 0.07%)</title><rect x="1188.7" y="181" width="0.9" height="15.0" fill="rgb(226,144,46)" rx="2" ry="2" />
<text  x="1191.72" y="191.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.04%)</title><rect x="1189.6" y="693" width="0.4" height="15.0" fill="rgb(222,42,3)" rx="2" ry="2" />
<text  x="1192.57" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (4 samples, 0.14%)</title><rect x="414.1" y="725" width="1.7" height="15.0" fill="rgb(226,126,29)" rx="2" ry="2" />
<text  x="417.12" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.04%)</title><rect x="1181.5" y="389" width="0.4" height="15.0" fill="rgb(220,98,19)" rx="2" ry="2" />
<text  x="1184.48" y="399.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1175.9" y="677" width="0.5" height="15.0" fill="rgb(205,82,40)" rx="2" ry="2" />
<text  x="1178.95" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1177.2" y="693" width="0.5" height="15.0" fill="rgb(222,137,54)" rx="2" ry="2" />
<text  x="1180.22" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (23 samples, 0.83%)</title><rect x="223.8" y="677" width="9.8" height="15.0" fill="rgb(209,179,12)" rx="2" ry="2" />
<text  x="226.77" y="687.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.04%)</title><rect x="1178.9" y="741" width="0.5" height="15.0" fill="rgb(219,29,6)" rx="2" ry="2" />
<text  x="1181.93" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="194.0" y="645" width="0.8" height="15.0" fill="rgb(242,47,2)" rx="2" ry="2" />
<text  x="196.96" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned int)&lt;0000000000029e60&gt; (1 samples, 0.04%)</title><rect x="1189.1" y="117" width="0.5" height="15.0" fill="rgb(245,39,7)" rx="2" ry="2" />
<text  x="1192.15" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="412.4" y="613" width="0.4" height="15.0" fill="rgb(238,141,54)" rx="2" ry="2" />
<text  x="415.42" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="420.1" y="677" width="0.4" height="15.0" fill="rgb(247,71,0)" rx="2" ry="2" />
<text  x="423.08" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1161.5" y="597" width="0.4" height="15.0" fill="rgb(223,197,2)" rx="2" ry="2" />
<text  x="1164.47" y="607.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1163.6" y="613" width="0.4" height="15.0" fill="rgb(246,157,46)" rx="2" ry="2" />
<text  x="1166.60" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="222.5" y="661" width="0.4" height="15.0" fill="rgb(225,148,18)" rx="2" ry="2" />
<text  x="225.49" y="671.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.04%)</title><rect x="1187.9" y="693" width="0.4" height="15.0" fill="rgb(226,139,9)" rx="2" ry="2" />
<text  x="1190.87" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (8 samples, 0.29%)</title><rect x="226.3" y="645" width="3.4" height="15.0" fill="rgb(213,45,16)" rx="2" ry="2" />
<text  x="229.33" y="655.5" ></text>
</g>
<g >
<title>XML_ParseBuffer&lt;0000000000010b20&gt; (1 samples, 0.04%)</title><rect x="36.8" y="533" width="0.5" height="15.0" fill="rgb(242,40,14)" rx="2" ry="2" />
<text  x="39.83" y="543.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="36.0" y="501" width="0.8" height="15.0" fill="rgb(237,156,17)" rx="2" ry="2" />
<text  x="38.98" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (1 samples, 0.04%)</title><rect x="409.0" y="645" width="0.4" height="15.0" fill="rgb(213,69,38)" rx="2" ry="2" />
<text  x="412.01" y="655.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.04%)</title><rect x="39.0" y="581" width="0.4" height="15.0" fill="rgb(241,222,54)" rx="2" ry="2" />
<text  x="41.96" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1170.8" y="517" width="0.5" height="15.0" fill="rgb(212,13,22)" rx="2" ry="2" />
<text  x="1173.84" y="527.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="36.0" y="453" width="0.8" height="15.0" fill="rgb(210,44,42)" rx="2" ry="2" />
<text  x="38.98" y="463.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;00000000000630a0&gt; (40 samples, 1.44%)</title><rect x="386.9" y="709" width="17.0" height="15.0" fill="rgb(225,36,5)" rx="2" ry="2" />
<text  x="389.87" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="645" width="6.4" height="15.0" fill="rgb(246,96,29)" rx="2" ry="2" />
<text  x="1184.48" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (12 samples, 0.43%)</title><rect x="165.9" y="661" width="5.1" height="15.0" fill="rgb(210,119,33)" rx="2" ry="2" />
<text  x="168.86" y="671.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="221.6" y="661" width="0.5" height="15.0" fill="rgb(221,72,28)" rx="2" ry="2" />
<text  x="224.64" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (4 samples, 0.14%)</title><rect x="79.4" y="661" width="1.7" height="15.0" fill="rgb(240,206,12)" rx="2" ry="2" />
<text  x="82.41" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.04%)</title><rect x="1188.3" y="693" width="0.4" height="15.0" fill="rgb(246,90,5)" rx="2" ry="2" />
<text  x="1191.30" y="703.5" ></text>
</g>
<g >
<title>__shared_ptr (2 samples, 0.07%)</title><rect x="222.1" y="693" width="0.8" height="15.0" fill="rgb(249,0,26)" rx="2" ry="2" />
<text  x="225.07" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="422.2" y="565" width="0.4" height="15.0" fill="rgb(233,157,53)" rx="2" ry="2" />
<text  x="425.21" y="575.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (16 samples, 0.58%)</title><rect x="105.0" y="645" width="6.8" height="15.0" fill="rgb(243,207,2)" rx="2" ry="2" />
<text  x="107.96" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (26 samples, 0.94%)</title><rect x="392.4" y="693" width="11.1" height="15.0" fill="rgb(235,42,43)" rx="2" ry="2" />
<text  x="395.40" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="549" width="0.5" height="15.0" fill="rgb(244,102,42)" rx="2" ry="2" />
<text  x="433.73" y="559.5" ></text>
</g>
<g >
<title>_IO_file_setbuf@@GLIBC_2.2.5&lt;000000000007d570&gt; (1 samples, 0.04%)</title><rect x="41.5" y="629" width="0.4" height="15.0" fill="rgb(250,124,4)" rx="2" ry="2" />
<text  x="44.51" y="639.5" ></text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2&lt;0000000000085970&gt; (1 samples, 0.04%)</title><rect x="1120.2" y="581" width="0.4" height="15.0" fill="rgb(224,218,4)" rx="2" ry="2" />
<text  x="1123.16" y="591.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="375.4" y="661" width="0.4" height="15.0" fill="rgb(227,0,19)" rx="2" ry="2" />
<text  x="378.37" y="671.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;00000000000fcad0&gt; (1 samples, 0.04%)</title><rect x="432.4" y="629" width="0.5" height="15.0" fill="rgb(212,22,17)" rx="2" ry="2" />
<text  x="435.43" y="639.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="429.5" y="677" width="0.8" height="15.0" fill="rgb(230,135,32)" rx="2" ry="2" />
<text  x="432.45" y="687.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1177.2" y="661" width="0.5" height="15.0" fill="rgb(208,36,40)" rx="2" ry="2" />
<text  x="1180.22" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="431.6" y="709" width="0.4" height="15.0" fill="rgb(225,8,43)" rx="2" ry="2" />
<text  x="434.58" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (1 samples, 0.04%)</title><rect x="270.2" y="677" width="0.4" height="15.0" fill="rgb(222,191,40)" rx="2" ry="2" />
<text  x="273.19" y="687.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000065ea0&gt; (852 samples, 30.75%)</title><rect x="42.4" y="741" width="362.8" height="15.0" fill="rgb(248,186,44)" rx="2" ry="2" />
<text  x="45.36" y="751.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;00000000..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1188.7" y="485" width="0.9" height="15.0" fill="rgb(229,179,21)" rx="2" ry="2" />
<text  x="1191.72" y="495.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (8 samples, 0.29%)</title><rect x="36.0" y="741" width="3.4" height="15.0" fill="rgb(214,193,31)" rx="2" ry="2" />
<text  x="38.98" y="751.5" ></text>
</g>
<g >
<title>_Vector_impl (5 samples, 0.18%)</title><rect x="75.6" y="677" width="2.1" height="15.0" fill="rgb(218,112,13)" rx="2" ry="2" />
<text  x="78.58" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.14%)</title><rect x="39.4" y="741" width="1.7" height="15.0" fill="rgb(240,24,0)" rx="2" ry="2" />
<text  x="42.38" y="751.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.07%)</title><rect x="429.5" y="725" width="0.8" height="15.0" fill="rgb(237,217,16)" rx="2" ry="2" />
<text  x="432.45" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.14%)</title><rect x="1172.1" y="629" width="1.7" height="15.0" fill="rgb(220,139,6)" rx="2" ry="2" />
<text  x="1175.11" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1167.0" y="549" width="0.4" height="15.0" fill="rgb(220,62,29)" rx="2" ry="2" />
<text  x="1170.00" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1156.8" y="709" width="0.8" height="15.0" fill="rgb(225,71,47)" rx="2" ry="2" />
<text  x="1159.78" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_reset()&lt;00000000000d23b0&gt; (1 samples, 0.04%)</title><rect x="422.6" y="613" width="0.5" height="15.0" fill="rgb(210,139,17)" rx="2" ry="2" />
<text  x="425.64" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (14 samples, 0.51%)</title><rect x="1181.9" y="421" width="6.0" height="15.0" fill="rgb(212,211,36)" rx="2" ry="2" />
<text  x="1184.91" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="1164.0" y="533" width="0.4" height="15.0" fill="rgb(216,6,12)" rx="2" ry="2" />
<text  x="1167.02" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (4 samples, 0.14%)</title><rect x="116.9" y="693" width="1.7" height="15.0" fill="rgb(221,193,6)" rx="2" ry="2" />
<text  x="119.89" y="703.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (4 samples, 0.14%)</title><rect x="115.2" y="629" width="1.7" height="15.0" fill="rgb(213,204,5)" rx="2" ry="2" />
<text  x="118.18" y="639.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (1 samples, 0.04%)</title><rect x="36.8" y="517" width="0.5" height="15.0" fill="rgb(242,93,40)" rx="2" ry="2" />
<text  x="39.83" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1179.8" y="501" width="0.8" height="15.0" fill="rgb(250,163,16)" rx="2" ry="2" />
<text  x="1182.78" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="38.5" y="629" width="0.5" height="15.0" fill="rgb(246,77,25)" rx="2" ry="2" />
<text  x="41.53" y="639.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="403.9" y="709" width="0.4" height="15.0" fill="rgb(238,123,2)" rx="2" ry="2" />
<text  x="406.90" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.04%)</title><rect x="1189.6" y="757" width="0.4" height="15.0" fill="rgb(235,69,21)" rx="2" ry="2" />
<text  x="1192.57" y="767.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (2 samples, 0.07%)</title><rect x="1188.7" y="133" width="0.9" height="15.0" fill="rgb(208,60,47)" rx="2" ry="2" />
<text  x="1191.72" y="143.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() (1 samples, 0.04%)</title><rect x="1169.6" y="597" width="0.4" height="15.0" fill="rgb(218,58,52)" rx="2" ry="2" />
<text  x="1172.56" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;::insert_or_assign&lt;TexturePNG&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, TexturePNG&amp;) (3 samples, 0.11%)</title><rect x="1182.3" y="341" width="1.3" height="15.0" fill="rgb(206,150,17)" rx="2" ry="2" />
<text  x="1185.33" y="351.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.04%)</title><rect x="366.0" y="661" width="0.4" height="15.0" fill="rgb(239,138,39)" rx="2" ry="2" />
<text  x="369.00" y="671.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;0000000000026190&gt; (1 samples, 0.04%)</title><rect x="1189.6" y="677" width="0.4" height="15.0" fill="rgb(251,151,13)" rx="2" ry="2" />
<text  x="1192.57" y="687.5" ></text>
</g>
<g >
<title>0x00007fa7bddcf355 (1 samples, 0.04%)</title><rect x="40.2" y="613" width="0.5" height="15.0" fill="rgb(245,126,8)" rx="2" ry="2" />
<text  x="43.23" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1171.7" y="597" width="0.4" height="15.0" fill="rgb(215,129,20)" rx="2" ry="2" />
<text  x="1174.69" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="677" width="6.4" height="15.0" fill="rgb(253,195,1)" rx="2" ry="2" />
<text  x="1184.48" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_get_mutex()&lt;00000000000d2680&gt; (1 samples, 0.04%)</title><rect x="1172.1" y="565" width="0.4" height="15.0" fill="rgb(215,111,47)" rx="2" ry="2" />
<text  x="1175.11" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="415.4" y="709" width="0.4" height="15.0" fill="rgb(251,182,32)" rx="2" ry="2" />
<text  x="418.40" y="719.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.04%)</title><rect x="426.0" y="645" width="0.5" height="15.0" fill="rgb(213,36,10)" rx="2" ry="2" />
<text  x="429.04" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="423.9" y="645" width="0.4" height="15.0" fill="rgb(219,227,27)" rx="2" ry="2" />
<text  x="426.92" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1175.1" y="709" width="0.8" height="15.0" fill="rgb(221,201,14)" rx="2" ry="2" />
<text  x="1178.10" y="719.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (2 samples, 0.07%)</title><rect x="37.3" y="581" width="0.8" height="15.0" fill="rgb(253,128,27)" rx="2" ry="2" />
<text  x="40.25" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (29 samples, 1.05%)</title><rect x="99.4" y="661" width="12.4" height="15.0" fill="rgb(244,71,46)" rx="2" ry="2" />
<text  x="102.43" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (1 samples, 0.04%)</title><rect x="409.0" y="661" width="0.4" height="15.0" fill="rgb(240,160,29)" rx="2" ry="2" />
<text  x="412.01" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1163.2" y="629" width="0.4" height="15.0" fill="rgb(206,56,54)" rx="2" ry="2" />
<text  x="1166.17" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1171.7" y="565" width="0.4" height="15.0" fill="rgb(249,155,21)" rx="2" ry="2" />
<text  x="1174.69" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.04%)</title><rect x="222.5" y="677" width="0.4" height="15.0" fill="rgb(213,200,33)" rx="2" ry="2" />
<text  x="225.49" y="687.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (6 samples, 0.22%)</title><rect x="1182.3" y="389" width="2.6" height="15.0" fill="rgb(231,152,39)" rx="2" ry="2" />
<text  x="1185.33" y="399.5" ></text>
</g>
<g >
<title>__dynamic_cast&lt;00000000000a4730&gt; (1 samples, 0.04%)</title><rect x="1188.3" y="597" width="0.4" height="15.0" fill="rgb(231,11,31)" rx="2" ry="2" />
<text  x="1191.30" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.07%)</title><rect x="1170.0" y="629" width="0.8" height="15.0" fill="rgb(227,190,51)" rx="2" ry="2" />
<text  x="1172.99" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (5 samples, 0.18%)</title><rect x="412.0" y="709" width="2.1" height="15.0" fill="rgb(207,149,17)" rx="2" ry="2" />
<text  x="414.99" y="719.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.04%)</title><rect x="404.8" y="645" width="0.4" height="15.0" fill="rgb(252,129,21)" rx="2" ry="2" />
<text  x="407.75" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.7" y="293" width="0.9" height="15.0" fill="rgb(208,146,5)" rx="2" ry="2" />
<text  x="1191.72" y="303.5" ></text>
</g>
<g >
<title>_Safe_sequence (2 samples, 0.07%)</title><rect x="181.6" y="677" width="0.9" height="15.0" fill="rgb(210,179,1)" rx="2" ry="2" />
<text  x="184.61" y="687.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (6 samples, 0.22%)</title><rect x="292.8" y="661" width="2.5" height="15.0" fill="rgb(245,17,2)" rx="2" ry="2" />
<text  x="295.76" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1189.6" y="629" width="0.4" height="15.0" fill="rgb(238,219,7)" rx="2" ry="2" />
<text  x="1192.57" y="639.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.04%)</title><rect x="424.3" y="709" width="0.5" height="15.0" fill="rgb(205,135,45)" rx="2" ry="2" />
<text  x="427.34" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="39.0" y="677" width="0.4" height="15.0" fill="rgb(223,1,35)" rx="2" ry="2" />
<text  x="41.96" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="423.9" y="661" width="0.4" height="15.0" fill="rgb(248,201,38)" rx="2" ry="2" />
<text  x="426.92" y="671.5" ></text>
</g>
<g >
<title>0x00007fa7bddd4b56 (2 samples, 0.07%)</title><rect x="39.4" y="693" width="0.8" height="15.0" fill="rgb(213,110,7)" rx="2" ry="2" />
<text  x="42.38" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (31 samples, 1.12%)</title><rect x="121.1" y="677" width="13.2" height="15.0" fill="rgb(226,94,28)" rx="2" ry="2" />
<text  x="124.14" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="1160.2" y="645" width="0.8" height="15.0" fill="rgb(238,178,27)" rx="2" ry="2" />
<text  x="1163.19" y="655.5" ></text>
</g>
<g >
<title>operator+(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="418.0" y="709" width="0.4" height="15.0" fill="rgb(214,46,41)" rx="2" ry="2" />
<text  x="420.95" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="597" width="0.5" height="15.0" fill="rgb(229,79,35)" rx="2" ry="2" />
<text  x="433.73" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::unordered_map(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="41.9" y="725" width="0.5" height="15.0" fill="rgb(248,181,34)" rx="2" ry="2" />
<text  x="44.94" y="735.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (42 samples, 1.52%)</title><rect x="238.7" y="693" width="17.9" height="15.0" fill="rgb(236,182,3)" rx="2" ry="2" />
<text  x="241.68" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1,640 samples, 59.18%)</title><rect x="458.0" y="693" width="698.4" height="15.0" fill="rgb(232,137,50)" rx="2" ry="2" />
<text  x="460.98" y="703.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.22%)</title><rect x="36.0" y="677" width="2.5" height="15.0" fill="rgb(216,115,49)" rx="2" ry="2" />
<text  x="38.98" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::Push(void*)[inline] (1 samples, 0.04%)</title><rect x="1188.7" y="37" width="0.4" height="15.0" fill="rgb(230,170,15)" rx="2" ry="2" />
<text  x="1191.72" y="47.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.18%)</title><rect x="36.0" y="661" width="2.1" height="15.0" fill="rgb(229,121,26)" rx="2" ry="2" />
<text  x="38.98" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (2 samples, 0.07%)</title><rect x="1164.0" y="581" width="0.9" height="15.0" fill="rgb(247,207,42)" rx="2" ry="2" />
<text  x="1167.02" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="430.7" y="613" width="0.5" height="15.0" fill="rgb(213,41,3)" rx="2" ry="2" />
<text  x="433.73" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.04%)</title><rect x="258.7" y="709" width="0.4" height="15.0" fill="rgb(250,19,48)" rx="2" ry="2" />
<text  x="261.69" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (14 samples, 0.51%)</title><rect x="284.7" y="661" width="5.9" height="15.0" fill="rgb(221,199,33)" rx="2" ry="2" />
<text  x="287.67" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.32%)</title><rect x="1164.0" y="677" width="3.9" height="15.0" fill="rgb(243,68,0)" rx="2" ry="2" />
<text  x="1167.02" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (14 samples, 0.51%)</title><rect x="1181.9" y="485" width="6.0" height="15.0" fill="rgb(213,110,45)" rx="2" ry="2" />
<text  x="1184.91" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (19 samples, 0.69%)</title><rect x="304.3" y="677" width="8.0" height="15.0" fill="rgb(221,189,3)" rx="2" ry="2" />
<text  x="307.25" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.07%)</title><rect x="378.4" y="693" width="0.8" height="15.0" fill="rgb(253,174,41)" rx="2" ry="2" />
<text  x="381.35" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="419.7" y="725" width="0.8" height="15.0" fill="rgb(227,42,4)" rx="2" ry="2" />
<text  x="422.66" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="39.0" y="533" width="0.4" height="15.0" fill="rgb(211,13,54)" rx="2" ry="2" />
<text  x="41.96" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="415.4" y="693" width="0.4" height="15.0" fill="rgb(241,204,45)" rx="2" ry="2" />
<text  x="418.40" y="703.5" ></text>
</g>
<g >
<title>XML_ParserReset&lt;000000000000ed00&gt; (1 samples, 0.04%)</title><rect x="36.8" y="485" width="0.5" height="15.0" fill="rgb(253,226,20)" rx="2" ry="2" />
<text  x="39.83" y="495.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="409.4" y="661" width="0.9" height="15.0" fill="rgb(216,49,36)" rx="2" ry="2" />
<text  x="412.44" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1176.4" y="725" width="0.8" height="15.0" fill="rgb(239,179,44)" rx="2" ry="2" />
<text  x="1179.37" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1174.7" y="709" width="0.4" height="15.0" fill="rgb(209,210,20)" rx="2" ry="2" />
<text  x="1177.67" y="719.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sputc(char)[inline] (1 samples, 0.04%)</title><rect x="41.5" y="709" width="0.4" height="15.0" fill="rgb(236,131,52)" rx="2" ry="2" />
<text  x="44.51" y="719.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="426.0" y="677" width="0.5" height="15.0" fill="rgb(249,123,36)" rx="2" ry="2" />
<text  x="429.04" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264f0&gt; (1 samples, 0.04%)</title><rect x="1189.6" y="565" width="0.4" height="15.0" fill="rgb(209,177,11)" rx="2" ry="2" />
<text  x="1192.57" y="575.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="1166.2" y="597" width="0.4" height="15.0" fill="rgb(227,133,30)" rx="2" ry="2" />
<text  x="1169.15" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1172.5" y="565" width="0.5" height="15.0" fill="rgb(243,42,9)" rx="2" ry="2" />
<text  x="1175.54" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1181.5" y="517" width="0.4" height="15.0" fill="rgb(248,24,31)" rx="2" ry="2" />
<text  x="1184.48" y="527.5" ></text>
</g>
<g >
<title>__shared_ptr (4 samples, 0.14%)</title><rect x="118.6" y="693" width="1.7" height="15.0" fill="rgb(219,75,13)" rx="2" ry="2" />
<text  x="121.59" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="430.3" y="693" width="0.4" height="15.0" fill="rgb(225,120,26)" rx="2" ry="2" />
<text  x="433.30" y="703.5" ></text>
</g>
<g >
<title>xcb_writev&lt;000000000000e7b0&gt; (1 samples, 0.04%)</title><rect x="35.6" y="613" width="0.4" height="15.0" fill="rgb(214,135,36)" rx="2" ry="2" />
<text  x="38.55" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*) (3 samples, 0.11%)</title><rect x="1179.4" y="741" width="1.2" height="15.0" fill="rgb(232,192,1)" rx="2" ry="2" />
<text  x="1182.35" y="751.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (11 samples, 0.40%)</title><rect x="366.4" y="661" width="4.7" height="15.0" fill="rgb(217,161,28)" rx="2" ry="2" />
<text  x="369.43" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::allocate(unsigned long, void const*) (1 samples, 0.04%)</title><rect x="1178.1" y="661" width="0.4" height="15.0" fill="rgb(234,174,18)" rx="2" ry="2" />
<text  x="1181.08" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1165.7" y="629" width="0.5" height="15.0" fill="rgb(243,218,37)" rx="2" ry="2" />
<text  x="1168.73" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1167.4" y="645" width="0.5" height="15.0" fill="rgb(240,89,2)" rx="2" ry="2" />
<text  x="1170.43" y="655.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="198.2" y="661" width="0.4" height="15.0" fill="rgb(221,45,24)" rx="2" ry="2" />
<text  x="201.22" y="671.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1176.8" y="629" width="0.4" height="15.0" fill="rgb(236,117,12)" rx="2" ry="2" />
<text  x="1179.80" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1188.7" y="693" width="0.9" height="15.0" fill="rgb(249,128,18)" rx="2" ry="2" />
<text  x="1191.72" y="703.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (1 samples, 0.04%)</title><rect x="431.6" y="741" width="0.4" height="15.0" fill="rgb(214,163,28)" rx="2" ry="2" />
<text  x="434.58" y="751.5" ></text>
</g>
<g >
<title>_Vector_impl (2 samples, 0.07%)</title><rect x="182.5" y="677" width="0.8" height="15.0" fill="rgb(249,125,26)" rx="2" ry="2" />
<text  x="185.46" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060320&gt; (2 samples, 0.07%)</title><rect x="420.9" y="709" width="0.9" height="15.0" fill="rgb(229,157,40)" rx="2" ry="2" />
<text  x="423.93" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (2 samples, 0.07%)</title><rect x="57.3" y="677" width="0.8" height="15.0" fill="rgb(233,136,1)" rx="2" ry="2" />
<text  x="60.27" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="419.2" y="693" width="0.5" height="15.0" fill="rgb(206,54,17)" rx="2" ry="2" />
<text  x="422.23" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1170.4" y="613" width="0.4" height="15.0" fill="rgb(207,37,25)" rx="2" ry="2" />
<text  x="1173.41" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="77.7" y="677" width="0.4" height="15.0" fill="rgb(250,169,43)" rx="2" ry="2" />
<text  x="80.71" y="687.5" ></text>
</g>
<g >
<title>syscall@@GLIBC_2.2.5&lt;0000000000100550&gt; (1 samples, 0.04%)</title><rect x="39.0" y="389" width="0.4" height="15.0" fill="rgb(247,8,24)" rx="2" ry="2" />
<text  x="41.96" y="399.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (2 samples, 0.07%)</title><rect x="426.5" y="645" width="0.8" height="15.0" fill="rgb(241,203,35)" rx="2" ry="2" />
<text  x="429.47" y="655.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="403.9" y="693" width="0.4" height="15.0" fill="rgb(212,32,12)" rx="2" ry="2" />
<text  x="406.90" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.22%)</title><rect x="300.0" y="661" width="2.6" height="15.0" fill="rgb(253,192,31)" rx="2" ry="2" />
<text  x="303.00" y="671.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (3 samples, 0.11%)</title><rect x="133.1" y="645" width="1.2" height="15.0" fill="rgb(207,99,35)" rx="2" ry="2" />
<text  x="136.07" y="655.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::allocate(unsigned long, void const*) (1 samples, 0.04%)</title><rect x="411.1" y="629" width="0.5" height="15.0" fill="rgb(233,74,29)" rx="2" ry="2" />
<text  x="414.14" y="639.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1163.6" y="597" width="0.4" height="15.0" fill="rgb(228,150,38)" rx="2" ry="2" />
<text  x="1166.60" y="607.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (19 samples, 0.69%)</title><rect x="206.3" y="645" width="8.1" height="15.0" fill="rgb(217,124,4)" rx="2" ry="2" />
<text  x="209.31" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="426.9" y="629" width="0.4" height="15.0" fill="rgb(235,11,2)" rx="2" ry="2" />
<text  x="429.90" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::TryGetSizeClass(unsigned long, unsigned int*) const[inline] (1 samples, 0.04%)</title><rect x="404.8" y="581" width="0.4" height="15.0" fill="rgb(221,83,54)" rx="2" ry="2" />
<text  x="407.75" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (4 samples, 0.14%)</title><rect x="1184.9" y="309" width="1.7" height="15.0" fill="rgb(253,21,45)" rx="2" ry="2" />
<text  x="1187.89" y="319.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="430.7" y="629" width="0.5" height="15.0" fill="rgb(228,73,21)" rx="2" ry="2" />
<text  x="433.73" y="639.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (1 samples, 0.04%)</title><rect x="154.8" y="693" width="0.4" height="15.0" fill="rgb(230,7,40)" rx="2" ry="2" />
<text  x="157.79" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.6" y="693" width="0.5" height="15.0" fill="rgb(225,48,11)" rx="2" ry="2" />
<text  x="1183.63" y="703.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;00000000000105d0&gt; (1 samples, 0.04%)</title><rect x="1160.2" y="581" width="0.4" height="15.0" fill="rgb(216,140,31)" rx="2" ry="2" />
<text  x="1163.19" y="591.5" ></text>
</g>
<g >
<title>Event_Scanner::Event_Scanner(SDL_Event&amp;, std::shared_ptr&lt;Renderer&gt;) (1 samples, 0.04%)</title><rect x="35.6" y="741" width="0.4" height="15.0" fill="rgb(235,223,29)" rx="2" ry="2" />
<text  x="38.55" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1159.3" y="613" width="0.9" height="15.0" fill="rgb(225,226,25)" rx="2" ry="2" />
<text  x="1162.34" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1157.6" y="661" width="0.5" height="15.0" fill="rgb(224,39,3)" rx="2" ry="2" />
<text  x="1160.64" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="425.2" y="709" width="0.4" height="15.0" fill="rgb(215,187,13)" rx="2" ry="2" />
<text  x="428.19" y="719.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (7 samples, 0.25%)</title><rect x="696.0" y="581" width="3.0" height="15.0" fill="rgb(251,77,19)" rx="2" ry="2" />
<text  x="699.03" y="591.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream()[inline] (1 samples, 0.04%)</title><rect x="1181.1" y="629" width="0.4" height="15.0" fill="rgb(235,182,52)" rx="2" ry="2" />
<text  x="1184.06" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.11%)</title><rect x="1182.3" y="357" width="1.3" height="15.0" fill="rgb(227,140,36)" rx="2" ry="2" />
<text  x="1185.33" y="367.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="418.4" y="709" width="0.4" height="15.0" fill="rgb(221,120,42)" rx="2" ry="2" />
<text  x="421.38" y="719.5" ></text>
</g>
<g >
<title>0x00007fa7bddd46ee (2 samples, 0.07%)</title><rect x="39.4" y="677" width="0.8" height="15.0" fill="rgb(226,216,50)" rx="2" ry="2" />
<text  x="42.38" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.04%)</title><rect x="1178.1" y="613" width="0.4" height="15.0" fill="rgb(222,160,19)" rx="2" ry="2" />
<text  x="1181.08" y="623.5" ></text>
</g>
<g >
<title>putc (1 samples, 0.04%)</title><rect x="41.5" y="677" width="0.4" height="15.0" fill="rgb(235,195,26)" rx="2" ry="2" />
<text  x="44.51" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (9 samples, 0.32%)</title><rect x="379.6" y="645" width="3.9" height="15.0" fill="rgb(224,73,53)" rx="2" ry="2" />
<text  x="382.63" y="655.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (5 samples, 0.18%)</title><rect x="36.0" y="645" width="2.1" height="15.0" fill="rgb(244,99,24)" rx="2" ry="2" />
<text  x="38.98" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1188.7" y="245" width="0.9" height="15.0" fill="rgb(220,26,16)" rx="2" ry="2" />
<text  x="1191.72" y="255.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="423.9" y="677" width="0.4" height="15.0" fill="rgb(237,71,2)" rx="2" ry="2" />
<text  x="426.92" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1188.7" y="517" width="0.9" height="15.0" fill="rgb(249,62,43)" rx="2" ry="2" />
<text  x="1191.72" y="527.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="432.0" y="693" width="0.4" height="15.0" fill="rgb(212,212,33)" rx="2" ry="2" />
<text  x="435.01" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1176.4" y="677" width="0.8" height="15.0" fill="rgb(208,113,14)" rx="2" ry="2" />
<text  x="1179.37" y="687.5" ></text>
</g>
<g >
<title>OBJ_Lex_textureCoord::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000513e0&gt; (1 samples, 0.04%)</title><rect x="1187.9" y="677" width="0.4" height="15.0" fill="rgb(226,34,40)" rx="2" ry="2" />
<text  x="1190.87" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::PopRange(int, void**, void**)[inline] (1 samples, 0.04%)</title><rect x="1189.1" y="85" width="0.5" height="15.0" fill="rgb(244,7,3)" rx="2" ry="2" />
<text  x="1192.15" y="95.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.07%)</title><rect x="432.0" y="709" width="0.9" height="15.0" fill="rgb(220,131,53)" rx="2" ry="2" />
<text  x="435.01" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::TryPop(void**)[inline] (1 samples, 0.04%)</title><rect x="1178.1" y="597" width="0.4" height="15.0" fill="rgb(227,191,18)" rx="2" ry="2" />
<text  x="1181.08" y="607.5" ></text>
</g>
<g >
<title>0x00007fa7bddd5791 (1 samples, 0.04%)</title><rect x="40.2" y="677" width="0.5" height="15.0" fill="rgb(254,223,1)" rx="2" ry="2" />
<text  x="43.23" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="424.3" y="693" width="0.5" height="15.0" fill="rgb(219,184,18)" rx="2" ry="2" />
<text  x="427.34" y="703.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="38.5" y="661" width="0.5" height="15.0" fill="rgb(247,147,14)" rx="2" ry="2" />
<text  x="41.53" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="709" width="0.5" height="15.0" fill="rgb(242,212,32)" rx="2" ry="2" />
<text  x="1178.95" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (17 samples, 0.61%)</title><rect x="379.6" y="677" width="7.3" height="15.0" fill="rgb(250,202,46)" rx="2" ry="2" />
<text  x="382.63" y="687.5" ></text>
</g>
<g >
<title>vscanf@@GLIBC_2.2.5&lt;000000000007b7e0&gt; (1 samples, 0.04%)</title><rect x="41.1" y="661" width="0.4" height="15.0" fill="rgb(215,150,50)" rx="2" ry="2" />
<text  x="44.09" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1188.7" y="709" width="0.9" height="15.0" fill="rgb(231,15,21)" rx="2" ry="2" />
<text  x="1191.72" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="423.9" y="613" width="0.4" height="15.0" fill="rgb(252,24,1)" rx="2" ry="2" />
<text  x="426.92" y="623.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.07%)</title><rect x="1188.7" y="261" width="0.9" height="15.0" fill="rgb(239,155,51)" rx="2" ry="2" />
<text  x="1191.72" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.04%)</title><rect x="1169.1" y="581" width="0.5" height="15.0" fill="rgb(217,19,47)" rx="2" ry="2" />
<text  x="1172.13" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="410.3" y="661" width="0.4" height="15.0" fill="rgb(232,75,9)" rx="2" ry="2" />
<text  x="413.29" y="671.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (122 samples, 4.40%)</title><rect x="260.8" y="709" width="52.0" height="15.0" fill="rgb(245,97,42)" rx="2" ry="2" />
<text  x="263.82" y="719.5" >Scanl..</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (25 samples, 0.90%)</title><rect x="222.9" y="693" width="10.7" height="15.0" fill="rgb(231,76,34)" rx="2" ry="2" />
<text  x="225.92" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1176.4" y="709" width="0.8" height="15.0" fill="rgb(231,159,49)" rx="2" ry="2" />
<text  x="1179.37" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="429.5" y="709" width="0.8" height="15.0" fill="rgb(241,121,52)" rx="2" ry="2" />
<text  x="432.45" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.14%)</title><rect x="410.3" y="693" width="1.7" height="15.0" fill="rgb(210,161,33)" rx="2" ry="2" />
<text  x="413.29" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;0000000000060320&gt; (2 samples, 0.07%)</title><rect x="424.8" y="725" width="0.8" height="15.0" fill="rgb(250,184,52)" rx="2" ry="2" />
<text  x="427.77" y="735.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1175.5" y="661" width="0.4" height="15.0" fill="rgb(224,40,17)" rx="2" ry="2" />
<text  x="1178.52" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="430.7" y="693" width="0.5" height="15.0" fill="rgb(207,179,47)" rx="2" ry="2" />
<text  x="433.73" y="703.5" ></text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.04%)</title><rect x="1188.7" y="69" width="0.4" height="15.0" fill="rgb(219,109,39)" rx="2" ry="2" />
<text  x="1191.72" y="79.5" ></text>
</g>
<g >
<title>0x00007fa7bddcfb4e (2 samples, 0.07%)</title><rect x="39.4" y="661" width="0.8" height="15.0" fill="rgb(232,90,6)" rx="2" ry="2" />
<text  x="42.38" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1188.7" y="613" width="0.9" height="15.0" fill="rgb(239,71,24)" rx="2" ry="2" />
<text  x="1191.72" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="430.7" y="645" width="0.5" height="15.0" fill="rgb(219,156,39)" rx="2" ry="2" />
<text  x="433.73" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.04%)</title><rect x="1189.6" y="485" width="0.4" height="15.0" fill="rgb(237,156,38)" rx="2" ry="2" />
<text  x="1192.57" y="495.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (4 samples, 0.14%)</title><rect x="373.7" y="645" width="1.7" height="15.0" fill="rgb(209,143,35)" rx="2" ry="2" />
<text  x="376.67" y="655.5" ></text>
</g>
<g >
<title>__write@@GLIBC_2.2.5&lt;00000000000f6e80&gt; (1 samples, 0.04%)</title><rect x="41.5" y="597" width="0.4" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="44.51" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (4 samples, 0.14%)</title><rect x="383.5" y="645" width="1.7" height="15.0" fill="rgb(212,27,52)" rx="2" ry="2" />
<text  x="386.46" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="415.0" y="693" width="0.4" height="15.0" fill="rgb(221,133,10)" rx="2" ry="2" />
<text  x="417.97" y="703.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.04%)</title><rect x="412.8" y="613" width="0.5" height="15.0" fill="rgb(221,39,49)" rx="2" ry="2" />
<text  x="415.84" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1163.6" y="549" width="0.4" height="15.0" fill="rgb(228,107,13)" rx="2" ry="2" />
<text  x="1166.60" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.04%)</title><rect x="1186.6" y="405" width="0.4" height="15.0" fill="rgb(217,149,21)" rx="2" ry="2" />
<text  x="1189.59" y="415.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1189.6" y="517" width="0.4" height="15.0" fill="rgb(253,140,21)" rx="2" ry="2" />
<text  x="1192.57" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.04%)</title><rect x="1160.6" y="613" width="0.4" height="15.0" fill="rgb(214,198,30)" rx="2" ry="2" />
<text  x="1163.62" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (3 samples, 0.11%)</title><rect x="421.8" y="629" width="1.3" height="15.0" fill="rgb(234,78,49)" rx="2" ry="2" />
<text  x="424.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.07%)</title><rect x="427.3" y="677" width="0.9" height="15.0" fill="rgb(211,118,54)" rx="2" ry="2" />
<text  x="430.32" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="412.4" y="597" width="0.4" height="15.0" fill="rgb(231,100,49)" rx="2" ry="2" />
<text  x="415.42" y="607.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt;(double) (1 samples, 0.04%)</title><rect x="41.1" y="725" width="0.4" height="15.0" fill="rgb(242,175,51)" rx="2" ry="2" />
<text  x="44.09" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1184.0" y="293" width="0.5" height="15.0" fill="rgb(206,55,18)" rx="2" ry="2" />
<text  x="1187.04" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="1171.7" y="549" width="0.4" height="15.0" fill="rgb(242,165,12)" rx="2" ry="2" />
<text  x="1174.69" y="559.5" ></text>
</g>
<g >
<title>std::ostream::put(char)&lt;000000000013a8b0&gt; (1 samples, 0.04%)</title><rect x="41.5" y="725" width="0.4" height="15.0" fill="rgb(240,206,29)" rx="2" ry="2" />
<text  x="44.51" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="421.4" y="693" width="0.4" height="15.0" fill="rgb(226,136,1)" rx="2" ry="2" />
<text  x="424.36" y="703.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.04%)</title><rect x="404.8" y="613" width="0.4" height="15.0" fill="rgb(213,170,54)" rx="2" ry="2" />
<text  x="407.75" y="623.5" ></text>
</g>
<g >
<title>~_Safe_sequence_base (2 samples, 0.07%)</title><rect x="1176.4" y="741" width="0.8" height="15.0" fill="rgb(215,135,17)" rx="2" ry="2" />
<text  x="1179.37" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (5 samples, 0.18%)</title><rect x="426.0" y="693" width="2.2" height="15.0" fill="rgb(238,137,8)" rx="2" ry="2" />
<text  x="429.04" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.11%)</title><rect x="1170.8" y="629" width="1.3" height="15.0" fill="rgb(229,174,37)" rx="2" ry="2" />
<text  x="1173.84" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (29 samples, 1.05%)</title><rect x="78.1" y="677" width="12.4" height="15.0" fill="rgb(231,173,30)" rx="2" ry="2" />
<text  x="81.13" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;00000000000621b0&gt; (339 samples, 12.23%)</title><rect x="260.0" y="725" width="144.3" height="15.0" fill="rgb(240,8,16)" rx="2" ry="2" />
<text  x="262.97" y="735.5" >TexturemapRasteriz..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1174.7" y="741" width="0.4" height="15.0" fill="rgb(236,113,22)" rx="2" ry="2" />
<text  x="1177.67" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="629" width="6.4" height="15.0" fill="rgb(228,158,4)" rx="2" ry="2" />
<text  x="1184.48" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.04%)</title><rect x="1176.4" y="629" width="0.4" height="15.0" fill="rgb(245,20,25)" rx="2" ry="2" />
<text  x="1179.37" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (45 samples, 1.62%)</title><rect x="195.2" y="677" width="19.2" height="15.0" fill="rgb(244,42,21)" rx="2" ry="2" />
<text  x="198.24" y="687.5" ></text>
</g>
<g >
<title>MoveAction::update(bool)&lt;000000000000bd40&gt; (1 samples, 0.04%)</title><rect x="41.1" y="741" width="0.4" height="15.0" fill="rgb(214,149,53)" rx="2" ry="2" />
<text  x="44.09" y="751.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (15 samples, 0.54%)</title><rect x="1181.5" y="549" width="6.4" height="15.0" fill="rgb(221,227,12)" rx="2" ry="2" />
<text  x="1184.48" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string(int) (1 samples, 0.04%)</title><rect x="428.6" y="725" width="0.4" height="15.0" fill="rgb(218,155,8)" rx="2" ry="2" />
<text  x="431.60" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="1156.4" y="741" width="1.2" height="15.0" fill="rgb(205,182,29)" rx="2" ry="2" />
<text  x="1159.36" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="413.3" y="677" width="0.8" height="15.0" fill="rgb(229,14,2)" rx="2" ry="2" />
<text  x="416.27" y="687.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="426.0" y="661" width="0.5" height="15.0" fill="rgb(238,123,22)" rx="2" ry="2" />
<text  x="429.04" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.07%)</title><rect x="232.3" y="645" width="0.8" height="15.0" fill="rgb(230,29,15)" rx="2" ry="2" />
<text  x="235.29" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.11%)</title><rect x="121.1" y="661" width="1.3" height="15.0" fill="rgb(248,77,38)" rx="2" ry="2" />
<text  x="124.14" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.7" y="581" width="0.9" height="15.0" fill="rgb(240,26,40)" rx="2" ry="2" />
<text  x="1191.72" y="591.5" ></text>
</g>
</g>
</svg>
