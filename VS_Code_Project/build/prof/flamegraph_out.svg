<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="806.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="789" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="789" > </text>
<g id="frames">
<g >
<title>~vector (4 samples, 0.16%)</title><rect x="301.1" y="581" width="1.9" height="15.0" fill="rgb(227,43,29)" rx="2" ry="2" />
<text  x="304.11" y="591.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.16%)</title><rect x="30.7" y="533" width="1.9" height="15.0" fill="rgb(222,42,35)" rx="2" ry="2" />
<text  x="33.73" y="543.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="30.7" y="485" width="0.5" height="15.0" fill="rgb(250,221,49)" rx="2" ry="2" />
<text  x="33.73" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.12%)</title><rect x="418.9" y="597" width="1.4" height="15.0" fill="rgb(205,85,16)" rx="2" ry="2" />
<text  x="421.88" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.08%)</title><rect x="1165.5" y="501" width="0.9" height="15.0" fill="rgb(217,202,0)" rx="2" ry="2" />
<text  x="1168.50" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1171.2" y="437" width="0.4" height="15.0" fill="rgb(218,146,40)" rx="2" ry="2" />
<text  x="1174.16" y="447.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ostream()[inline] (1 samples, 0.04%)</title><rect x="1187.2" y="533" width="0.4" height="15.0" fill="rgb(231,152,21)" rx="2" ry="2" />
<text  x="1190.17" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063020&gt; (53 samples, 2.12%)</title><rect x="234.7" y="613" width="25.0" height="15.0" fill="rgb(238,195,23)" rx="2" ry="2" />
<text  x="237.69" y="623.5" >T..</text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (2 samples, 0.08%)</title><rect x="418.9" y="549" width="0.9" height="15.0" fill="rgb(247,180,20)" rx="2" ry="2" />
<text  x="421.88" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.08%)</title><rect x="1189.1" y="261" width="0.9" height="15.0" fill="rgb(244,150,19)" rx="2" ry="2" />
<text  x="1192.06" y="271.5" ></text>
</g>
<g >
<title>0x00007fc807a3177e (1 samples, 0.04%)</title><rect x="34.5" y="581" width="0.5" height="15.0" fill="rgb(218,175,15)" rx="2" ry="2" />
<text  x="37.50" y="591.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (4 samples, 0.16%)</title><rect x="200.3" y="565" width="1.9" height="15.0" fill="rgb(214,132,19)" rx="2" ry="2" />
<text  x="203.31" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.08%)</title><rect x="1188.1" y="597" width="1.0" height="15.0" fill="rgb(248,113,42)" rx="2" ry="2" />
<text  x="1191.12" y="607.5" ></text>
</g>
<g >
<title>Renderer::setWindowTitle(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000657a0&gt; (1 samples, 0.04%)</title><rect x="1176.3" y="661" width="0.5" height="15.0" fill="rgb(212,216,1)" rx="2" ry="2" />
<text  x="1179.34" y="671.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.08%)</title><rect x="100.0" y="581" width="0.9" height="15.0" fill="rgb(228,2,18)" rx="2" ry="2" />
<text  x="102.97" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="424.1" y="501" width="0.4" height="15.0" fill="rgb(240,65,18)" rx="2" ry="2" />
<text  x="427.06" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="311.0" y="549" width="0.5" height="15.0" fill="rgb(224,133,43)" rx="2" ry="2" />
<text  x="314.01" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1154.2" y="629" width="0.5" height="15.0" fill="rgb(215,167,41)" rx="2" ry="2" />
<text  x="1157.20" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1159.4" y="533" width="0.5" height="15.0" fill="rgb(254,52,0)" rx="2" ry="2" />
<text  x="1162.38" y="543.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.08%)</title><rect x="1188.1" y="629" width="1.0" height="15.0" fill="rgb(223,106,10)" rx="2" ry="2" />
<text  x="1191.12" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (9 samples, 0.36%)</title><rect x="403.3" y="565" width="4.3" height="15.0" fill="rgb(227,76,31)" rx="2" ry="2" />
<text  x="406.33" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="1177.8" y="645" width="0.9" height="15.0" fill="rgb(219,117,26)" rx="2" ry="2" />
<text  x="1180.75" y="655.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="428.8" y="629" width="0.4" height="15.0" fill="rgb(227,220,49)" rx="2" ry="2" />
<text  x="431.77" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="313.4" y="549" width="0.4" height="15.0" fill="rgb(222,110,33)" rx="2" ry="2" />
<text  x="316.36" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="30.7" y="437" width="0.5" height="15.0" fill="rgb(212,71,36)" rx="2" ry="2" />
<text  x="33.73" y="447.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="433.5" y="597" width="0.5" height="15.0" fill="rgb(251,38,48)" rx="2" ry="2" />
<text  x="436.48" y="607.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1155.1" y="581" width="0.5" height="15.0" fill="rgb(225,146,12)" rx="2" ry="2" />
<text  x="1158.14" y="591.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="1187.2" y="581" width="0.4" height="15.0" fill="rgb(225,25,49)" rx="2" ry="2" />
<text  x="1190.17" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1167.4" y="533" width="0.5" height="15.0" fill="rgb(232,17,32)" rx="2" ry="2" />
<text  x="1170.39" y="543.5" ></text>
</g>
<g >
<title>free_fast_path[inline] (1 samples, 0.04%)</title><rect x="410.9" y="533" width="0.4" height="15.0" fill="rgb(206,42,19)" rx="2" ry="2" />
<text  x="413.87" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="517" width="0.4" height="15.0" fill="rgb(212,20,28)" rx="2" ry="2" />
<text  x="1178.87" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (3 samples, 0.12%)</title><rect x="1159.9" y="549" width="1.4" height="15.0" fill="rgb(237,192,13)" rx="2" ry="2" />
<text  x="1162.85" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="222.4" y="581" width="0.5" height="15.0" fill="rgb(213,168,18)" rx="2" ry="2" />
<text  x="225.45" y="591.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063890&gt; (227 samples, 9.06%)</title><rect x="127.8" y="613" width="106.9" height="15.0" fill="rgb(249,164,29)" rx="2" ry="2" />
<text  x="130.76" y="623.5" >TexturemapRas..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000d2550&gt; (1 samples, 0.04%)</title><rect x="1164.6" y="469" width="0.4" height="15.0" fill="rgb(235,183,25)" rx="2" ry="2" />
<text  x="1167.56" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.04%)</title><rect x="425.5" y="565" width="0.4" height="15.0" fill="rgb(215,167,20)" rx="2" ry="2" />
<text  x="428.47" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1161.7" y="485" width="0.5" height="15.0" fill="rgb(249,152,53)" rx="2" ry="2" />
<text  x="1164.74" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (7 samples, 0.28%)</title><rect x="102.8" y="549" width="3.3" height="15.0" fill="rgb(242,98,18)" rx="2" ry="2" />
<text  x="105.80" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="409.0" y="597" width="0.5" height="15.0" fill="rgb(244,99,35)" rx="2" ry="2" />
<text  x="411.99" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.08%)</title><rect x="1167.4" y="549" width="0.9" height="15.0" fill="rgb(207,133,18)" rx="2" ry="2" />
<text  x="1170.39" y="559.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (7 samples, 0.28%)</title><rect x="1168.3" y="549" width="3.3" height="15.0" fill="rgb(210,181,13)" rx="2" ry="2" />
<text  x="1171.33" y="559.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="430.2" y="597" width="0.5" height="15.0" fill="rgb(208,24,9)" rx="2" ry="2" />
<text  x="433.18" y="607.5" ></text>
</g>
<g >
<title>0x00007fc807a2cf9d (1 samples, 0.04%)</title><rect x="35.0" y="533" width="0.4" height="15.0" fill="rgb(239,90,19)" rx="2" ry="2" />
<text  x="37.97" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1186.7" y="309" width="0.5" height="15.0" fill="rgb(247,178,50)" rx="2" ry="2" />
<text  x="1189.70" y="319.5" ></text>
</g>
<g >
<title>0x00007fc807a34d2a (1 samples, 0.04%)</title><rect x="34.5" y="533" width="0.5" height="15.0" fill="rgb(230,100,9)" rx="2" ry="2" />
<text  x="37.50" y="543.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.08%)</title><rect x="1160.3" y="485" width="1.0" height="15.0" fill="rgb(222,73,31)" rx="2" ry="2" />
<text  x="1163.32" y="495.5" ></text>
</g>
<g >
<title>0x00007fc807a2cf9d (1 samples, 0.04%)</title><rect x="34.0" y="565" width="0.5" height="15.0" fill="rgb(209,197,2)" rx="2" ry="2" />
<text  x="37.02" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.08%)</title><rect x="1163.1" y="517" width="1.0" height="15.0" fill="rgb(223,130,38)" rx="2" ry="2" />
<text  x="1166.15" y="527.5" ></text>
</g>
<g >
<title>inflate&lt;000000000000c2f0&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="485" width="0.5" height="15.0" fill="rgb(212,46,31)" rx="2" ry="2" />
<text  x="1181.69" y="495.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.08%)</title><rect x="1189.1" y="629" width="0.9" height="15.0" fill="rgb(249,68,28)" rx="2" ry="2" />
<text  x="1192.06" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (473 samples, 18.88%)</title><rect x="36.9" y="629" width="222.8" height="15.0" fill="rgb(227,201,27)" rx="2" ry="2" />
<text  x="39.85" y="639.5" >TexturemapRasterizer::drawFla..</text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (3 samples, 0.12%)</title><rect x="311.5" y="549" width="1.4" height="15.0" fill="rgb(235,209,0)" rx="2" ry="2" />
<text  x="314.48" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1167.9" y="533" width="0.4" height="15.0" fill="rgb(229,70,43)" rx="2" ry="2" />
<text  x="1170.86" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (12 samples, 0.48%)</title><rect x="385.4" y="597" width="5.7" height="15.0" fill="rgb(218,212,38)" rx="2" ry="2" />
<text  x="388.43" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="409.9" y="613" width="0.5" height="15.0" fill="rgb(233,199,21)" rx="2" ry="2" />
<text  x="412.93" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.12%)</title><rect x="1159.9" y="533" width="1.4" height="15.0" fill="rgb(225,162,46)" rx="2" ry="2" />
<text  x="1162.85" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="549" width="0.4" height="15.0" fill="rgb(239,37,49)" rx="2" ry="2" />
<text  x="1182.17" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.08%)</title><rect x="1188.1" y="69" width="1.0" height="15.0" fill="rgb(244,173,52)" rx="2" ry="2" />
<text  x="1191.12" y="79.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (1 samples, 0.04%)</title><rect x="421.2" y="581" width="0.5" height="15.0" fill="rgb(214,12,19)" rx="2" ry="2" />
<text  x="424.23" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="433.5" y="549" width="0.5" height="15.0" fill="rgb(233,50,44)" rx="2" ry="2" />
<text  x="436.48" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="303.9" y="581" width="0.5" height="15.0" fill="rgb(220,125,34)" rx="2" ry="2" />
<text  x="306.94" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (2 samples, 0.08%)</title><rect x="1189.1" y="661" width="0.9" height="15.0" fill="rgb(240,122,27)" rx="2" ry="2" />
<text  x="1192.06" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="1165.5" y="469" width="0.5" height="15.0" fill="rgb(246,92,12)" rx="2" ry="2" />
<text  x="1168.50" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.4" y="581" width="0.4" height="15.0" fill="rgb(217,1,16)" rx="2" ry="2" />
<text  x="430.36" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.4" y="645" width="0.5" height="15.0" fill="rgb(237,111,3)" rx="2" ry="2" />
<text  x="1178.40" y="655.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (1 samples, 0.04%)</title><rect x="435.4" y="645" width="0.4" height="15.0" fill="rgb(217,119,15)" rx="2" ry="2" />
<text  x="438.37" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.04%)</title><rect x="425.5" y="597" width="0.4" height="15.0" fill="rgb(233,7,18)" rx="2" ry="2" />
<text  x="428.47" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1164.6" y="517" width="0.4" height="15.0" fill="rgb(242,89,27)" rx="2" ry="2" />
<text  x="1167.56" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063890&gt; (161 samples, 6.43%)</title><rect x="315.2" y="613" width="75.9" height="15.0" fill="rgb(205,0,39)" rx="2" ry="2" />
<text  x="318.25" y="623.5" >Texturem..</text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.04%)</title><rect x="159.8" y="517" width="0.5" height="15.0" fill="rgb(247,76,11)" rx="2" ry="2" />
<text  x="162.80" y="527.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.08%)</title><rect x="1169.7" y="437" width="1.0" height="15.0" fill="rgb(230,111,4)" rx="2" ry="2" />
<text  x="1172.74" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_base() (1 samples, 0.04%)</title><rect x="1166.0" y="469" width="0.4" height="15.0" fill="rgb(232,160,1)" rx="2" ry="2" />
<text  x="1168.98" y="479.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="433.5" y="533" width="0.5" height="15.0" fill="rgb(215,172,30)" rx="2" ry="2" />
<text  x="436.48" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (5 samples, 0.20%)</title><rect x="217.3" y="549" width="2.3" height="15.0" fill="rgb(242,157,8)" rx="2" ry="2" />
<text  x="220.27" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.08%)</title><rect x="1189.1" y="293" width="0.9" height="15.0" fill="rgb(212,221,47)" rx="2" ry="2" />
<text  x="1192.06" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (3 samples, 0.12%)</title><rect x="1157.0" y="549" width="1.4" height="15.0" fill="rgb(240,104,36)" rx="2" ry="2" />
<text  x="1160.03" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator()(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.04%)</title><rect x="1180.1" y="181" width="0.5" height="15.0" fill="rgb(242,151,36)" rx="2" ry="2" />
<text  x="1183.11" y="191.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.08%)</title><rect x="1188.1" y="229" width="1.0" height="15.0" fill="rgb(208,171,0)" rx="2" ry="2" />
<text  x="1191.12" y="239.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1166.9" y="437" width="0.5" height="15.0" fill="rgb(237,36,37)" rx="2" ry="2" />
<text  x="1169.92" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1168.3" y="485" width="0.5" height="15.0" fill="rgb(246,188,5)" rx="2" ry="2" />
<text  x="1171.33" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="429.7" y="597" width="0.5" height="15.0" fill="rgb(246,24,19)" rx="2" ry="2" />
<text  x="432.71" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_move_assign(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.04%)</title><rect x="1174.9" y="613" width="0.5" height="15.0" fill="rgb(250,11,51)" rx="2" ry="2" />
<text  x="1177.93" y="623.5" ></text>
</g>
<g >
<title>vector (3 samples, 0.12%)</title><rect x="298.8" y="581" width="1.4" height="15.0" fill="rgb(217,98,9)" rx="2" ry="2" />
<text  x="301.76" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="410.4" y="613" width="0.5" height="15.0" fill="rgb(219,160,7)" rx="2" ry="2" />
<text  x="413.40" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="420.3" y="597" width="0.5" height="15.0" fill="rgb(218,24,35)" rx="2" ry="2" />
<text  x="423.29" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="420.8" y="581" width="0.4" height="15.0" fill="rgb(205,155,47)" rx="2" ry="2" />
<text  x="423.76" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="1168.8" y="469" width="0.5" height="15.0" fill="rgb(222,111,53)" rx="2" ry="2" />
<text  x="1171.80" y="479.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.04%)</title><rect x="410.9" y="517" width="0.4" height="15.0" fill="rgb(213,138,54)" rx="2" ry="2" />
<text  x="413.87" y="527.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (2 samples, 0.08%)</title><rect x="418.9" y="533" width="0.9" height="15.0" fill="rgb(247,205,13)" rx="2" ry="2" />
<text  x="421.88" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.08%)</title><rect x="383.5" y="597" width="1.0" height="15.0" fill="rgb(236,177,21)" rx="2" ry="2" />
<text  x="386.55" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (7 samples, 0.28%)</title><rect x="421.7" y="597" width="3.3" height="15.0" fill="rgb(233,7,40)" rx="2" ry="2" />
<text  x="424.70" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (12 samples, 0.48%)</title><rect x="334.6" y="565" width="5.6" height="15.0" fill="rgb(205,192,20)" rx="2" ry="2" />
<text  x="337.56" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (8 samples, 0.32%)</title><rect x="281.3" y="565" width="3.8" height="15.0" fill="rgb(231,219,18)" rx="2" ry="2" />
<text  x="284.33" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="420.8" y="597" width="0.4" height="15.0" fill="rgb(213,33,40)" rx="2" ry="2" />
<text  x="423.76" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1158.4" y="517" width="0.5" height="15.0" fill="rgb(205,206,29)" rx="2" ry="2" />
<text  x="1161.44" y="527.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="434.0" y="485" width="0.4" height="15.0" fill="rgb(212,169,24)" rx="2" ry="2" />
<text  x="436.95" y="495.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="159.3" y="549" width="0.5" height="15.0" fill="rgb(238,205,15)" rx="2" ry="2" />
<text  x="162.33" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1167.9" y="517" width="0.4" height="15.0" fill="rgb(233,33,54)" rx="2" ry="2" />
<text  x="1170.86" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.08%)</title><rect x="1163.1" y="549" width="1.0" height="15.0" fill="rgb(254,10,10)" rx="2" ry="2" />
<text  x="1166.15" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="1174.9" y="517" width="0.5" height="15.0" fill="rgb(249,92,1)" rx="2" ry="2" />
<text  x="1177.93" y="527.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1166.4" y="501" width="0.5" height="15.0" fill="rgb(210,82,49)" rx="2" ry="2" />
<text  x="1169.45" y="511.5" ></text>
</g>
<g >
<title>_Vector_impl (2 samples, 0.08%)</title><rect x="278.5" y="581" width="0.9" height="15.0" fill="rgb(235,160,43)" rx="2" ry="2" />
<text  x="281.50" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (2 samples, 0.08%)</title><rect x="1189.1" y="213" width="0.9" height="15.0" fill="rgb(211,100,28)" rx="2" ry="2" />
<text  x="1192.06" y="223.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1175.4" y="565" width="0.5" height="15.0" fill="rgb(248,47,1)" rx="2" ry="2" />
<text  x="1178.40" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.4" y="549" width="0.5" height="15.0" fill="rgb(237,229,50)" rx="2" ry="2" />
<text  x="1178.40" y="559.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (2 samples, 0.08%)</title><rect x="86.3" y="565" width="1.0" height="15.0" fill="rgb(208,225,21)" rx="2" ry="2" />
<text  x="89.31" y="575.5" ></text>
</g>
<g >
<title>0x00007fc807a3bfc2 (1 samples, 0.04%)</title><rect x="34.5" y="549" width="0.5" height="15.0" fill="rgb(226,165,50)" rx="2" ry="2" />
<text  x="37.50" y="559.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (568 samples, 22.67%)</title><rect x="886.2" y="581" width="267.5" height="15.0" fill="rgb(216,71,17)" rx="2" ry="2" />
<text  x="889.17" y="591.5" >nouveau_drm_screen_create</text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.08%)</title><rect x="1169.7" y="453" width="1.0" height="15.0" fill="rgb(211,179,53)" rx="2" ry="2" />
<text  x="1172.74" y="463.5" ></text>
</g>
<g >
<title>_Xutf8TextListToTextProperty&lt;00000000000552c0&gt; (1 samples, 0.04%)</title><rect x="1176.3" y="629" width="0.5" height="15.0" fill="rgb(228,103,46)" rx="2" ry="2" />
<text  x="1179.34" y="639.5" ></text>
</g>
<g >
<title>_Parameter (3 samples, 0.12%)</title><rect x="202.2" y="565" width="1.4" height="15.0" fill="rgb(237,207,12)" rx="2" ry="2" />
<text  x="205.19" y="575.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.04%)</title><rect x="105.6" y="533" width="0.5" height="15.0" fill="rgb(223,174,45)" rx="2" ry="2" />
<text  x="108.62" y="543.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (192 samples, 7.66%)</title><rect x="37.3" y="613" width="90.5" height="15.0" fill="rgb(205,13,18)" rx="2" ry="2" />
<text  x="40.32" y="623.5" >ScanlineRa..</text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.04%)</title><rect x="410.9" y="501" width="0.4" height="15.0" fill="rgb(216,104,17)" rx="2" ry="2" />
<text  x="413.87" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.08%)</title><rect x="1188.1" y="293" width="1.0" height="15.0" fill="rgb(208,8,1)" rx="2" ry="2" />
<text  x="1191.12" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="1169.3" y="469" width="0.4" height="15.0" fill="rgb(238,49,1)" rx="2" ry="2" />
<text  x="1172.27" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.7" y="437" width="0.5" height="15.0" fill="rgb(240,138,34)" rx="2" ry="2" />
<text  x="1173.69" y="447.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="414.2" y="597" width="0.4" height="15.0" fill="rgb(232,199,29)" rx="2" ry="2" />
<text  x="417.17" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.08%)</title><rect x="429.2" y="613" width="1.0" height="15.0" fill="rgb(230,6,35)" rx="2" ry="2" />
<text  x="432.24" y="623.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.04%)</title><rect x="368.5" y="565" width="0.4" height="15.0" fill="rgb(205,120,4)" rx="2" ry="2" />
<text  x="371.48" y="575.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (1 samples, 0.04%)</title><rect x="340.2" y="597" width="0.5" height="15.0" fill="rgb(240,40,28)" rx="2" ry="2" />
<text  x="343.21" y="607.5" ></text>
</g>
<g >
<title>_XrmDefaultInitParseInfo&lt;0000000000054bb0&gt; (1 samples, 0.04%)</title><rect x="1176.3" y="613" width="0.5" height="15.0" fill="rgb(232,177,47)" rx="2" ry="2" />
<text  x="1179.34" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (7 samples, 0.28%)</title><rect x="430.2" y="629" width="3.3" height="15.0" fill="rgb(249,91,13)" rx="2" ry="2" />
<text  x="433.18" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063020&gt; (39 samples, 1.56%)</title><rect x="391.1" y="613" width="18.4" height="15.0" fill="rgb(220,214,11)" rx="2" ry="2" />
<text  x="394.09" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="417.9" y="581" width="0.5" height="15.0" fill="rgb(225,134,21)" rx="2" ry="2" />
<text  x="420.94" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="417.5" y="597" width="0.4" height="15.0" fill="rgb(245,199,26)" rx="2" ry="2" />
<text  x="420.47" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="1171.2" y="453" width="0.4" height="15.0" fill="rgb(243,102,46)" rx="2" ry="2" />
<text  x="1174.16" y="463.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.12%)</title><rect x="1180.1" y="277" width="1.4" height="15.0" fill="rgb(243,31,27)" rx="2" ry="2" />
<text  x="1183.11" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1166.9" y="485" width="0.5" height="15.0" fill="rgb(228,20,39)" rx="2" ry="2" />
<text  x="1169.92" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (21 samples, 0.84%)</title><rect x="74.1" y="581" width="9.9" height="15.0" fill="rgb(244,182,44)" rx="2" ry="2" />
<text  x="77.06" y="591.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="416.1" y="581" width="0.4" height="15.0" fill="rgb(240,168,29)" rx="2" ry="2" />
<text  x="419.05" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1154.2" y="581" width="0.5" height="15.0" fill="rgb(214,114,29)" rx="2" ry="2" />
<text  x="1157.20" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.5" y="549" width="0.5" height="15.0" fill="rgb(214,58,37)" rx="2" ry="2" />
<text  x="427.53" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.08%)</title><rect x="1162.2" y="517" width="0.9" height="15.0" fill="rgb(223,80,6)" rx="2" ry="2" />
<text  x="1165.21" y="527.5" ></text>
</g>
<g >
<title>~__shared_ptr (2 samples, 0.08%)</title><rect x="1189.1" y="645" width="0.9" height="15.0" fill="rgb(221,206,3)" rx="2" ry="2" />
<text  x="1192.06" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (10 samples, 0.40%)</title><rect x="1181.5" y="293" width="4.7" height="15.0" fill="rgb(225,5,43)" rx="2" ry="2" />
<text  x="1184.52" y="303.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (2,461 samples, 98.24%)</title><rect x="30.7" y="709" width="1159.3" height="15.0" fill="rgb(252,41,18)" rx="2" ry="2" />
<text  x="33.73" y="719.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.08%)</title><rect x="1188.1" y="501" width="1.0" height="15.0" fill="rgb(209,49,52)" rx="2" ry="2" />
<text  x="1191.12" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (33 samples, 1.32%)</title><rect x="709.0" y="517" width="15.6" height="15.0" fill="rgb(242,90,11)" rx="2" ry="2" />
<text  x="712.05" y="527.5" ></text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (1 samples, 0.04%)</title><rect x="35.4" y="565" width="0.5" height="15.0" fill="rgb(219,212,25)" rx="2" ry="2" />
<text  x="38.44" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (1 samples, 0.04%)</title><rect x="328.0" y="581" width="0.4" height="15.0" fill="rgb(220,202,49)" rx="2" ry="2" />
<text  x="330.96" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="419.8" y="549" width="0.5" height="15.0" fill="rgb(228,212,40)" rx="2" ry="2" />
<text  x="422.82" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="432.1" y="597" width="0.4" height="15.0" fill="rgb(216,11,37)" rx="2" ry="2" />
<text  x="435.07" y="607.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (11 samples, 0.44%)</title><rect x="100.9" y="597" width="5.2" height="15.0" fill="rgb(230,7,15)" rx="2" ry="2" />
<text  x="103.91" y="607.5" ></text>
</g>
<g >
<title>IMG_LoadPNG_RW&lt;0000000000008ec0&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="549" width="0.5" height="15.0" fill="rgb(236,143,17)" rx="2" ry="2" />
<text  x="1181.69" y="559.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="419.3" y="517" width="0.5" height="15.0" fill="rgb(235,225,16)" rx="2" ry="2" />
<text  x="422.35" y="527.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.04%)</title><rect x="106.1" y="597" width="0.5" height="15.0" fill="rgb(231,222,24)" rx="2" ry="2" />
<text  x="109.10" y="607.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000561b0&gt; (2 samples, 0.08%)</title><rect x="1188.1" y="469" width="1.0" height="15.0" fill="rgb(225,113,20)" rx="2" ry="2" />
<text  x="1191.12" y="479.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000023790&gt; (20 samples, 0.80%)</title><rect x="1178.7" y="677" width="9.4" height="15.0" fill="rgb(231,102,35)" rx="2" ry="2" />
<text  x="1181.69" y="687.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (3 samples, 0.12%)</title><rect x="1159.9" y="517" width="1.4" height="15.0" fill="rgb(241,63,48)" rx="2" ry="2" />
<text  x="1162.85" y="527.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (15 samples, 0.60%)</title><rect x="454.2" y="597" width="7.1" height="15.0" fill="rgb(222,160,32)" rx="2" ry="2" />
<text  x="457.21" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1166.9" y="565" width="0.5" height="15.0" fill="rgb(236,106,28)" rx="2" ry="2" />
<text  x="1169.92" y="575.5" ></text>
</g>
<g >
<title>~vector (6 samples, 0.24%)</title><rect x="379.8" y="581" width="2.8" height="15.0" fill="rgb(232,71,45)" rx="2" ry="2" />
<text  x="382.78" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1168.8" y="405" width="0.5" height="15.0" fill="rgb(225,51,24)" rx="2" ry="2" />
<text  x="1171.80" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (23 samples, 0.92%)</title><rect x="223.4" y="581" width="10.8" height="15.0" fill="rgb(253,206,28)" rx="2" ry="2" />
<text  x="226.39" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.08%)</title><rect x="35.0" y="613" width="0.9" height="15.0" fill="rgb(212,181,45)" rx="2" ry="2" />
<text  x="37.97" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="410.9" y="613" width="0.4" height="15.0" fill="rgb(220,205,38)" rx="2" ry="2" />
<text  x="413.87" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="597" width="0.4" height="15.0" fill="rgb(228,125,5)" rx="2" ry="2" />
<text  x="1178.87" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="363.8" y="549" width="0.4" height="15.0" fill="rgb(222,24,7)" rx="2" ry="2" />
<text  x="366.76" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (2 samples, 0.08%)</title><rect x="423.1" y="549" width="1.0" height="15.0" fill="rgb(224,202,4)" rx="2" ry="2" />
<text  x="426.12" y="559.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1171.2" y="405" width="0.4" height="15.0" fill="rgb(248,161,32)" rx="2" ry="2" />
<text  x="1174.16" y="415.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (29 samples, 1.16%)</title><rect x="183.8" y="581" width="13.7" height="15.0" fill="rgb(241,72,37)" rx="2" ry="2" />
<text  x="186.82" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (19 samples, 0.76%)</title><rect x="225.3" y="565" width="8.9" height="15.0" fill="rgb(209,173,23)" rx="2" ry="2" />
<text  x="228.27" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (2 samples, 0.08%)</title><rect x="1172.1" y="645" width="0.9" height="15.0" fill="rgb(239,1,2)" rx="2" ry="2" />
<text  x="1175.10" y="655.5" ></text>
</g>
<g >
<title>XrmGetResource&lt;0000000000049c50&gt; (1 samples, 0.04%)</title><rect x="1176.3" y="597" width="0.5" height="15.0" fill="rgb(250,33,37)" rx="2" ry="2" />
<text  x="1179.34" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="301.6" y="533" width="0.5" height="15.0" fill="rgb(228,188,33)" rx="2" ry="2" />
<text  x="304.58" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (9 samples, 0.36%)</title><rect x="1182.0" y="165" width="4.2" height="15.0" fill="rgb(220,119,43)" rx="2" ry="2" />
<text  x="1184.99" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="159.8" y="437" width="0.5" height="15.0" fill="rgb(236,139,21)" rx="2" ry="2" />
<text  x="162.80" y="447.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.04%)</title><rect x="1181.5" y="213" width="0.5" height="15.0" fill="rgb(206,97,6)" rx="2" ry="2" />
<text  x="1184.52" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.04%)</title><rect x="33.1" y="453" width="0.5" height="15.0" fill="rgb(242,98,21)" rx="2" ry="2" />
<text  x="36.08" y="463.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (35 samples, 1.40%)</title><rect x="1155.1" y="629" width="16.5" height="15.0" fill="rgb(210,92,49)" rx="2" ry="2" />
<text  x="1158.14" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1189.1" y="133" width="0.4" height="15.0" fill="rgb(253,52,29)" rx="2" ry="2" />
<text  x="1192.06" y="143.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="1189.5" y="117" width="0.5" height="15.0" fill="rgb(245,178,43)" rx="2" ry="2" />
<text  x="1192.53" y="127.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="32.6" y="437" width="0.5" height="15.0" fill="rgb(218,20,43)" rx="2" ry="2" />
<text  x="35.61" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1161.7" y="501" width="0.5" height="15.0" fill="rgb(217,181,23)" rx="2" ry="2" />
<text  x="1164.74" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1160.3" y="405" width="0.5" height="15.0" fill="rgb(210,182,14)" rx="2" ry="2" />
<text  x="1163.32" y="415.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1163.6" y="453" width="0.5" height="15.0" fill="rgb(252,24,10)" rx="2" ry="2" />
<text  x="1166.62" y="463.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (17 samples, 0.68%)</title><rect x="305.8" y="565" width="8.0" height="15.0" fill="rgb(214,85,6)" rx="2" ry="2" />
<text  x="308.82" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.1" y="581" width="0.5" height="15.0" fill="rgb(232,100,39)" rx="2" ry="2" />
<text  x="36.08" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.24%)</title><rect x="1161.3" y="581" width="2.8" height="15.0" fill="rgb(237,73,8)" rx="2" ry="2" />
<text  x="1164.27" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1187.6" y="533" width="0.5" height="15.0" fill="rgb(238,166,24)" rx="2" ry="2" />
<text  x="1190.64" y="543.5" ></text>
</g>
<g >
<title>tc_realloc[inline] (1 samples, 0.04%)</title><rect x="159.3" y="501" width="0.5" height="15.0" fill="rgb(217,207,50)" rx="2" ry="2" />
<text  x="162.33" y="511.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (20 samples, 0.80%)</title><rect x="1178.7" y="629" width="9.4" height="15.0" fill="rgb(250,75,16)" rx="2" ry="2" />
<text  x="1181.69" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1168.3" y="517" width="0.5" height="15.0" fill="rgb(216,50,46)" rx="2" ry="2" />
<text  x="1171.33" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (5 samples, 0.20%)</title><rect x="230.5" y="549" width="2.3" height="15.0" fill="rgb(235,82,50)" rx="2" ry="2" />
<text  x="233.46" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.08%)</title><rect x="1188.1" y="261" width="1.0" height="15.0" fill="rgb(232,149,30)" rx="2" ry="2" />
<text  x="1191.12" y="271.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (2 samples, 0.08%)</title><rect x="258.2" y="517" width="1.0" height="15.0" fill="rgb(248,108,27)" rx="2" ry="2" />
<text  x="261.25" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1168.8" y="437" width="0.5" height="15.0" fill="rgb(231,205,50)" rx="2" ry="2" />
<text  x="1171.80" y="447.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (2 samples, 0.08%)</title><rect x="211.6" y="549" width="1.0" height="15.0" fill="rgb(222,106,22)" rx="2" ry="2" />
<text  x="214.61" y="559.5" ></text>
</g>
<g >
<title>_Vector_impl_data (2 samples, 0.08%)</title><rect x="429.2" y="629" width="1.0" height="15.0" fill="rgb(219,57,35)" rx="2" ry="2" />
<text  x="432.24" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.08%)</title><rect x="1189.1" y="309" width="0.9" height="15.0" fill="rgb(220,96,28)" rx="2" ry="2" />
<text  x="1192.06" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="363.3" y="549" width="0.5" height="15.0" fill="rgb(243,135,26)" rx="2" ry="2" />
<text  x="366.29" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (4 samples, 0.16%)</title><rect x="1165.0" y="533" width="1.9" height="15.0" fill="rgb(249,167,39)" rx="2" ry="2" />
<text  x="1168.03" y="543.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.04%)</title><rect x="1187.2" y="597" width="0.4" height="15.0" fill="rgb(236,25,3)" rx="2" ry="2" />
<text  x="1190.17" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (19 samples, 0.76%)</title><rect x="369.4" y="565" width="9.0" height="15.0" fill="rgb(236,204,7)" rx="2" ry="2" />
<text  x="372.42" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.08%)</title><rect x="1188.1" y="389" width="1.0" height="15.0" fill="rgb(225,133,41)" rx="2" ry="2" />
<text  x="1191.12" y="399.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="33.6" y="517" width="0.4" height="15.0" fill="rgb(254,166,15)" rx="2" ry="2" />
<text  x="36.55" y="527.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (6 samples, 0.24%)</title><rect x="300.2" y="597" width="2.8" height="15.0" fill="rgb(253,130,50)" rx="2" ry="2" />
<text  x="303.17" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1168.3" y="469" width="0.5" height="15.0" fill="rgb(245,26,36)" rx="2" ry="2" />
<text  x="1171.33" y="479.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (1 samples, 0.04%)</title><rect x="268.6" y="597" width="0.5" height="15.0" fill="rgb(225,18,22)" rx="2" ry="2" />
<text  x="271.61" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1170.7" y="405" width="0.5" height="15.0" fill="rgb(214,69,50)" rx="2" ry="2" />
<text  x="1173.69" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="409.9" y="549" width="0.5" height="15.0" fill="rgb(237,220,5)" rx="2" ry="2" />
<text  x="412.93" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="565" width="0.4" height="15.0" fill="rgb(214,229,50)" rx="2" ry="2" />
<text  x="1182.17" y="575.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (10 samples, 0.40%)</title><rect x="1181.5" y="245" width="4.7" height="15.0" fill="rgb(238,46,13)" rx="2" ry="2" />
<text  x="1184.52" y="255.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1174.9" y="597" width="0.5" height="15.0" fill="rgb(226,136,35)" rx="2" ry="2" />
<text  x="1177.93" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1166.9" y="501" width="0.5" height="15.0" fill="rgb(248,217,51)" rx="2" ry="2" />
<text  x="1169.92" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.12%)</title><rect x="418.9" y="613" width="1.4" height="15.0" fill="rgb(228,156,18)" rx="2" ry="2" />
<text  x="421.88" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.16%)</title><rect x="30.7" y="565" width="1.9" height="15.0" fill="rgb(251,54,36)" rx="2" ry="2" />
<text  x="33.73" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.24%)</title><rect x="30.7" y="613" width="2.9" height="15.0" fill="rgb(253,34,1)" rx="2" ry="2" />
<text  x="33.73" y="623.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (1 samples, 0.04%)</title><rect x="32.1" y="485" width="0.5" height="15.0" fill="rgb(215,122,22)" rx="2" ry="2" />
<text  x="35.14" y="495.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1169.3" y="421" width="0.4" height="15.0" fill="rgb(250,78,14)" rx="2" ry="2" />
<text  x="1172.27" y="431.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.08%)</title><rect x="1188.1" y="421" width="1.0" height="15.0" fill="rgb(252,220,48)" rx="2" ry="2" />
<text  x="1191.12" y="431.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.44%)</title><rect x="1156.1" y="565" width="5.2" height="15.0" fill="rgb(207,183,14)" rx="2" ry="2" />
<text  x="1159.08" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (19 samples, 0.76%)</title><rect x="304.9" y="597" width="8.9" height="15.0" fill="rgb(230,68,50)" rx="2" ry="2" />
<text  x="307.88" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="414.2" y="581" width="0.4" height="15.0" fill="rgb(209,186,32)" rx="2" ry="2" />
<text  x="417.17" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (36 samples, 1.44%)</title><rect x="242.2" y="581" width="17.0" height="15.0" fill="rgb(235,205,37)" rx="2" ry="2" />
<text  x="245.23" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (9 samples, 0.36%)</title><rect x="1182.0" y="181" width="4.2" height="15.0" fill="rgb(215,207,15)" rx="2" ry="2" />
<text  x="1184.99" y="191.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (2 samples, 0.08%)</title><rect x="384.5" y="581" width="0.9" height="15.0" fill="rgb(250,181,22)" rx="2" ry="2" />
<text  x="387.49" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.1" y="533" width="0.4" height="15.0" fill="rgb(237,39,42)" rx="2" ry="2" />
<text  x="427.06" y="543.5" ></text>
</g>
<g >
<title>0x00007fc807a3175a (1 samples, 0.04%)</title><rect x="34.0" y="581" width="0.5" height="15.0" fill="rgb(222,181,33)" rx="2" ry="2" />
<text  x="37.02" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="1177.8" y="629" width="0.9" height="15.0" fill="rgb(225,15,35)" rx="2" ry="2" />
<text  x="1180.75" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="1153.7" y="645" width="1.0" height="15.0" fill="rgb(232,161,41)" rx="2" ry="2" />
<text  x="1156.73" y="655.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (2 samples, 0.08%)</title><rect x="1188.1" y="661" width="1.0" height="15.0" fill="rgb(228,70,7)" rx="2" ry="2" />
<text  x="1191.12" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.08%)</title><rect x="1188.1" y="341" width="1.0" height="15.0" fill="rgb(207,195,39)" rx="2" ry="2" />
<text  x="1191.12" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="424.1" y="517" width="0.4" height="15.0" fill="rgb(246,190,49)" rx="2" ry="2" />
<text  x="427.06" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="390.1" y="549" width="0.5" height="15.0" fill="rgb(222,84,44)" rx="2" ry="2" />
<text  x="393.14" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.08%)</title><rect x="1168.8" y="485" width="0.9" height="15.0" fill="rgb(226,219,10)" rx="2" ry="2" />
<text  x="1171.80" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="419.8" y="533" width="0.5" height="15.0" fill="rgb(206,66,33)" rx="2" ry="2" />
<text  x="422.82" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (16 samples, 0.64%)</title><rect x="356.7" y="581" width="7.5" height="15.0" fill="rgb(221,29,0)" rx="2" ry="2" />
<text  x="359.70" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1161.7" y="453" width="0.5" height="15.0" fill="rgb(245,191,28)" rx="2" ry="2" />
<text  x="1164.74" y="463.5" ></text>
</g>
<g >
<title>png_read_image@@PNG16_0&lt;0000000000012520&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="533" width="0.5" height="15.0" fill="rgb(249,61,52)" rx="2" ry="2" />
<text  x="1181.69" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (9 samples, 0.36%)</title><rect x="306.8" y="549" width="4.2" height="15.0" fill="rgb(219,95,36)" rx="2" ry="2" />
<text  x="309.77" y="559.5" ></text>
</g>
<g >
<title>0x00007fc807a2c355 (1 samples, 0.04%)</title><rect x="35.0" y="501" width="0.4" height="15.0" fill="rgb(215,55,19)" rx="2" ry="2" />
<text  x="37.97" y="511.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (12 samples, 0.48%)</title><rect x="1155.6" y="581" width="5.7" height="15.0" fill="rgb(253,149,39)" rx="2" ry="2" />
<text  x="1158.61" y="591.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (2 samples, 0.08%)</title><rect x="31.2" y="453" width="0.9" height="15.0" fill="rgb(206,204,0)" rx="2" ry="2" />
<text  x="34.20" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1169.3" y="437" width="0.4" height="15.0" fill="rgb(217,62,31)" rx="2" ry="2" />
<text  x="1172.27" y="447.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (1 samples, 0.04%)</title><rect x="51.9" y="597" width="0.5" height="15.0" fill="rgb(235,36,38)" rx="2" ry="2" />
<text  x="54.92" y="607.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (317 samples, 12.65%)</title><rect x="724.6" y="517" width="149.3" height="15.0" fill="rgb(242,29,45)" rx="2" ry="2" />
<text  x="727.59" y="527.5" >nouveau_drm_screen_..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="1158.9" y="533" width="0.5" height="15.0" fill="rgb(207,47,39)" rx="2" ry="2" />
<text  x="1161.91" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (13 samples, 0.52%)</title><rect x="279.4" y="581" width="6.2" height="15.0" fill="rgb(224,113,32)" rx="2" ry="2" />
<text  x="282.45" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="501" width="0.4" height="15.0" fill="rgb(251,147,4)" rx="2" ry="2" />
<text  x="1182.17" y="511.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1174.0" y="565" width="0.5" height="15.0" fill="rgb(210,120,9)" rx="2" ry="2" />
<text  x="1176.98" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (638 samples, 25.47%)</title><rect x="585.6" y="565" width="300.6" height="15.0" fill="rgb(242,54,51)" rx="2" ry="2" />
<text  x="588.63" y="575.5" >__driDriverGetExtensions_d3d12&lt;000000000..</text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (16 samples, 0.64%)</title><rect x="1164.1" y="581" width="7.5" height="15.0" fill="rgb(223,229,21)" rx="2" ry="2" />
<text  x="1167.09" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.04%)</title><rect x="1168.3" y="405" width="0.5" height="15.0" fill="rgb(223,175,9)" rx="2" ry="2" />
<text  x="1171.33" y="415.5" ></text>
</g>
<g >
<title>0x00007fc807a3c33f (1 samples, 0.04%)</title><rect x="35.0" y="485" width="0.4" height="15.0" fill="rgb(231,61,12)" rx="2" ry="2" />
<text  x="37.97" y="495.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.08%)</title><rect x="31.2" y="357" width="0.9" height="15.0" fill="rgb(246,179,48)" rx="2" ry="2" />
<text  x="34.20" y="367.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.08%)</title><rect x="1188.1" y="453" width="1.0" height="15.0" fill="rgb(240,24,7)" rx="2" ry="2" />
<text  x="1191.12" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1160.8" y="421" width="0.5" height="15.0" fill="rgb(241,205,31)" rx="2" ry="2" />
<text  x="1163.79" y="431.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (81 samples, 3.23%)</title><rect x="340.7" y="597" width="38.1" height="15.0" fill="rgb(211,60,17)" rx="2" ry="2" />
<text  x="343.68" y="607.5" >Tex..</text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="35.9" y="629" width="0.5" height="15.0" fill="rgb(211,75,39)" rx="2" ry="2" />
<text  x="38.91" y="639.5" ></text>
</g>
<g >
<title>Bindings::getCommandMapFromKeycodes(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;)&lt;0000000000034ba0&gt; (1 samples, 0.04%)</title><rect x="35.9" y="645" width="0.5" height="15.0" fill="rgb(219,97,15)" rx="2" ry="2" />
<text  x="38.91" y="655.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (2 samples, 0.08%)</title><rect x="219.6" y="597" width="1.0" height="15.0" fill="rgb(248,59,8)" rx="2" ry="2" />
<text  x="222.62" y="607.5" ></text>
</g>
<g >
<title>__shared_ptr (4 samples, 0.16%)</title><rect x="107.5" y="597" width="1.9" height="15.0" fill="rgb(220,88,32)" rx="2" ry="2" />
<text  x="110.51" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.08%)</title><rect x="1189.1" y="325" width="0.9" height="15.0" fill="rgb(251,26,34)" rx="2" ry="2" />
<text  x="1192.06" y="335.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (395 samples, 15.77%)</title><rect x="942.7" y="549" width="186.1" height="15.0" fill="rgb(235,92,51)" rx="2" ry="2" />
<text  x="945.69" y="559.5" >__driDriverGetExtensions..</text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="32.1" y="453" width="0.5" height="15.0" fill="rgb(205,149,51)" rx="2" ry="2" />
<text  x="35.14" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1160.3" y="421" width="0.5" height="15.0" fill="rgb(248,55,50)" rx="2" ry="2" />
<text  x="1163.32" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (4 samples, 0.16%)</title><rect x="1173.0" y="645" width="1.9" height="15.0" fill="rgb(231,186,26)" rx="2" ry="2" />
<text  x="1176.04" y="655.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="296.4" y="549" width="0.5" height="15.0" fill="rgb(244,127,17)" rx="2" ry="2" />
<text  x="299.40" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="409.9" y="597" width="0.5" height="15.0" fill="rgb(219,141,8)" rx="2" ry="2" />
<text  x="412.93" y="607.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="33.6" y="485" width="0.4" height="15.0" fill="rgb(253,117,35)" rx="2" ry="2" />
<text  x="36.55" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.08%)</title><rect x="1161.3" y="533" width="0.9" height="15.0" fill="rgb(240,224,44)" rx="2" ry="2" />
<text  x="1164.27" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (11 samples, 0.44%)</title><rect x="293.6" y="565" width="5.2" height="15.0" fill="rgb(238,30,17)" rx="2" ry="2" />
<text  x="296.58" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.04%)</title><rect x="159.8" y="485" width="0.5" height="15.0" fill="rgb(211,165,42)" rx="2" ry="2" />
<text  x="162.80" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.08%)</title><rect x="1188.1" y="549" width="1.0" height="15.0" fill="rgb(206,76,12)" rx="2" ry="2" />
<text  x="1191.12" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="453" width="0.4" height="15.0" fill="rgb(230,189,5)" rx="2" ry="2" />
<text  x="1182.17" y="463.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="415.6" y="581" width="0.5" height="15.0" fill="rgb(224,217,10)" rx="2" ry="2" />
<text  x="418.58" y="591.5" ></text>
</g>
<g >
<title>Engine_3D::Engine_3D() (11 samples, 0.44%)</title><rect x="30.7" y="677" width="5.2" height="15.0" fill="rgb(234,153,36)" rx="2" ry="2" />
<text  x="33.73" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.08%)</title><rect x="1188.1" y="613" width="1.0" height="15.0" fill="rgb(235,215,4)" rx="2" ry="2" />
<text  x="1191.12" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="325" width="7.6" height="15.0" fill="rgb(254,46,41)" rx="2" ry="2" />
<text  x="1182.64" y="335.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1175.9" y="549" width="0.4" height="15.0" fill="rgb(241,107,46)" rx="2" ry="2" />
<text  x="1178.87" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="428.3" y="613" width="0.5" height="15.0" fill="rgb(214,75,13)" rx="2" ry="2" />
<text  x="431.30" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="1160.3" y="437" width="0.5" height="15.0" fill="rgb(247,55,12)" rx="2" ry="2" />
<text  x="1163.32" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="517" width="7.6" height="15.0" fill="rgb(228,57,8)" rx="2" ry="2" />
<text  x="1182.64" y="527.5" ></text>
</g>
<g >
<title>do_calloc[inline] (2 samples, 0.08%)</title><rect x="258.2" y="533" width="1.0" height="15.0" fill="rgb(226,169,47)" rx="2" ry="2" />
<text  x="261.25" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="427.4" y="613" width="0.4" height="15.0" fill="rgb(221,40,23)" rx="2" ry="2" />
<text  x="430.36" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (16 samples, 0.64%)</title><rect x="1179.6" y="373" width="7.6" height="15.0" fill="rgb(238,76,54)" rx="2" ry="2" />
<text  x="1182.64" y="383.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1187.6" y="565" width="0.5" height="15.0" fill="rgb(222,16,24)" rx="2" ry="2" />
<text  x="1190.64" y="575.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1160.8" y="405" width="0.5" height="15.0" fill="rgb(212,130,24)" rx="2" ry="2" />
<text  x="1163.79" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.8" y="597" width="0.5" height="15.0" fill="rgb(208,29,3)" rx="2" ry="2" />
<text  x="430.83" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="33.1" y="501" width="0.5" height="15.0" fill="rgb(253,47,28)" rx="2" ry="2" />
<text  x="36.08" y="511.5" ></text>
</g>
<g >
<title>SpinLock::Lock()[inline] (1 samples, 0.04%)</title><rect x="30.7" y="389" width="0.5" height="15.0" fill="rgb(237,96,30)" rx="2" ry="2" />
<text  x="33.73" y="399.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.04%)</title><rect x="378.4" y="581" width="0.4" height="15.0" fill="rgb(214,98,23)" rx="2" ry="2" />
<text  x="381.37" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1165.0" y="469" width="0.5" height="15.0" fill="rgb(246,0,32)" rx="2" ry="2" />
<text  x="1168.03" y="479.5" ></text>
</g>
<g >
<title>__shared_ptr (1 samples, 0.04%)</title><rect x="304.4" y="597" width="0.5" height="15.0" fill="rgb(249,189,54)" rx="2" ry="2" />
<text  x="307.41" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1169.7" y="341" width="0.5" height="15.0" fill="rgb(248,73,51)" rx="2" ry="2" />
<text  x="1172.74" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1161.7" y="469" width="0.5" height="15.0" fill="rgb(209,225,42)" rx="2" ry="2" />
<text  x="1164.74" y="479.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.08%)</title><rect x="1162.2" y="549" width="0.9" height="15.0" fill="rgb(246,144,51)" rx="2" ry="2" />
<text  x="1165.21" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.08%)</title><rect x="1162.2" y="485" width="0.9" height="15.0" fill="rgb(235,77,35)" rx="2" ry="2" />
<text  x="1165.21" y="495.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="384.0" y="565" width="0.5" height="15.0" fill="rgb(215,218,37)" rx="2" ry="2" />
<text  x="387.02" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.04%)</title><rect x="159.8" y="421" width="0.5" height="15.0" fill="rgb(242,98,6)" rx="2" ry="2" />
<text  x="162.80" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (5 samples, 0.20%)</title><rect x="357.6" y="565" width="2.4" height="15.0" fill="rgb(240,26,20)" rx="2" ry="2" />
<text  x="360.64" y="575.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (103 samples, 4.11%)</title><rect x="52.4" y="597" width="48.5" height="15.0" fill="rgb(212,140,49)" rx="2" ry="2" />
<text  x="55.40" y="607.5" >Text..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1168.8" y="421" width="0.5" height="15.0" fill="rgb(248,182,33)" rx="2" ry="2" />
<text  x="1171.80" y="431.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.08%)</title><rect x="1188.1" y="405" width="1.0" height="15.0" fill="rgb(253,13,42)" rx="2" ry="2" />
<text  x="1191.12" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.04%)</title><rect x="1168.3" y="421" width="0.5" height="15.0" fill="rgb(212,203,26)" rx="2" ry="2" />
<text  x="1171.33" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (2 samples, 0.08%)</title><rect x="258.2" y="421" width="1.0" height="15.0" fill="rgb(254,13,12)" rx="2" ry="2" />
<text  x="261.25" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.04%)</title><rect x="1169.7" y="357" width="0.5" height="15.0" fill="rgb(229,137,26)" rx="2" ry="2" />
<text  x="1172.74" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="415.6" y="597" width="0.5" height="15.0" fill="rgb(254,37,35)" rx="2" ry="2" />
<text  x="418.58" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="1155.1" y="549" width="0.5" height="15.0" fill="rgb(224,36,15)" rx="2" ry="2" />
<text  x="1158.14" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="613" width="0.4" height="15.0" fill="rgb(216,66,50)" rx="2" ry="2" />
<text  x="1178.87" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="1176.3" y="645" width="0.5" height="15.0" fill="rgb(208,160,6)" rx="2" ry="2" />
<text  x="1179.34" y="655.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (2 samples, 0.08%)</title><rect x="31.2" y="421" width="0.9" height="15.0" fill="rgb(224,16,9)" rx="2" ry="2" />
<text  x="34.20" y="431.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="517" width="0.4" height="15.0" fill="rgb(221,151,31)" rx="2" ry="2" />
<text  x="1182.17" y="527.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (7 samples, 0.28%)</title><rect x="216.3" y="597" width="3.3" height="15.0" fill="rgb(232,38,39)" rx="2" ry="2" />
<text  x="219.32" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000d2460&gt; (1 samples, 0.04%)</title><rect x="1170.2" y="389" width="0.5" height="15.0" fill="rgb(223,52,7)" rx="2" ry="2" />
<text  x="1173.22" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (2 samples, 0.08%)</title><rect x="1188.1" y="85" width="1.0" height="15.0" fill="rgb(215,172,22)" rx="2" ry="2" />
<text  x="1191.12" y="95.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (28 samples, 1.12%)</title><rect x="285.6" y="581" width="13.2" height="15.0" fill="rgb(241,81,38)" rx="2" ry="2" />
<text  x="288.57" y="591.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f510&gt; (32 samples, 1.28%)</title><rect x="411.8" y="629" width="15.1" height="15.0" fill="rgb(232,122,29)" rx="2" ry="2" />
<text  x="414.81" y="639.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt;(unsigned long const&amp;, unsigned long const&amp;) (1 samples, 0.04%)</title><rect x="423.6" y="517" width="0.5" height="15.0" fill="rgb(228,105,2)" rx="2" ry="2" />
<text  x="426.59" y="527.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="1165.0" y="517" width="0.5" height="15.0" fill="rgb(211,89,4)" rx="2" ry="2" />
<text  x="1168.03" y="527.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="291.2" y="565" width="0.5" height="15.0" fill="rgb(246,193,12)" rx="2" ry="2" />
<text  x="294.22" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.08%)</title><rect x="1188.1" y="485" width="1.0" height="15.0" fill="rgb(241,109,43)" rx="2" ry="2" />
<text  x="1191.12" y="495.5" ></text>
</g>
<g >
<title>0x00007fc807a305e6 (1 samples, 0.04%)</title><rect x="34.5" y="565" width="0.5" height="15.0" fill="rgb(239,30,53)" rx="2" ry="2" />
<text  x="37.50" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1180.6" y="197" width="0.4" height="15.0" fill="rgb(239,211,48)" rx="2" ry="2" />
<text  x="1183.58" y="207.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="420.8" y="613" width="0.4" height="15.0" fill="rgb(207,200,38)" rx="2" ry="2" />
<text  x="423.76" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1177.8" y="581" width="0.4" height="15.0" fill="rgb(217,134,36)" rx="2" ry="2" />
<text  x="1180.75" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="233.8" y="549" width="0.4" height="15.0" fill="rgb(222,85,49)" rx="2" ry="2" />
<text  x="236.75" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1158.4" y="549" width="0.5" height="15.0" fill="rgb(220,72,11)" rx="2" ry="2" />
<text  x="1161.44" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1154.2" y="597" width="0.5" height="15.0" fill="rgb(234,177,15)" rx="2" ry="2" />
<text  x="1157.20" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1154.2" y="613" width="0.5" height="15.0" fill="rgb(254,33,16)" rx="2" ry="2" />
<text  x="1157.20" y="623.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.5" y="581" width="0.5" height="15.0" fill="rgb(253,36,38)" rx="2" ry="2" />
<text  x="427.53" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (4 samples, 0.16%)</title><rect x="1173.0" y="629" width="1.9" height="15.0" fill="rgb(217,170,6)" rx="2" ry="2" />
<text  x="1176.04" y="639.5" ></text>
</g>
<g >
<title>0x00007fc807a32791 (1 samples, 0.04%)</title><rect x="35.0" y="581" width="0.4" height="15.0" fill="rgb(216,56,40)" rx="2" ry="2" />
<text  x="37.97" y="591.5" ></text>
</g>
<g >
<title>0x00007fc807a2cb4e (1 samples, 0.04%)</title><rect x="35.0" y="517" width="0.4" height="15.0" fill="rgb(220,179,1)" rx="2" ry="2" />
<text  x="37.97" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="382.1" y="533" width="0.5" height="15.0" fill="rgb(240,5,10)" rx="2" ry="2" />
<text  x="385.14" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="432.1" y="581" width="0.4" height="15.0" fill="rgb(246,137,50)" rx="2" ry="2" />
<text  x="435.07" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="433.5" y="565" width="0.5" height="15.0" fill="rgb(217,0,12)" rx="2" ry="2" />
<text  x="436.48" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1158.4" y="501" width="0.5" height="15.0" fill="rgb(218,125,54)" rx="2" ry="2" />
<text  x="1161.44" y="511.5" ></text>
</g>
<g >
<title>tc_calloc (2 samples, 0.08%)</title><rect x="258.2" y="549" width="1.0" height="15.0" fill="rgb(241,13,21)" rx="2" ry="2" />
<text  x="261.25" y="559.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.04%)</title><rect x="215.9" y="581" width="0.4" height="15.0" fill="rgb(242,202,35)" rx="2" ry="2" />
<text  x="218.85" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="425.5" y="517" width="0.4" height="15.0" fill="rgb(236,71,36)" rx="2" ry="2" />
<text  x="428.47" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1168.3" y="453" width="0.5" height="15.0" fill="rgb(229,28,54)" rx="2" ry="2" />
<text  x="1171.33" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (4 samples, 0.16%)</title><rect x="301.1" y="549" width="1.9" height="15.0" fill="rgb(235,144,47)" rx="2" ry="2" />
<text  x="304.11" y="559.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="1167.9" y="501" width="0.4" height="15.0" fill="rgb(246,87,31)" rx="2" ry="2" />
<text  x="1170.86" y="511.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="1154.7" y="645" width="0.4" height="15.0" fill="rgb(235,91,3)" rx="2" ry="2" />
<text  x="1157.67" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1165.0" y="501" width="0.5" height="15.0" fill="rgb(224,176,6)" rx="2" ry="2" />
<text  x="1168.03" y="511.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.04%)</title><rect x="435.8" y="629" width="0.5" height="15.0" fill="rgb(245,180,48)" rx="2" ry="2" />
<text  x="438.84" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.04%)</title><rect x="425.5" y="581" width="0.4" height="15.0" fill="rgb(214,219,48)" rx="2" ry="2" />
<text  x="428.47" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="101.9" y="565" width="0.4" height="15.0" fill="rgb(219,218,16)" rx="2" ry="2" />
<text  x="104.86" y="575.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (2 samples, 0.08%)</title><rect x="1188.1" y="645" width="1.0" height="15.0" fill="rgb(243,11,34)" rx="2" ry="2" />
<text  x="1191.12" y="655.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (2,461 samples, 98.24%)</title><rect x="30.7" y="693" width="1159.3" height="15.0" fill="rgb(247,31,23)" rx="2" ry="2" />
<text  x="33.73" y="703.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000023910&gt; (2,426 samples, 96.85%)</title><rect x="35.9" y="677" width="1142.8" height="15.0" fill="rgb(221,158,52)" rx="2" ry="2" />
<text  x="38.91" y="687.5" >Engine_3D::engine_update()&lt;0000000000023910&gt;</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.16%)</title><rect x="1168.8" y="517" width="1.9" height="15.0" fill="rgb(212,208,17)" rx="2" ry="2" />
<text  x="1171.80" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1154.7" y="613" width="0.4" height="15.0" fill="rgb(253,178,34)" rx="2" ry="2" />
<text  x="1157.67" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="421.2" y="597" width="0.5" height="15.0" fill="rgb(245,36,52)" rx="2" ry="2" />
<text  x="424.23" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (2 samples, 0.08%)</title><rect x="1189.1" y="197" width="0.9" height="15.0" fill="rgb(219,57,14)" rx="2" ry="2" />
<text  x="1192.06" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.08%)</title><rect x="1189.1" y="613" width="0.9" height="15.0" fill="rgb(217,67,14)" rx="2" ry="2" />
<text  x="1192.06" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="425.5" y="501" width="0.4" height="15.0" fill="rgb(212,107,24)" rx="2" ry="2" />
<text  x="428.47" y="511.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.04%)</title><rect x="35.0" y="469" width="0.4" height="15.0" fill="rgb(254,41,6)" rx="2" ry="2" />
<text  x="37.97" y="479.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000066420&gt; (51 samples, 2.04%)</title><rect x="411.3" y="645" width="24.1" height="15.0" fill="rgb(232,185,18)" rx="2" ry="2" />
<text  x="414.34" y="655.5" >R..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1171.2" y="389" width="0.4" height="15.0" fill="rgb(235,215,47)" rx="2" ry="2" />
<text  x="1174.16" y="399.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (461 samples, 18.40%)</title><rect x="919.1" y="565" width="217.2" height="15.0" fill="rgb(247,183,20)" rx="2" ry="2" />
<text  x="922.14" y="575.5" >__driDriverGetExtensions_d3d..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (16 samples, 0.64%)</title><rect x="1179.6" y="357" width="7.6" height="15.0" fill="rgb(235,178,30)" rx="2" ry="2" />
<text  x="1182.64" y="367.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.08%)</title><rect x="1189.1" y="501" width="0.9" height="15.0" fill="rgb(234,127,26)" rx="2" ry="2" />
<text  x="1192.06" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;000000000007ff70&gt; (5 samples, 0.20%)</title><rect x="414.2" y="613" width="2.3" height="15.0" fill="rgb(253,53,36)" rx="2" ry="2" />
<text  x="417.17" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="432.5" y="597" width="1.0" height="15.0" fill="rgb(244,89,32)" rx="2" ry="2" />
<text  x="435.54" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="433.5" y="581" width="0.5" height="15.0" fill="rgb(223,94,48)" rx="2" ry="2" />
<text  x="436.48" y="591.5" ></text>
</g>
<g >
<title>png_get_uint_16@@PNG16_0&lt;0000000000019d80&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="501" width="0.5" height="15.0" fill="rgb(252,8,13)" rx="2" ry="2" />
<text  x="1181.69" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="1155.6" y="565" width="0.5" height="15.0" fill="rgb(243,59,12)" rx="2" ry="2" />
<text  x="1158.61" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="30.7" y="405" width="0.5" height="15.0" fill="rgb(212,105,27)" rx="2" ry="2" />
<text  x="33.73" y="415.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="1177.8" y="549" width="0.4" height="15.0" fill="rgb(230,125,15)" rx="2" ry="2" />
<text  x="1180.75" y="559.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.16%)</title><rect x="30.7" y="517" width="1.9" height="15.0" fill="rgb(248,83,19)" rx="2" ry="2" />
<text  x="33.73" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.08%)</title><rect x="1189.1" y="453" width="0.9" height="15.0" fill="rgb(214,0,53)" rx="2" ry="2" />
<text  x="1192.06" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="433.5" y="629" width="0.5" height="15.0" fill="rgb(219,167,47)" rx="2" ry="2" />
<text  x="436.48" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="433.5" y="613" width="0.5" height="15.0" fill="rgb(240,224,25)" rx="2" ry="2" />
<text  x="436.48" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1174.9" y="581" width="0.5" height="15.0" fill="rgb(231,42,19)" rx="2" ry="2" />
<text  x="1177.93" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (12 samples, 0.48%)</title><rect x="78.3" y="565" width="5.7" height="15.0" fill="rgb(232,103,41)" rx="2" ry="2" />
<text  x="81.30" y="575.5" ></text>
</g>
<g >
<title>0x00007fc807a2c355 (1 samples, 0.04%)</title><rect x="34.0" y="533" width="0.5" height="15.0" fill="rgb(248,10,25)" rx="2" ry="2" />
<text  x="37.02" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.08%)</title><rect x="1170.7" y="485" width="0.9" height="15.0" fill="rgb(207,147,12)" rx="2" ry="2" />
<text  x="1173.69" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.04%)</title><rect x="1189.5" y="149" width="0.5" height="15.0" fill="rgb(232,199,15)" rx="2" ry="2" />
<text  x="1192.53" y="159.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (5 samples, 0.20%)</title><rect x="220.6" y="597" width="2.3" height="15.0" fill="rgb(206,27,7)" rx="2" ry="2" />
<text  x="223.56" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="1169.3" y="453" width="0.4" height="15.0" fill="rgb(235,36,11)" rx="2" ry="2" />
<text  x="1172.27" y="463.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (26 samples, 1.04%)</title><rect x="873.9" y="549" width="12.3" height="15.0" fill="rgb(230,117,6)" rx="2" ry="2" />
<text  x="876.92" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1166.9" y="469" width="0.5" height="15.0" fill="rgb(213,229,14)" rx="2" ry="2" />
<text  x="1169.92" y="479.5" ></text>
</g>
<g >
<title>_Safe_sequence (7 samples, 0.28%)</title><rect x="67.5" y="581" width="3.3" height="15.0" fill="rgb(215,35,13)" rx="2" ry="2" />
<text  x="70.47" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (9 samples, 0.36%)</title><rect x="1182.0" y="213" width="4.2" height="15.0" fill="rgb(219,85,15)" rx="2" ry="2" />
<text  x="1184.99" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (2 samples, 0.08%)</title><rect x="258.2" y="485" width="1.0" height="15.0" fill="rgb(208,36,54)" rx="2" ry="2" />
<text  x="261.25" y="495.5" ></text>
</g>
<g >
<title>0x00007fc807a3c35a (1 samples, 0.04%)</title><rect x="34.0" y="517" width="0.5" height="15.0" fill="rgb(248,48,45)" rx="2" ry="2" />
<text  x="37.02" y="527.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (1 samples, 0.04%)</title><rect x="1187.2" y="501" width="0.4" height="15.0" fill="rgb(213,76,43)" rx="2" ry="2" />
<text  x="1190.17" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.04%)</title><rect x="159.8" y="453" width="0.5" height="15.0" fill="rgb(213,85,48)" rx="2" ry="2" />
<text  x="162.80" y="463.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="418.4" y="549" width="0.5" height="15.0" fill="rgb(240,173,22)" rx="2" ry="2" />
<text  x="421.41" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.08%)</title><rect x="1189.1" y="405" width="0.9" height="15.0" fill="rgb(230,81,34)" rx="2" ry="2" />
<text  x="1192.06" y="415.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (23 samples, 0.92%)</title><rect x="10.0" y="741" width="10.8" height="15.0" fill="rgb(206,21,5)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (1 samples, 0.04%)</title><rect x="407.6" y="597" width="0.4" height="15.0" fill="rgb(207,170,28)" rx="2" ry="2" />
<text  x="410.57" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1,470 samples, 58.68%)</title><rect x="461.3" y="597" width="692.4" height="15.0" fill="rgb(248,7,4)" rx="2" ry="2" />
<text  x="464.27" y="607.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.04%)</title><rect x="159.8" y="405" width="0.5" height="15.0" fill="rgb(205,115,47)" rx="2" ry="2" />
<text  x="162.80" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.04%)</title><rect x="1187.2" y="565" width="0.4" height="15.0" fill="rgb(206,60,8)" rx="2" ry="2" />
<text  x="1190.17" y="575.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.04%)</title><rect x="413.2" y="565" width="0.5" height="15.0" fill="rgb(220,159,40)" rx="2" ry="2" />
<text  x="416.23" y="575.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (116 samples, 4.63%)</title><rect x="161.7" y="597" width="54.6" height="15.0" fill="rgb(237,191,36)" rx="2" ry="2" />
<text  x="164.68" y="607.5" >Textu..</text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1155.6" y="501" width="0.5" height="15.0" fill="rgb(217,94,9)" rx="2" ry="2" />
<text  x="1158.61" y="511.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (2 samples, 0.08%)</title><rect x="408.0" y="597" width="1.0" height="15.0" fill="rgb(249,110,13)" rx="2" ry="2" />
<text  x="411.04" y="607.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.1" y="565" width="0.4" height="15.0" fill="rgb(249,198,21)" rx="2" ry="2" />
<text  x="427.06" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="1171.6" y="597" width="0.5" height="15.0" fill="rgb(208,65,26)" rx="2" ry="2" />
<text  x="1174.63" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.08%)</title><rect x="1165.5" y="485" width="0.9" height="15.0" fill="rgb(251,165,43)" rx="2" ry="2" />
<text  x="1168.50" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (8 samples, 0.32%)</title><rect x="102.3" y="565" width="3.8" height="15.0" fill="rgb(238,47,43)" rx="2" ry="2" />
<text  x="105.33" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="32.6" y="485" width="0.5" height="15.0" fill="rgb(249,123,29)" rx="2" ry="2" />
<text  x="35.61" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1187.6" y="581" width="0.5" height="15.0" fill="rgb(227,181,18)" rx="2" ry="2" />
<text  x="1190.64" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.08%)</title><rect x="1189.1" y="357" width="0.9" height="15.0" fill="rgb(227,102,28)" rx="2" ry="2" />
<text  x="1192.06" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="284.6" y="549" width="0.5" height="15.0" fill="rgb(249,98,49)" rx="2" ry="2" />
<text  x="287.63" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="32.6" y="453" width="0.5" height="15.0" fill="rgb(213,158,47)" rx="2" ry="2" />
<text  x="35.61" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="159.8" y="469" width="0.5" height="15.0" fill="rgb(238,189,43)" rx="2" ry="2" />
<text  x="162.80" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.08%)</title><rect x="1188.1" y="517" width="1.0" height="15.0" fill="rgb(251,89,15)" rx="2" ry="2" />
<text  x="1191.12" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (9 samples, 0.36%)</title><rect x="1182.0" y="229" width="4.2" height="15.0" fill="rgb(229,210,43)" rx="2" ry="2" />
<text  x="1184.99" y="239.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (4 samples, 0.16%)</title><rect x="296.9" y="549" width="1.9" height="15.0" fill="rgb(247,215,8)" rx="2" ry="2" />
<text  x="299.87" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (24 samples, 0.96%)</title><rect x="222.9" y="597" width="11.3" height="15.0" fill="rgb(213,163,12)" rx="2" ry="2" />
<text  x="225.92" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="409.9" y="581" width="0.5" height="15.0" fill="rgb(213,214,18)" rx="2" ry="2" />
<text  x="412.93" y="591.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1189.1" y="101" width="0.4" height="15.0" fill="rgb(214,65,15)" rx="2" ry="2" />
<text  x="1192.06" y="111.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="32.6" y="469" width="0.5" height="15.0" fill="rgb(221,169,10)" rx="2" ry="2" />
<text  x="35.61" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::operator&lt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006d4a0&gt; (1 samples, 0.04%)</title><rect x="1167.4" y="517" width="0.5" height="15.0" fill="rgb(254,104,28)" rx="2" ry="2" />
<text  x="1170.39" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="1177.3" y="645" width="0.5" height="15.0" fill="rgb(226,57,19)" rx="2" ry="2" />
<text  x="1180.28" y="655.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="501" width="7.6" height="15.0" fill="rgb(212,126,53)" rx="2" ry="2" />
<text  x="1182.64" y="511.5" ></text>
</g>
<g >
<title>_Node_const_iterator (2 samples, 0.08%)</title><rect x="418.9" y="565" width="0.9" height="15.0" fill="rgb(240,79,34)" rx="2" ry="2" />
<text  x="421.88" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1166.4" y="485" width="0.5" height="15.0" fill="rgb(211,105,37)" rx="2" ry="2" />
<text  x="1169.45" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="421" width="7.6" height="15.0" fill="rgb(241,188,5)" rx="2" ry="2" />
<text  x="1182.64" y="431.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="432.1" y="549" width="0.4" height="15.0" fill="rgb(252,21,0)" rx="2" ry="2" />
<text  x="435.07" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="1158.9" y="549" width="0.5" height="15.0" fill="rgb(251,175,43)" rx="2" ry="2" />
<text  x="1161.91" y="559.5" ></text>
</g>
<g >
<title>~__shared_count (3 samples, 0.12%)</title><rect x="313.8" y="597" width="1.4" height="15.0" fill="rgb(219,217,16)" rx="2" ry="2" />
<text  x="316.83" y="607.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;00000000000744b0&gt; (20 samples, 0.80%)</title><rect x="1178.7" y="661" width="9.4" height="15.0" fill="rgb(250,105,54)" rx="2" ry="2" />
<text  x="1181.69" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.04%)</title><rect x="409.5" y="613" width="0.4" height="15.0" fill="rgb(251,180,8)" rx="2" ry="2" />
<text  x="412.46" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.16%)</title><rect x="34.0" y="629" width="1.9" height="15.0" fill="rgb(233,126,44)" rx="2" ry="2" />
<text  x="37.02" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.16%)</title><rect x="34.0" y="645" width="1.9" height="15.0" fill="rgb(231,130,48)" rx="2" ry="2" />
<text  x="37.02" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="32.1" y="469" width="0.5" height="15.0" fill="rgb(238,90,20)" rx="2" ry="2" />
<text  x="35.14" y="479.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="411.8" y="597" width="0.5" height="15.0" fill="rgb(206,35,15)" rx="2" ry="2" />
<text  x="414.81" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.04%)</title><rect x="1168.3" y="437" width="0.5" height="15.0" fill="rgb(213,109,43)" rx="2" ry="2" />
<text  x="1171.33" y="447.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.4" y="629" width="0.5" height="15.0" fill="rgb(240,58,33)" rx="2" ry="2" />
<text  x="1178.40" y="639.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.08%)</title><rect x="31.2" y="341" width="0.9" height="15.0" fill="rgb(240,28,3)" rx="2" ry="2" />
<text  x="34.20" y="351.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.04%)</title><rect x="159.8" y="533" width="0.5" height="15.0" fill="rgb(244,156,48)" rx="2" ry="2" />
<text  x="162.80" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="1177.3" y="613" width="0.5" height="15.0" fill="rgb(249,190,34)" rx="2" ry="2" />
<text  x="1180.28" y="623.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.04%)</title><rect x="1174.0" y="581" width="0.5" height="15.0" fill="rgb(225,128,21)" rx="2" ry="2" />
<text  x="1176.98" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.04%)</title><rect x="1170.7" y="389" width="0.5" height="15.0" fill="rgb(237,47,36)" rx="2" ry="2" />
<text  x="1173.69" y="399.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="415.1" y="565" width="0.5" height="15.0" fill="rgb(243,109,25)" rx="2" ry="2" />
<text  x="418.11" y="575.5" ></text>
</g>
<g >
<title>~_Safe_unordered_container_base (16 samples, 0.64%)</title><rect x="1179.6" y="341" width="7.6" height="15.0" fill="rgb(210,82,17)" rx="2" ry="2" />
<text  x="1182.64" y="351.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="629" width="0.4" height="15.0" fill="rgb(237,40,50)" rx="2" ry="2" />
<text  x="1178.87" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1164.6" y="533" width="0.4" height="15.0" fill="rgb(238,168,28)" rx="2" ry="2" />
<text  x="1167.56" y="543.5" ></text>
</g>
<g >
<title>__nptl_death_event@@GLIBC_PRIVATE&lt;0000000000083270&gt; (1 samples, 0.04%)</title><rect x="1127.3" y="469" width="0.5" height="15.0" fill="rgb(239,77,15)" rx="2" ry="2" />
<text  x="1130.35" y="479.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (2,461 samples, 98.24%)</title><rect x="30.7" y="741" width="1159.3" height="15.0" fill="rgb(226,86,31)" rx="2" ry="2" />
<text  x="33.73" y="751.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="432.1" y="565" width="0.4" height="15.0" fill="rgb(246,94,32)" rx="2" ry="2" />
<text  x="435.07" y="575.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (21 samples, 0.84%)</title><rect x="20.8" y="741" width="9.9" height="15.0" fill="rgb(235,152,6)" rx="2" ry="2" />
<text  x="23.83" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="417.9" y="597" width="0.5" height="15.0" fill="rgb(216,214,7)" rx="2" ry="2" />
<text  x="420.94" y="607.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.04%)</title><rect x="219.1" y="533" width="0.5" height="15.0" fill="rgb(249,171,22)" rx="2" ry="2" />
<text  x="222.15" y="543.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (16 samples, 0.64%)</title><rect x="1128.8" y="549" width="7.5" height="15.0" fill="rgb(205,219,43)" rx="2" ry="2" />
<text  x="1131.76" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (13 samples, 0.52%)</title><rect x="154.1" y="565" width="6.2" height="15.0" fill="rgb(224,28,31)" rx="2" ry="2" />
<text  x="157.14" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (4 samples, 0.16%)</title><rect x="411.8" y="613" width="1.9" height="15.0" fill="rgb(223,89,3)" rx="2" ry="2" />
<text  x="414.81" y="623.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints() (1 samples, 0.04%)</title><rect x="427.8" y="629" width="0.5" height="15.0" fill="rgb(231,85,11)" rx="2" ry="2" />
<text  x="430.83" y="639.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.04%)</title><rect x="32.6" y="533" width="0.5" height="15.0" fill="rgb(216,105,32)" rx="2" ry="2" />
<text  x="35.61" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="581" width="7.6" height="15.0" fill="rgb(242,160,5)" rx="2" ry="2" />
<text  x="1182.64" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 0.28%)</title><rect x="30.7" y="629" width="3.3" height="15.0" fill="rgb(223,87,6)" rx="2" ry="2" />
<text  x="33.73" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (7 samples, 0.28%)</title><rect x="30.7" y="645" width="3.3" height="15.0" fill="rgb(210,211,38)" rx="2" ry="2" />
<text  x="33.73" y="655.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (2 samples, 0.08%)</title><rect x="31.2" y="485" width="0.9" height="15.0" fill="rgb(234,79,27)" rx="2" ry="2" />
<text  x="34.20" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (3 samples, 0.12%)</title><rect x="416.5" y="613" width="1.4" height="15.0" fill="rgb(221,17,22)" rx="2" ry="2" />
<text  x="419.52" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="434.0" y="533" width="0.4" height="15.0" fill="rgb(209,39,7)" rx="2" ry="2" />
<text  x="436.95" y="543.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (2 samples, 0.08%)</title><rect x="432.5" y="581" width="1.0" height="15.0" fill="rgb(236,48,5)" rx="2" ry="2" />
<text  x="435.54" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.7" y="453" width="0.5" height="15.0" fill="rgb(248,122,5)" rx="2" ry="2" />
<text  x="1173.69" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="425.5" y="533" width="0.4" height="15.0" fill="rgb(211,159,16)" rx="2" ry="2" />
<text  x="428.47" y="543.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="1177.8" y="565" width="0.4" height="15.0" fill="rgb(205,79,24)" rx="2" ry="2" />
<text  x="1180.75" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="1158.0" y="517" width="0.4" height="15.0" fill="rgb(208,39,7)" rx="2" ry="2" />
<text  x="1160.97" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (2 samples, 0.08%)</title><rect x="423.1" y="533" width="1.0" height="15.0" fill="rgb(235,229,26)" rx="2" ry="2" />
<text  x="426.12" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="416.1" y="597" width="0.4" height="15.0" fill="rgb(225,70,43)" rx="2" ry="2" />
<text  x="419.05" y="607.5" ></text>
</g>
<g >
<title>glXCreateContext&lt;000000000001b410&gt; (1 samples, 0.04%)</title><rect x="32.6" y="565" width="0.5" height="15.0" fill="rgb(225,212,33)" rx="2" ry="2" />
<text  x="35.61" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.08%)</title><rect x="106.6" y="597" width="0.9" height="15.0" fill="rgb(250,212,35)" rx="2" ry="2" />
<text  x="109.57" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (43 samples, 1.72%)</title><rect x="238.9" y="597" width="20.3" height="15.0" fill="rgb(219,131,53)" rx="2" ry="2" />
<text  x="241.93" y="607.5" ></text>
</g>
<g >
<title>IMG_LoadTyped_RW&lt;0000000000009610&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="565" width="0.5" height="15.0" fill="rgb(224,78,11)" rx="2" ry="2" />
<text  x="1181.69" y="575.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.04%)</title><rect x="368.0" y="565" width="0.5" height="15.0" fill="rgb(218,182,47)" rx="2" ry="2" />
<text  x="371.00" y="575.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.08%)</title><rect x="1169.7" y="421" width="1.0" height="15.0" fill="rgb(206,141,51)" rx="2" ry="2" />
<text  x="1172.74" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.08%)</title><rect x="1189.1" y="245" width="0.9" height="15.0" fill="rgb(252,165,25)" rx="2" ry="2" />
<text  x="1192.06" y="255.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="565" width="7.6" height="15.0" fill="rgb(239,211,46)" rx="2" ry="2" />
<text  x="1182.64" y="575.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="33.1" y="565" width="0.5" height="15.0" fill="rgb(230,130,1)" rx="2" ry="2" />
<text  x="36.08" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, char const*) (1 samples, 0.04%)</title><rect x="1186.2" y="309" width="0.5" height="15.0" fill="rgb(208,55,54)" rx="2" ry="2" />
<text  x="1189.23" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="417.9" y="613" width="0.5" height="15.0" fill="rgb(214,92,38)" rx="2" ry="2" />
<text  x="420.94" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (21 samples, 0.84%)</title><rect x="249.3" y="565" width="9.9" height="15.0" fill="rgb(211,152,42)" rx="2" ry="2" />
<text  x="252.30" y="575.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.04%)</title><rect x="259.2" y="597" width="0.5" height="15.0" fill="rgb(236,69,47)" rx="2" ry="2" />
<text  x="262.19" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (6 samples, 0.24%)</title><rect x="1125.9" y="517" width="2.9" height="15.0" fill="rgb(218,199,24)" rx="2" ry="2" />
<text  x="1128.94" y="527.5" ></text>
</g>
<g >
<title>_Vector_impl (7 samples, 0.28%)</title><rect x="70.8" y="581" width="3.3" height="15.0" fill="rgb(221,165,49)" rx="2" ry="2" />
<text  x="73.77" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1171.2" y="421" width="0.4" height="15.0" fill="rgb(209,128,30)" rx="2" ry="2" />
<text  x="1174.16" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.04%)</title><rect x="419.8" y="565" width="0.5" height="15.0" fill="rgb(229,143,45)" rx="2" ry="2" />
<text  x="422.82" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (4 samples, 0.16%)</title><rect x="380.7" y="549" width="1.9" height="15.0" fill="rgb(231,66,39)" rx="2" ry="2" />
<text  x="383.72" y="559.5" ></text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (1 samples, 0.04%)</title><rect x="35.4" y="581" width="0.5" height="15.0" fill="rgb(235,175,12)" rx="2" ry="2" />
<text  x="38.44" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (32 samples, 1.28%)</title><rect x="145.2" y="597" width="15.1" height="15.0" fill="rgb(231,95,39)" rx="2" ry="2" />
<text  x="148.19" y="607.5" ></text>
</g>
<g >
<title>_Safe_sequence (5 samples, 0.20%)</title><rect x="180.1" y="581" width="2.3" height="15.0" fill="rgb(220,57,35)" rx="2" ry="2" />
<text  x="183.05" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (9 samples, 0.36%)</title><rect x="1182.0" y="197" width="4.2" height="15.0" fill="rgb(247,189,30)" rx="2" ry="2" />
<text  x="1184.99" y="207.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (16 samples, 0.64%)</title><rect x="1179.6" y="405" width="7.6" height="15.0" fill="rgb(212,99,52)" rx="2" ry="2" />
<text  x="1182.64" y="415.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.08%)</title><rect x="31.2" y="469" width="0.9" height="15.0" fill="rgb(240,144,12)" rx="2" ry="2" />
<text  x="34.20" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="1171.6" y="613" width="0.5" height="15.0" fill="rgb(211,90,36)" rx="2" ry="2" />
<text  x="1174.63" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1166.9" y="517" width="0.5" height="15.0" fill="rgb(254,152,22)" rx="2" ry="2" />
<text  x="1169.92" y="527.5" ></text>
</g>
<g >
<title>~vector (6 samples, 0.24%)</title><rect x="216.8" y="581" width="2.8" height="15.0" fill="rgb(226,11,35)" rx="2" ry="2" />
<text  x="219.79" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="424.5" y="517" width="0.5" height="15.0" fill="rgb(215,120,34)" rx="2" ry="2" />
<text  x="427.53" y="527.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (30 samples, 1.20%)</title><rect x="113.6" y="565" width="14.2" height="15.0" fill="rgb(222,223,18)" rx="2" ry="2" />
<text  x="116.63" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1178.2" y="613" width="0.5" height="15.0" fill="rgb(221,50,51)" rx="2" ry="2" />
<text  x="1181.22" y="623.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="434.4" y="581" width="0.5" height="15.0" fill="rgb(230,203,31)" rx="2" ry="2" />
<text  x="437.42" y="591.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (4 samples, 0.16%)</title><rect x="1188.1" y="677" width="1.9" height="15.0" fill="rgb(243,169,26)" rx="2" ry="2" />
<text  x="1191.12" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1168.8" y="453" width="0.5" height="15.0" fill="rgb(237,227,40)" rx="2" ry="2" />
<text  x="1171.80" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Deallocate(void*, unsigned int)[inline] (1 samples, 0.04%)</title><rect x="410.9" y="485" width="0.4" height="15.0" fill="rgb(239,60,49)" rx="2" ry="2" />
<text  x="413.87" y="495.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.08%)</title><rect x="1189.1" y="373" width="0.9" height="15.0" fill="rgb(242,132,48)" rx="2" ry="2" />
<text  x="1192.06" y="383.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (1 samples, 0.04%)</title><rect x="426.9" y="629" width="0.5" height="15.0" fill="rgb(225,180,21)" rx="2" ry="2" />
<text  x="429.89" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="107.0" y="581" width="0.5" height="15.0" fill="rgb(207,102,42)" rx="2" ry="2" />
<text  x="110.04" y="591.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (1 samples, 0.04%)</title><rect x="1187.2" y="485" width="0.4" height="15.0" fill="rgb(216,220,16)" rx="2" ry="2" />
<text  x="1190.17" y="495.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (66 samples, 2.63%)</title><rect x="269.1" y="597" width="31.1" height="15.0" fill="rgb(247,72,33)" rx="2" ry="2" />
<text  x="272.08" y="607.5" >Te..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="425.9" y="597" width="0.5" height="15.0" fill="rgb(241,88,21)" rx="2" ry="2" />
<text  x="428.94" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="30.7" y="469" width="0.5" height="15.0" fill="rgb(220,201,18)" rx="2" ry="2" />
<text  x="33.73" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="1171.6" y="629" width="0.5" height="15.0" fill="rgb(252,62,4)" rx="2" ry="2" />
<text  x="1174.63" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.16%)</title><rect x="1168.8" y="501" width="1.9" height="15.0" fill="rgb(223,102,8)" rx="2" ry="2" />
<text  x="1171.80" y="511.5" ></text>
</g>
<g >
<title>TexturePNG::operator=(TexturePNG const&amp;) (2 samples, 0.08%)</title><rect x="1180.1" y="213" width="0.9" height="15.0" fill="rgb(250,55,39)" rx="2" ry="2" />
<text  x="1183.11" y="223.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1170.7" y="469" width="0.5" height="15.0" fill="rgb(207,215,9)" rx="2" ry="2" />
<text  x="1173.69" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.08%)</title><rect x="1189.1" y="485" width="0.9" height="15.0" fill="rgb(239,193,53)" rx="2" ry="2" />
<text  x="1192.06" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.08%)</title><rect x="1163.1" y="533" width="1.0" height="15.0" fill="rgb(227,188,20)" rx="2" ry="2" />
<text  x="1166.15" y="543.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.04%)</title><rect x="1178.7" y="581" width="0.5" height="15.0" fill="rgb(245,78,41)" rx="2" ry="2" />
<text  x="1181.69" y="591.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.04%)</title><rect x="303.0" y="597" width="0.5" height="15.0" fill="rgb(208,82,30)" rx="2" ry="2" />
<text  x="306.00" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1154.7" y="629" width="0.4" height="15.0" fill="rgb(206,102,46)" rx="2" ry="2" />
<text  x="1157.67" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="424.5" y="533" width="0.5" height="15.0" fill="rgb(252,105,46)" rx="2" ry="2" />
<text  x="427.53" y="543.5" ></text>
</g>
<g >
<title>_Utf8GetConvByName&lt;000000000005db90&gt; (1 samples, 0.04%)</title><rect x="1176.3" y="581" width="0.5" height="15.0" fill="rgb(248,182,4)" rx="2" ry="2" />
<text  x="1179.34" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="33.1" y="549" width="0.5" height="15.0" fill="rgb(243,11,16)" rx="2" ry="2" />
<text  x="36.08" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1174.0" y="597" width="0.5" height="15.0" fill="rgb(254,188,35)" rx="2" ry="2" />
<text  x="1176.98" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (4 samples, 0.16%)</title><rect x="385.4" y="565" width="1.9" height="15.0" fill="rgb(219,101,21)" rx="2" ry="2" />
<text  x="388.43" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="218.7" y="533" width="0.4" height="15.0" fill="rgb(241,169,17)" rx="2" ry="2" />
<text  x="221.68" y="543.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1177.8" y="517" width="0.4" height="15.0" fill="rgb(219,9,20)" rx="2" ry="2" />
<text  x="1180.75" y="527.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (2,461 samples, 98.24%)</title><rect x="30.7" y="725" width="1159.3" height="15.0" fill="rgb(227,16,47)" rx="2" ry="2" />
<text  x="33.73" y="735.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.04%)</title><rect x="1163.6" y="469" width="0.5" height="15.0" fill="rgb(209,151,11)" rx="2" ry="2" />
<text  x="1166.62" y="479.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (1 samples, 0.04%)</title><rect x="161.2" y="597" width="0.5" height="15.0" fill="rgb(207,136,53)" rx="2" ry="2" />
<text  x="164.21" y="607.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (1 samples, 0.04%)</title><rect x="368.9" y="565" width="0.5" height="15.0" fill="rgb(214,216,28)" rx="2" ry="2" />
<text  x="371.95" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="418.4" y="533" width="0.5" height="15.0" fill="rgb(211,181,18)" rx="2" ry="2" />
<text  x="421.41" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="1171.6" y="581" width="0.5" height="15.0" fill="rgb(252,82,54)" rx="2" ry="2" />
<text  x="1174.63" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="549" width="7.6" height="15.0" fill="rgb(232,6,51)" rx="2" ry="2" />
<text  x="1182.64" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000062130&gt; (321 samples, 12.81%)</title><rect x="259.7" y="629" width="151.2" height="15.0" fill="rgb(232,126,54)" rx="2" ry="2" />
<text  x="262.66" y="639.5" >TexturemapRasterize..</text>
</g>
<g >
<title>InOutRasterizer (1 samples, 0.04%)</title><rect x="36.9" y="613" width="0.4" height="15.0" fill="rgb(250,223,30)" rx="2" ry="2" />
<text  x="39.85" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.20%)</title><rect x="30.7" y="597" width="2.4" height="15.0" fill="rgb(219,88,54)" rx="2" ry="2" />
<text  x="33.73" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1164.6" y="501" width="0.4" height="15.0" fill="rgb(234,144,13)" rx="2" ry="2" />
<text  x="1167.56" y="511.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.52%)</title><rect x="1155.1" y="597" width="6.2" height="15.0" fill="rgb(226,201,22)" rx="2" ry="2" />
<text  x="1158.14" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="533" width="0.4" height="15.0" fill="rgb(231,116,12)" rx="2" ry="2" />
<text  x="1182.17" y="543.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="418.9" y="517" width="0.4" height="15.0" fill="rgb(244,48,31)" rx="2" ry="2" />
<text  x="421.88" y="527.5" ></text>
</g>
<g >
<title>0x00007fc807a32791 (2 samples, 0.08%)</title><rect x="34.0" y="613" width="1.0" height="15.0" fill="rgb(210,43,36)" rx="2" ry="2" />
<text  x="37.02" y="623.5" ></text>
</g>
<g >
<title>~_Safe_sequence_base (1 samples, 0.04%)</title><rect x="1175.9" y="645" width="0.4" height="15.0" fill="rgb(233,160,15)" rx="2" ry="2" />
<text  x="1178.87" y="655.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.04%)</title><rect x="413.2" y="597" width="0.5" height="15.0" fill="rgb(220,48,21)" rx="2" ry="2" />
<text  x="416.23" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="1165.0" y="453" width="0.5" height="15.0" fill="rgb(226,198,46)" rx="2" ry="2" />
<text  x="1168.03" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000d2550&gt; (1 samples, 0.04%)</title><rect x="1158.4" y="485" width="0.5" height="15.0" fill="rgb(233,83,52)" rx="2" ry="2" />
<text  x="1161.44" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="422.6" y="565" width="0.5" height="15.0" fill="rgb(207,25,28)" rx="2" ry="2" />
<text  x="425.65" y="575.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.04%)</title><rect x="302.5" y="533" width="0.5" height="15.0" fill="rgb(251,85,1)" rx="2" ry="2" />
<text  x="305.53" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="434.0" y="629" width="0.9" height="15.0" fill="rgb(249,186,40)" rx="2" ry="2" />
<text  x="436.95" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;TexturePNG&amp;&gt; std::forward_as_tuple&lt;TexturePNG&amp;&gt;(TexturePNG&amp;) (1 samples, 0.04%)</title><rect x="1180.1" y="197" width="0.5" height="15.0" fill="rgb(209,97,48)" rx="2" ry="2" />
<text  x="1183.11" y="207.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (3 samples, 0.12%)</title><rect x="93.4" y="549" width="1.4" height="15.0" fill="rgb(225,15,27)" rx="2" ry="2" />
<text  x="96.38" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,523 samples, 60.80%)</title><rect x="436.3" y="613" width="717.4" height="15.0" fill="rgb(213,119,38)" rx="2" ry="2" />
<text  x="439.31" y="623.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (22 samples, 0.88%)</title><rect x="187.1" y="565" width="10.4" height="15.0" fill="rgb(215,122,30)" rx="2" ry="2" />
<text  x="190.12" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.04%)</title><rect x="280.9" y="565" width="0.4" height="15.0" fill="rgb(253,38,13)" rx="2" ry="2" />
<text  x="283.86" y="575.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;TexturePNG&amp;&gt; &gt;::type&amp; std::get&lt;0ul, TexturePNG&amp;&gt;(std::tuple&lt;TexturePNG&amp;&gt;&amp;) (1 samples, 0.04%)</title><rect x="1188.6" y="37" width="0.5" height="15.0" fill="rgb(251,205,15)" rx="2" ry="2" />
<text  x="1191.59" y="47.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (7 samples, 0.28%)</title><rect x="87.3" y="565" width="3.3" height="15.0" fill="rgb(228,124,33)" rx="2" ry="2" />
<text  x="90.25" y="575.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.08%)</title><rect x="1189.1" y="341" width="0.9" height="15.0" fill="rgb(221,205,3)" rx="2" ry="2" />
<text  x="1192.06" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (5 samples, 0.20%)</title><rect x="111.3" y="565" width="2.3" height="15.0" fill="rgb(244,103,13)" rx="2" ry="2" />
<text  x="114.28" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="434.0" y="565" width="0.4" height="15.0" fill="rgb(241,77,48)" rx="2" ry="2" />
<text  x="436.95" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (21 samples, 0.84%)</title><rect x="206.0" y="565" width="9.9" height="15.0" fill="rgb(231,173,19)" rx="2" ry="2" />
<text  x="208.96" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="485" width="0.4" height="15.0" fill="rgb(233,92,7)" rx="2" ry="2" />
<text  x="1182.17" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="424.1" y="485" width="0.4" height="15.0" fill="rgb(248,32,22)" rx="2" ry="2" />
<text  x="427.06" y="495.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (3 samples, 0.12%)</title><rect x="1180.1" y="245" width="1.4" height="15.0" fill="rgb(221,149,34)" rx="2" ry="2" />
<text  x="1183.11" y="255.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="384.0" y="581" width="0.5" height="15.0" fill="rgb(214,47,42)" rx="2" ry="2" />
<text  x="387.02" y="591.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.1" y="549" width="0.4" height="15.0" fill="rgb(228,140,10)" rx="2" ry="2" />
<text  x="427.06" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1165.0" y="485" width="0.5" height="15.0" fill="rgb(244,18,32)" rx="2" ry="2" />
<text  x="1168.03" y="495.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1159.4" y="517" width="0.5" height="15.0" fill="rgb(250,181,51)" rx="2" ry="2" />
<text  x="1162.38" y="527.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="409.9" y="565" width="0.5" height="15.0" fill="rgb(238,75,6)" rx="2" ry="2" />
<text  x="412.93" y="575.5" ></text>
</g>
<g >
<title>_Safe_sequence (2 samples, 0.08%)</title><rect x="354.3" y="581" width="1.0" height="15.0" fill="rgb(233,201,38)" rx="2" ry="2" />
<text  x="357.34" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="1158.4" y="469" width="0.5" height="15.0" fill="rgb(251,145,29)" rx="2" ry="2" />
<text  x="1161.44" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="1161.7" y="437" width="0.5" height="15.0" fill="rgb(236,156,38)" rx="2" ry="2" />
<text  x="1164.74" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (2 samples, 0.08%)</title><rect x="258.2" y="453" width="1.0" height="15.0" fill="rgb(220,184,43)" rx="2" ry="2" />
<text  x="261.25" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (1 samples, 0.04%)</title><rect x="144.7" y="581" width="0.5" height="15.0" fill="rgb(251,196,17)" rx="2" ry="2" />
<text  x="147.72" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (2 samples, 0.08%)</title><rect x="1188.1" y="533" width="1.0" height="15.0" fill="rgb(209,71,20)" rx="2" ry="2" />
<text  x="1191.12" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.04%)</title><rect x="305.4" y="565" width="0.4" height="15.0" fill="rgb(252,88,51)" rx="2" ry="2" />
<text  x="308.35" y="575.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (2 samples, 0.08%)</title><rect x="31.2" y="437" width="0.9" height="15.0" fill="rgb(209,28,27)" rx="2" ry="2" />
<text  x="34.20" y="447.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (2 samples, 0.08%)</title><rect x="1189.1" y="469" width="0.9" height="15.0" fill="rgb(216,106,37)" rx="2" ry="2" />
<text  x="1192.06" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="1174.9" y="485" width="0.5" height="15.0" fill="rgb(244,61,40)" rx="2" ry="2" />
<text  x="1177.93" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (20 samples, 0.80%)</title><rect x="90.6" y="565" width="9.4" height="15.0" fill="rgb(233,74,29)" rx="2" ry="2" />
<text  x="93.55" y="575.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.08%)</title><rect x="1188.1" y="565" width="1.0" height="15.0" fill="rgb(210,76,3)" rx="2" ry="2" />
<text  x="1191.12" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (22 samples, 0.88%)</title><rect x="1161.3" y="597" width="10.3" height="15.0" fill="rgb(242,113,45)" rx="2" ry="2" />
<text  x="1164.27" y="607.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (4 samples, 0.16%)</title><rect x="371.3" y="549" width="1.9" height="15.0" fill="rgb(230,109,24)" rx="2" ry="2" />
<text  x="374.30" y="559.5" ></text>
</g>
<g >
<title>_Safe_sequence_base (1 samples, 0.04%)</title><rect x="1171.6" y="645" width="0.5" height="15.0" fill="rgb(214,46,27)" rx="2" ry="2" />
<text  x="1174.63" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (2 samples, 0.08%)</title><rect x="1160.3" y="469" width="1.0" height="15.0" fill="rgb(250,11,5)" rx="2" ry="2" />
<text  x="1163.32" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.04%)</title><rect x="1189.1" y="117" width="0.4" height="15.0" fill="rgb(246,209,4)" rx="2" ry="2" />
<text  x="1192.06" y="127.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::ByteSizeForClass(unsigned int)[inline] (1 samples, 0.04%)</title><rect x="1181.5" y="197" width="0.5" height="15.0" fill="rgb(246,157,39)" rx="2" ry="2" />
<text  x="1184.52" y="207.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="33.6" y="501" width="0.4" height="15.0" fill="rgb(209,81,11)" rx="2" ry="2" />
<text  x="36.55" y="511.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.08%)</title><rect x="31.2" y="325" width="0.9" height="15.0" fill="rgb(213,77,42)" rx="2" ry="2" />
<text  x="34.20" y="335.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (2 samples, 0.08%)</title><rect x="31.2" y="293" width="0.9" height="15.0" fill="rgb(237,211,37)" rx="2" ry="2" />
<text  x="34.20" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.08%)</title><rect x="1188.1" y="213" width="1.0" height="15.0" fill="rgb(217,31,41)" rx="2" ry="2" />
<text  x="1191.12" y="223.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="424.5" y="565" width="0.5" height="15.0" fill="rgb(236,119,1)" rx="2" ry="2" />
<text  x="427.53" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.24%)</title><rect x="1164.1" y="565" width="2.8" height="15.0" fill="rgb(251,53,19)" rx="2" ry="2" />
<text  x="1167.09" y="575.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.04%)</title><rect x="1187.2" y="549" width="0.4" height="15.0" fill="rgb(216,42,45)" rx="2" ry="2" />
<text  x="1190.17" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="30.7" y="421" width="0.5" height="15.0" fill="rgb(242,109,26)" rx="2" ry="2" />
<text  x="33.73" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (4 samples, 0.16%)</title><rect x="1173.0" y="613" width="1.9" height="15.0" fill="rgb(253,79,35)" rx="2" ry="2" />
<text  x="1176.04" y="623.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051610&gt; (1 samples, 0.04%)</title><rect x="1179.2" y="581" width="0.4" height="15.0" fill="rgb(222,111,22)" rx="2" ry="2" />
<text  x="1182.17" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1174.9" y="453" width="0.5" height="15.0" fill="rgb(220,52,1)" rx="2" ry="2" />
<text  x="1177.93" y="463.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1155.6" y="469" width="0.5" height="15.0" fill="rgb(234,101,6)" rx="2" ry="2" />
<text  x="1158.61" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="1154.7" y="581" width="0.4" height="15.0" fill="rgb(233,137,31)" rx="2" ry="2" />
<text  x="1157.67" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="1178.2" y="565" width="0.5" height="15.0" fill="rgb(219,165,18)" rx="2" ry="2" />
<text  x="1181.22" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="431.6" y="597" width="0.5" height="15.0" fill="rgb(238,197,54)" rx="2" ry="2" />
<text  x="434.60" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.04%)</title><rect x="1169.7" y="373" width="0.5" height="15.0" fill="rgb(248,155,40)" rx="2" ry="2" />
<text  x="1172.74" y="383.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.8" y="581" width="0.5" height="15.0" fill="rgb(221,18,3)" rx="2" ry="2" />
<text  x="430.83" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1178.2" y="549" width="0.5" height="15.0" fill="rgb(231,56,40)" rx="2" ry="2" />
<text  x="1181.22" y="559.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (35 samples, 1.40%)</title><rect x="1155.1" y="613" width="16.5" height="15.0" fill="rgb(213,138,2)" rx="2" ry="2" />
<text  x="1158.14" y="623.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (5 samples, 0.20%)</title><rect x="203.6" y="565" width="2.4" height="15.0" fill="rgb(238,126,17)" rx="2" ry="2" />
<text  x="206.60" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.08%)</title><rect x="1189.1" y="517" width="0.9" height="15.0" fill="rgb(225,35,3)" rx="2" ry="2" />
<text  x="1192.06" y="527.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (2 samples, 0.08%)</title><rect x="382.6" y="597" width="0.9" height="15.0" fill="rgb(223,130,15)" rx="2" ry="2" />
<text  x="385.61" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.08%)</title><rect x="1189.1" y="565" width="0.9" height="15.0" fill="rgb(253,35,3)" rx="2" ry="2" />
<text  x="1192.06" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="434.0" y="581" width="0.4" height="15.0" fill="rgb(234,77,31)" rx="2" ry="2" />
<text  x="436.95" y="591.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.16%)</title><rect x="30.7" y="549" width="1.9" height="15.0" fill="rgb(241,89,21)" rx="2" ry="2" />
<text  x="33.73" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (22 samples, 0.88%)</title><rect x="329.8" y="581" width="10.4" height="15.0" fill="rgb(236,220,31)" rx="2" ry="2" />
<text  x="332.85" y="591.5" ></text>
</g>
<g >
<title>__sqrtf_finite@GLIBC_2.15&lt;000000000003d270&gt; (1 samples, 0.04%)</title><rect x="414.2" y="549" width="0.4" height="15.0" fill="rgb(228,77,49)" rx="2" ry="2" />
<text  x="417.17" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1175.4" y="581" width="0.5" height="15.0" fill="rgb(237,95,15)" rx="2" ry="2" />
<text  x="1178.40" y="591.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (117 samples, 4.67%)</title><rect x="260.1" y="613" width="55.1" height="15.0" fill="rgb(222,191,1)" rx="2" ry="2" />
<text  x="263.13" y="623.5" >Scanl..</text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (2 samples, 0.08%)</title><rect x="412.3" y="597" width="0.9" height="15.0" fill="rgb(210,33,35)" rx="2" ry="2" />
<text  x="415.28" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.04%)</title><rect x="1164.6" y="453" width="0.4" height="15.0" fill="rgb(246,14,24)" rx="2" ry="2" />
<text  x="1167.56" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (30 samples, 1.20%)</title><rect x="364.2" y="581" width="14.2" height="15.0" fill="rgb(210,58,50)" rx="2" ry="2" />
<text  x="367.24" y="591.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1175.9" y="533" width="0.4" height="15.0" fill="rgb(205,147,52)" rx="2" ry="2" />
<text  x="1178.87" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (10 samples, 0.40%)</title><rect x="225.7" y="549" width="4.8" height="15.0" fill="rgb(238,21,39)" rx="2" ry="2" />
<text  x="228.74" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.08%)</title><rect x="1188.1" y="117" width="1.0" height="15.0" fill="rgb(228,38,45)" rx="2" ry="2" />
<text  x="1191.12" y="127.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (1 samples, 0.04%)</title><rect x="425.0" y="613" width="0.5" height="15.0" fill="rgb(222,172,3)" rx="2" ry="2" />
<text  x="428.00" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1177.3" y="629" width="0.5" height="15.0" fill="rgb(239,43,8)" rx="2" ry="2" />
<text  x="1180.28" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.08%)</title><rect x="1188.1" y="181" width="1.0" height="15.0" fill="rgb(219,196,21)" rx="2" ry="2" />
<text  x="1191.12" y="191.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.6" y="613" width="0.4" height="15.0" fill="rgb(223,141,36)" rx="2" ry="2" />
<text  x="36.55" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (16 samples, 0.64%)</title><rect x="1179.6" y="389" width="7.6" height="15.0" fill="rgb(208,133,45)" rx="2" ry="2" />
<text  x="1182.64" y="399.5" ></text>
</g>
<g >
<title>tc_new (1 samples, 0.04%)</title><rect x="1181.5" y="229" width="0.5" height="15.0" fill="rgb(234,197,31)" rx="2" ry="2" />
<text  x="1184.52" y="239.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="1168.3" y="533" width="0.5" height="15.0" fill="rgb(226,127,35)" rx="2" ry="2" />
<text  x="1171.33" y="543.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.04%)</title><rect x="378.4" y="565" width="0.4" height="15.0" fill="rgb(208,67,33)" rx="2" ry="2" />
<text  x="381.37" y="575.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.08%)</title><rect x="126.8" y="549" width="1.0" height="15.0" fill="rgb(241,87,39)" rx="2" ry="2" />
<text  x="129.82" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (4 samples, 0.16%)</title><rect x="195.6" y="549" width="1.9" height="15.0" fill="rgb(247,123,11)" rx="2" ry="2" />
<text  x="198.60" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="1160.3" y="453" width="0.5" height="15.0" fill="rgb(209,113,25)" rx="2" ry="2" />
<text  x="1163.32" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="428.3" y="597" width="0.5" height="15.0" fill="rgb(234,85,22)" rx="2" ry="2" />
<text  x="431.30" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1155.1" y="533" width="0.5" height="15.0" fill="rgb(244,129,41)" rx="2" ry="2" />
<text  x="1158.14" y="543.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000065e00&gt; (796 samples, 31.78%)</title><rect x="36.4" y="645" width="374.9" height="15.0" fill="rgb(229,161,5)" rx="2" ry="2" />
<text  x="39.38" y="655.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;000000000..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (18 samples, 0.72%)</title><rect x="691.1" y="533" width="8.5" height="15.0" fill="rgb(224,151,0)" rx="2" ry="2" />
<text  x="694.15" y="543.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="425.5" y="485" width="0.4" height="15.0" fill="rgb(251,163,51)" rx="2" ry="2" />
<text  x="428.47" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TexturemapRasterizer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy() (1 samples, 0.04%)</title><rect x="410.9" y="565" width="0.4" height="15.0" fill="rgb(248,119,54)" rx="2" ry="2" />
<text  x="413.87" y="575.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="312.9" y="549" width="0.5" height="15.0" fill="rgb(235,157,14)" rx="2" ry="2" />
<text  x="315.89" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1174.9" y="629" width="0.5" height="15.0" fill="rgb(206,4,26)" rx="2" ry="2" />
<text  x="1177.93" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="1174.9" y="533" width="0.5" height="15.0" fill="rgb(214,205,43)" rx="2" ry="2" />
<text  x="1177.93" y="543.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.04%)</title><rect x="31.7" y="261" width="0.4" height="15.0" fill="rgb(217,184,35)" rx="2" ry="2" />
<text  x="34.67" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.08%)</title><rect x="1170.7" y="501" width="0.9" height="15.0" fill="rgb(236,156,23)" rx="2" ry="2" />
<text  x="1173.69" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.08%)</title><rect x="1165.5" y="517" width="0.9" height="15.0" fill="rgb(216,129,23)" rx="2" ry="2" />
<text  x="1168.50" y="527.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.04%)</title><rect x="426.4" y="613" width="0.5" height="15.0" fill="rgb(215,27,31)" rx="2" ry="2" />
<text  x="429.42" y="623.5" ></text>
</g>
<g >
<title>0x00007fc807a31b56 (2 samples, 0.08%)</title><rect x="34.0" y="597" width="1.0" height="15.0" fill="rgb(242,96,30)" rx="2" ry="2" />
<text  x="37.02" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1158.4" y="533" width="0.5" height="15.0" fill="rgb(253,196,18)" rx="2" ry="2" />
<text  x="1161.44" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1178.2" y="581" width="0.5" height="15.0" fill="rgb(218,203,11)" rx="2" ry="2" />
<text  x="1181.22" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::move_backward&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1155.1" y="565" width="0.5" height="15.0" fill="rgb(253,187,38)" rx="2" ry="2" />
<text  x="1158.14" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.12%)</title><rect x="82.5" y="549" width="1.5" height="15.0" fill="rgb(233,146,7)" rx="2" ry="2" />
<text  x="85.54" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (541 samples, 21.60%)</title><rect x="619.1" y="549" width="254.8" height="15.0" fill="rgb(243,179,29)" rx="2" ry="2" />
<text  x="622.08" y="559.5" >__driDriverGetExtensions_d3d12&lt;00..</text>
</g>
<g >
<title>_Parameter (1 samples, 0.04%)</title><rect x="94.8" y="549" width="0.5" height="15.0" fill="rgb(206,208,27)" rx="2" ry="2" />
<text  x="97.79" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.08%)</title><rect x="1189.1" y="229" width="0.9" height="15.0" fill="rgb(237,180,12)" rx="2" ry="2" />
<text  x="1192.06" y="239.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="469" width="0.4" height="15.0" fill="rgb(211,215,31)" rx="2" ry="2" />
<text  x="1182.17" y="479.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.04%)</title><rect x="32.6" y="501" width="0.5" height="15.0" fill="rgb(253,14,33)" rx="2" ry="2" />
<text  x="35.61" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (3 samples, 0.12%)</title><rect x="1126.4" y="501" width="1.4" height="15.0" fill="rgb(205,113,43)" rx="2" ry="2" />
<text  x="1129.41" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.04%)</title><rect x="1166.9" y="453" width="0.5" height="15.0" fill="rgb(239,197,16)" rx="2" ry="2" />
<text  x="1169.92" y="463.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1155.6" y="517" width="0.5" height="15.0" fill="rgb(210,59,18)" rx="2" ry="2" />
<text  x="1158.61" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.08%)</title><rect x="1189.1" y="533" width="0.9" height="15.0" fill="rgb(223,44,23)" rx="2" ry="2" />
<text  x="1192.06" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="434.9" y="613" width="0.5" height="15.0" fill="rgb(243,187,18)" rx="2" ry="2" />
<text  x="437.89" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.08%)</title><rect x="1189.1" y="437" width="0.9" height="15.0" fill="rgb(248,98,26)" rx="2" ry="2" />
<text  x="1192.06" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="415.1" y="597" width="0.5" height="15.0" fill="rgb(238,46,39)" rx="2" ry="2" />
<text  x="418.11" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="413.7" y="597" width="0.5" height="15.0" fill="rgb(238,34,14)" rx="2" ry="2" />
<text  x="416.70" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.24%)</title><rect x="1164.1" y="549" width="2.8" height="15.0" fill="rgb(225,62,38)" rx="2" ry="2" />
<text  x="1167.09" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="432.5" y="613" width="1.0" height="15.0" fill="rgb(254,191,39)" rx="2" ry="2" />
<text  x="435.54" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (8 samples, 0.32%)</title><rect x="387.3" y="565" width="3.8" height="15.0" fill="rgb(205,186,53)" rx="2" ry="2" />
<text  x="390.32" y="575.5" ></text>
</g>
<g >
<title>tuple (1 samples, 0.04%)</title><rect x="1186.2" y="293" width="0.5" height="15.0" fill="rgb(226,4,35)" rx="2" ry="2" />
<text  x="1189.23" y="303.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="699.6" y="517" width="0.5" height="15.0" fill="rgb(250,111,42)" rx="2" ry="2" />
<text  x="702.63" y="527.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (7 samples, 0.28%)</title><rect x="30.7" y="661" width="3.3" height="15.0" fill="rgb(227,42,22)" rx="2" ry="2" />
<text  x="33.73" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_get_mutex()&lt;00000000000d2680&gt; (1 samples, 0.04%)</title><rect x="1174.5" y="597" width="0.4" height="15.0" fill="rgb(233,56,16)" rx="2" ry="2" />
<text  x="1177.46" y="607.5" ></text>
</g>
<g >
<title>_Vector_impl (3 samples, 0.12%)</title><rect x="355.3" y="581" width="1.4" height="15.0" fill="rgb(228,211,24)" rx="2" ry="2" />
<text  x="358.29" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000d2460&gt; (1 samples, 0.04%)</title><rect x="418.4" y="517" width="0.5" height="15.0" fill="rgb(211,48,27)" rx="2" ry="2" />
<text  x="421.41" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (18 samples, 0.72%)</title><rect x="305.4" y="581" width="8.4" height="15.0" fill="rgb(224,84,43)" rx="2" ry="2" />
<text  x="308.35" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (2 samples, 0.08%)</title><rect x="258.2" y="405" width="1.0" height="15.0" fill="rgb(208,154,17)" rx="2" ry="2" />
<text  x="261.25" y="415.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.04%)</title><rect x="1168.3" y="389" width="0.5" height="15.0" fill="rgb(227,217,37)" rx="2" ry="2" />
<text  x="1171.33" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1155.6" y="549" width="0.5" height="15.0" fill="rgb(223,53,45)" rx="2" ry="2" />
<text  x="1158.61" y="559.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="437" width="0.4" height="15.0" fill="rgb(240,61,41)" rx="2" ry="2" />
<text  x="1182.17" y="447.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;000000000007ff70&gt; (5 samples, 0.20%)</title><rect x="430.2" y="613" width="2.3" height="15.0" fill="rgb(226,205,43)" rx="2" ry="2" />
<text  x="433.18" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="427.4" y="597" width="0.4" height="15.0" fill="rgb(220,54,1)" rx="2" ry="2" />
<text  x="430.36" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="1160.8" y="437" width="0.5" height="15.0" fill="rgb(218,210,14)" rx="2" ry="2" />
<text  x="1163.79" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="453" width="7.6" height="15.0" fill="rgb(229,179,39)" rx="2" ry="2" />
<text  x="1182.64" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.08%)</title><rect x="1188.1" y="373" width="1.0" height="15.0" fill="rgb(210,53,13)" rx="2" ry="2" />
<text  x="1191.12" y="383.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="425.9" y="581" width="0.5" height="15.0" fill="rgb(216,62,52)" rx="2" ry="2" />
<text  x="428.94" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="434.0" y="549" width="0.4" height="15.0" fill="rgb(237,39,26)" rx="2" ry="2" />
<text  x="436.95" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1174.9" y="565" width="0.5" height="15.0" fill="rgb(215,229,31)" rx="2" ry="2" />
<text  x="1177.93" y="575.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (2 samples, 0.08%)</title><rect x="1188.1" y="357" width="1.0" height="15.0" fill="rgb(238,114,24)" rx="2" ry="2" />
<text  x="1191.12" y="367.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="434.0" y="517" width="0.4" height="15.0" fill="rgb(219,153,19)" rx="2" ry="2" />
<text  x="436.95" y="527.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (20 samples, 0.80%)</title><rect x="1178.7" y="645" width="9.4" height="15.0" fill="rgb(240,180,7)" rx="2" ry="2" />
<text  x="1181.69" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="421.7" y="581" width="0.5" height="15.0" fill="rgb(208,14,18)" rx="2" ry="2" />
<text  x="424.70" y="591.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="418.4" y="565" width="0.5" height="15.0" fill="rgb(226,62,53)" rx="2" ry="2" />
<text  x="421.41" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.04%)</title><rect x="1189.5" y="133" width="0.5" height="15.0" fill="rgb(251,106,37)" rx="2" ry="2" />
<text  x="1192.53" y="143.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (3 samples, 0.12%)</title><rect x="1157.0" y="533" width="1.4" height="15.0" fill="rgb(248,89,11)" rx="2" ry="2" />
<text  x="1160.03" y="543.5" ></text>
</g>
<g >
<title>0x00007fc807a3175a (1 samples, 0.04%)</title><rect x="35.0" y="549" width="0.4" height="15.0" fill="rgb(231,76,31)" rx="2" ry="2" />
<text  x="37.97" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="1177.8" y="533" width="0.4" height="15.0" fill="rgb(220,58,52)" rx="2" ry="2" />
<text  x="1180.75" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.08%)</title><rect x="1169.7" y="485" width="1.0" height="15.0" fill="rgb(228,9,7)" rx="2" ry="2" />
<text  x="1172.74" y="495.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (21 samples, 0.84%)</title><rect x="397.7" y="581" width="9.9" height="15.0" fill="rgb(230,50,17)" rx="2" ry="2" />
<text  x="400.68" y="591.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.04%)</title><rect x="1166.4" y="517" width="0.5" height="15.0" fill="rgb(206,144,18)" rx="2" ry="2" />
<text  x="1169.45" y="527.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="428.3" y="629" width="0.5" height="15.0" fill="rgb(205,180,41)" rx="2" ry="2" />
<text  x="431.30" y="639.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (2 samples, 0.08%)</title><rect x="31.2" y="389" width="0.9" height="15.0" fill="rgb(213,22,54)" rx="2" ry="2" />
<text  x="34.20" y="399.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;00000000000534c0&gt; (1 samples, 0.04%)</title><rect x="1187.6" y="613" width="0.5" height="15.0" fill="rgb(213,19,34)" rx="2" ry="2" />
<text  x="1190.64" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="420.3" y="581" width="0.5" height="15.0" fill="rgb(245,220,41)" rx="2" ry="2" />
<text  x="423.29" y="591.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.04%)</title><rect x="410.9" y="629" width="0.4" height="15.0" fill="rgb(242,195,47)" rx="2" ry="2" />
<text  x="413.87" y="639.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (10 samples, 0.40%)</title><rect x="95.3" y="549" width="4.7" height="15.0" fill="rgb(254,115,38)" rx="2" ry="2" />
<text  x="98.26" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.08%)</title><rect x="1189.1" y="389" width="0.9" height="15.0" fill="rgb(231,157,21)" rx="2" ry="2" />
<text  x="1192.06" y="399.5" ></text>
</g>
<g >
<title>~vector (10 samples, 0.40%)</title><rect x="101.4" y="581" width="4.7" height="15.0" fill="rgb(215,222,18)" rx="2" ry="2" />
<text  x="104.39" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (15 samples, 0.60%)</title><rect x="114.1" y="549" width="7.1" height="15.0" fill="rgb(238,115,15)" rx="2" ry="2" />
<text  x="117.10" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (12 samples, 0.48%)</title><rect x="385.4" y="581" width="5.7" height="15.0" fill="rgb(231,60,37)" rx="2" ry="2" />
<text  x="388.43" y="591.5" ></text>
</g>
<g >
<title>vector (16 samples, 0.64%)</title><rect x="1179.6" y="469" width="7.6" height="15.0" fill="rgb(227,10,3)" rx="2" ry="2" />
<text  x="1182.64" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (39 samples, 1.56%)</title><rect x="109.4" y="597" width="18.4" height="15.0" fill="rgb(239,99,52)" rx="2" ry="2" />
<text  x="112.39" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.36%)</title><rect x="1167.4" y="565" width="4.2" height="15.0" fill="rgb(207,213,27)" rx="2" ry="2" />
<text  x="1170.39" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="1158.0" y="501" width="0.4" height="15.0" fill="rgb(245,188,48)" rx="2" ry="2" />
<text  x="1160.97" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (5 samples, 0.20%)</title><rect x="124.5" y="549" width="2.3" height="15.0" fill="rgb(246,172,31)" rx="2" ry="2" />
<text  x="127.47" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.04%)</title><rect x="33.1" y="469" width="0.5" height="15.0" fill="rgb(217,213,42)" rx="2" ry="2" />
<text  x="36.08" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (34 samples, 1.36%)</title><rect x="84.0" y="581" width="16.0" height="15.0" fill="rgb(220,227,10)" rx="2" ry="2" />
<text  x="86.96" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1187.6" y="597" width="0.5" height="15.0" fill="rgb(251,167,48)" rx="2" ry="2" />
<text  x="1190.64" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.04%)</title><rect x="413.2" y="581" width="0.5" height="15.0" fill="rgb(215,117,34)" rx="2" ry="2" />
<text  x="416.23" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="30.7" y="453" width="0.5" height="15.0" fill="rgb(244,176,13)" rx="2" ry="2" />
<text  x="33.73" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.08%)</title><rect x="1188.1" y="325" width="1.0" height="15.0" fill="rgb(236,155,34)" rx="2" ry="2" />
<text  x="1191.12" y="335.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (20 samples, 0.80%)</title><rect x="1144.3" y="549" width="9.4" height="15.0" fill="rgb(211,100,47)" rx="2" ry="2" />
<text  x="1147.31" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="434.4" y="597" width="0.5" height="15.0" fill="rgb(218,102,51)" rx="2" ry="2" />
<text  x="437.42" y="607.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.04%)</title><rect x="33.6" y="533" width="0.4" height="15.0" fill="rgb(243,169,14)" rx="2" ry="2" />
<text  x="36.55" y="543.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.04%)</title><rect x="234.2" y="597" width="0.5" height="15.0" fill="rgb(223,17,4)" rx="2" ry="2" />
<text  x="237.22" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.08%)</title><rect x="1189.1" y="597" width="0.9" height="15.0" fill="rgb(235,168,47)" rx="2" ry="2" />
<text  x="1192.06" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1161.7" y="421" width="0.5" height="15.0" fill="rgb(237,150,52)" rx="2" ry="2" />
<text  x="1164.74" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1164.6" y="485" width="0.4" height="15.0" fill="rgb(213,54,33)" rx="2" ry="2" />
<text  x="1167.56" y="495.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;0000000000026140&gt; (2 samples, 0.08%)</title><rect x="1189.1" y="581" width="0.9" height="15.0" fill="rgb(221,46,23)" rx="2" ry="2" />
<text  x="1192.06" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1175.9" y="501" width="0.4" height="15.0" fill="rgb(208,60,4)" rx="2" ry="2" />
<text  x="1178.87" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="1186.7" y="277" width="0.5" height="15.0" fill="rgb(248,165,47)" rx="2" ry="2" />
<text  x="1189.70" y="287.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (1 samples, 0.04%)</title><rect x="32.6" y="517" width="0.5" height="15.0" fill="rgb(226,128,25)" rx="2" ry="2" />
<text  x="35.61" y="527.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;0000000000068860&gt; (35 samples, 1.40%)</title><rect x="1155.1" y="645" width="16.5" height="15.0" fill="rgb(205,175,24)" rx="2" ry="2" />
<text  x="1158.14" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (7 samples, 0.28%)</title><rect x="121.2" y="549" width="3.3" height="15.0" fill="rgb(209,5,25)" rx="2" ry="2" />
<text  x="124.17" y="559.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.08%)</title><rect x="1189.1" y="421" width="0.9" height="15.0" fill="rgb(232,164,10)" rx="2" ry="2" />
<text  x="1192.06" y="431.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (2 samples, 0.08%)</title><rect x="160.3" y="597" width="0.9" height="15.0" fill="rgb(224,206,21)" rx="2" ry="2" />
<text  x="163.27" y="607.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (8 samples, 0.32%)</title><rect x="378.8" y="597" width="3.8" height="15.0" fill="rgb(229,194,35)" rx="2" ry="2" />
<text  x="381.84" y="607.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.08%)</title><rect x="1160.3" y="501" width="1.0" height="15.0" fill="rgb(216,97,38)" rx="2" ry="2" />
<text  x="1163.32" y="511.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="410.9" y="597" width="0.4" height="15.0" fill="rgb(213,50,9)" rx="2" ry="2" />
<text  x="413.87" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (25 samples, 1.00%)</title><rect x="148.5" y="581" width="11.8" height="15.0" fill="rgb(208,117,5)" rx="2" ry="2" />
<text  x="151.49" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.08%)</title><rect x="1188.1" y="437" width="1.0" height="15.0" fill="rgb(208,94,45)" rx="2" ry="2" />
<text  x="1191.12" y="447.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.08%)</title><rect x="1188.1" y="101" width="1.0" height="15.0" fill="rgb(239,139,12)" rx="2" ry="2" />
<text  x="1191.12" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1186.7" y="293" width="0.5" height="15.0" fill="rgb(237,65,44)" rx="2" ry="2" />
<text  x="1189.70" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (5 samples, 0.20%)</title><rect x="422.2" y="581" width="2.3" height="15.0" fill="rgb(231,167,52)" rx="2" ry="2" />
<text  x="425.18" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (2 samples, 0.08%)</title><rect x="1189.1" y="181" width="0.9" height="15.0" fill="rgb(213,166,40)" rx="2" ry="2" />
<text  x="1192.06" y="191.5" ></text>
</g>
<g >
<title>__shared_ptr (2 samples, 0.08%)</title><rect x="384.5" y="597" width="0.9" height="15.0" fill="rgb(223,39,54)" rx="2" ry="2" />
<text  x="387.49" y="607.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.12%)</title><rect x="1180.1" y="293" width="1.4" height="15.0" fill="rgb(249,52,40)" rx="2" ry="2" />
<text  x="1183.11" y="303.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="416.1" y="565" width="0.4" height="15.0" fill="rgb(223,183,27)" rx="2" ry="2" />
<text  x="419.05" y="575.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.08%)</title><rect x="31.2" y="309" width="0.9" height="15.0" fill="rgb(234,0,8)" rx="2" ry="2" />
<text  x="34.20" y="319.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1173.5" y="581" width="0.5" height="15.0" fill="rgb(230,4,35)" rx="2" ry="2" />
<text  x="1176.51" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,524 samples, 60.84%)</title><rect x="435.8" y="645" width="717.9" height="15.0" fill="rgb(229,26,22)" rx="2" ry="2" />
<text  x="438.84" y="655.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1178.2" y="597" width="0.5" height="15.0" fill="rgb(252,4,23)" rx="2" ry="2" />
<text  x="1181.22" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,523 samples, 60.80%)</title><rect x="436.3" y="629" width="717.4" height="15.0" fill="rgb(207,190,41)" rx="2" ry="2" />
<text  x="439.31" y="639.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007feb0&gt; (2 samples, 0.08%)</title><rect x="430.7" y="597" width="0.9" height="15.0" fill="rgb(244,175,0)" rx="2" ry="2" />
<text  x="433.65" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="302.1" y="533" width="0.4" height="15.0" fill="rgb(245,40,9)" rx="2" ry="2" />
<text  x="305.06" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.04%)</title><rect x="1169.7" y="389" width="0.5" height="15.0" fill="rgb(242,161,0)" rx="2" ry="2" />
<text  x="1172.74" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.08%)</title><rect x="303.5" y="597" width="0.9" height="15.0" fill="rgb(216,120,19)" rx="2" ry="2" />
<text  x="306.47" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1175.4" y="597" width="0.5" height="15.0" fill="rgb(244,42,42)" rx="2" ry="2" />
<text  x="1178.40" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.24%)</title><rect x="1161.3" y="565" width="2.8" height="15.0" fill="rgb(253,119,25)" rx="2" ry="2" />
<text  x="1164.27" y="575.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;00000000000546d0&gt; (18 samples, 0.72%)</title><rect x="1179.2" y="613" width="8.4" height="15.0" fill="rgb(252,192,7)" rx="2" ry="2" />
<text  x="1182.17" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="415.1" y="581" width="0.5" height="15.0" fill="rgb(219,223,39)" rx="2" ry="2" />
<text  x="418.11" y="591.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (1 samples, 0.04%)</title><rect x="35.4" y="597" width="0.5" height="15.0" fill="rgb(219,116,11)" rx="2" ry="2" />
<text  x="38.44" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.08%)</title><rect x="1188.1" y="197" width="1.0" height="15.0" fill="rgb(215,6,49)" rx="2" ry="2" />
<text  x="1191.12" y="207.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.08%)</title><rect x="1188.1" y="245" width="1.0" height="15.0" fill="rgb(240,161,3)" rx="2" ry="2" />
<text  x="1191.12" y="255.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (4 samples, 0.16%)</title><rect x="722.7" y="485" width="1.9" height="15.0" fill="rgb(239,100,46)" rx="2" ry="2" />
<text  x="725.71" y="495.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.1" y="597" width="0.5" height="15.0" fill="rgb(245,141,53)" rx="2" ry="2" />
<text  x="36.08" y="607.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.08%)</title><rect x="1188.1" y="165" width="1.0" height="15.0" fill="rgb(221,137,46)" rx="2" ry="2" />
<text  x="1191.12" y="175.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1174.9" y="645" width="0.5" height="15.0" fill="rgb(214,31,13)" rx="2" ry="2" />
<text  x="1177.93" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="35.0" y="597" width="0.4" height="15.0" fill="rgb(206,119,51)" rx="2" ry="2" />
<text  x="37.97" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (3 samples, 0.12%)</title><rect x="1180.1" y="229" width="1.4" height="15.0" fill="rgb(231,78,21)" rx="2" ry="2" />
<text  x="1183.11" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.04%)</title><rect x="33.1" y="517" width="0.5" height="15.0" fill="rgb(236,133,15)" rx="2" ry="2" />
<text  x="36.08" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="437" width="7.6" height="15.0" fill="rgb(226,55,24)" rx="2" ry="2" />
<text  x="1182.64" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="1172.6" y="629" width="0.4" height="15.0" fill="rgb(222,211,29)" rx="2" ry="2" />
<text  x="1175.57" y="639.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.04%)</title><rect x="34.0" y="501" width="0.5" height="15.0" fill="rgb(239,117,22)" rx="2" ry="2" />
<text  x="37.02" y="511.5" ></text>
</g>
<g >
<title>~__scoped_lock (1 samples, 0.04%)</title><rect x="1186.7" y="261" width="0.5" height="15.0" fill="rgb(226,40,8)" rx="2" ry="2" />
<text  x="1189.70" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.08%)</title><rect x="1188.1" y="133" width="1.0" height="15.0" fill="rgb(240,51,49)" rx="2" ry="2" />
<text  x="1191.12" y="143.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (2 samples, 0.08%)</title><rect x="1188.1" y="581" width="1.0" height="15.0" fill="rgb(241,107,11)" rx="2" ry="2" />
<text  x="1191.12" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (2 samples, 0.08%)</title><rect x="258.2" y="437" width="1.0" height="15.0" fill="rgb(227,228,0)" rx="2" ry="2" />
<text  x="261.25" y="447.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (2 samples, 0.08%)</title><rect x="1127.8" y="501" width="1.0" height="15.0" fill="rgb(246,159,10)" rx="2" ry="2" />
<text  x="1130.82" y="511.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1163.6" y="485" width="0.5" height="15.0" fill="rgb(210,205,23)" rx="2" ry="2" />
<text  x="1166.62" y="495.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.04%)</title><rect x="159.8" y="501" width="0.5" height="15.0" fill="rgb(253,57,17)" rx="2" ry="2" />
<text  x="162.80" y="511.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.20%)</title><rect x="30.7" y="581" width="2.4" height="15.0" fill="rgb(243,92,39)" rx="2" ry="2" />
<text  x="33.73" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.04%)</title><rect x="413.7" y="613" width="0.5" height="15.0" fill="rgb(226,217,12)" rx="2" ry="2" />
<text  x="416.70" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.6" y="597" width="0.4" height="15.0" fill="rgb(223,221,14)" rx="2" ry="2" />
<text  x="36.55" y="607.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000031740&gt; (1 samples, 0.04%)</title><rect x="35.9" y="661" width="0.5" height="15.0" fill="rgb(215,205,21)" rx="2" ry="2" />
<text  x="38.91" y="671.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1154.7" y="597" width="0.4" height="15.0" fill="rgb(218,101,13)" rx="2" ry="2" />
<text  x="1157.67" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.04%)</title><rect x="410.9" y="581" width="0.4" height="15.0" fill="rgb(215,136,48)" rx="2" ry="2" />
<text  x="413.87" y="591.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (1 samples, 0.04%)</title><rect x="328.0" y="597" width="0.4" height="15.0" fill="rgb(226,5,31)" rx="2" ry="2" />
<text  x="330.96" y="607.5" ></text>
</g>
<g >
<title>0x00007fc807a31b56 (1 samples, 0.04%)</title><rect x="35.0" y="565" width="0.4" height="15.0" fill="rgb(240,37,16)" rx="2" ry="2" />
<text  x="37.97" y="575.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.04%)</title><rect x="418.4" y="581" width="0.5" height="15.0" fill="rgb(214,37,39)" rx="2" ry="2" />
<text  x="421.41" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1166.9" y="549" width="0.5" height="15.0" fill="rgb(241,225,42)" rx="2" ry="2" />
<text  x="1169.92" y="559.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.04%)</title><rect x="699.6" y="533" width="0.5" height="15.0" fill="rgb(207,41,0)" rx="2" ry="2" />
<text  x="702.63" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (2 samples, 0.08%)</title><rect x="258.2" y="469" width="1.0" height="15.0" fill="rgb(209,223,35)" rx="2" ry="2" />
<text  x="261.25" y="479.5" ></text>
</g>
<g >
<title>tc_realloc (1 samples, 0.04%)</title><rect x="159.3" y="533" width="0.5" height="15.0" fill="rgb(226,138,15)" rx="2" ry="2" />
<text  x="162.33" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_single_threaded()[inline] (1 samples, 0.04%)</title><rect x="1155.1" y="517" width="0.5" height="15.0" fill="rgb(205,79,53)" rx="2" ry="2" />
<text  x="1158.14" y="527.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.04%)</title><rect x="33.6" y="469" width="0.4" height="15.0" fill="rgb(228,39,26)" rx="2" ry="2" />
<text  x="36.55" y="479.5" ></text>
</g>
<g >
<title>0x00007fc807a2cb4e (1 samples, 0.04%)</title><rect x="34.0" y="549" width="0.5" height="15.0" fill="rgb(235,67,0)" rx="2" ry="2" />
<text  x="37.02" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (1 samples, 0.04%)</title><rect x="1176.8" y="645" width="0.5" height="15.0" fill="rgb(221,193,2)" rx="2" ry="2" />
<text  x="1179.81" y="655.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e1d0&gt; (16 samples, 0.64%)</title><rect x="1179.6" y="597" width="7.6" height="15.0" fill="rgb(237,140,2)" rx="2" ry="2" />
<text  x="1182.64" y="607.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (11 samples, 0.44%)</title><rect x="373.2" y="549" width="5.2" height="15.0" fill="rgb(225,58,50)" rx="2" ry="2" />
<text  x="376.19" y="559.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="597" width="0.4" height="15.0" fill="rgb(247,210,45)" rx="2" ry="2" />
<text  x="1182.17" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.6" y="581" width="0.4" height="15.0" fill="rgb(250,14,7)" rx="2" ry="2" />
<text  x="36.55" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="380.3" y="565" width="0.4" height="15.0" fill="rgb(226,9,19)" rx="2" ry="2" />
<text  x="383.25" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1171.2" y="469" width="0.4" height="15.0" fill="rgb(238,141,47)" rx="2" ry="2" />
<text  x="1174.16" y="479.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="699.6" y="501" width="0.5" height="15.0" fill="rgb(218,6,10)" rx="2" ry="2" />
<text  x="702.63" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.04%)</title><rect x="1181.0" y="213" width="0.5" height="15.0" fill="rgb(247,83,25)" rx="2" ry="2" />
<text  x="1184.05" y="223.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="390.6" y="549" width="0.5" height="15.0" fill="rgb(234,132,18)" rx="2" ry="2" />
<text  x="393.61" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="1174.9" y="501" width="0.5" height="15.0" fill="rgb(233,21,18)" rx="2" ry="2" />
<text  x="1177.93" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (5 samples, 0.20%)</title><rect x="103.3" y="533" width="2.3" height="15.0" fill="rgb(217,52,22)" rx="2" ry="2" />
<text  x="106.27" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator&lt; &lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1167.4" y="501" width="0.5" height="15.0" fill="rgb(231,130,54)" rx="2" ry="2" />
<text  x="1170.39" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000d2370&gt; (1 samples, 0.04%)</title><rect x="1170.2" y="373" width="0.5" height="15.0" fill="rgb(231,84,46)" rx="2" ry="2" />
<text  x="1173.22" y="383.5" ></text>
</g>
<g >
<title>InOutRasterizer (1 samples, 0.04%)</title><rect x="259.7" y="613" width="0.4" height="15.0" fill="rgb(225,151,47)" rx="2" ry="2" />
<text  x="262.66" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (2 samples, 0.08%)</title><rect x="1169.7" y="405" width="1.0" height="15.0" fill="rgb(217,3,31)" rx="2" ry="2" />
<text  x="1172.74" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (10 samples, 0.40%)</title><rect x="1181.5" y="261" width="4.7" height="15.0" fill="rgb(206,27,38)" rx="2" ry="2" />
<text  x="1184.52" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.20%)</title><rect x="387.8" y="549" width="2.3" height="15.0" fill="rgb(205,71,20)" rx="2" ry="2" />
<text  x="390.79" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.08%)</title><rect x="1161.3" y="549" width="0.9" height="15.0" fill="rgb(248,229,16)" rx="2" ry="2" />
<text  x="1164.27" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1189.1" y="149" width="0.4" height="15.0" fill="rgb(211,62,14)" rx="2" ry="2" />
<text  x="1192.06" y="159.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (8 samples, 0.32%)</title><rect x="421.2" y="613" width="3.8" height="15.0" fill="rgb(222,20,44)" rx="2" ry="2" />
<text  x="424.23" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.08%)</title><rect x="434.0" y="613" width="0.9" height="15.0" fill="rgb(226,175,34)" rx="2" ry="2" />
<text  x="436.95" y="623.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.04%)</title><rect x="1173.5" y="597" width="0.5" height="15.0" fill="rgb(240,112,17)" rx="2" ry="2" />
<text  x="1176.51" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.04%)</title><rect x="418.4" y="613" width="0.5" height="15.0" fill="rgb(252,120,24)" rx="2" ry="2" />
<text  x="421.41" y="623.5" ></text>
</g>
<g >
<title>__lll_lock_wake_private@@GLIBC_PRIVATE&lt;00000000000835b0&gt; (1 samples, 0.04%)</title><rect x="33.6" y="437" width="0.4" height="15.0" fill="rgb(246,132,23)" rx="2" ry="2" />
<text  x="36.55" y="447.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="485" width="7.6" height="15.0" fill="rgb(217,87,6)" rx="2" ry="2" />
<text  x="1182.64" y="495.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="1159.4" y="549" width="0.5" height="15.0" fill="rgb(248,229,36)" rx="2" ry="2" />
<text  x="1162.38" y="559.5" ></text>
</g>
<g >
<title>readlinkat@@GLIBC_2.4&lt;00000000000f86b0&gt; (1 samples, 0.04%)</title><rect x="34.5" y="517" width="0.5" height="15.0" fill="rgb(225,226,39)" rx="2" ry="2" />
<text  x="37.50" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.16%)</title><rect x="380.7" y="565" width="1.9" height="15.0" fill="rgb(232,182,51)" rx="2" ry="2" />
<text  x="383.72" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.08%)</title><rect x="1169.7" y="469" width="1.0" height="15.0" fill="rgb(243,189,5)" rx="2" ry="2" />
<text  x="1172.74" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (9 samples, 0.36%)</title><rect x="360.0" y="565" width="4.2" height="15.0" fill="rgb(213,57,53)" rx="2" ry="2" />
<text  x="363.00" y="575.5" ></text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2&lt;0000000000085970&gt; (1 samples, 0.04%)</title><rect x="1127.3" y="485" width="0.5" height="15.0" fill="rgb(228,92,42)" rx="2" ry="2" />
<text  x="1130.35" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.08%)</title><rect x="232.8" y="549" width="1.0" height="15.0" fill="rgb(228,115,48)" rx="2" ry="2" />
<text  x="235.81" y="559.5" ></text>
</g>
<g >
<title>do_realloc[inline] (1 samples, 0.04%)</title><rect x="159.3" y="517" width="0.5" height="15.0" fill="rgb(241,35,30)" rx="2" ry="2" />
<text  x="162.33" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.12%)</title><rect x="418.9" y="581" width="1.4" height="15.0" fill="rgb(208,178,54)" rx="2" ry="2" />
<text  x="421.88" y="591.5" ></text>
</g>
<g >
<title>_Safe_iterator (13 samples, 0.52%)</title><rect x="1180.1" y="309" width="6.1" height="15.0" fill="rgb(247,212,0)" rx="2" ry="2" />
<text  x="1183.11" y="319.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (7 samples, 0.28%)</title><rect x="212.6" y="549" width="3.3" height="15.0" fill="rgb(238,163,17)" rx="2" ry="2" />
<text  x="215.55" y="559.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="434.0" y="597" width="0.4" height="15.0" fill="rgb(229,61,12)" rx="2" ry="2" />
<text  x="436.95" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.6" y="565" width="0.4" height="15.0" fill="rgb(220,74,29)" rx="2" ry="2" />
<text  x="36.55" y="575.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (16 samples, 0.64%)</title><rect x="717.1" y="501" width="7.5" height="15.0" fill="rgb(211,26,15)" rx="2" ry="2" />
<text  x="720.06" y="511.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="434.4" y="565" width="0.5" height="15.0" fill="rgb(239,184,3)" rx="2" ry="2" />
<text  x="437.42" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1177.8" y="485" width="0.4" height="15.0" fill="rgb(216,55,6)" rx="2" ry="2" />
<text  x="1180.75" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="433.5" y="517" width="0.5" height="15.0" fill="rgb(235,7,4)" rx="2" ry="2" />
<text  x="436.48" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (2 samples, 0.08%)</title><rect x="423.1" y="565" width="1.0" height="15.0" fill="rgb(243,64,13)" rx="2" ry="2" />
<text  x="426.12" y="575.5" ></text>
</g>
<g >
<title>ZLIB_1.2.0&lt;0000000000000000&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="469" width="0.5" height="15.0" fill="rgb(225,175,11)" rx="2" ry="2" />
<text  x="1181.69" y="479.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (7 samples, 0.28%)</title><rect x="700.1" y="533" width="3.3" height="15.0" fill="rgb(215,88,20)" rx="2" ry="2" />
<text  x="703.10" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.08%)</title><rect x="1188.1" y="277" width="1.0" height="15.0" fill="rgb(235,153,30)" rx="2" ry="2" />
<text  x="1191.12" y="287.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1178.7" y="597" width="0.5" height="15.0" fill="rgb(252,104,35)" rx="2" ry="2" />
<text  x="1181.69" y="607.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.04%)</title><rect x="1155.6" y="485" width="0.5" height="15.0" fill="rgb(215,0,41)" rx="2" ry="2" />
<text  x="1158.61" y="495.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.08%)</title><rect x="31.2" y="405" width="0.9" height="15.0" fill="rgb(222,79,32)" rx="2" ry="2" />
<text  x="34.20" y="415.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (25 samples, 1.00%)</title><rect x="328.4" y="597" width="11.8" height="15.0" fill="rgb(218,155,4)" rx="2" ry="2" />
<text  x="331.44" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (3 samples, 0.12%)</title><rect x="217.3" y="533" width="1.4" height="15.0" fill="rgb(246,113,42)" rx="2" ry="2" />
<text  x="220.27" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="420.3" y="613" width="0.5" height="15.0" fill="rgb(225,212,16)" rx="2" ry="2" />
<text  x="423.29" y="623.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (4 samples, 0.16%)</title><rect x="30.7" y="501" width="1.9" height="15.0" fill="rgb(236,179,8)" rx="2" ry="2" />
<text  x="33.73" y="511.5" ></text>
</g>
<g >
<title>png_read_row@@PNG16_0&lt;0000000000010890&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="517" width="0.5" height="15.0" fill="rgb(216,24,25)" rx="2" ry="2" />
<text  x="1181.69" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (37 samples, 1.48%)</title><rect x="110.3" y="581" width="17.5" height="15.0" fill="rgb(250,224,50)" rx="2" ry="2" />
<text  x="113.34" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="33.1" y="485" width="0.5" height="15.0" fill="rgb(213,42,0)" rx="2" ry="2" />
<text  x="36.08" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.12%)</title><rect x="223.9" y="565" width="1.4" height="15.0" fill="rgb(210,221,44)" rx="2" ry="2" />
<text  x="226.86" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="33.6" y="453" width="0.4" height="15.0" fill="rgb(233,4,34)" rx="2" ry="2" />
<text  x="36.55" y="463.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.08%)</title><rect x="1189.1" y="277" width="0.9" height="15.0" fill="rgb(223,75,49)" rx="2" ry="2" />
<text  x="1192.06" y="287.5" ></text>
</g>
<g >
<title>all (2,505 samples, 100%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(235,79,30)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.04%)</title><rect x="425.5" y="549" width="0.4" height="15.0" fill="rgb(238,11,25)" rx="2" ry="2" />
<text  x="428.47" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="1179.2" y="421" width="0.4" height="15.0" fill="rgb(238,98,41)" rx="2" ry="2" />
<text  x="1182.17" y="431.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.04%)</title><rect x="430.2" y="581" width="0.5" height="15.0" fill="rgb(210,32,19)" rx="2" ry="2" />
<text  x="433.18" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (39 samples, 1.56%)</title><rect x="197.5" y="581" width="18.4" height="15.0" fill="rgb(237,143,45)" rx="2" ry="2" />
<text  x="200.48" y="591.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000068590&gt; (4 samples, 0.16%)</title><rect x="1176.8" y="661" width="1.9" height="15.0" fill="rgb(216,136,21)" rx="2" ry="2" />
<text  x="1179.81" y="671.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (2 samples, 0.08%)</title><rect x="1126.4" y="485" width="0.9" height="15.0" fill="rgb(247,117,3)" rx="2" ry="2" />
<text  x="1129.41" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.08%)</title><rect x="1161.3" y="517" width="0.9" height="15.0" fill="rgb(217,220,52)" rx="2" ry="2" />
<text  x="1164.27" y="527.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003ecb0&gt; (4 samples, 0.16%)</title><rect x="34.0" y="661" width="1.9" height="15.0" fill="rgb(218,10,12)" rx="2" ry="2" />
<text  x="37.02" y="671.5" ></text>
</g>
<g >
<title>~_Safe_container (1 samples, 0.04%)</title><rect x="425.0" y="597" width="0.5" height="15.0" fill="rgb(222,226,1)" rx="2" ry="2" />
<text  x="428.00" y="607.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (1 samples, 0.04%)</title><rect x="32.6" y="549" width="0.5" height="15.0" fill="rgb(205,28,51)" rx="2" ry="2" />
<text  x="35.61" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.08%)</title><rect x="1162.2" y="501" width="0.9" height="15.0" fill="rgb(249,25,26)" rx="2" ry="2" />
<text  x="1165.21" y="511.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="427.4" y="629" width="0.4" height="15.0" fill="rgb(250,168,22)" rx="2" ry="2" />
<text  x="430.36" y="639.5" ></text>
</g>
<g >
<title>do_malloc[inline] (2 samples, 0.08%)</title><rect x="258.2" y="501" width="1.0" height="15.0" fill="rgb(208,6,42)" rx="2" ry="2" />
<text  x="261.25" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (347 samples, 13.85%)</title><rect x="965.3" y="533" width="163.5" height="15.0" fill="rgb(215,72,53)" rx="2" ry="2" />
<text  x="968.31" y="543.5" >__driDriverGetExtensi..</text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="1160.8" y="453" width="0.5" height="15.0" fill="rgb(242,97,41)" rx="2" ry="2" />
<text  x="1163.79" y="463.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1187.2" y="517" width="0.4" height="15.0" fill="rgb(242,22,29)" rx="2" ry="2" />
<text  x="1190.17" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="1170.7" y="421" width="0.5" height="15.0" fill="rgb(223,8,8)" rx="2" ry="2" />
<text  x="1173.69" y="431.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (2 samples, 0.08%)</title><rect x="1188.1" y="53" width="1.0" height="15.0" fill="rgb(247,91,29)" rx="2" ry="2" />
<text  x="1191.12" y="63.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1168.3" y="501" width="0.5" height="15.0" fill="rgb(238,183,10)" rx="2" ry="2" />
<text  x="1171.33" y="511.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (1 samples, 0.04%)</title><rect x="159.3" y="485" width="0.5" height="15.0" fill="rgb(223,131,25)" rx="2" ry="2" />
<text  x="162.33" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1155.6" y="533" width="0.5" height="15.0" fill="rgb(242,192,9)" rx="2" ry="2" />
<text  x="1158.61" y="543.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="434.0" y="501" width="0.4" height="15.0" fill="rgb(213,68,54)" rx="2" ry="2" />
<text  x="436.95" y="511.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;00000000000672c0&gt; (2,420 samples, 96.61%)</title><rect x="36.4" y="661" width="1139.9" height="15.0" fill="rgb(221,61,31)" rx="2" ry="2" />
<text  x="39.38" y="671.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;00000000000672c0&gt;</text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (10 samples, 0.40%)</title><rect x="1181.5" y="277" width="4.7" height="15.0" fill="rgb(221,120,9)" rx="2" ry="2" />
<text  x="1184.52" y="287.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1177.8" y="597" width="0.4" height="15.0" fill="rgb(246,212,45)" rx="2" ry="2" />
<text  x="1180.75" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (16 samples, 0.64%)</title><rect x="1179.6" y="533" width="7.6" height="15.0" fill="rgb(206,19,1)" rx="2" ry="2" />
<text  x="1182.64" y="543.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.04%)</title><rect x="414.6" y="597" width="0.5" height="15.0" fill="rgb(216,138,42)" rx="2" ry="2" />
<text  x="417.64" y="607.5" ></text>
</g>
<g >
<title>_Vector_impl (3 samples, 0.12%)</title><rect x="182.4" y="581" width="1.4" height="15.0" fill="rgb(249,46,32)" rx="2" ry="2" />
<text  x="185.41" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.04%)</title><rect x="1174.9" y="469" width="0.5" height="15.0" fill="rgb(221,41,4)" rx="2" ry="2" />
<text  x="1177.93" y="479.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.04%)</title><rect x="410.9" y="549" width="0.4" height="15.0" fill="rgb(241,165,54)" rx="2" ry="2" />
<text  x="413.87" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="427.8" y="613" width="0.5" height="15.0" fill="rgb(219,162,0)" rx="2" ry="2" />
<text  x="430.83" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.08%)</title><rect x="1162.2" y="533" width="0.9" height="15.0" fill="rgb(229,215,22)" rx="2" ry="2" />
<text  x="1165.21" y="543.5" ></text>
</g>
<g >
<title>_Node_const_iterator (2 samples, 0.08%)</title><rect x="1163.1" y="501" width="1.0" height="15.0" fill="rgb(205,101,35)" rx="2" ry="2" />
<text  x="1166.15" y="511.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (2 samples, 0.08%)</title><rect x="100.0" y="565" width="0.9" height="15.0" fill="rgb(219,195,5)" rx="2" ry="2" />
<text  x="102.97" y="575.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003abb0&gt; (1 samples, 0.04%)</title><rect x="1178.7" y="613" width="0.5" height="15.0" fill="rgb(231,73,44)" rx="2" ry="2" />
<text  x="1181.69" y="623.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (37 samples, 1.48%)</title><rect x="1136.3" y="565" width="17.4" height="15.0" fill="rgb(241,28,46)" rx="2" ry="2" />
<text  x="1139.30" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="1174.9" y="549" width="0.5" height="15.0" fill="rgb(213,198,41)" rx="2" ry="2" />
<text  x="1177.93" y="559.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1187.6" y="549" width="0.5" height="15.0" fill="rgb(250,49,53)" rx="2" ry="2" />
<text  x="1190.64" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="285.1" y="565" width="0.5" height="15.0" fill="rgb(248,167,31)" rx="2" ry="2" />
<text  x="288.10" y="575.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.08%)</title><rect x="1188.1" y="309" width="1.0" height="15.0" fill="rgb(221,117,28)" rx="2" ry="2" />
<text  x="1191.12" y="319.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1166.9" y="533" width="0.5" height="15.0" fill="rgb(235,225,45)" rx="2" ry="2" />
<text  x="1169.92" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="434.4" y="549" width="0.5" height="15.0" fill="rgb(253,206,42)" rx="2" ry="2" />
<text  x="437.42" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (5 samples, 0.20%)</title><rect x="75.9" y="565" width="2.4" height="15.0" fill="rgb(222,101,40)" rx="2" ry="2" />
<text  x="78.95" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::Push(void*)[inline] (1 samples, 0.04%)</title><rect x="410.9" y="469" width="0.4" height="15.0" fill="rgb(223,104,35)" rx="2" ry="2" />
<text  x="413.87" y="479.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (28 samples, 1.12%)</title><rect x="394.4" y="597" width="13.2" height="15.0" fill="rgb(241,149,52)" rx="2" ry="2" />
<text  x="397.38" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="433.0" y="565" width="0.5" height="15.0" fill="rgb(205,26,10)" rx="2" ry="2" />
<text  x="436.01" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="1175.4" y="613" width="0.5" height="15.0" fill="rgb(247,174,13)" rx="2" ry="2" />
<text  x="1178.40" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="434.9" y="629" width="0.5" height="15.0" fill="rgb(237,76,44)" rx="2" ry="2" />
<text  x="437.89" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (6 samples, 0.24%)</title><rect x="1150.9" y="533" width="2.8" height="15.0" fill="rgb(209,166,37)" rx="2" ry="2" />
<text  x="1153.90" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="418.4" y="597" width="0.5" height="15.0" fill="rgb(238,41,40)" rx="2" ry="2" />
<text  x="421.41" y="607.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.08%)</title><rect x="31.2" y="373" width="0.9" height="15.0" fill="rgb(208,178,22)" rx="2" ry="2" />
<text  x="34.20" y="383.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.04%)</title><rect x="159.8" y="549" width="0.5" height="15.0" fill="rgb(240,24,20)" rx="2" ry="2" />
<text  x="162.80" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.08%)</title><rect x="425.5" y="613" width="0.9" height="15.0" fill="rgb(245,219,30)" rx="2" ry="2" />
<text  x="428.47" y="623.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (2 samples, 0.08%)</title><rect x="144.3" y="597" width="0.9" height="15.0" fill="rgb(236,120,7)" rx="2" ry="2" />
<text  x="147.25" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.08%)</title><rect x="1170.7" y="517" width="0.9" height="15.0" fill="rgb(231,84,14)" rx="2" ry="2" />
<text  x="1173.69" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.20%)</title><rect x="217.3" y="565" width="2.3" height="15.0" fill="rgb(219,228,31)" rx="2" ry="2" />
<text  x="220.27" y="575.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1177.8" y="613" width="0.4" height="15.0" fill="rgb(228,198,8)" rx="2" ry="2" />
<text  x="1180.75" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1175.9" y="565" width="0.4" height="15.0" fill="rgb(228,204,4)" rx="2" ry="2" />
<text  x="1178.87" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="1177.8" y="501" width="0.4" height="15.0" fill="rgb(228,138,43)" rx="2" ry="2" />
<text  x="1180.75" y="511.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (4 samples, 0.16%)</title><rect x="291.7" y="565" width="1.9" height="15.0" fill="rgb(240,191,48)" rx="2" ry="2" />
<text  x="294.69" y="575.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (362 samples, 14.45%)</title><rect x="703.4" y="533" width="170.5" height="15.0" fill="rgb(212,51,45)" rx="2" ry="2" />
<text  x="706.40" y="543.5" >nouveau_drm_screen_cre..</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.1" y="533" width="0.5" height="15.0" fill="rgb(223,8,5)" rx="2" ry="2" />
<text  x="36.08" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.08%)</title><rect x="1188.1" y="149" width="1.0" height="15.0" fill="rgb(235,66,32)" rx="2" ry="2" />
<text  x="1191.12" y="159.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.08%)</title><rect x="31.2" y="277" width="0.9" height="15.0" fill="rgb(238,77,40)" rx="2" ry="2" />
<text  x="34.20" y="287.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (814 samples, 32.50%)</title><rect x="502.7" y="581" width="383.5" height="15.0" fill="rgb(212,15,52)" rx="2" ry="2" />
<text  x="505.73" y="591.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.04%)</title><rect x="33.6" y="549" width="0.4" height="15.0" fill="rgb(247,146,50)" rx="2" ry="2" />
<text  x="36.55" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.08%)</title><rect x="1189.1" y="549" width="0.9" height="15.0" fill="rgb(225,43,35)" rx="2" ry="2" />
<text  x="1192.06" y="559.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;) (1 samples, 0.04%)</title><rect x="414.2" y="565" width="0.4" height="15.0" fill="rgb(222,37,22)" rx="2" ry="2" />
<text  x="417.17" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="1175.9" y="581" width="0.4" height="15.0" fill="rgb(247,155,22)" rx="2" ry="2" />
<text  x="1178.87" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.08%)</title><rect x="186.2" y="565" width="0.9" height="15.0" fill="rgb(248,22,33)" rx="2" ry="2" />
<text  x="189.18" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.24%)</title><rect x="1168.8" y="533" width="2.8" height="15.0" fill="rgb(208,139,7)" rx="2" ry="2" />
<text  x="1171.80" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (3 samples, 0.12%)</title><rect x="1180.1" y="261" width="1.4" height="15.0" fill="rgb(249,93,50)" rx="2" ry="2" />
<text  x="1183.11" y="271.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.16%)</title><rect x="301.1" y="565" width="1.9" height="15.0" fill="rgb(209,213,7)" rx="2" ry="2" />
<text  x="304.11" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (2 samples, 0.08%)</title><rect x="1189.1" y="165" width="0.9" height="15.0" fill="rgb(253,118,40)" rx="2" ry="2" />
<text  x="1192.06" y="175.5" ></text>
</g>
</g>
</svg>
