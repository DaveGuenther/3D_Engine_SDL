<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="547.6" y="453" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="550.62" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.01%)</title><rect x="119.6" y="549" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="122.64" y="559.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000683b0&gt; (1 samples, 0.01%)</title><rect x="547.4" y="469" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="550.45" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.01%)</title><rect x="543.9" y="549" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="546.92" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.09%)</title><rect x="526.3" y="501" width="1.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="529.29" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (4 samples, 0.06%)</title><rect x="519.1" y="517" width="0.6" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="522.07" y="527.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (2 samples, 0.03%)</title><rect x="514.5" y="549" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="517.54" y="559.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b9e0&gt; (4 samples, 0.06%)</title><rect x="458.5" y="517" width="0.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="461.46" y="527.5" ></text>
</g>
<g >
<title>__lll_lock_wake_private@@GLIBC_PRIVATE&lt;0000000000089730&gt; (37 samples, 0.53%)</title><rect x="571.5" y="629" width="6.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="574.46" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.01%)</title><rect x="538.4" y="517" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="541.38" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="543.2" y="533" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="546.25" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::input_iterator_tag) (1 samples, 0.01%)</title><rect x="564.7" y="133" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="567.74" y="143.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.01%)</title><rect x="553.3" y="549" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="556.32" y="559.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (11 samples, 0.16%)</title><rect x="534.2" y="549" width="1.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="537.18" y="559.5" ></text>
</g>
<g >
<title>0x00007f10160b47d6 (1 samples, 0.01%)</title><rect x="11.0" y="581" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="14.01" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (7 samples, 0.10%)</title><rect x="516.2" y="533" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="519.22" y="543.5" ></text>
</g>
<g >
<title>0x00007f10160a832e (1 samples, 0.01%)</title><rect x="11.7" y="613" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="14.68" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() const (1 samples, 0.01%)</title><rect x="542.7" y="517" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="545.75" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.01%)</title><rect x="540.9" y="549" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="543.90" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;0000000000061e50&gt; (5 samples, 0.07%)</title><rect x="509.0" y="533" width="0.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="512.00" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.01%)</title><rect x="213.0" y="613" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="215.99" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate(int*, unsigned long) (1 samples, 0.01%)</title><rect x="563.9" y="453" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="566.90" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="549.1" y="389" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="552.13" y="399.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.01%)</title><rect x="542.6" y="485" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="545.58" y="495.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.01%)</title><rect x="549.5" y="453" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="552.46" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.04%)</title><rect x="561.6" y="485" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="564.55" y="495.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="517.1" y="517" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="520.06" y="527.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a070&gt; (6 samples, 0.09%)</title><rect x="521.1" y="469" width="1.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="524.09" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.01%)</title><rect x="553.3" y="565" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="556.32" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.04%)</title><rect x="553.5" y="565" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="556.49" y="575.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d990&gt; (1 samples, 0.01%)</title><rect x="522.8" y="501" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="525.77" y="511.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.5" y="453" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="553.47" y="463.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.01%)</title><rect x="557.4" y="565" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="560.35" y="575.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.01%)</title><rect x="515.2" y="453" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="518.21" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.01%)</title><rect x="552.7" y="549" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="555.65" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.03%)</title><rect x="527.6" y="485" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="530.64" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.01%)</title><rect x="558.0" y="565" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="561.03" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.01%)</title><rect x="215.5" y="565" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="218.51" y="575.5" ></text>
</g>
<g >
<title>operator/(Vec3d const&amp;, float const&amp;)&lt;000000000007d050&gt; (1 samples, 0.01%)</title><rect x="553.2" y="565" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="556.16" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.01%)</title><rect x="554.5" y="549" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="557.50" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (1 samples, 0.01%)</title><rect x="568.9" y="421" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="571.94" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="549.0" y="373" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="551.96" y="383.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, SDL_Color&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, std::allocator&lt;SDL_Color&gt;&amp;) (2 samples, 0.03%)</title><rect x="564.6" y="229" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="567.57" y="239.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000dd610&gt; (2 samples, 0.03%)</title><rect x="213.2" y="629" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="216.16" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.01%)</title><rect x="534.0" y="485" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="537.02" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (9 samples, 0.13%)</title><rect x="545.1" y="485" width="1.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="548.10" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::TryPop(void**)[inline] (1 samples, 0.01%)</title><rect x="1179.4" y="533" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1182.42" y="543.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (7 samples, 0.10%)</title><rect x="531.2" y="485" width="1.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="534.16" y="495.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.01%)</title><rect x="550.5" y="405" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="553.47" y="415.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.01%)</title><rect x="119.6" y="597" width="0.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="122.64" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_impl::_Vector_impl(std::allocator&lt;SDL_Color&gt; const&amp;) (1 samples, 0.01%)</title><rect x="568.6" y="213" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="571.60" y="223.5" ></text>
</g>
<g >
<title>pthread_once@@GLIBC_2.34 (1 samples, 0.01%)</title><rect x="1187.1" y="597" width="0.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1190.15" y="607.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;00000000000662d0&gt; (50 samples, 0.71%)</title><rect x="554.7" y="581" width="8.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="557.67" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d990&gt; (6 samples, 0.09%)</title><rect x="539.2" y="549" width="1.0" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="542.22" y="559.5" ></text>
</g>
<g >
<title>all (7,028 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (27 samples, 0.38%)</title><rect x="564.2" y="293" width="4.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="567.24" y="303.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(Vec2d const&amp;) (1 samples, 0.01%)</title><rect x="518.9" y="517" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="521.90" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (87 samples, 1.24%)</title><rect x="493.4" y="453" width="14.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="496.38" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;::operator++() (1 samples, 0.01%)</title><rect x="557.9" y="533" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="560.86" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (3 samples, 0.04%)</title><rect x="530.7" y="485" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="533.66" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh&gt;(Mesh*) (1 samples, 0.01%)</title><rect x="568.9" y="405" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="571.94" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.03%)</title><rect x="556.8" y="501" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="559.85" y="511.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (1 samples, 0.01%)</title><rect x="523.9" y="453" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="526.94" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="563.9" y="501" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="566.90" y="511.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*)[inline] (1 samples, 0.01%)</title><rect x="568.9" y="181" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="571.94" y="191.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e420&gt; (2 samples, 0.03%)</title><rect x="525.6" y="533" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="528.62" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.09%)</title><rect x="526.3" y="517" width="1.0" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="529.29" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="547.6" y="421" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="550.62" y="431.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.03%)</title><rect x="285.7" y="501" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="288.69" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::operator=(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="216.0" y="533" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="219.01" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.04%)</title><rect x="549.3" y="485" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="552.29" y="495.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.01%)</title><rect x="557.2" y="565" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="560.19" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (13 samples, 0.18%)</title><rect x="554.7" y="517" width="2.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="557.67" y="527.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (67 samples, 0.95%)</title><rect x="1168.3" y="629" width="11.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1171.34" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.01%)</title><rect x="558.7" y="517" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="561.70" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (9 samples, 0.13%)</title><rect x="472.2" y="517" width="1.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="475.23" y="527.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.01%)</title><rect x="550.1" y="437" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="553.13" y="447.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.01%)</title><rect x="563.4" y="501" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="566.40" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="215.0" y="517" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="218.01" y="527.5" ></text>
</g>
<g >
<title>bool std::operator!=&lt;TexturePNG&gt;(std::shared_ptr&lt;TexturePNG&gt; const&amp;, decltype(nullptr)) (12 samples, 0.17%)</title><rect x="469.2" y="517" width="2.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="472.21" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (1 samples, 0.01%)</title><rect x="525.5" y="533" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="528.45" y="543.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000030510&gt; (2 samples, 0.03%)</title><rect x="215.8" y="581" width="0.4" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="218.85" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (2 samples, 0.03%)</title><rect x="523.9" y="485" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="526.94" y="495.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (7 samples, 0.10%)</title><rect x="531.2" y="453" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="534.16" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.03%)</title><rect x="561.6" y="421" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="564.55" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="553.3" y="405" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="556.32" y="415.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (24 samples, 0.34%)</title><rect x="546.6" y="549" width="4.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="549.61" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="558.4" y="549" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="561.36" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt;[inline] (1 samples, 0.01%)</title><rect x="213.0" y="581" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="215.99" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;000000000007ddb0&gt; (28 samples, 0.40%)</title><rect x="518.4" y="533" width="4.7" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="521.40" y="543.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (22 samples, 0.31%)</title><rect x="564.9" y="165" width="3.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="567.91" y="175.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="568.9" y="469" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="571.94" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;)[inline] (1 samples, 0.01%)</title><rect x="568.9" y="101" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="571.94" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate(std::allocator&lt;int&gt;&amp;, int*, unsigned long)[inline] (1 samples, 0.01%)</title><rect x="563.9" y="437" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="566.90" y="447.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000061380&gt; (847 samples, 12.05%)</title><rect x="365.8" y="533" width="142.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="368.78" y="543.5" >TexturemapRasteriz..</text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (1 samples, 0.01%)</title><rect x="548.1" y="437" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="551.12" y="447.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.01%)</title><rect x="1179.4" y="581" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1182.42" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() (1 samples, 0.01%)</title><rect x="524.4" y="485" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="527.45" y="495.5" ></text>
</g>
<g >
<title>0xae40930d80c43587 (1 samples, 0.01%)</title><rect x="11.7" y="629" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.68" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (5 samples, 0.07%)</title><rect x="555.7" y="421" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="558.67" y="431.5" ></text>
</g>
<g >
<title>Triangle::setUVPoint(int, Vec2d const&amp;)&lt;000000000007b7b0&gt; (1 samples, 0.01%)</title><rect x="536.2" y="549" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="539.20" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="517.9" y="453" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="520.90" y="463.5" ></text>
</g>
<g >
<title>bool std::operator!=&lt;TexturePNG&gt;(std::shared_ptr&lt;TexturePNG&gt; const&amp;, decltype(nullptr)) (11 samples, 0.16%)</title><rect x="329.5" y="517" width="1.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="332.51" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.01%)</title><rect x="546.6" y="533" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="549.61" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="549.6" y="437" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="552.63" y="447.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (45 samples, 0.64%)</title><rect x="216.2" y="533" width="7.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="219.18" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (136 samples, 1.94%)</title><rect x="342.9" y="469" width="22.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="345.95" y="479.5" >s..</text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.01%)</title><rect x="568.9" y="293" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="571.94" y="303.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.01%)</title><rect x="527.5" y="517" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="530.47" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (28 samples, 0.40%)</title><rect x="564.1" y="325" width="4.7" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="567.07" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (2 samples, 0.03%)</title><rect x="552.8" y="549" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="555.82" y="559.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::~OBJ_Lex_triFace()&lt;00000000000496a0&gt; (1 samples, 0.01%)</title><rect x="563.9" y="517" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="566.90" y="527.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (33 samples, 0.47%)</title><rect x="563.4" y="565" width="5.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="566.40" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.01%)</title><rect x="518.2" y="533" width="0.2" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="521.23" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061ca0&gt; (1 samples, 0.01%)</title><rect x="508.5" y="533" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="511.49" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="550.5" y="373" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="553.47" y="383.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="550.1" y="373" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="553.13" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.01%)</title><rect x="525.3" y="501" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="528.28" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::operator&lt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006b2e0&gt; (1 samples, 0.01%)</title><rect x="550.3" y="421" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="553.30" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_all() (1 samples, 0.01%)</title><rect x="214.8" y="533" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="217.84" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (4 samples, 0.06%)</title><rect x="552.0" y="549" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="554.98" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.01%)</title><rect x="553.3" y="469" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="556.32" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.03%)</title><rect x="547.1" y="469" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="550.11" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.03%)</title><rect x="525.1" y="517" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="528.12" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (4 samples, 0.06%)</title><rect x="542.2" y="533" width="0.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="545.24" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (1 samples, 0.01%)</title><rect x="530.5" y="469" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="533.49" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::operator++() (1 samples, 0.01%)</title><rect x="564.1" y="293" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="567.07" y="303.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000543d0&gt; (1 samples, 0.01%)</title><rect x="568.9" y="389" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="571.94" y="399.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (10 samples, 0.14%)</title><rect x="559.9" y="469" width="1.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="562.87" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (9 samples, 0.13%)</title><rect x="545.1" y="533" width="1.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="548.10" y="543.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.01%)</title><rect x="1179.4" y="597" width="0.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1182.42" y="607.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000061ec0&gt; (3 samples, 0.04%)</title><rect x="288.5" y="517" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="291.55" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.01%)</title><rect x="530.5" y="485" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="533.49" y="495.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.01%)</title><rect x="550.0" y="453" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="552.97" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (44 samples, 0.63%)</title><rect x="460.8" y="501" width="7.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="463.81" y="511.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000ff6f0&gt; (1 samples, 0.01%)</title><rect x="11.0" y="565" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="14.01" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="563.6" y="437" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="566.57" y="447.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (2 samples, 0.03%)</title><rect x="564.6" y="149" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="567.57" y="159.5" ></text>
</g>
<g >
<title>syscall@@GLIBC_2.2.5&lt;000000000010e720&gt; (11 samples, 0.16%)</title><rect x="1187.3" y="629" width="1.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1190.31" y="639.5" ></text>
</g>
<g >
<title>0x00007f10160a0605 (1 samples, 0.01%)</title><rect x="11.0" y="597" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="14.01" y="607.5" ></text>
</g>
<g >
<title>TextureList::insertOrAssignTexture(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003cbd0&gt; (1 samples, 0.01%)</title><rect x="563.4" y="517" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="566.40" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.03%)</title><rect x="553.7" y="453" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="556.66" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (2 samples, 0.03%)</title><rect x="523.9" y="469" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="526.94" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (3 samples, 0.04%)</title><rect x="561.6" y="517" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="564.55" y="527.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.01%)</title><rect x="549.5" y="437" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="552.46" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (6 samples, 0.09%)</title><rect x="470.2" y="501" width="1.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="473.21" y="511.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ff0&gt; (48 samples, 0.68%)</title><rect x="204.3" y="629" width="8.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="207.26" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_get_mutex()&lt;00000000000dd920&gt; (1 samples, 0.01%)</title><rect x="559.2" y="533" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="562.20" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_Safe_sequence_base()&lt;0000000000015da0&gt; (1 samples, 0.01%)</title><rect x="532.7" y="485" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="535.67" y="495.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (23 samples, 0.33%)</title><rect x="546.8" y="533" width="3.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="549.78" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="538.4" y="501" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="541.38" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000c0cf0&gt; (494 samples, 7.03%)</title><rect x="120.5" y="629" width="82.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="123.48" y="639.5" >__driDriv..</text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (9 samples, 0.13%)</title><rect x="560.0" y="421" width="1.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="563.04" y="431.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.03%)</title><rect x="528.0" y="517" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="530.97" y="527.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.03%)</title><rect x="527.0" y="469" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="529.96" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (1 samples, 0.01%)</title><rect x="533.7" y="485" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="536.68" y="495.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (2 samples, 0.03%)</title><rect x="538.7" y="549" width="0.4" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="541.72" y="559.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464c0&gt; (166 samples, 2.36%)</title><rect x="385.3" y="517" width="27.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="388.26" y="527.5" >T..</text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005b580&gt; (13 samples, 0.18%)</title><rect x="554.7" y="565" width="2.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="557.67" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="215.7" y="549" width="0.1" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="218.68" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="568.9" y="117" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="571.94" y="127.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(TexturePNG const&amp;)&lt;000000000003dca0&gt; (28 samples, 0.40%)</title><rect x="564.1" y="389" width="4.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="567.07" y="399.5" ></text>
</g>
<g >
<title>Triangle::setTexture(std::shared_ptr&lt;TexturePNG&gt;)&lt;000000000007b7f0&gt; (1 samples, 0.01%)</title><rect x="536.0" y="549" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="539.03" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.01%)</title><rect x="543.9" y="501" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="546.92" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.04%)</title><rect x="549.3" y="501" width="0.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="552.29" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="541.9" y="517" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="544.91" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="538.5" y="533" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="541.55" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="550.0" y="421" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="552.97" y="431.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.01%)</title><rect x="119.6" y="581" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="122.64" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.01%)</title><rect x="542.1" y="517" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="545.07" y="527.5" ></text>
</g>
<g >
<title>__open64 (1 samples, 0.01%)</title><rect x="10.8" y="613" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="13.84" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.01%)</title><rect x="552.1" y="517" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="555.15" y="527.5" ></text>
</g>
<g >
<title>operator+(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d1b0&gt; (1 samples, 0.01%)</title><rect x="522.9" y="501" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="525.93" y="511.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.01%)</title><rect x="1167.0" y="629" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1170.00" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="550.1" y="341" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="553.13" y="351.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.01%)</title><rect x="530.3" y="405" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="533.32" y="415.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.03%)</title><rect x="531.7" y="421" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="534.66" y="431.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="539.1" y="517" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="542.05" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="568.9" y="133" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="571.94" y="143.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.01%)</title><rect x="527.5" y="533" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="530.47" y="543.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.01%)</title><rect x="515.2" y="485" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="518.21" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.04%)</title><rect x="561.6" y="469" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="564.55" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.03%)</title><rect x="517.7" y="485" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="520.73" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.03%)</title><rect x="553.7" y="517" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="556.66" y="527.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003cda0&gt; (28 samples, 0.40%)</title><rect x="564.1" y="517" width="4.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="567.07" y="527.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.04%)</title><rect x="561.0" y="389" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="564.05" y="399.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;000000000007da00&gt; (1 samples, 0.01%)</title><rect x="539.1" y="549" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="542.05" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (2 samples, 0.03%)</title><rect x="559.5" y="549" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="562.54" y="559.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.01%)</title><rect x="563.4" y="453" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="566.40" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="437" width="4.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="567.07" y="447.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;00000000000430e0&gt; (8 samples, 0.11%)</title><rect x="223.9" y="533" width="1.3" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="226.90" y="543.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.01%)</title><rect x="529.5" y="485" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="532.48" y="495.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;00000000000430e0&gt; (4 samples, 0.06%)</title><rect x="384.6" y="517" width="0.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="387.58" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.03%)</title><rect x="549.8" y="469" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="552.80" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="561.9" y="453" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="564.89" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (3 samples, 0.04%)</title><rect x="541.6" y="549" width="0.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="544.57" y="559.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="515.0" y="533" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="518.04" y="543.5" ></text>
</g>
<g >
<title>Event_Scanner::captureMouseMovement()&lt;000000000002bda0&gt; (1 samples, 0.01%)</title><rect x="215.8" y="549" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="218.85" y="559.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;00000000000516e0&gt; (1 samples, 0.01%)</title><rect x="568.8" y="533" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="571.77" y="543.5" ></text>
</g>
<g >
<title>0x00007f10160b63ae (1 samples, 0.01%)</title><rect x="11.0" y="613" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="14.01" y="623.5" ></text>
</g>
<g >
<title>0x33322f64662f666b (1 samples, 0.01%)</title><rect x="10.8" y="629" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="13.84" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.03%)</title><rect x="558.2" y="565" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="561.19" y="575.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;00000000001128d0&gt; (1 samples, 0.01%)</title><rect x="1187.0" y="629" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1189.98" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="524.1" y="453" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="527.11" y="463.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;000000000002a7a0&gt; (1 samples, 0.01%)</title><rect x="1167.8" y="629" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1170.84" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (2 samples, 0.03%)</title><rect x="564.6" y="213" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="567.57" y="223.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (6 samples, 0.09%)</title><rect x="330.4" y="501" width="1.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="333.35" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (42 samples, 0.60%)</title><rect x="358.4" y="437" width="7.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="361.39" y="447.5" ></text>
</g>
<g >
<title>_XwcFreeStringList&lt;0000000000056730&gt; (1 samples, 0.01%)</title><rect x="120.3" y="629" width="0.2" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="123.31" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_get_mutex()&lt;00000000000dd920&gt; (1 samples, 0.01%)</title><rect x="524.6" y="501" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="527.61" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::_Safe_container() (2 samples, 0.03%)</title><rect x="532.5" y="517" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="535.50" y="527.5" ></text>
</g>
<g >
<title>close (2 samples, 0.03%)</title><rect x="1167.3" y="629" width="0.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1170.33" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.01%)</title><rect x="546.9" y="453" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="549.94" y="463.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.01%)</title><rect x="527.8" y="469" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="530.80" y="479.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d930&gt; (3 samples, 0.04%)</title><rect x="539.6" y="533" width="0.5" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="542.56" y="543.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (643 samples, 9.15%)</title><rect x="11.8" y="629" width="108.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="14.85" y="639.5" >SDL_DYNAPI_en..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000286e0&gt; (1 samples, 0.01%)</title><rect x="119.6" y="533" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="122.64" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.03%)</title><rect x="545.9" y="421" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="548.94" y="431.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (7 samples, 0.10%)</title><rect x="411.1" y="501" width="1.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="414.11" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.01%)</title><rect x="546.8" y="405" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="549.78" y="415.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464c0&gt; (185 samples, 2.63%)</title><rect x="257.0" y="517" width="31.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="259.98" y="527.5" >Te..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="553.3" y="421" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="556.32" y="431.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (6 samples, 0.09%)</title><rect x="562.1" y="517" width="1.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="565.05" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (9 samples, 0.13%)</title><rect x="332.0" y="517" width="1.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="335.03" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (3 samples, 0.04%)</title><rect x="550.6" y="501" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="553.64" y="511.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000072360&gt; (33 samples, 0.47%)</title><rect x="563.4" y="581" width="5.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="566.40" y="591.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.01%)</title><rect x="548.3" y="437" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="551.29" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (9 samples, 0.13%)</title><rect x="545.1" y="517" width="1.5" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="548.10" y="527.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (5 samples, 0.07%)</title><rect x="549.8" y="501" width="0.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="552.80" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_S_constant() (1 samples, 0.01%)</title><rect x="526.5" y="469" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="529.46" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.01%)</title><rect x="1179.4" y="549" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1182.42" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (1 samples, 0.01%)</title><rect x="563.7" y="501" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="566.73" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.01%)</title><rect x="557.9" y="549" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="560.86" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.01%)</title><rect x="568.9" y="341" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="571.94" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="547.4" y="437" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="550.45" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="550.0" y="405" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="552.97" y="415.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.01%)</title><rect x="529.0" y="501" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="531.98" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="553.3" y="437" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="556.32" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.01%)</title><rect x="530.3" y="437" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="533.32" y="447.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010010&gt; (1 samples, 0.01%)</title><rect x="558.7" y="501" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="561.70" y="511.5" ></text>
</g>
<g >
<title>TrianglePipeline::getTrianglePipeline()&lt;00000000000666f0&gt; (9 samples, 0.13%)</title><rect x="545.1" y="565" width="1.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="548.10" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.03%)</title><rect x="517.7" y="469" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="520.73" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.01%)</title><rect x="563.4" y="437" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="566.40" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose() (1 samples, 0.01%)</title><rect x="563.7" y="485" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="566.73" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="568.9" y="261" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="571.94" y="271.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.01%)</title><rect x="552.5" y="485" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="555.48" y="495.5" ></text>
</g>
<g >
<title>OBJ::buildMesh(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051090&gt; (33 samples, 0.47%)</title><rect x="563.4" y="549" width="5.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="566.40" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.03%)</title><rect x="552.3" y="517" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="555.32" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.07%)</title><rect x="544.3" y="549" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="547.26" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_erase_at_end(Triangle*) (1 samples, 0.01%)</title><rect x="527.5" y="501" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="530.47" y="511.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (5 samples, 0.07%)</title><rect x="542.1" y="549" width="0.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="545.07" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.04%)</title><rect x="337.1" y="485" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="340.07" y="495.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.03%)</title><rect x="531.7" y="437" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="534.66" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (2 samples, 0.03%)</title><rect x="533.2" y="517" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="536.18" y="527.5" ></text>
</g>
<g >
<title>0x00007f10160b63ae (4 samples, 0.06%)</title><rect x="10.2" y="629" width="0.6" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="13.17" y="639.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;0000000000110470&gt; (3 samples, 0.04%)</title><rect x="1189.3" y="629" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1192.33" y="639.5" ></text>
</g>
<g >
<title>free_fast_path[inline] (1 samples, 0.01%)</title><rect x="515.2" y="469" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="518.21" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.01%)</title><rect x="549.0" y="357" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="551.96" y="367.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.01%)</title><rect x="11.3" y="565" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="14.34" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.01%)</title><rect x="557.5" y="565" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="560.52" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (8 samples, 0.11%)</title><rect x="549.3" y="517" width="1.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="552.29" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.01%)</title><rect x="564.6" y="133" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="567.57" y="143.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (50 samples, 0.71%)</title><rect x="1158.6" y="629" width="8.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1161.60" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;SDL_Color&gt; const&amp;) (23 samples, 0.33%)</title><rect x="564.9" y="229" width="3.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="567.91" y="239.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="538.5" y="517" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="541.55" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="549.1" y="421" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="552.13" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="215.7" y="533" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="218.68" y="543.5" ></text>
</g>
<g >
<title>0x00007f10160b63ae (2 samples, 0.03%)</title><rect x="11.2" y="613" width="0.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="14.18" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (1 samples, 0.01%)</title><rect x="547.1" y="453" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="550.11" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="542.9" y="549" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="545.91" y="559.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="1186.6" y="629" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1189.64" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (21 samples, 0.30%)</title><rect x="325.5" y="437" width="3.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="328.48" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (5 samples, 0.07%)</title><rect x="532.3" y="533" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="535.34" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="561.7" y="389" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="564.72" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="557.0" y="373" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="560.02" y="383.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (3 samples, 0.04%)</title><rect x="550.6" y="485" width="0.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="553.64" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.01%)</title><rect x="541.2" y="533" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="544.24" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="541.6" y="533" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="544.57" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="546.8" y="421" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="549.78" y="431.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469b0&gt; (2 samples, 0.03%)</title><rect x="286.4" y="501" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="289.36" y="511.5" ></text>
</g>
<g >
<title>__open64 (2 samples, 0.03%)</title><rect x="719.9" y="629" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="722.88" y="639.5" ></text>
</g>
<g >
<title>llseek (1 samples, 0.01%)</title><rect x="1168.2" y="629" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1171.17" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.01%)</title><rect x="561.7" y="357" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="564.72" y="367.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="523.6" y="533" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="526.61" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="549.1" y="437" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="552.13" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin() (1 samples, 0.01%)</title><rect x="215.7" y="565" width="0.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="218.68" y="575.5" ></text>
</g>
<g >
<title>0x7475706e692f7372 (2 samples, 0.03%)</title><rect x="11.2" y="629" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.18" y="639.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;00000000000229a0&gt; (2,076 samples, 29.54%)</title><rect x="214.8" y="597" width="348.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="217.84" y="607.5" >Engine_3D::engine_update()&lt;00000000000229a0&gt;</text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (1 samples, 0.01%)</title><rect x="568.9" y="597" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="571.94" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (18 samples, 0.26%)</title><rect x="1183.6" y="629" width="3.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1186.62" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.01%)</title><rect x="538.5" y="549" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="541.55" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="320.1" y="485" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="323.11" y="495.5" ></text>
</g>
<g >
<title>0x00007f10160a0605 (2 samples, 0.03%)</title><rect x="11.2" y="597" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="14.18" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (1 samples, 0.01%)</title><rect x="542.1" y="501" width="0.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="545.07" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000249b0&gt; (22 samples, 0.31%)</title><rect x="564.9" y="133" width="3.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="567.91" y="143.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.18%)</title><rect x="547.1" y="501" width="2.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="550.11" y="511.5" ></text>
</g>
<g >
<title>SDL_GetTicks64&lt;000000000004bb60&gt; (1 samples, 0.01%)</title><rect x="554.2" y="581" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="557.16" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.01%)</title><rect x="213.0" y="597" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="215.99" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="557.0" y="437" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="560.02" y="447.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_get_Tp_allocator() const (1 samples, 0.01%)</title><rect x="531.0" y="469" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="533.99" y="479.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b9e0&gt; (5 samples, 0.07%)</title><rect x="454.8" y="501" width="0.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="457.77" y="511.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.03%)</title><rect x="530.2" y="469" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="533.15" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.01%)</title><rect x="518.7" y="501" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="521.74" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (1 samples, 0.01%)</title><rect x="568.6" y="197" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="571.60" y="207.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="546.8" y="469" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="549.78" y="479.5" ></text>
</g>
<g >
<title>openat64 (3 samples, 0.04%)</title><rect x="10.3" y="581" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="13.34" y="591.5" ></text>
</g>
<g >
<title>0x00007f10160a9e0d (1 samples, 0.01%)</title><rect x="10.0" y="629" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b9e0&gt; (8 samples, 0.11%)</title><rect x="510.0" y="533" width="1.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="513.01" y="543.5" ></text>
</g>
<g >
<title>_XrmInternalStringToQuark&lt;00000000000349a0&gt; (1 samples, 0.01%)</title><rect x="120.1" y="629" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="123.14" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.01%)</title><rect x="547.3" y="453" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="550.28" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="524.3" y="469" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="527.28" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.03%)</title><rect x="549.8" y="485" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="552.80" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (4 samples, 0.06%)</title><rect x="552.0" y="533" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="554.98" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.01%)</title><rect x="553.3" y="501" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="556.32" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="550.1" y="389" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="553.13" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="557.7" y="549" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="560.69" y="559.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.03%)</title><rect x="562.6" y="469" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="565.56" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (3 samples, 0.04%)</title><rect x="331.5" y="517" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="334.53" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.01%)</title><rect x="535.9" y="501" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="538.86" y="511.5" ></text>
</g>
<g >
<title>fgetc (1 samples, 0.01%)</title><rect x="1167.7" y="629" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1170.67" y="639.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000543d0&gt; (2 samples, 0.03%)</title><rect x="556.8" y="565" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="559.85" y="575.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a070&gt; (2 samples, 0.03%)</title><rect x="539.7" y="517" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="542.72" y="527.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (19 samples, 0.27%)</title><rect x="529.1" y="501" width="3.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="532.15" y="511.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007be10&gt; (1 samples, 0.01%)</title><rect x="511.7" y="533" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="514.68" y="543.5" ></text>
</g>
<g >
<title>0x00007f10160a0605 (4 samples, 0.06%)</title><rect x="10.2" y="613" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="13.17" y="623.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="563.6" y="517" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="566.57" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="563.6" y="453" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="566.57" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (22 samples, 0.31%)</title><rect x="564.9" y="197" width="3.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="567.91" y="207.5" ></text>
</g>
<g >
<title>0x646e756f732f7372 (1 samples, 0.01%)</title><rect x="11.0" y="629" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="14.01" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (62 samples, 0.88%)</title><rect x="318.6" y="501" width="10.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="321.60" y="511.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (5 samples, 0.07%)</title><rect x="548.5" y="469" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="551.45" y="479.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff@@GLIBC_PRIVATE&lt;0000000000088d20&gt; (3 samples, 0.04%)</title><rect x="214.3" y="629" width="0.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="217.33" y="639.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.01%)</title><rect x="563.4" y="469" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="566.40" y="479.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000061f10&gt; (40 samples, 0.57%)</title><rect x="414.3" y="517" width="6.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="417.30" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (3 samples, 0.04%)</title><rect x="550.6" y="533" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="553.64" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.01%)</title><rect x="535.5" y="533" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="538.53" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.01%)</title><rect x="549.8" y="421" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="552.80" y="431.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (9 samples, 0.13%)</title><rect x="560.0" y="437" width="1.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="563.04" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.03%)</title><rect x="547.1" y="485" width="0.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="550.11" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.03%)</title><rect x="556.8" y="469" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="559.85" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="563.9" y="485" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="566.90" y="495.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (7 samples, 0.10%)</title><rect x="531.2" y="469" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="534.16" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="546.8" y="437" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="549.78" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="543.1" y="533" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="546.08" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (13 samples, 0.18%)</title><rect x="554.7" y="533" width="2.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="557.67" y="543.5" ></text>
</g>
<g >
<title>_XlcConvert&lt;000000000004f750&gt; (1 samples, 0.01%)</title><rect x="1167.0" y="613" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1170.00" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;ITriangleRasterizer&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="515.2" y="549" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="518.21" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="536.0" y="469" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="539.03" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.01%)</title><rect x="541.4" y="549" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="544.40" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (10 samples, 0.14%)</title><rect x="559.9" y="501" width="1.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="562.87" y="511.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.03%)</title><rect x="550.3" y="469" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="553.30" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.01%)</title><rect x="568.9" y="517" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="571.94" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base() (1 samples, 0.01%)</title><rect x="563.9" y="469" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="566.90" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.01%)</title><rect x="533.0" y="501" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="536.01" y="511.5" ></text>
</g>
<g >
<title>glXGetProcAddressARB&lt;0000000000018520&gt; (1 samples, 0.01%)</title><rect x="1168.0" y="629" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1171.01" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.01%)</title><rect x="546.9" y="469" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="549.94" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_single_threaded()[inline] (1 samples, 0.01%)</title><rect x="507.8" y="437" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="510.82" y="447.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.03%)</title><rect x="517.4" y="533" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="520.39" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="568.9" y="549" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="571.94" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_sequence() (2 samples, 0.03%)</title><rect x="532.5" y="501" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="535.50" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (42 samples, 0.60%)</title><rect x="322.0" y="469" width="7.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="324.96" y="479.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromTriangles(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;)&lt;00000000000665a0&gt; (3 samples, 0.04%)</title><rect x="550.6" y="565" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="553.64" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.01%)</title><rect x="535.4" y="533" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="538.36" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="563.1" y="581" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="566.06" y="591.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;0000000000043140&gt; (1 samples, 0.01%)</title><rect x="223.7" y="533" width="0.2" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="226.74" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="469" width="4.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="567.07" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.01%)</title><rect x="549.8" y="405" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="552.80" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (1 samples, 0.01%)</title><rect x="568.9" y="165" width="0.2" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="571.94" y="175.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (5 samples, 0.07%)</title><rect x="523.8" y="501" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="526.77" y="511.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::begin() const (1 samples, 0.01%)</title><rect x="215.3" y="549" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="218.34" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (26 samples, 0.37%)</title><rect x="324.6" y="453" width="4.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="327.64" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="536.0" y="517" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="539.03" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.01%)</title><rect x="550.1" y="405" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="553.13" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.03%)</title><rect x="553.7" y="421" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="556.66" y="431.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.03%)</title><rect x="535.7" y="533" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="538.69" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::empty() const (1 samples, 0.01%)</title><rect x="563.4" y="421" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="566.40" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.03%)</title><rect x="335.2" y="501" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="338.22" y="511.5" ></text>
</g>
<g >
<title>IAction::getMeshModification() const&lt;000000000000a9c0&gt; (1 samples, 0.01%)</title><rect x="215.0" y="565" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="218.01" y="575.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000061ec0&gt; (2 samples, 0.03%)</title><rect x="414.0" y="517" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="416.97" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.01%)</title><rect x="553.3" y="517" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="556.32" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*, Mesh&gt;(Mesh*, Mesh*, std::allocator&lt;Mesh&gt;&amp;)[inline] (1 samples, 0.01%)</title><rect x="568.9" y="453" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="571.94" y="463.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007be30&gt; (1 samples, 0.01%)</title><rect x="514.9" y="549" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="517.87" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (4 samples, 0.06%)</title><rect x="533.5" y="517" width="0.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="536.51" y="527.5" ></text>
</g>
<g >
<title>0x7665642f6273752e (1 samples, 0.01%)</title><rect x="11.5" y="629" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.51" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.03%)</title><rect x="533.8" y="501" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="536.85" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::NewLocked(unsigned long, tcmalloc::PageHeap::LockingContext*)&lt;0000000000026940&gt; (2 samples, 0.03%)</title><rect x="568.3" y="53" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="571.27" y="63.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.01%)</title><rect x="548.3" y="453" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="551.29" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="546.8" y="453" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="549.78" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (14 samples, 0.20%)</title><rect x="465.8" y="437" width="2.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="468.85" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (191 samples, 2.72%)</title><rect x="333.7" y="517" width="32.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="336.71" y="527.5" >st..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (13 samples, 0.18%)</title><rect x="554.7" y="549" width="2.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="557.67" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.03%)</title><rect x="556.5" y="421" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="559.51" y="431.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008fa0&gt; (3 samples, 0.04%)</title><rect x="1158.1" y="629" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1161.10" y="639.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f320&gt; (5 samples, 0.07%)</title><rect x="215.0" y="581" width="0.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="218.01" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.03%)</title><rect x="556.5" y="405" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="559.51" y="415.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="552.3" y="485" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="555.32" y="495.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.01%)</title><rect x="515.0" y="549" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="518.04" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.01%)</title><rect x="524.3" y="453" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="527.28" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="561.6" y="405" width="0.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="564.55" y="415.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="561.7" y="405" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="564.72" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.5" y="437" width="0.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="553.47" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.3" y="437" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="553.30" y="447.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.03%)</title><rect x="553.7" y="485" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="556.66" y="495.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000683b0&gt; (1 samples, 0.01%)</title><rect x="518.7" y="517" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="521.74" y="527.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt; (2,111 samples, 30.04%)</title><rect x="214.8" y="629" width="354.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="217.84" y="639.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt;</text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.03%)</title><rect x="546.8" y="485" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="549.78" y="495.5" ></text>
</g>
<g >
<title>0x00007f10160b47d6 (2 samples, 0.03%)</title><rect x="11.2" y="581" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="14.18" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;)&lt;000000000007dbc0&gt; (2 samples, 0.03%)</title><rect x="522.8" y="517" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="525.77" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (180 samples, 2.56%)</title><rect x="477.8" y="485" width="30.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="480.77" y="495.5" >st..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.03%)</title><rect x="551.5" y="533" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="554.48" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="373" width="4.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="567.07" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (3 samples, 0.04%)</title><rect x="528.5" y="517" width="0.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="531.47" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.01%)</title><rect x="550.1" y="357" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="553.13" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Mesh_Pipeline&gt;::~shared_ptr() (1 samples, 0.01%)</title><rect x="568.9" y="581" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="571.94" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="542.9" y="533" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="545.91" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000061520&gt; (835 samples, 11.88%)</title><rect x="225.6" y="533" width="140.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="228.58" y="543.5" >TexturemapRasteri..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.01%)</title><rect x="549.8" y="453" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="552.80" y="463.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;000000000007da00&gt; (1 samples, 0.01%)</title><rect x="551.3" y="565" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="554.31" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="518.7" y="485" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="521.74" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="550.0" y="437" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="552.97" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (2 samples, 0.03%)</title><rect x="530.2" y="453" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="533.15" y="463.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.01%)</title><rect x="553.3" y="453" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="556.32" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="215.0" y="533" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="218.01" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="568.9" y="373" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="571.94" y="383.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (25 samples, 0.36%)</title><rect x="564.6" y="245" width="4.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="567.57" y="255.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.01%)</title><rect x="562.9" y="485" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="565.89" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="557.0" y="405" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="560.02" y="415.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;00000000000666b0&gt; (1 samples, 0.01%)</title><rect x="547.8" y="469" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="550.78" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (2 samples, 0.03%)</title><rect x="532.8" y="517" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="535.84" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator=(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="216.0" y="517" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="219.01" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.01%)</title><rect x="549.6" y="405" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="552.63" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.03%)</title><rect x="551.5" y="549" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="554.48" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle const* const&amp;) (1 samples, 0.01%)</title><rect x="542.7" y="501" width="0.2" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="545.75" y="511.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;00000000000227e0&gt; (33 samples, 0.47%)</title><rect x="563.4" y="597" width="5.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="566.40" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d930&gt; (4 samples, 0.06%)</title><rect x="537.5" y="517" width="0.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="540.54" y="527.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (1 samples, 0.01%)</title><rect x="215.5" y="517" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="218.51" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.01%)</title><rect x="536.0" y="485" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="539.03" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000286e0&gt; (22 samples, 0.31%)</title><rect x="564.9" y="149" width="3.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="567.91" y="159.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="501" width="4.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="567.07" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.01%)</title><rect x="523.3" y="533" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="526.27" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="568.9" y="229" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="571.94" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000249b0&gt; (1 samples, 0.01%)</title><rect x="119.6" y="517" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="122.64" y="527.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (24 samples, 0.34%)</title><rect x="253.0" y="517" width="4.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="255.95" y="527.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000ff6f0&gt; (1 samples, 0.01%)</title><rect x="11.2" y="565" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="14.18" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="553.3" y="389" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="556.32" y="399.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007dcf0&gt; (14 samples, 0.20%)</title><rect x="519.7" y="517" width="2.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="522.74" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.03%)</title><rect x="553.7" y="549" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="556.66" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.01%)</title><rect x="568.9" y="325" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="571.94" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="532.0" y="421" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="535.00" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="549.1" y="405" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="552.13" y="415.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.01%)</title><rect x="533.0" y="485" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="536.01" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (5 samples, 0.07%)</title><rect x="558.5" y="565" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="561.53" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.01%)</title><rect x="524.3" y="485" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="527.28" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="553.8" y="405" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="556.83" y="415.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.04%)</title><rect x="561.6" y="501" width="0.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="564.55" y="511.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.03%)</title><rect x="556.8" y="453" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="559.85" y="463.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d990&gt; (10 samples, 0.14%)</title><rect x="520.4" y="501" width="1.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="523.42" y="511.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000ba70&gt; (1 samples, 0.01%)</title><rect x="1157.9" y="629" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1160.93" y="639.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="216.0" y="501" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="219.01" y="511.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.01%)</title><rect x="119.6" y="565" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="122.64" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.01%)</title><rect x="527.3" y="517" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="530.30" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.01%)</title><rect x="551.8" y="549" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="554.81" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.01%)</title><rect x="557.9" y="565" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="560.86" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (3 samples, 0.04%)</title><rect x="519.9" y="501" width="0.5" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="522.91" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.04%)</title><rect x="560.5" y="405" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="563.54" y="415.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007b880&gt; (54 samples, 0.77%)</title><rect x="459.1" y="517" width="9.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="462.13" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.01%)</title><rect x="549.8" y="437" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="552.80" y="447.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.03%)</title><rect x="556.8" y="533" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="559.85" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (21 samples, 0.30%)</title><rect x="464.7" y="453" width="3.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="467.67" y="463.5" ></text>
</g>
<g >
<title>operator*(float const&amp;, Vec2d const&amp;)&lt;000000000007c670&gt; (1 samples, 0.01%)</title><rect x="512.4" y="533" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="515.36" y="543.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;0000000000046990&gt; (3 samples, 0.04%)</title><rect x="412.6" y="501" width="0.5" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="415.62" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.01%)</title><rect x="549.1" y="357" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="552.13" y="367.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (3 samples, 0.04%)</title><rect x="551.5" y="565" width="0.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="554.48" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="548.0" y="453" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="550.95" y="463.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (13 samples, 0.18%)</title><rect x="559.9" y="533" width="2.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="562.87" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="523.4" y="533" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="526.44" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.03%)</title><rect x="517.4" y="501" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="520.39" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="518.1" y="533" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="521.06" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.01%)</title><rect x="532.2" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="535.17" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (10 samples, 0.14%)</title><rect x="512.5" y="533" width="1.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="515.52" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.03%)</title><rect x="541.7" y="533" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="544.74" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.01%)</title><rect x="550.5" y="389" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="553.47" y="399.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.01%)</title><rect x="554.0" y="581" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="557.00" y="591.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private@@GLIBC_PRIVATE&lt;0000000000089670&gt; (13 samples, 0.18%)</title><rect x="569.3" y="629" width="2.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="572.27" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="547.4" y="405" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="550.45" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.03%)</title><rect x="540.6" y="533" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="543.56" y="543.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a070&gt; (2 samples, 0.03%)</title><rect x="522.4" y="485" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="525.43" y="495.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.01%)</title><rect x="547.6" y="469" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="550.62" y="479.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000065060&gt; (2,012 samples, 28.63%)</title><rect x="216.2" y="581" width="337.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="219.18" y="591.5" >Renderer::refreshScreen(std::shared_ptr&lt;Trian..</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="518.7" y="469" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="521.74" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000024750&gt; (22 samples, 0.31%)</title><rect x="564.9" y="85" width="3.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="567.91" y="95.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="541.4" y="517" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="544.40" y="527.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (3 samples, 0.04%)</title><rect x="213.8" y="629" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="216.83" y="639.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000ff6f0&gt; (1 samples, 0.01%)</title><rect x="10.2" y="581" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="13.17" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d930&gt; (2 samples, 0.03%)</title><rect x="522.4" y="501" width="0.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="525.43" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="538.5" y="501" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="541.55" y="511.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (6 samples, 0.09%)</title><rect x="544.1" y="565" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="547.09" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (5 samples, 0.07%)</title><rect x="558.5" y="549" width="0.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="561.53" y="559.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d5d0&gt; (2 samples, 0.03%)</title><rect x="538.2" y="533" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="541.21" y="543.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.16%)</title><rect x="547.4" y="485" width="1.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="550.45" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::SearchFreeAndLargeLists(unsigned long)&lt;00000000000265f0&gt; (2 samples, 0.03%)</title><rect x="568.3" y="37" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="571.27" y="47.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFB_Scanline_prep(Triangle&amp;)&lt;0000000000062000&gt; (3 samples, 0.04%)</title><rect x="288.0" y="517" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="291.04" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.01%)</title><rect x="536.0" y="533" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="539.03" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="541.4" y="501" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="544.40" y="511.5" ></text>
</g>
<g >
<title>xcb_send_request&lt;0000000000014a80&gt; (1 samples, 0.01%)</title><rect x="1189.8" y="629" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.83" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.03%)</title><rect x="556.8" y="517" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="559.85" y="527.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d990&gt; (4 samples, 0.06%)</title><rect x="522.1" y="517" width="0.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="525.09" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.03%)</title><rect x="540.6" y="549" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="543.56" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e420&gt; (3 samples, 0.04%)</title><rect x="552.7" y="565" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="555.65" y="575.5" ></text>
</g>
<g >
<title>void std::vector&lt;llvm::R600InstrInfo::BankSwizzle, std::allocator&lt;llvm::R600InstrInfo::BankSwizzle&gt; &gt;::_M_realloc_insert&lt;llvm::R600InstrInfo::BankSwizzle&gt;(__gnu_cxx::__normal_iterator&lt;llvm::R600InstrInfo::BankSwizzle*, std::vector&lt;llvm::R600InstrInfo::BankSwizzle, std::allocator&lt;llvm::R600InstrInfo::BankSwizzle&gt; &gt; &gt;, llvm::R600InstrInfo::BankSwizzle&amp;&amp;) (1 samples, 0.01%)</title><rect x="1189.2" y="629" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1192.16" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="341" width="4.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="567.07" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.01%)</title><rect x="548.1" y="453" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="551.12" y="463.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a070&gt; (3 samples, 0.04%)</title><rect x="537.7" y="501" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="540.71" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.01%)</title><rect x="512.4" y="517" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="515.36" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="547.4" y="389" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="550.45" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="547.6" y="405" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="550.62" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (6 samples, 0.09%)</title><rect x="523.8" y="533" width="1.0" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="526.77" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.1" y="469" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="553.13" y="479.5" ></text>
</g>
<g >
<title>ZLIB_1.2.0&lt;0000000000000000&gt; (1 samples, 0.01%)</title><rect x="120.0" y="629" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="122.97" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.01%)</title><rect x="547.3" y="437" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="550.28" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="568.9" y="485" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="571.94" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.01%)</title><rect x="568.9" y="85" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="571.94" y="95.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="557.0" y="421" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="560.02" y="431.5" ></text>
</g>
<g >
<title>__nptl_death_event@@GLIBC_PRIVATE&lt;00000000000893f0&gt; (814 samples, 11.58%)</title><rect x="577.7" y="629" width="136.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="580.67" y="639.5" >__nptl_death_even..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="357" width="4.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="567.07" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.01%)</title><rect x="545.1" y="453" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="548.10" y="463.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="551.6" y="517" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="554.64" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFT_Scanline_prep(Triangle&amp;)&lt;00000000000619e0&gt; (5 samples, 0.07%)</title><rect x="413.1" y="517" width="0.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="416.13" y="527.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.01%)</title><rect x="1179.4" y="613" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1182.42" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (20 samples, 0.28%)</title><rect x="1180.3" y="629" width="3.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1183.26" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (1 samples, 0.01%)</title><rect x="523.8" y="485" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="526.77" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (13 samples, 0.18%)</title><rect x="554.7" y="485" width="2.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="557.67" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="563.6" y="469" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="566.57" y="479.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;00000000000641c0&gt; (167 samples, 2.38%)</title><rect x="515.4" y="565" width="28.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="518.38" y="575.5" >R..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015c40&gt; (1 samples, 0.01%)</title><rect x="540.6" y="501" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="543.56" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.03%)</title><rect x="550.8" y="389" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="553.81" y="399.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (203 samples, 2.89%)</title><rect x="473.9" y="517" width="34.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="476.91" y="527.5" >st..</text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (2 samples, 0.03%)</title><rect x="286.0" y="501" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="289.03" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="544.9" y="485" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="547.93" y="495.5" ></text>
</g>
<g >
<title>Event_Scanner::scanInput()&lt;000000000002c340&gt; (2 samples, 0.03%)</title><rect x="215.8" y="565" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="218.85" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt; (22 samples, 0.31%)</title><rect x="564.9" y="117" width="3.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="567.91" y="127.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (39 samples, 0.55%)</title><rect x="461.7" y="485" width="6.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="464.65" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (4 samples, 0.06%)</title><rect x="524.8" y="533" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="527.78" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;::_Node_iterator(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt;*) (1 samples, 0.01%)</title><rect x="215.8" y="501" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="218.85" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.5" y="421" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="553.47" y="431.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (9 samples, 0.13%)</title><rect x="545.1" y="549" width="1.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="548.10" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.03%)</title><rect x="553.7" y="469" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="556.66" y="479.5" ></text>
</g>
<g >
<title>__popcountdi2&lt;00000000000057b0&gt; (29 samples, 0.41%)</title><rect x="1153.1" y="629" width="4.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1156.06" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.01%)</title><rect x="213.0" y="629" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="215.99" y="639.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007b880&gt; (2 samples, 0.03%)</title><rect x="511.3" y="533" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="514.35" y="543.5" ></text>
</g>
<g >
<title>TrianglePipeline::TrianglePipeline() (1 samples, 0.01%)</title><rect x="554.5" y="581" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="557.50" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (10 samples, 0.14%)</title><rect x="559.9" y="517" width="1.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="562.87" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.3" y="453" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="553.30" y="463.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469b0&gt; (1 samples, 0.01%)</title><rect x="473.7" y="517" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="476.74" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.01%)</title><rect x="532.0" y="437" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="535.00" y="447.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;00000000000665c0&gt; (24 samples, 0.34%)</title><rect x="546.6" y="565" width="4.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="549.61" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.06%)</title><rect x="543.4" y="565" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="546.42" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.01%)</title><rect x="523.4" y="517" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="526.44" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.03%)</title><rect x="556.5" y="357" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="559.51" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="568.9" y="533" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="571.94" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (6 samples, 0.09%)</title><rect x="533.2" y="533" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="536.18" y="543.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469b0&gt; (1 samples, 0.01%)</title><rect x="333.5" y="517" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="336.54" y="527.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;0000000000039970&gt; (1 samples, 0.01%)</title><rect x="563.4" y="533" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="566.40" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.01%)</title><rect x="550.1" y="421" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="553.13" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (197 samples, 2.80%)</title><rect x="474.9" y="501" width="33.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="477.91" y="511.5" >st..</text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469b0&gt; (2 samples, 0.03%)</title><rect x="412.3" y="501" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="415.29" y="511.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;000000000008b550&gt; (4 samples, 0.06%)</title><rect x="1179.6" y="629" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1182.59" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.01%)</title><rect x="526.6" y="469" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="529.63" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="485" width="4.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="567.07" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (27 samples, 0.38%)</title><rect x="564.2" y="261" width="4.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="567.24" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.03%)</title><rect x="527.6" y="517" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="530.64" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="549.1" y="373" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="552.13" y="383.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (38 samples, 0.54%)</title><rect x="461.8" y="469" width="6.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="464.82" y="479.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (6 samples, 0.09%)</title><rect x="562.1" y="501" width="1.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="565.05" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 0.06%)</title><rect x="544.4" y="533" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="547.43" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="538.5" y="485" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="541.55" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::__normal_iterator(SDL_Color const* const&amp;) (1 samples, 0.01%)</title><rect x="563.4" y="405" width="0.2" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="566.40" y="415.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (7 samples, 0.10%)</title><rect x="545.3" y="437" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="548.26" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.03%)</title><rect x="556.5" y="373" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="559.51" y="383.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.03%)</title><rect x="548.8" y="437" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="551.79" y="447.5" ></text>
</g>
<g >
<title>__poll@@GLIBC_2.2.5&lt;0000000000102f20&gt; (2,578 samples, 36.68%)</title><rect x="720.2" y="629" width="432.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="723.22" y="639.5" >__poll@@GLIBC_2.2.5&lt;0000000000102f20&gt;</text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (8 samples, 0.11%)</title><rect x="545.1" y="469" width="1.3" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="548.10" y="479.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a070&gt; (1 samples, 0.01%)</title><rect x="540.1" y="533" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="543.06" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (4 samples, 0.06%)</title><rect x="552.0" y="565" width="0.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="554.98" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (19 samples, 0.27%)</title><rect x="325.8" y="421" width="3.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="328.82" y="431.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (1 samples, 0.01%)</title><rect x="533.7" y="501" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="536.68" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.01%)</title><rect x="539.1" y="533" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="542.05" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (1 samples, 0.01%)</title><rect x="552.1" y="501" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="555.15" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.03%)</title><rect x="553.7" y="437" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="556.66" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.01%)</title><rect x="549.0" y="389" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="551.96" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::insert_or_assign&lt;int&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, int&amp;) (1 samples, 0.01%)</title><rect x="215.8" y="517" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="218.85" y="527.5" ></text>
</g>
<g >
<title>IAction::isRunning()&lt;000000000000a930&gt; (1 samples, 0.01%)</title><rect x="215.2" y="549" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="218.17" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="547.4" y="421" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="550.45" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.01%)</title><rect x="548.3" y="469" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="551.29" y="479.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::put(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, double) const[inline] (1 samples, 0.01%)</title><rect x="1187.1" y="613" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1190.15" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.01%)</title><rect x="333.4" y="485" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="336.38" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.03%)</title><rect x="550.8" y="405" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="553.81" y="415.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;)[inline] (28 samples, 0.40%)</title><rect x="564.1" y="421" width="4.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="567.07" y="431.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.03%)</title><rect x="553.7" y="501" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="556.66" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="569.1" y="597" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="572.11" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (8 samples, 0.11%)</title><rect x="526.1" y="533" width="1.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="529.12" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.03%)</title><rect x="517.7" y="501" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="520.73" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::crossProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d840&gt; (1 samples, 0.01%)</title><rect x="536.9" y="533" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="539.87" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e420&gt; (2 samples, 0.03%)</title><rect x="541.1" y="549" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="544.07" y="559.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.01%)</title><rect x="1179.4" y="565" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1182.42" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (13 samples, 0.18%)</title><rect x="554.7" y="437" width="2.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="557.67" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (2 samples, 0.03%)</title><rect x="535.7" y="517" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="538.69" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="538.5" y="469" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="541.55" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (3 samples, 0.04%)</title><rect x="550.6" y="549" width="0.5" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="553.64" y="559.5" ></text>
</g>
<g >
<title>tc_new (1 samples, 0.01%)</title><rect x="530.5" y="453" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="533.49" y="463.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d930&gt; (9 samples, 0.13%)</title><rect x="520.6" y="485" width="1.5" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="523.58" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017da0&gt; (1 samples, 0.01%)</title><rect x="527.6" y="469" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="530.64" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017da0&gt; (1 samples, 0.01%)</title><rect x="541.4" y="485" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="544.40" y="495.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000061f10&gt; (36 samples, 0.51%)</title><rect x="289.0" y="517" width="6.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="292.05" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_erase_at_end(Triangle*) (1 samples, 0.01%)</title><rect x="553.3" y="533" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="556.32" y="543.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt;(double) (1 samples, 0.01%)</title><rect x="1187.1" y="629" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1190.15" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.03%)</title><rect x="517.7" y="517" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="520.73" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.01%)</title><rect x="559.0" y="517" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="562.03" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000024750&gt; (1 samples, 0.01%)</title><rect x="119.6" y="469" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="122.64" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.03%)</title><rect x="514.2" y="533" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="517.20" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_single_threaded()[inline] (2 samples, 0.03%)</title><rect x="365.4" y="437" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="368.44" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.03%)</title><rect x="550.8" y="437" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="553.81" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (13 samples, 0.18%)</title><rect x="466.0" y="421" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="469.02" y="431.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (63 samples, 0.90%)</title><rect x="373.5" y="517" width="10.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="376.50" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (6 samples, 0.09%)</title><rect x="523.8" y="517" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="526.77" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061d80&gt; (2 samples, 0.03%)</title><rect x="508.7" y="533" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="511.66" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.03%)</title><rect x="562.6" y="485" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="565.56" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.01%)</title><rect x="526.8" y="469" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="529.80" y="479.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.01%)</title><rect x="549.1" y="453" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="552.13" y="463.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.04%)</title><rect x="550.1" y="485" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="553.13" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.03%)</title><rect x="527.6" y="501" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="530.64" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.04%)</title><rect x="561.0" y="405" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="564.05" y="415.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (2 samples, 0.03%)</title><rect x="564.6" y="165" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="567.57" y="175.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464c0&gt; (2 samples, 0.03%)</title><rect x="225.2" y="533" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="228.25" y="543.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (13 samples, 0.18%)</title><rect x="554.7" y="501" width="2.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="557.67" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000dd700&gt; (1 samples, 0.01%)</title><rect x="212.8" y="629" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="215.82" y="639.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (33 samples, 0.47%)</title><rect x="714.3" y="629" width="5.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="717.34" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.03%)</title><rect x="474.6" y="501" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="477.58" y="511.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (27 samples, 0.38%)</title><rect x="564.2" y="277" width="4.6" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="567.24" y="287.5" ></text>
</g>
<g >
<title>_pthread_cleanup_pop@@GLIBC_2.34 (1 samples, 0.01%)</title><rect x="1167.2" y="629" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1170.17" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.03%)</title><rect x="550.8" y="421" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="553.81" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (150 samples, 2.13%)</title><rect x="482.8" y="469" width="25.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="485.81" y="479.5" >s..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015c40&gt; (1 samples, 0.01%)</title><rect x="525.3" y="485" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="528.28" y="495.5" ></text>
</g>
<g >
<title>openat64 (1 samples, 0.01%)</title><rect x="11.5" y="565" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="14.51" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.01%)</title><rect x="515.2" y="517" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="518.21" y="527.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (1 samples, 0.01%)</title><rect x="384.1" y="517" width="0.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="387.08" y="527.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.03%)</title><rect x="561.6" y="453" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="564.55" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (28 samples, 0.40%)</title><rect x="564.1" y="309" width="4.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="567.07" y="319.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="546.4" y="469" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="549.44" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.01%)</title><rect x="568.9" y="197" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="571.94" y="207.5" ></text>
</g>
<g >
<title>void __gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_if&lt;__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_all()::{lambda(std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;)#1}&gt;(__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_all()::{lambda(std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;)#1}) (1 samples, 0.01%)</title><rect x="214.8" y="517" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="217.84" y="527.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.01%)</title><rect x="554.3" y="581" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="557.33" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.03%)</title><rect x="548.5" y="437" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="551.45" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.01%)</title><rect x="549.3" y="469" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="552.29" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.03%)</title><rect x="552.3" y="501" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="555.32" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="568.9" y="565" width="0.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="571.94" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (76 samples, 1.08%)</title><rect x="353.0" y="453" width="12.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="356.02" y="463.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000061f10&gt; (3 samples, 0.04%)</title><rect x="508.0" y="533" width="0.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="510.99" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.01%)</title><rect x="517.2" y="517" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="520.23" y="527.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints()&lt;000000000007b910&gt; (13 samples, 0.18%)</title><rect x="536.4" y="549" width="2.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="539.37" y="559.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.03%)</title><rect x="546.8" y="501" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="549.78" y="511.5" ></text>
</g>
<g >
<title>0x00007f10160a0605 (1 samples, 0.01%)</title><rect x="11.5" y="597" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="14.51" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (5 samples, 0.07%)</title><rect x="526.5" y="485" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="529.46" y="495.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="405" width="4.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="567.07" y="415.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061ca0&gt; (102 samples, 1.45%)</title><rect x="421.0" y="517" width="17.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="424.02" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e420&gt; (3 samples, 0.04%)</title><rect x="559.4" y="565" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="562.37" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.03%)</title><rect x="543.1" y="549" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="546.08" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.01%)</title><rect x="528.8" y="501" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="531.81" y="511.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::operator=(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="216.0" y="549" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="219.01" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (48 samples, 0.68%)</title><rect x="499.8" y="437" width="8.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="502.76" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="557.7" y="565" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="560.69" y="575.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007b880&gt; (75 samples, 1.07%)</title><rect x="316.4" y="517" width="12.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="319.42" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (1 samples, 0.01%)</title><rect x="215.5" y="533" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="218.51" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;Triangle&gt; const&amp;) (2 samples, 0.03%)</title><rect x="542.4" y="517" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="545.41" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.01%)</title><rect x="548.0" y="437" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="550.95" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.01%)</title><rect x="547.4" y="453" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="550.45" y="463.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (6 samples, 0.09%)</title><rect x="562.1" y="533" width="1.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="565.05" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.01%)</title><rect x="214.8" y="549" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="217.84" y="559.5" ></text>
</g>
<g >
<title>IAction_Updater::AddTactileInputMap(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;)&lt;000000000000d1a0&gt; (1 samples, 0.01%)</title><rect x="214.8" y="581" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="217.84" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="515.2" y="533" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="518.21" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (2 samples, 0.03%)</title><rect x="213.5" y="629" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="216.49" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.01%)</title><rect x="568.9" y="357" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="571.94" y="367.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;0000000000043140&gt; (2 samples, 0.03%)</title><rect x="384.2" y="517" width="0.4" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="387.25" y="527.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.01%)</title><rect x="568.9" y="277" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="571.94" y="287.5" ></text>
</g>
<g >
<title>operator new(unsigned long)[inline] (1 samples, 0.01%)</title><rect x="530.5" y="437" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="533.49" y="447.5" ></text>
</g>
<g >
<title>tc_cfree[inline] (1 samples, 0.01%)</title><rect x="515.2" y="437" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="518.21" y="447.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.01%)</title><rect x="119.6" y="613" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="122.64" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (4 samples, 0.06%)</title><rect x="473.1" y="485" width="0.6" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="476.07" y="495.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (1 samples, 0.01%)</title><rect x="288.4" y="501" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="291.38" y="511.5" ></text>
</g>
<g >
<title>IAction_Updater::numberOfActiveCommands(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt; const&amp;) const&lt;000000000000d220&gt; (2 samples, 0.03%)</title><rect x="215.2" y="565" width="0.3" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="218.17" y="575.5" ></text>
</g>
<g >
<title>0x00007f10160b47d6 (4 samples, 0.06%)</title><rect x="10.2" y="597" width="0.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="13.17" y="607.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (6 samples, 0.09%)</title><rect x="468.2" y="517" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="471.20" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="548.0" y="469" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="550.95" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="331.4" y="517" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="334.36" y="527.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.01%)</title><rect x="511.9" y="533" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="514.85" y="543.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::operator=(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="214.8" y="565" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="217.84" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_create_storage(unsigned long) (2 samples, 0.03%)</title><rect x="542.4" y="501" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="545.41" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.03%)</title><rect x="548.8" y="421" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="551.79" y="431.5" ></text>
</g>
<g >
<title>0x00007f10160b63ae (1 samples, 0.01%)</title><rect x="11.5" y="613" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="14.51" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (1 samples, 0.01%)</title><rect x="568.9" y="437" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="571.94" y="447.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="549.8" y="389" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="552.80" y="399.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.03%)</title><rect x="517.4" y="517" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="520.39" y="527.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d990&gt; (7 samples, 0.10%)</title><rect x="537.0" y="533" width="1.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="540.04" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;::_M_v() (1 samples, 0.01%)</title><rect x="216.0" y="485" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="219.01" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="549.6" y="453" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="552.63" y="463.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061d80&gt; (104 samples, 1.48%)</title><rect x="438.1" y="517" width="17.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="441.14" y="527.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (9 samples, 0.13%)</title><rect x="545.1" y="501" width="1.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="548.10" y="511.5" ></text>
</g>
<g >
<title>operator+(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007c510&gt; (1 samples, 0.01%)</title><rect x="526.0" y="533" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="528.96" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::allocator&lt;Triangle&gt;&amp;)[inline] (3 samples, 0.04%)</title><rect x="550.6" y="517" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="553.64" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.04%)</title><rect x="550.6" y="469" width="0.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="553.64" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::allocate(std::allocator&lt;SDL_Color&gt;&amp;, unsigned long)[inline] (22 samples, 0.31%)</title><rect x="564.9" y="181" width="3.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="567.91" y="191.5" ></text>
</g>
<g >
<title>TexturePNG::~TexturePNG()&lt;000000000003d8b0&gt; (1 samples, 0.01%)</title><rect x="568.9" y="149" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="571.94" y="159.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.01%)</title><rect x="541.4" y="533" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="544.40" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (4 samples, 0.06%)</title><rect x="558.5" y="533" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="561.53" y="543.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.01%)</title><rect x="540.7" y="501" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="543.73" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="515.2" y="501" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="518.21" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Triangle_Modifier&gt;::shared_ptr(std::shared_ptr&lt;Triangle_Modifier&gt; const&amp;) (1 samples, 0.01%)</title><rect x="215.0" y="549" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="218.01" y="559.5" ></text>
</g>
<g >
<title>main&lt;000000000000a7e0&gt; (2,111 samples, 30.04%)</title><rect x="214.8" y="613" width="354.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="217.84" y="623.5" >main&lt;000000000000a7e0&gt;</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="543.9" y="517" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="546.92" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.03%)</title><rect x="556.5" y="341" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="559.51" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::NewWithSizeClass(unsigned long, unsigned int)&lt;0000000000026a40&gt; (2 samples, 0.03%)</title><rect x="568.3" y="69" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="571.27" y="79.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="558.9" y="501" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="561.86" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.01%)</title><rect x="549.6" y="421" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="552.63" y="431.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000c0c30&gt; (5 samples, 0.07%)</title><rect x="203.4" y="629" width="0.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="206.42" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (13 samples, 0.18%)</title><rect x="554.7" y="469" width="2.1" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="557.67" y="479.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.06%)</title><rect x="548.5" y="453" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="551.45" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.06%)</title><rect x="544.4" y="501" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="547.43" y="511.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (5 samples, 0.07%)</title><rect x="529.6" y="485" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="532.65" y="495.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000052960&gt; (31 samples, 0.44%)</title><rect x="563.6" y="533" width="5.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="566.57" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (1 samples, 0.01%)</title><rect x="212.3" y="629" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="215.32" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (2 samples, 0.03%)</title><rect x="564.6" y="181" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="567.57" y="191.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.01%)</title><rect x="546.3" y="421" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="549.27" y="431.5" ></text>
</g>
<g >
<title>Triangle const* std::__make_move_if_noexcept_iterator&lt;Triangle, Triangle const*&gt;(Triangle*) (1 samples, 0.01%)</title><rect x="530.0" y="469" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="532.99" y="479.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061ca0&gt; (118 samples, 1.68%)</title><rect x="295.1" y="517" width="19.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="298.09" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="547.6" y="389" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="550.62" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.01%)</title><rect x="548.1" y="469" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="551.12" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="557.0" y="389" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="560.02" y="399.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="536.0" y="501" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="539.03" y="511.5" ></text>
</g>
<g >
<title>0x00007f10160b47d6 (1 samples, 0.01%)</title><rect x="11.5" y="581" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="14.51" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (3 samples, 0.04%)</title><rect x="550.6" y="453" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="553.64" y="463.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.03%)</title><rect x="543.6" y="549" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="546.59" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::clear() (1 samples, 0.01%)</title><rect x="563.2" y="581" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="566.23" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (28 samples, 0.40%)</title><rect x="564.1" y="453" width="4.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="567.07" y="463.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (3 samples, 0.04%)</title><rect x="329.0" y="517" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="332.01" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.01%)</title><rect x="543.9" y="469" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="546.92" y="479.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (7 samples, 0.10%)</title><rect x="545.3" y="453" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="548.26" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::forward_iterator_tag&gt;, bool&gt; std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::insert_or_assign&lt;int&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, int&amp;) (1 samples, 0.01%)</title><rect x="215.8" y="533" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="218.85" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.01%)</title><rect x="550.1" y="453" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="553.13" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (19 samples, 0.27%)</title><rect x="559.9" y="549" width="3.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="562.87" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (2 samples, 0.03%)</title><rect x="212.5" y="629" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="215.49" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (1 samples, 0.01%)</title><rect x="554.5" y="565" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="557.50" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.01%)</title><rect x="543.9" y="533" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="546.92" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="568.9" y="245" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="571.94" y="255.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.03%)</title><rect x="553.7" y="533" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="556.66" y="543.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::~Mesh_Pipeline() (1 samples, 0.01%)</title><rect x="568.9" y="501" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="571.94" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;!std::__are_same&lt;SDL_Color, bool&gt;::__value, void&gt;::__type std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::push_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.01%)</title><rect x="563.4" y="485" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="566.40" y="495.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b9e0&gt; (9 samples, 0.13%)</title><rect x="314.9" y="517" width="1.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="317.91" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt;[inline] (22 samples, 0.31%)</title><rect x="564.9" y="101" width="3.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="567.91" y="111.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt; (1 samples, 0.01%)</title><rect x="119.6" y="501" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="122.64" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.03%)</title><rect x="540.2" y="549" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="543.23" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.01%)</title><rect x="530.3" y="421" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="533.32" y="431.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.21%)</title><rect x="546.8" y="517" width="2.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="549.78" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.01%)</title><rect x="553.3" y="485" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="556.32" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::_S_constant() (1 samples, 0.01%)</title><rect x="215.7" y="517" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="218.68" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.01%)</title><rect x="547.6" y="373" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="550.62" y="383.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (10 samples, 0.14%)</title><rect x="559.9" y="453" width="1.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="562.87" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="561.7" y="373" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="564.72" y="383.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (10 samples, 0.14%)</title><rect x="559.9" y="485" width="1.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="562.87" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (6 samples, 0.09%)</title><rect x="471.2" y="517" width="1.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="474.22" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (52 samples, 0.74%)</title><rect x="320.3" y="485" width="8.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="323.28" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.03%)</title><rect x="472.4" y="501" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="475.40" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.01%)</title><rect x="568.9" y="69" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="571.94" y="79.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;0000000000061e50&gt; (17 samples, 0.24%)</title><rect x="455.6" y="517" width="2.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="458.61" y="527.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.01%)</title><rect x="551.1" y="565" width="0.2" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="554.14" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (3 samples, 0.04%)</title><rect x="332.4" y="501" width="0.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="335.37" y="511.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (2 samples, 0.03%)</title><rect x="564.6" y="197" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="567.57" y="207.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.01%)</title><rect x="558.9" y="517" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="561.86" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector(__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.01%)</title><rect x="542.1" y="533" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="545.07" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (4 samples, 0.06%)</title><rect x="527.6" y="533" width="0.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="530.64" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (168 samples, 2.39%)</title><rect x="337.6" y="485" width="28.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="340.57" y="495.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="543.9" y="485" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="546.92" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt;[inline] (1 samples, 0.01%)</title><rect x="119.6" y="485" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="122.64" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.03%)</title><rect x="548.8" y="405" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="551.79" y="415.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;0000000000745500&gt; (1 samples, 0.01%)</title><rect x="1186.8" y="629" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1189.81" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.01%)</title><rect x="568.9" y="213" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="571.94" y="223.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.03%)</title><rect x="556.5" y="389" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="559.51" y="399.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (13 samples, 0.18%)</title><rect x="554.7" y="453" width="2.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="557.67" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.01%)</title><rect x="533.3" y="501" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="536.34" y="511.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;0000000000046990&gt; (8 samples, 0.11%)</title><rect x="286.7" y="501" width="1.3" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="289.70" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.01%)</title><rect x="547.6" y="437" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="550.62" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.01%)</title><rect x="553.3" y="373" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="556.32" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (180 samples, 2.56%)</title><rect x="335.6" y="501" width="30.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="338.56" y="511.5" >st..</text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.01%)</title><rect x="410.9" y="501" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="413.94" y="511.5" ></text>
</g>
<g >
<title>bool std::operator!=&lt;TexturePNG&gt;(std::shared_ptr&lt;TexturePNG&gt; const&amp;, decltype(nullptr)) (2 samples, 0.03%)</title><rect x="512.0" y="533" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="515.02" y="543.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000004f790&gt; (1 samples, 0.01%)</title><rect x="563.6" y="501" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="566.57" y="511.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060470&gt; (1,777 samples, 25.28%)</title><rect x="216.2" y="549" width="298.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="219.18" y="559.5" >TexturemapRasterizer::drawTriangle(Trian..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.03%)</title><rect x="549.5" y="469" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="552.46" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.01%)</title><rect x="568.9" y="309" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="571.94" y="319.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (24 samples, 0.34%)</title><rect x="528.3" y="533" width="4.0" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="531.31" y="543.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000063b90&gt; (1,782 samples, 25.36%)</title><rect x="216.2" y="565" width="299.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="219.18" y="575.5" >Renderer::drawFilledTriangle2d(Triangle)..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.01%)</title><rect x="523.1" y="533" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="526.10" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (4 samples, 0.06%)</title><rect x="332.9" y="501" width="0.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="335.87" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_TryPop(void**, void**)[inline] (1 samples, 0.01%)</title><rect x="1179.4" y="517" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1182.42" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.03%)</title><rect x="556.8" y="549" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="559.85" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.01%)</title><rect x="514.7" y="533" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="517.71" y="543.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.03%)</title><rect x="517.7" y="533" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="520.73" y="543.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007be30&gt; (1 samples, 0.01%)</title><rect x="518.6" y="517" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="521.57" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::begin() const (1 samples, 0.01%)</title><rect x="215.3" y="533" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="218.34" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (7 samples, 0.10%)</title><rect x="476.6" y="485" width="1.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="479.59" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (20 samples, 0.28%)</title><rect x="529.0" y="517" width="3.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="531.98" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.01%)</title><rect x="563.6" y="485" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="566.57" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (1 samples, 0.01%)</title><rect x="548.1" y="421" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="551.12" y="431.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dda0&gt; (1 samples, 0.01%)</title><rect x="1157.9" y="613" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1160.93" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.01%)</title><rect x="215.5" y="549" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="218.51" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (19 samples, 0.27%)</title><rect x="559.9" y="565" width="3.2" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="562.87" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (6 samples, 0.09%)</title><rect x="472.7" y="501" width="1.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="475.73" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.01%)</title><rect x="509.8" y="517" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="512.84" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_create_storage(unsigned long) (22 samples, 0.31%)</title><rect x="564.9" y="213" width="3.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="567.91" y="223.5" ></text>
</g>
<g >
<title>XrmStringToQuark&lt;0000000000034f00&gt; (1 samples, 0.01%)</title><rect x="119.8" y="629" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="122.81" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.06%)</title><rect x="544.4" y="517" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="547.43" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.01%)</title><rect x="461.7" y="469" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="464.65" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.03%)</title><rect x="561.6" y="437" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="564.55" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.03%)</title><rect x="540.6" y="517" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="543.56" y="527.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005d470&gt; (110 samples, 1.57%)</title><rect x="515.7" y="549" width="18.5" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="518.71" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.03%)</title><rect x="556.8" y="485" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="559.85" y="495.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.01%)</title><rect x="509.8" y="533" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="512.84" y="543.5" ></text>
</g>
</g>
</svg>
