<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="790.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="773" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="773" > </text>
<g id="frames">
<g >
<title>IAction_Updater::numberOfActiveCommands(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt; const&amp;) const&lt;000000000000d2b0&gt; (1 samples, 0.03%)</title><rect x="107.9" y="661" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="110.93" y="671.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000065280&gt; (2,869 samples, 77.56%)</title><rect x="113.0" y="677" width="915.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="116.04" y="687.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000065280&gt;</text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (8 samples, 0.22%)</title><rect x="249.9" y="597" width="2.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="252.89" y="607.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007bd20&gt; (8 samples, 0.22%)</title><rect x="820.0" y="613" width="2.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="822.95" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (14 samples, 0.38%)</title><rect x="1004.7" y="549" width="4.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1007.66" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;::_M_valptr() (1 samples, 0.03%)</title><rect x="108.6" y="613" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="111.57" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt;::_M_node_allocator() const (1 samples, 0.03%)</title><rect x="112.7" y="613" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="115.72" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="844.5" y="597" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="847.52" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1040.4" y="629" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1043.39" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="861.7" y="597" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="864.74" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.05%)</title><rect x="1051.9" y="501" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1054.87" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="843.9" y="597" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="846.88" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.08%)</title><rect x="946.6" y="629" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="949.60" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="943.1" y="613" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="946.09" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_debug::_BeforeBeginHelper&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_S_Is&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::forward_iterator_tag&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1010.1" y="501" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1013.08" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="1052.2" y="485" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1055.19" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.14%)</title><rect x="1026.7" y="549" width="1.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1029.67" y="559.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="969.9" y="549" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="972.89" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (8 samples, 0.22%)</title><rect x="998.6" y="565" width="2.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1001.60" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000027940&gt; (11 samples, 0.30%)</title><rect x="1064.3" y="245" width="3.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1067.31" y="255.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="925.2" y="549" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="928.23" y="559.5" ></text>
</g>
<g >
<title>Mat4x4::Mat4x4() (1 samples, 0.03%)</title><rect x="113.0" y="629" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="116.04" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="917.9" y="549" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="920.89" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;00000000000620c0&gt; (12 samples, 0.32%)</title><rect x="840.1" y="629" width="3.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="843.05" y="639.5" ></text>
</g>
<g >
<title>inflate&lt;000000000000c680&gt; (1 samples, 0.03%)</title><rect x="1145.0" y="725" width="0.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1148.02" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::max_size(std::allocator&lt;Triangle&gt; const&amp;)[inline] (1 samples, 0.03%)</title><rect x="917.9" y="533" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="920.89" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1068.5" y="421" width="0.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1071.46" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (25 samples, 0.68%)</title><rect x="1001.8" y="565" width="8.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1004.79" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.08%)</title><rect x="1020.0" y="629" width="0.9" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1022.97" y="639.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::inPixelRange(int const&amp;, int const&amp;)&lt;000000000005ca40&gt; (34 samples, 0.92%)</title><rect x="804.3" y="581" width="10.9" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="807.32" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (14 samples, 0.38%)</title><rect x="475.4" y="597" width="4.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="478.43" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.05%)</title><rect x="1068.5" y="165" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1071.46" y="175.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (7 samples, 0.19%)</title><rect x="917.6" y="581" width="2.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="920.57" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="979.8" y="597" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="982.78" y="607.5" ></text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2&lt;000000000008b120&gt; (3 samples, 0.08%)</title><rect x="1146.3" y="725" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1149.30" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.11%)</title><rect x="1019.7" y="645" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1022.65" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (9 samples, 0.24%)</title><rect x="1021.9" y="629" width="2.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1024.88" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (4 samples, 0.11%)</title><rect x="1018.1" y="581" width="1.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1021.06" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.08%)</title><rect x="1018.4" y="517" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1021.38" y="527.5" ></text>
</g>
<g >
<title>0x000000200000000b (1 samples, 0.03%)</title><rect x="94.5" y="709" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="97.54" y="719.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (1 samples, 0.03%)</title><rect x="1055.1" y="597" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1058.06" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1000.8" y="501" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1003.83" y="511.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="133" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1071.46" y="143.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.05%)</title><rect x="1005.9" y="469" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1008.93" y="479.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (6 samples, 0.16%)</title><rect x="1026.4" y="645" width="1.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1029.35" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (4 samples, 0.11%)</title><rect x="1006.6" y="533" width="1.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1009.57" y="543.5" ></text>
</g>
<g >
<title>write (1 samples, 0.03%)</title><rect x="92.6" y="709" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="95.62" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.05%)</title><rect x="887.3" y="613" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="890.26" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (3 samples, 0.08%)</title><rect x="1027.3" y="469" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1030.31" y="479.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;)&lt;000000000007df20&gt; (3 samples, 0.08%)</title><rect x="885.4" y="613" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="888.35" y="623.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (63 samples, 1.70%)</title><rect x="998.0" y="613" width="20.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1000.96" y="623.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.16%)</title><rect x="984.9" y="597" width="1.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="987.88" y="607.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000543f0&gt; (2 samples, 0.05%)</title><rect x="1068.5" y="485" width="0.6" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1071.46" y="495.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007dc90&gt; (4 samples, 0.11%)</title><rect x="951.4" y="613" width="1.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="954.38" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="844.5" y="565" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="847.52" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="1067.8" y="325" width="0.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1070.82" y="335.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::_Vector_impl() (4 samples, 0.11%)</title><rect x="930.3" y="581" width="1.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="933.33" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.05%)</title><rect x="1020.3" y="613" width="0.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1023.29" y="623.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (3 samples, 0.08%)</title><rect x="1061.4" y="485" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1064.44" y="495.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (15 samples, 0.41%)</title><rect x="920.8" y="565" width="4.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="923.76" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;)[inline] (1 samples, 0.03%)</title><rect x="1062.4" y="469" width="0.3" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="1065.40" y="479.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (4 samples, 0.11%)</title><rect x="965.7" y="533" width="1.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="968.74" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1055.1" y="581" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1058.06" y="591.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464e0&gt; (286 samples, 7.73%)</title><rect x="172.1" y="613" width="91.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="175.05" y="623.5" >TexturePNG..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="1009.4" y="533" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1012.44" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (9 samples, 0.24%)</title><rect x="968.3" y="629" width="2.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="971.29" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="25.6" y="709" width="0.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="28.63" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e800&gt; (4 samples, 0.11%)</title><rect x="1024.8" y="661" width="1.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1027.76" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.11%)</title><rect x="1007.8" y="517" width="1.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1010.85" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (9 samples, 0.24%)</title><rect x="910.6" y="613" width="2.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="913.55" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (4 samples, 0.11%)</title><rect x="977.2" y="597" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="980.22" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007dc90&gt; (9 samples, 0.24%)</title><rect x="880.9" y="581" width="2.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="883.88" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (6 samples, 0.16%)</title><rect x="895.9" y="613" width="1.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="898.88" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="998.3" y="565" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1001.28" y="575.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007bd20&gt; (20 samples, 0.54%)</title><rect x="753.6" y="597" width="6.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="756.60" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (3 samples, 0.08%)</title><rect x="999.6" y="453" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1002.55" y="463.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (4 samples, 0.11%)</title><rect x="1018.1" y="597" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1021.06" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (11 samples, 0.30%)</title><rect x="1021.2" y="661" width="3.6" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1024.25" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (9 samples, 0.24%)</title><rect x="874.8" y="613" width="2.9" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="877.82" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.14%)</title><rect x="851.9" y="597" width="1.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="854.85" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (4 samples, 0.11%)</title><rect x="1058.9" y="581" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1061.89" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (6 samples, 0.16%)</title><rect x="965.7" y="629" width="2.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="968.74" y="639.5" ></text>
</g>
<g >
<title>write (12 samples, 0.32%)</title><rect x="87.2" y="709" width="3.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="90.20" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="501" width="5.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1065.72" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (5 samples, 0.14%)</title><rect x="906.7" y="581" width="1.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="909.72" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.05%)</title><rect x="891.4" y="629" width="0.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="894.41" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="843.9" y="613" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="846.88" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="1015.5" y="485" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1018.50" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (1 samples, 0.03%)</title><rect x="108.3" y="613" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="111.25" y="623.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1001.5" y="565" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1004.47" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (4 samples, 0.11%)</title><rect x="1007.8" y="533" width="1.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1010.85" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (4 samples, 0.11%)</title><rect x="934.5" y="597" width="1.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="937.48" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (2 samples, 0.05%)</title><rect x="1007.8" y="485" width="0.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1010.85" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.08%)</title><rect x="1002.1" y="549" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1005.11" y="559.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (14 samples, 0.38%)</title><rect x="920.8" y="549" width="4.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="923.76" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (4 samples, 0.11%)</title><rect x="868.1" y="613" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="871.12" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.08%)</title><rect x="1006.9" y="501" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1009.89" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017e30&gt; (1 samples, 0.03%)</title><rect x="907.0" y="565" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="910.04" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (5 samples, 0.14%)</title><rect x="906.7" y="597" width="1.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="909.72" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.08%)</title><rect x="999.6" y="485" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1002.55" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.08%)</title><rect x="1006.9" y="517" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1009.89" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::allocator&lt;Triangle&gt;&amp;)[inline] (4 samples, 0.11%)</title><rect x="1018.1" y="613" width="1.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1021.06" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="950.4" y="597" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="953.43" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Renderer, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.03%)</title><rect x="111.8" y="629" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="114.76" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (4 samples, 0.11%)</title><rect x="1056.7" y="581" width="1.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1059.66" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.03%)</title><rect x="907.4" y="565" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="910.36" y="575.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (1 samples, 0.03%)</title><rect x="636.8" y="597" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="639.85" y="607.5" ></text>
</g>
<g >
<title>operator+(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d510&gt; (1 samples, 0.03%)</title><rect x="886.0" y="597" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="888.99" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.08%)</title><rect x="990.9" y="549" width="1.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="993.94" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="873.2" y="565" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="876.23" y="575.5" ></text>
</g>
<g >
<title>SDL_PollEvent&lt;00000000000423b0&gt; (1 samples, 0.03%)</title><rect x="112.1" y="661" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="115.08" y="671.5" ></text>
</g>
<g >
<title>0x000055a4e225083f (3 samples, 0.08%)</title><rect x="15.1" y="725" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="18.10" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (5 samples, 0.14%)</title><rect x="1012.3" y="517" width="1.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1015.31" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::~TexturemapRasterizer()&lt;0000000000066410&gt; (1 samples, 0.03%)</title><rect x="851.9" y="581" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="854.85" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (3 samples, 0.08%)</title><rect x="1042.6" y="597" width="1.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1045.62" y="607.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.05%)</title><rect x="897.2" y="581" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="900.15" y="591.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*) (1 samples, 0.03%)</title><rect x="110.2" y="661" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="113.17" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1040.4" y="597" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1043.39" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="972.8" y="661" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="975.76" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1007.5" y="453" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1010.53" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.14%)</title><rect x="1026.7" y="533" width="1.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1029.67" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061f10&gt; (141 samples, 3.81%)</title><rect x="649.6" y="613" width="45.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="652.61" y="623.5" >Text..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::IncreaseCacheLimitLocked()&lt;0000000000022070&gt; (1 samples, 0.03%)</title><rect x="1068.5" y="37" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1071.46" y="47.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="437" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1065.40" y="447.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a1&lt;false, SDL_Color const*, SDL_Color*&gt;(SDL_Color const*, SDL_Color const*, SDL_Color*) (1 samples, 0.03%)</title><rect x="1063.0" y="245" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1066.04" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (1 samples, 0.03%)</title><rect x="1014.9" y="469" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1017.87" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="947.9" y="629" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="950.88" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1016.8" y="517" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1019.78" y="527.5" ></text>
</g>
<g >
<title>Triangle::setTexture(std::shared_ptr&lt;TexturePNG&gt;)&lt;000000000007bb00&gt; (1 samples, 0.03%)</title><rect x="947.9" y="645" width="0.3" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="950.88" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.05%)</title><rect x="1047.1" y="629" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1050.09" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1055.1" y="549" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1058.06" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (10 samples, 0.27%)</title><rect x="902.9" y="613" width="3.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="905.90" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (5 samples, 0.14%)</title><rect x="940.2" y="629" width="1.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="943.22" y="639.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="1016.8" y="453" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1019.78" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (9 samples, 0.24%)</title><rect x="903.2" y="597" width="2.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="906.21" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="1044.9" y="613" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1047.85" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned int)&lt;0000000000026710&gt; (1 samples, 0.03%)</title><rect x="1068.8" y="53" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1071.78" y="63.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (26 samples, 0.70%)</title><rect x="419.0" y="597" width="8.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="421.96" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*, Mesh&gt;(Mesh*, Mesh*, std::allocator&lt;Mesh&gt;&amp;)[inline] (2 samples, 0.05%)</title><rect x="1068.5" y="549" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1071.46" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.05%)</title><rect x="983.6" y="469" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="986.60" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="844.5" y="613" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="847.52" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.05%)</title><rect x="1017.1" y="501" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1020.10" y="511.5" ></text>
</g>
<g >
<title>__libc_alloca_cutoff@@GLIBC_PRIVATE&lt;0000000000088d20&gt; (1 samples, 0.03%)</title><rect x="16.1" y="709" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="19.06" y="719.5" ></text>
</g>
<g >
<title>parse_printf_format@@GLIBC_2.2.5&lt;0000000000056320&gt; (3 samples, 0.08%)</title><rect x="1145.3" y="725" width="1.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1148.34" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.14%)</title><rect x="1053.5" y="485" width="1.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1056.47" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.03%)</title><rect x="888.5" y="629" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="891.54" y="639.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (23 samples, 0.62%)</title><rect x="1010.7" y="581" width="7.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1013.72" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (2 samples, 0.05%)</title><rect x="916.0" y="533" width="0.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="918.97" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1005.9" y="501" width="0.7" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1008.93" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="453" width="5.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1065.72" y="463.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007c170&gt; (1 samples, 0.03%)</title><rect x="872.9" y="613" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="875.91" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (4 samples, 0.11%)</title><rect x="866.5" y="549" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="869.53" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::operator&lt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006b5f0&gt; (1 samples, 0.03%)</title><rect x="1004.3" y="549" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1007.34" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="107.9" y="629" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="110.93" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="924.9" y="517" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="927.91" y="527.5" ></text>
</g>
<g >
<title>parse_printf_format@@GLIBC_2.2.5&lt;0000000000056320&gt; (3 samples, 0.08%)</title><rect x="1145.3" y="709" width="1.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1148.34" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (7 samples, 0.19%)</title><rect x="865.6" y="581" width="2.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="868.57" y="591.5" ></text>
</g>
<g >
<title>Event_Scanner::scanInput()&lt;000000000002c360&gt; (5 samples, 0.14%)</title><rect x="110.5" y="661" width="1.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="113.49" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="565" width="5.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1065.72" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.03%)</title><rect x="1041.0" y="629" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1044.02" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (4 samples, 0.11%)</title><rect x="868.1" y="629" width="1.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="871.12" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.05%)</title><rect x="1003.7" y="517" width="0.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1006.70" y="527.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007dcf0&gt; (6 samples, 0.16%)</title><rect x="959.4" y="645" width="1.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="962.36" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (4 samples, 0.11%)</title><rect x="977.2" y="581" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="980.22" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="969.9" y="517" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="972.89" y="527.5" ></text>
</g>
<g >
<title>write (3 samples, 0.08%)</title><rect x="92.9" y="709" width="1.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="95.94" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.03%)</title><rect x="1000.8" y="485" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1003.83" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1035.6" y="645" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1038.60" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (6 samples, 0.16%)</title><rect x="998.6" y="549" width="1.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1001.60" y="559.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1042.9" y="581" width="0.7" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1045.94" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_unlink()[inline] (1 samples, 0.03%)</title><rect x="11.3" y="693" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="14.28" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (4 samples, 0.11%)</title><rect x="971.2" y="645" width="1.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="974.16" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="867.8" y="597" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="870.80" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1009.1" y="501" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1012.12" y="511.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)[inline] (1 samples, 0.03%)</title><rect x="1068.1" y="581" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1071.14" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1001.5" y="517" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1004.47" y="527.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1026.0" y="629" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1029.03" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="844.2" y="597" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="847.20" y="607.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af95c (2 samples, 0.05%)</title><rect x="77.0" y="725" width="0.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="79.99" y="735.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (4 samples, 0.11%)</title><rect x="965.7" y="549" width="1.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="968.74" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (1 samples, 0.03%)</title><rect x="108.9" y="645" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="111.89" y="655.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.05%)</title><rect x="107.3" y="725" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="110.30" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (20 samples, 0.54%)</title><rect x="856.3" y="629" width="6.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="859.32" y="639.5" ></text>
</g>
<g >
<title>_XSetLastRequestRead&lt;0000000000040a30&gt; (1 samples, 0.03%)</title><rect x="86.9" y="709" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="89.88" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.05%)</title><rect x="1035.6" y="517" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1038.60" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1011.4" y="501" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1014.36" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (39 samples, 1.05%)</title><rect x="1165.1" y="725" width="12.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1168.12" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (4 samples, 0.11%)</title><rect x="923.6" y="533" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="926.63" y="543.5" ></text>
</g>
<g >
<title>0x00007f2e6a190c9b (1 samples, 0.03%)</title><rect x="83.4" y="725" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="86.37" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="469" width="0.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1071.46" y="479.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (4 samples, 0.11%)</title><rect x="965.7" y="613" width="1.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="968.74" y="623.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.03%)</title><rect x="1004.0" y="501" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1007.02" y="511.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469b0&gt; (12 samples, 0.32%)</title><rect x="259.5" y="597" width="3.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="262.46" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="1020.0" y="613" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1022.97" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1013.6" y="469" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1016.59" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.03%)</title><rect x="924.9" y="533" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="927.91" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.14%)</title><rect x="1060.8" y="629" width="1.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1063.80" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.03%)</title><rect x="1039.7" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1042.75" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="1005.9" y="453" width="0.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1008.93" y="463.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1022.8" y="581" width="0.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1025.84" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1009.8" y="533" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1012.76" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::operator&lt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006b5f0&gt; (1 samples, 0.03%)</title><rect x="1012.0" y="533" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1015.00" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1001.1" y="533" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1004.15" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017e30&gt; (4 samples, 0.11%)</title><rect x="904.5" y="565" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="907.49" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.08%)</title><rect x="990.9" y="565" width="1.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="993.94" y="575.5" ></text>
</g>
<g >
<title>Vec3d::toThousandths()&lt;000000000007d0e0&gt; (3 samples, 0.08%)</title><rect x="849.3" y="629" width="1.0" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="852.30" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1014.9" y="501" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1017.87" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (5 samples, 0.14%)</title><rect x="989.3" y="565" width="1.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="992.35" y="575.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007dcf0&gt; (5 samples, 0.14%)</title><rect x="951.1" y="629" width="1.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="954.07" y="639.5" ></text>
</g>
<g >
<title>0x000055a4e22f6bff (1 samples, 0.03%)</title><rect x="74.1" y="725" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="77.12" y="735.5" ></text>
</g>
<g >
<title>void __gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_if&lt;__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_all()::{lambda(std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;)#1}&gt;(__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_all()::{lambda(std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;)#1}) (2 samples, 0.05%)</title><rect x="111.1" y="597" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="114.12" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="962.2" y="645" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="965.23" y="655.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469d0&gt; (9 samples, 0.24%)</title><rect x="256.6" y="597" width="2.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="259.59" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_to_end() const (1 samples, 0.03%)</title><rect x="984.9" y="549" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="987.88" y="559.5" ></text>
</g>
<g >
<title>TrianglePipeline::~TrianglePipeline()&lt;00000000000264b0&gt; (4 samples, 0.11%)</title><rect x="1061.1" y="597" width="1.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1064.12" y="607.5" ></text>
</g>
<g >
<title>__poll@@GLIBC_2.2.5&lt;0000000000102f20&gt; (29 samples, 0.78%)</title><rect x="16.4" y="709" width="9.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="19.38" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.08%)</title><rect x="1050.9" y="437" width="1.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1053.91" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (4 samples, 0.11%)</title><rect x="965.7" y="597" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="968.74" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1010.7" y="501" width="0.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1013.72" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.03%)</title><rect x="867.8" y="613" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="870.80" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6a5ad2c0 (1 samples, 0.03%)</title><rect x="84.0" y="725" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="87.01" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.11%)</title><rect x="1027.0" y="501" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1029.99" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (10 samples, 0.27%)</title><rect x="826.3" y="597" width="3.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="829.33" y="607.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000022a30&gt; (2,992 samples, 80.89%)</title><rect x="107.9" y="693" width="954.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="110.93" y="703.5" >Engine_3D::engine_update()&lt;0000000000022a30&gt;</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="1035.9" y="453" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1038.92" y="463.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a380&gt; (4 samples, 0.11%)</title><rect x="960.0" y="613" width="1.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="963.00" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (4 samples, 0.11%)</title><rect x="930.3" y="565" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="933.33" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="1039.7" y="629" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1042.75" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="935.4" y="469" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="938.43" y="479.5" ></text>
</g>
<g >
<title>0x00007f2e6b34c330 (1 samples, 0.03%)</title><rect x="86.2" y="725" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="89.24" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.05%)</title><rect x="1068.5" y="85" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1071.46" y="95.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e2d0&gt; (3 samples, 0.08%)</title><rect x="1189.0" y="725" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.04" y="735.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="993.5" y="533" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="996.49" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1017.1" y="485" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1020.10" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Renderer, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.03%)</title><rect x="111.8" y="645" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="114.76" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1010.1" y="533" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1013.08" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="984.6" y="613" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="987.56" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af965 (1 samples, 0.03%)</title><rect x="78.3" y="725" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="81.27" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="985.2" y="549" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="988.20" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (13 samples, 0.35%)</title><rect x="931.6" y="613" width="4.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="934.61" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000027560&gt; (11 samples, 0.30%)</title><rect x="1064.3" y="197" width="3.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1067.31" y="207.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000ba70&gt; (1 samples, 0.03%)</title><rect x="1144.4" y="725" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1147.38" y="735.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469d0&gt; (2 samples, 0.05%)</title><rect x="481.2" y="613" width="0.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="484.17" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="963.5" y="613" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="966.51" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (4 samples, 0.11%)</title><rect x="866.5" y="565" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="869.53" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (12 samples, 0.32%)</title><rect x="1010.7" y="549" width="3.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1013.72" y="559.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints()&lt;000000000007bc50&gt; (1 samples, 0.03%)</title><rect x="978.8" y="661" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="981.82" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (32 samples, 0.87%)</title><rect x="935.8" y="645" width="10.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="938.75" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="1040.4" y="565" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1043.39" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="920.4" y="549" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="923.44" y="559.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::blit(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)&lt;000000000005c940&gt; (110 samples, 2.97%)</title><rect x="427.9" y="597" width="35.1" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="430.90" y="607.5" >SD..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.19%)</title><rect x="1052.8" y="581" width="2.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1055.83" y="591.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af970 (1 samples, 0.03%)</title><rect x="79.5" y="725" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="82.54" y="735.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::inPixelRange(int const&amp;, int const&amp;)&lt;000000000005ca40&gt; (40 samples, 1.08%)</title><rect x="450.2" y="581" width="12.8" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="453.23" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="108.3" y="629" width="0.3" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="111.25" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (2 samples, 0.05%)</title><rect x="843.9" y="629" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="846.88" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="916.3" y="501" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="919.29" y="511.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::operator=(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="111.1" y="645" width="0.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="114.12" y="655.5" ></text>
</g>
<g >
<title>ITriangleRasterizer::~ITriangleRasterizer() (2 samples, 0.05%)</title><rect x="852.8" y="565" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="855.81" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (14 samples, 0.38%)</title><rect x="1055.7" y="597" width="4.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1058.70" y="607.5" ></text>
</g>
<g >
<title>0x000055a4e182c36f (2 samples, 0.05%)</title><rect x="14.5" y="725" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="17.47" y="735.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(TexturePNG const&amp;)&lt;000000000003dcc0&gt; (17 samples, 0.46%)</title><rect x="1062.7" y="485" width="5.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1065.72" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.05%)</title><rect x="1059.5" y="533" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1062.53" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="994.1" y="533" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="997.13" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (1 samples, 0.03%)</title><rect x="1046.8" y="613" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1049.77" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000062170&gt; (44 samples, 1.19%)</title><rect x="272.9" y="613" width="14.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="275.86" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="1015.2" y="501" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1018.19" y="511.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000004f7b0&gt; (1 samples, 0.03%)</title><rect x="1062.4" y="597" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1065.40" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (4 samples, 0.11%)</title><rect x="1018.1" y="645" width="1.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1021.06" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.05%)</title><rect x="1000.5" y="533" width="0.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1003.51" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000062120&gt; (1 samples, 0.03%)</title><rect x="637.5" y="613" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="640.48" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="581" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1065.40" y="591.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1010.4" y="501" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1013.40" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (8 samples, 0.22%)</title><rect x="903.5" y="581" width="2.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="906.53" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="994.8" y="501" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="997.77" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.08%)</title><rect x="1004.7" y="517" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1007.66" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.14%)</title><rect x="851.9" y="629" width="1.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="854.85" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.05%)</title><rect x="1068.5" y="645" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1071.46" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1035.6" y="629" width="0.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1038.60" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.03%)</title><rect x="906.1" y="629" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="909.09" y="639.5" ></text>
</g>
<g >
<title>operator new[](unsigned long) (2 samples, 0.05%)</title><rect x="916.9" y="549" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="919.93" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (8 samples, 0.22%)</title><rect x="910.9" y="597" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="913.87" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="1020.9" y="645" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1023.93" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="955.2" y="629" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="958.21" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1013.6" y="485" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1016.59" y="495.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="1048.4" y="501" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1051.36" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1017.4" y="485" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1020.42" y="495.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (2 samples, 0.05%)</title><rect x="1063.4" y="245" width="0.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1066.35" y="255.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (7 samples, 0.19%)</title><rect x="1052.8" y="549" width="2.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1055.83" y="559.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="941.8" y="629" width="0.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="944.81" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="966.7" y="453" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="969.70" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="979.8" y="645" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="982.78" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (17 samples, 0.46%)</title><rect x="1062.7" y="389" width="5.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1065.72" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="979.8" y="581" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="982.78" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.16%)</title><rect x="1014.9" y="549" width="1.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1017.87" y="559.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a380&gt; (3 samples, 0.08%)</title><rect x="951.7" y="597" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="954.70" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="969.9" y="533" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="972.89" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TrianglePipeline&gt;::~shared_ptr() (5 samples, 0.14%)</title><rect x="1060.8" y="677" width="1.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1063.80" y="687.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.05%)</title><rect x="1009.1" y="549" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1012.12" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="1059.5" y="517" width="0.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1062.53" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.14%)</title><rect x="851.9" y="613" width="1.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="854.85" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (29 samples, 0.78%)</title><rect x="770.8" y="597" width="9.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="773.83" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="989.0" y="485" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="992.03" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TexturemapRasterizer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.05%)</title><rect x="852.8" y="581" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="855.81" y="591.5" ></text>
</g>
<g >
<title>operator/(Vec3d const&amp;, float const&amp;)&lt;000000000007d3b0&gt; (1 samples, 0.03%)</title><rect x="963.8" y="645" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="966.83" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (4 samples, 0.11%)</title><rect x="996.7" y="549" width="1.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="999.68" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061f10&gt; (182 samples, 4.92%)</title><rect x="286.9" y="613" width="58.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="289.90" y="623.5" >Textur..</text>
</g>
<g >
<title>Vec2d::Vec2d() (4 samples, 0.11%)</title><rect x="944.0" y="613" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="947.05" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af977 (3 samples, 0.08%)</title><rect x="79.9" y="725" width="0.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="82.86" y="735.5" ></text>
</g>
<g >
<title>0x00007f2e6a669c35 (1 samples, 0.03%)</title><rect x="84.3" y="725" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="87.33" y="735.5" ></text>
</g>
<g >
<title>0x00007f2e6a3e679f (1 samples, 0.03%)</title><rect x="74.1" y="709" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="77.12" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1002.1" y="517" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1005.11" y="527.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (40 samples, 1.08%)</title><rect x="115.3" y="629" width="12.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="118.27" y="639.5" ></text>
</g>
<g >
<title>0xff3c372dff3c372c (1 samples, 0.03%)</title><rect x="94.9" y="725" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="97.86" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.08%)</title><rect x="864.3" y="613" width="1.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="867.30" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.11%)</title><rect x="1041.0" y="645" width="1.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1044.02" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="916.3" y="469" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="919.29" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.16%)</title><rect x="906.4" y="613" width="1.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="909.40" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1014.2" y="517" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1017.23" y="527.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::inPixelRange(int const&amp;, int const&amp;)&lt;000000000005ca40&gt; (12 samples, 0.32%)</title><rect x="463.0" y="597" width="3.8" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="465.99" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="986.5" y="517" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="989.47" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_reset()&lt;00000000000dd650&gt; (1 samples, 0.03%)</title><rect x="10.6" y="709" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="13.64" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="108.3" y="597" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="111.25" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.05%)</title><rect x="1068.5" y="533" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1071.46" y="543.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::max&lt;unsigned long&gt;(unsigned long const&amp;, unsigned long const&amp;) (1 samples, 0.03%)</title><rect x="920.1" y="581" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="923.12" y="591.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, char, double) const (1 samples, 0.03%)</title><rect x="1188.1" y="725" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1191.09" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="970.8" y="613" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="973.84" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.05%)</title><rect x="1035.6" y="501" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1038.60" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.14%)</title><rect x="982.6" y="517" width="1.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="985.65" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (38 samples, 1.03%)</title><rect x="913.4" y="613" width="12.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="916.42" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1001.5" y="453" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1004.47" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1068.1" y="613" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1071.14" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.11%)</title><rect x="1031.5" y="517" width="1.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1034.45" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.05%)</title><rect x="890.5" y="581" width="0.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="893.45" y="591.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (15 samples, 0.41%)</title><rect x="1047.7" y="533" width="4.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1050.72" y="543.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::blit(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)&lt;000000000005c940&gt; (102 samples, 2.76%)</title><rect x="782.6" y="597" width="32.6" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="785.63" y="607.5" >SD..</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (4 samples, 0.11%)</title><rect x="1038.5" y="645" width="1.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1041.47" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (12 samples, 0.32%)</title><rect x="998.0" y="597" width="3.8" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1000.96" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1045.8" y="645" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1048.81" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (12 samples, 0.32%)</title><rect x="1010.7" y="565" width="3.8" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1013.72" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (6 samples, 0.16%)</title><rect x="976.6" y="645" width="1.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="979.59" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="869.1" y="549" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="872.08" y="559.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::erase(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="109.8" y="661" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="112.85" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.08%)</title><rect x="1018.4" y="501" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1021.38" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="987.8" y="549" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="990.75" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (1 samples, 0.03%)</title><rect x="1001.5" y="533" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1004.47" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.05%)</title><rect x="1068.5" y="517" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1071.46" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.05%)</title><rect x="1035.6" y="565" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1038.60" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="565" width="0.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1071.46" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.03%)</title><rect x="972.1" y="613" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="975.12" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="988.1" y="533" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="991.07" y="543.5" ></text>
</g>
<g >
<title>SDL_MapRGBA&lt;0000000000042e10&gt; (8 samples, 0.22%)</title><rect x="780.1" y="597" width="2.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="783.08" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (5 samples, 0.14%)</title><rect x="918.2" y="565" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="921.21" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="990.6" y="549" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="993.62" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (4 samples, 0.11%)</title><rect x="1041.0" y="661" width="1.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1044.02" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1010.1" y="549" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1013.08" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (1 samples, 0.03%)</title><rect x="1010.4" y="517" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1013.40" y="527.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (4 samples, 0.11%)</title><rect x="479.9" y="613" width="1.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="482.89" y="623.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000686c0&gt; (1 samples, 0.03%)</title><rect x="985.2" y="565" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="988.20" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="110.5" y="645" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="113.49" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1016.5" y="501" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1019.46" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.03%)</title><rect x="1061.1" y="549" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1064.12" y="559.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464e0&gt; (7 samples, 0.19%)</title><rect x="130.6" y="629" width="2.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="133.58" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (2 samples, 0.05%)</title><rect x="916.9" y="565" width="0.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="919.93" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (29 samples, 0.78%)</title><rect x="1177.6" y="725" width="9.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1180.56" y="735.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (51 samples, 1.38%)</title><rect x="1001.8" y="597" width="16.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1004.79" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (15 samples, 0.41%)</title><rect x="980.1" y="645" width="4.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="983.09" y="655.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.03%)</title><rect x="1063.0" y="261" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1066.04" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.03%)</title><rect x="984.9" y="565" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="987.88" y="575.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="549" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1065.40" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (3 samples, 0.08%)</title><rect x="969.2" y="613" width="1.0" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="972.25" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (17 samples, 0.46%)</title><rect x="862.7" y="629" width="5.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="865.70" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.08%)</title><rect x="934.8" y="549" width="1.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="937.80" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="103.8" y="709" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="106.79" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="877.4" y="597" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="880.37" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000dd670&gt; (1 samples, 0.03%)</title><rect x="1061.1" y="533" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1064.12" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1005.9" y="517" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1008.93" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="1059.2" y="549" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1062.21" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="1014.5" y="565" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1017.55" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="864.9" y="597" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="867.93" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.05%)</title><rect x="1047.1" y="645" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1050.09" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (3 samples, 0.08%)</title><rect x="1038.8" y="565" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1041.79" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach_single(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd580&gt; (1 samples, 0.03%)</title><rect x="11.0" y="709" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="13.96" y="719.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (4 samples, 0.11%)</title><rect x="524.2" y="613" width="1.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="527.24" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1044.5" y="597" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1047.53" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (17 samples, 0.46%)</title><rect x="1029.9" y="565" width="5.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1032.86" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="469" width="5.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1065.72" y="479.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (15 samples, 0.41%)</title><rect x="1047.7" y="565" width="4.8" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1050.72" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="565" width="0.3" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="1065.40" y="575.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1035.3" y="565" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1038.28" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1009.8" y="549" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1012.76" y="559.5" ></text>
</g>
<g >
<title>0x000055a4e181d9df (1 samples, 0.03%)</title><rect x="14.1" y="725" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="17.15" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::_Vector_impl(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="970.2" y="613" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="973.21" y="623.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (16 samples, 0.43%)</title><rect x="1030.2" y="549" width="5.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1033.18" y="559.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::deallocate(SDL_Color*, unsigned long) (1 samples, 0.03%)</title><rect x="1068.5" y="53" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1071.46" y="63.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.03%)</title><rect x="1011.0" y="485" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1014.04" y="495.5" ></text>
</g>
<g >
<title>SDL_MapRGBA&lt;0000000000042e10&gt; (2 samples, 0.05%)</title><rect x="427.3" y="597" width="0.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="430.26" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (7 samples, 0.19%)</title><rect x="1032.7" y="517" width="2.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1035.73" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.08%)</title><rect x="1027.3" y="485" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1030.31" y="495.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007c150&gt; (1 samples, 0.03%)</title><rect x="947.6" y="645" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="950.56" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.05%)</title><rect x="1003.7" y="533" width="0.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1006.70" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="976.3" y="645" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="979.27" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.05%)</title><rect x="925.5" y="613" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="928.54" y="623.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::~Mesh_Pipeline() (2 samples, 0.05%)</title><rect x="1068.5" y="597" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1071.46" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="858.9" y="613" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="861.87" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; &gt;::_M_invalidate_all() (2 samples, 0.05%)</title><rect x="111.1" y="613" width="0.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="114.12" y="623.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::blit(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)&lt;000000000005c940&gt; (3 samples, 0.08%)</title><rect x="171.1" y="613" width="1.0" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="174.10" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (6 samples, 0.16%)</title><rect x="1033.0" y="437" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1036.05" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (2 samples, 0.05%)</title><rect x="1022.2" y="597" width="0.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1025.20" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (1 samples, 0.03%)</title><rect x="998.3" y="517" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1001.28" y="527.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.08%)</title><rect x="1063.0" y="277" width="1.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1066.04" y="287.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1026.0" y="565" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1029.03" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (2 samples, 0.05%)</title><rect x="987.1" y="533" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="990.11" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (5 samples, 0.14%)</title><rect x="1026.7" y="581" width="1.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1029.67" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.03%)</title><rect x="862.1" y="597" width="0.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="865.06" y="607.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (13 samples, 0.35%)</title><rect x="252.4" y="597" width="4.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="255.44" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (1 samples, 0.03%)</title><rect x="893.3" y="565" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="896.33" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006bb20&gt; (1 samples, 0.03%)</title><rect x="984.9" y="581" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="987.88" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::SearchFreeAndLargeLists(unsigned long)&lt;00000000000253e0&gt; (1 samples, 0.03%)</title><rect x="1067.5" y="149" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1070.50" y="159.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (17 samples, 0.46%)</title><rect x="926.2" y="629" width="5.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="929.18" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.08%)</title><rect x="934.8" y="485" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="937.80" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (17 samples, 0.46%)</title><rect x="1062.7" y="405" width="5.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1065.72" y="415.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469b0&gt; (10 samples, 0.27%)</title><rect x="627.9" y="597" width="3.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="630.91" y="607.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="1045.2" y="613" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1048.17" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="887.6" y="597" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="890.58" y="607.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007bbd0&gt; (22 samples, 0.59%)</title><rect x="822.5" y="613" width="7.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="825.51" y="623.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints()&lt;000000000007bc50&gt; (13 samples, 0.35%)</title><rect x="949.5" y="645" width="4.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="952.47" y="655.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (2 samples, 0.05%)</title><rect x="886.3" y="613" width="0.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="889.31" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e800&gt; (10 samples, 0.27%)</title><rect x="898.1" y="629" width="3.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="901.11" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1011.4" y="533" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1014.36" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.11%)</title><rect x="983.0" y="485" width="1.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="985.97" y="495.5" ></text>
</g>
<g >
<title>main&lt;000000000000a870&gt; (3,013 samples, 81.45%)</title><rect x="107.9" y="709" width="961.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="110.93" y="719.5" >main&lt;000000000000a870&gt;</text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;00000000000430e0&gt; (8 samples, 0.22%)</title><rect x="128.0" y="629" width="2.6" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="131.03" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.05%)</title><rect x="969.6" y="581" width="0.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="972.57" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="966.1" y="469" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="969.06" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="1044.5" y="565" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1047.53" y="575.5" ></text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007db40&gt; (3 samples, 0.08%)</title><rect x="879.0" y="597" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="881.97" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="961.3" y="613" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="964.27" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (11 samples, 0.30%)</title><rect x="967.7" y="645" width="3.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="970.65" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="983.6" y="453" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="986.60" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (3 samples, 0.08%)</title><rect x="1042.6" y="613" width="1.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1045.62" y="623.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (15 samples, 0.41%)</title><rect x="920.8" y="581" width="4.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="923.76" y="591.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (104 samples, 2.81%)</title><rect x="984.9" y="645" width="33.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="987.88" y="655.5" >vo..</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="946.9" y="597" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="949.92" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (1 samples, 0.03%)</title><rect x="896.2" y="581" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="899.20" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.05%)</title><rect x="1068.5" y="661" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1071.46" y="671.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (32 samples, 0.87%)</title><rect x="987.8" y="581" width="10.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="990.75" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (11 samples, 0.30%)</title><rect x="1021.2" y="645" width="3.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1024.25" y="655.5" ></text>
</g>
<g >
<title>_XimLcctstowcs&lt;000000000006dd20&gt; (1 samples, 0.03%)</title><rect x="104.4" y="725" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="107.43" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.11%)</title><rect x="1038.5" y="629" width="1.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1041.47" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1009.1" y="485" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1012.12" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (15 samples, 0.41%)</title><rect x="1047.7" y="597" width="4.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1050.72" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1010.7" y="533" width="0.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1013.72" y="543.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="373" width="5.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1065.72" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (6 samples, 0.16%)</title><rect x="889.2" y="613" width="1.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="892.18" y="623.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007bbd0&gt; (28 samples, 0.76%)</title><rect x="471.0" y="613" width="8.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="473.96" y="623.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (35 samples, 0.95%)</title><rect x="986.8" y="597" width="11.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="989.79" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.03%)</title><rect x="1045.5" y="629" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1048.49" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="986.8" y="581" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="989.79" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.03%)</title><rect x="849.0" y="629" width="0.3" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="851.98" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (13 samples, 0.35%)</title><rect x="980.1" y="597" width="4.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="983.09" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e800&gt; (1 samples, 0.03%)</title><rect x="962.5" y="645" width="0.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="965.55" y="655.5" ></text>
</g>
<g >
<title>0x00007f2e6a0ae0ef (1 samples, 0.03%)</title><rect x="74.8" y="725" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="77.76" y="735.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007c170&gt; (1 samples, 0.03%)</title><rect x="848.7" y="629" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="851.66" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.08%)</title><rect x="922.7" y="533" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="925.67" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="985.8" y="533" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="988.84" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.05%)</title><rect x="961.6" y="645" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="964.59" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="997.3" y="501" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1000.32" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (4 samples, 0.11%)</title><rect x="934.5" y="581" width="1.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="937.48" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.08%)</title><rect x="999.6" y="469" width="0.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1002.55" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector(__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="967.7" y="629" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="970.65" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007dc90&gt; (3 samples, 0.08%)</title><rect x="884.4" y="597" width="1.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="887.39" y="607.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.08%)</title><rect x="1063.0" y="293" width="1.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1066.04" y="303.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="893.3" y="549" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="896.33" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="109.8" y="645" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="112.85" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.05%)</title><rect x="1068.5" y="341" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1071.46" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (1 samples, 0.03%)</title><rect x="1010.4" y="533" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1013.40" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.03%)</title><rect x="106.0" y="693" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="109.02" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (7 samples, 0.19%)</title><rect x="1049.6" y="485" width="2.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1052.64" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length(unsigned long) (1 samples, 0.03%)</title><rect x="1062.4" y="421" width="0.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1065.40" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1001.5" y="469" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1004.47" y="479.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="975.3" y="645" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="978.31" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (2 samples, 0.05%)</title><rect x="917.6" y="565" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="920.57" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.03%)</title><rect x="920.4" y="581" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="923.44" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="109.2" y="645" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="112.21" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (9 samples, 0.24%)</title><rect x="1042.6" y="629" width="2.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1045.62" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (12 samples, 0.32%)</title><rect x="1064.0" y="293" width="3.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1066.99" y="303.5" ></text>
</g>
<g >
<title>operator new[](unsigned long) (1 samples, 0.03%)</title><rect x="1052.5" y="581" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1055.51" y="591.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060860&gt; (2,311 samples, 62.48%)</title><rect x="114.0" y="645" width="737.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="117.00" y="655.5" >TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060860&gt;</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (5 samples, 0.14%)</title><rect x="930.0" y="613" width="1.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="933.01" y="623.5" ></text>
</g>
<g >
<title>XrmPutResource&lt;0000000000047fc0&gt; (1 samples, 0.03%)</title><rect x="15.1" y="709" width="0.3" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="18.10" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1011.4" y="517" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1014.36" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="108.3" y="645" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="111.25" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (27 samples, 0.73%)</title><rect x="1001.8" y="581" width="8.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1004.79" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (2 samples, 0.05%)</title><rect x="111.1" y="629" width="0.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="114.12" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="981.4" y="517" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="984.37" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (4 samples, 0.11%)</title><rect x="1038.5" y="597" width="1.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1041.47" y="607.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061ff0&gt; (205 samples, 5.54%)</title><rect x="694.6" y="613" width="65.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="697.59" y="623.5" >Texture..</text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (2 samples, 0.05%)</title><rect x="926.5" y="597" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="929.50" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="953.9" y="565" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="956.94" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1009.8" y="565" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1012.76" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.05%)</title><rect x="924.3" y="485" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="927.27" y="495.5" ></text>
</g>
<g >
<title>0x4f5243202020201f (1 samples, 0.03%)</title><rect x="92.6" y="725" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="95.62" y="735.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFT_Scanline_prep(Triangle&amp;)&lt;0000000000061c50&gt; (1 samples, 0.03%)</title><rect x="132.8" y="629" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="135.82" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="437" width="5.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1065.72" y="447.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="964.1" y="645" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="967.14" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.05%)</title><rect x="1035.6" y="485" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1038.60" y="495.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() const (1 samples, 0.03%)</title><rect x="109.5" y="661" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="112.53" y="671.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;00000000000668d0&gt; (104 samples, 2.81%)</title><rect x="984.9" y="661" width="33.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="987.88" y="671.5" >Tr..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::deallocate(std::allocator&lt;SDL_Color&gt;&amp;, SDL_Color*, unsigned long)[inline] (2 samples, 0.05%)</title><rect x="1068.5" y="69" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1071.46" y="79.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1010.4" y="549" width="0.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1013.40" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (5 samples, 0.14%)</title><rect x="915.0" y="581" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="918.02" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (4 samples, 0.11%)</title><rect x="1018.1" y="629" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1021.06" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="916.3" y="485" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="919.29" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_create_storage(unsigned long) (12 samples, 0.32%)</title><rect x="1064.0" y="309" width="3.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1066.99" y="319.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.03%)</title><rect x="991.6" y="517" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="994.58" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c30&gt; (2 samples, 0.05%)</title><rect x="1022.8" y="597" width="0.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1025.84" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.14%)</title><rect x="1026.7" y="517" width="1.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1029.67" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015cd0&gt; (1 samples, 0.03%)</title><rect x="961.9" y="613" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="964.91" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1010.4" y="581" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1013.40" y="591.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af96b (2 samples, 0.05%)</title><rect x="78.9" y="725" width="0.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="81.91" y="735.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (2 samples, 0.05%)</title><rect x="1040.1" y="661" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1043.07" y="671.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af950 (1 samples, 0.03%)</title><rect x="75.1" y="725" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="78.08" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.08%)</title><rect x="1061.4" y="469" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1064.44" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.05%)</title><rect x="1018.7" y="485" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1021.69" y="495.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.08%)</title><rect x="981.7" y="517" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="984.69" y="527.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dda0&gt; (1 samples, 0.03%)</title><rect x="1144.4" y="709" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1147.38" y="719.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="111.1" y="549" width="0.7" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="114.12" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="988.4" y="517" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="991.39" y="527.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="967.3" y="549" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="970.33" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012a60&gt; (2 samples, 0.05%)</title><rect x="1043.6" y="613" width="0.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1046.58" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="1035.6" y="469" width="0.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1038.60" y="479.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (6 samples, 0.16%)</title><rect x="943.4" y="629" width="1.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="946.41" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Mesh_Pipeline&gt;::~shared_ptr() (2 samples, 0.05%)</title><rect x="1068.5" y="677" width="0.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1071.46" y="687.5" ></text>
</g>
<g >
<title>tc_malloc (1 samples, 0.03%)</title><rect x="1188.7" y="725" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.72" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1024.1" y="597" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1027.12" y="607.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;00000000001128d0&gt; (2 samples, 0.05%)</title><rect x="1187.4" y="725" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1190.45" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="979.8" y="565" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="982.78" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.08%)</title><rect x="946.6" y="613" width="1.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="949.60" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="946.3" y="613" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="949.28" y="623.5" ></text>
</g>
<g >
<title>0x4d554a202020201f (3 samples, 0.08%)</title><rect x="91.7" y="725" width="0.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="94.67" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.05%)</title><rect x="1068.5" y="149" width="0.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1071.46" y="159.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (59 samples, 1.60%)</title><rect x="505.4" y="613" width="18.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="508.41" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.03%)</title><rect x="1000.5" y="501" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1003.51" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.08%)</title><rect x="1018.4" y="565" width="0.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1021.38" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.03%)</title><rect x="1061.1" y="565" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1064.12" y="575.5" ></text>
</g>
<g >
<title>operator*(float const&amp;, Vec2d const&amp;)&lt;000000000007c9d0&gt; (1 samples, 0.03%)</title><rect x="886.9" y="613" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="889.95" y="623.5" ></text>
</g>
<g >
<title>Camera::buildViewMatrix()&lt;000000000005cd50&gt; (1 samples, 0.03%)</title><rect x="113.0" y="661" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="116.04" y="671.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000686c0&gt; (3 samples, 0.08%)</title><rect x="988.4" y="565" width="0.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="991.39" y="575.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;000000000008b550&gt; (55 samples, 1.49%)</title><rect x="1147.3" y="725" width="17.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1150.25" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.05%)</title><rect x="868.8" y="597" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="871.76" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="1015.5" y="501" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1018.50" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007dcf0&gt; (5 samples, 0.14%)</title><rect x="883.8" y="613" width="1.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="886.76" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="999.2" y="533" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1002.23" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.11%)</title><rect x="923.6" y="517" width="1.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="926.63" y="527.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000030530&gt; (8 samples, 0.22%)</title><rect x="110.5" y="677" width="2.5" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="113.49" y="687.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af97c (3 samples, 0.08%)</title><rect x="81.1" y="725" width="1.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="84.14" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="965.1" y="613" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="968.10" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="966.7" y="469" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="969.70" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (3 samples, 0.08%)</title><rect x="866.8" y="533" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="869.85" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(Vec2d const&amp;) (4 samples, 0.11%)</title><rect x="873.5" y="613" width="1.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="876.55" y="623.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (10 samples, 0.27%)</title><rect x="1014.9" y="565" width="3.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1017.87" y="575.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (57 samples, 1.54%)</title><rect x="151.0" y="613" width="18.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="154.00" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000062120&gt; (3 samples, 0.08%)</title><rect x="271.9" y="613" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="274.90" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (17 samples, 0.46%)</title><rect x="992.5" y="565" width="5.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="995.54" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="954.3" y="549" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="957.26" y="559.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, SDL_Color&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, std::allocator&lt;SDL_Color&gt;&amp;) (3 samples, 0.08%)</title><rect x="1063.0" y="325" width="1.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1066.04" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.03%)</title><rect x="107.9" y="613" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="110.93" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.03%)</title><rect x="990.0" y="533" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="992.98" y="543.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (15 samples, 0.41%)</title><rect x="1047.7" y="581" width="4.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1050.72" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="1019.3" y="661" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1022.33" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.05%)</title><rect x="1015.5" y="517" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1018.50" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider(char*, std::allocator&lt;char&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1068.1" y="533" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1071.14" y="543.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003cdc0&gt; (17 samples, 0.46%)</title><rect x="1062.7" y="613" width="5.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1065.72" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.08%)</title><rect x="1061.4" y="517" width="1.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1064.44" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.03%)</title><rect x="979.8" y="613" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="982.78" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (13 samples, 0.35%)</title><rect x="980.1" y="613" width="4.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="983.09" y="623.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007bb90&gt; (1 samples, 0.03%)</title><rect x="851.2" y="645" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="854.22" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="357" width="5.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1065.72" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.08%)</title><rect x="1018.4" y="533" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1021.38" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.08%)</title><rect x="1061.4" y="501" width="1.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1064.44" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (1 samples, 0.03%)</title><rect x="109.2" y="629" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="112.21" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="998.3" y="533" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1001.28" y="543.5" ></text>
</g>
<g >
<title>pthread_kill_other_threads_np@GLIBC_2.2.5&lt;000000000008e8b0&gt; (1 samples, 0.03%)</title><rect x="1164.8" y="725" width="0.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1167.80" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1010.1" y="517" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1013.08" y="527.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="109.2" y="661" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="112.21" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="947.2" y="549" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="950.24" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (53 samples, 1.43%)</title><rect x="909.3" y="629" width="16.9" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="912.28" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="1055.1" y="485" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1058.06" y="495.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (4 samples, 0.11%)</title><rect x="985.5" y="565" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="988.52" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="894.3" y="549" width="0.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="897.28" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (4 samples, 0.11%)</title><rect x="1007.8" y="501" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1010.85" y="511.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.05%)</title><rect x="619.9" y="597" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="622.94" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1044.5" y="581" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1047.53" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (6 samples, 0.16%)</title><rect x="1004.7" y="533" width="1.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1007.66" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator&lt; &lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1004.3" y="533" width="0.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1007.34" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="1016.1" y="533" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1019.14" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="869.1" y="565" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="872.08" y="575.5" ></text>
</g>
<g >
<title>Triangle::setTrianglePoint(int, Vec3d const&amp;)&lt;000000000007ba80&gt; (2 samples, 0.05%)</title><rect x="948.2" y="645" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="951.19" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.03%)</title><rect x="1026.0" y="613" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1029.03" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.03%)</title><rect x="890.1" y="581" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="893.14" y="591.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="12.2" y="709" width="0.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="15.23" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1016.8" y="485" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1019.78" y="495.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1001.1" y="565" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1004.15" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.08%)</title><rect x="1036.2" y="645" width="1.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1039.24" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (3 samples, 0.08%)</title><rect x="908.3" y="613" width="1.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="911.32" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="996.4" y="549" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="999.36" y="559.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005d850&gt; (252 samples, 6.81%)</title><rect x="855.4" y="645" width="80.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="858.36" y="655.5" >Clipper::..</text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (2 samples, 0.05%)</title><rect x="1068.5" y="373" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1071.46" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long)[inline] (1 samples, 0.03%)</title><rect x="933.8" y="565" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="936.84" y="575.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.03%)</title><rect x="1009.8" y="517" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1012.76" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base() (5 samples, 0.14%)</title><rect x="930.0" y="597" width="1.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="933.01" y="607.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.03%)</title><rect x="14.8" y="709" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="17.79" y="719.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (15 samples, 0.41%)</title><rect x="1047.7" y="613" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1050.72" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (13 samples, 0.35%)</title><rect x="980.1" y="533" width="4.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="983.09" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (2 samples, 0.05%)</title><rect x="991.9" y="549" width="0.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="994.90" y="559.5" ></text>
</g>
<g >
<title>0x00007f2e6a123fbc (1 samples, 0.03%)</title><rect x="83.1" y="725" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="86.05" y="735.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.05%)</title><rect x="969.6" y="565" width="0.6" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="972.57" y="575.5" ></text>
</g>
<g >
<title>free (2 samples, 0.05%)</title><rect x="852.2" y="581" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="855.17" y="591.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (6 samples, 0.16%)</title><rect x="169.2" y="613" width="1.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="172.18" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (2 samples, 0.05%)</title><rect x="963.2" y="629" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="966.19" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="986.5" y="533" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="989.47" y="543.5" ></text>
</g>
<g >
<title>TrianglePipeline::getTrianglePipeline()&lt;0000000000066a00&gt; (15 samples, 0.41%)</title><rect x="980.1" y="661" width="4.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="983.09" y="671.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007bd20&gt; (11 samples, 0.30%)</title><rect x="467.5" y="613" width="3.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="470.45" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="26.0" y="709" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="28.95" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt;[inline] (1 samples, 0.03%)</title><rect x="106.0" y="677" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="109.02" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="501" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1065.40" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="964.1" y="613" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="967.14" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="1059.8" y="501" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1062.85" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="994.8" y="533" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="997.77" y="543.5" ></text>
</g>
<g >
<title>write (2 samples, 0.05%)</title><rect x="91.0" y="709" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="94.03" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (5 samples, 0.14%)</title><rect x="896.2" y="597" width="1.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="899.20" y="607.5" ></text>
</g>
<g >
<title>XkbUpdateMapFromCore&lt;00000000000a52b0&gt; (1 samples, 0.03%)</title><rect x="104.1" y="725" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="107.11" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="1007.5" y="437" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1010.53" y="447.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1016.5" y="517" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1019.46" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.05%)</title><rect x="945.3" y="629" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="948.32" y="639.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af979 (1 samples, 0.03%)</title><rect x="80.8" y="725" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="83.82" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="916.3" y="453" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="919.29" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1042.0" y="629" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1044.98" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="597" width="5.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1065.72" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.08%)</title><rect x="1016.8" y="533" width="0.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1019.78" y="543.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1013.9" y="469" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1016.91" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.08%)</title><rect x="890.1" y="597" width="1.0" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="893.14" y="607.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="1001.1" y="549" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1004.15" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (3 samples, 0.08%)</title><rect x="1028.3" y="677" width="0.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1031.26" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="1003.4" y="501" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1006.38" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012a60&gt; (4 samples, 0.11%)</title><rect x="893.6" y="581" width="1.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="896.64" y="591.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;00000000000665e0&gt; (99 samples, 2.68%)</title><rect x="1029.2" y="677" width="31.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1032.22" y="687.5" >Tr..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1035.6" y="581" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1038.60" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (17 samples, 0.46%)</title><rect x="1062.7" y="421" width="5.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1065.72" y="431.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="850.9" y="613" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="853.90" y="623.5" ></text>
</g>
<g >
<title>OBJ::buildMesh(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000510b0&gt; (19 samples, 0.51%)</title><rect x="1062.4" y="645" width="6.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1065.40" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012a60&gt; (3 samples, 0.08%)</title><rect x="1022.8" y="613" width="1.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1025.84" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1040.4" y="581" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1043.39" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (5 samples, 0.14%)</title><rect x="1026.7" y="565" width="1.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1029.67" y="575.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt; (3,013 samples, 81.45%)</title><rect x="107.9" y="725" width="961.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="110.93" y="735.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt;</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="964.1" y="597" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="967.14" y="607.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af956 (2 samples, 0.05%)</title><rect x="76.4" y="725" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="79.35" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (15 samples, 0.41%)</title><rect x="1047.7" y="517" width="4.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1050.72" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (3 samples, 0.08%)</title><rect x="1061.4" y="565" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1064.44" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.05%)</title><rect x="953.9" y="581" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="956.94" y="591.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000063da0&gt; (2,319 samples, 62.69%)</title><rect x="113.7" y="661" width="739.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="116.68" y="671.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000063da0&gt;</text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (2 samples, 0.05%)</title><rect x="111.1" y="581" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="114.12" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (2 samples, 0.05%)</title><rect x="900.3" y="613" width="0.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="903.34" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6a6e3361 (1 samples, 0.03%)</title><rect x="85.3" y="725" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="88.29" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (16 samples, 0.43%)</title><rect x="1063.0" y="341" width="5.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1066.04" y="351.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;00000000001128d0&gt; (8 samples, 0.22%)</title><rect x="26.3" y="709" width="2.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="29.27" y="719.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private@@GLIBC_PRIVATE&lt;0000000000089670&gt; (23 samples, 0.62%)</title><rect x="1069.1" y="725" width="7.3" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1072.10" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (11 samples, 0.30%)</title><rect x="1042.3" y="661" width="3.5" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1045.30" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (3 samples, 0.08%)</title><rect x="1061.4" y="549" width="1.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1064.44" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (9 samples, 0.24%)</title><rect x="906.4" y="629" width="2.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="909.40" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1009.1" y="533" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1012.12" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (6 samples, 0.16%)</title><rect x="1026.4" y="613" width="1.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1029.35" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.08%)</title><rect x="1006.9" y="469" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1009.89" y="479.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (13 samples, 0.35%)</title><rect x="980.1" y="549" width="4.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="983.09" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000061770&gt; (1,107 samples, 29.93%)</title><rect x="483.1" y="629" width="353.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="486.08" y="639.5" >TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)..</text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (3 samples, 0.08%)</title><rect x="819.0" y="597" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="822.00" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000277c0&gt; (1 samples, 0.03%)</title><rect x="82.7" y="693" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="85.73" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="997.6" y="501" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1000.64" y="511.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a2&lt;false, SDL_Color const*, SDL_Color*&gt;(SDL_Color const*, SDL_Color const*, SDL_Color*) (1 samples, 0.03%)</title><rect x="1063.0" y="229" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1066.04" y="239.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.11%)</title><rect x="1037.2" y="645" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1040.20" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="965.4" y="629" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="968.42" y="639.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="1015.2" y="469" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1018.19" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.30%)</title><rect x="998.0" y="581" width="3.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1000.96" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.08%)</title><rect x="1061.4" y="533" width="1.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1064.44" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="975.6" y="645" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="978.63" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.03%)</title><rect x="1001.5" y="485" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1004.47" y="495.5" ></text>
</g>
<g >
<title>0x00007f2e6b34c575 (1 samples, 0.03%)</title><rect x="86.6" y="725" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="89.56" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="992.2" y="533" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="995.22" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.03%)</title><rect x="862.4" y="581" width="0.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="865.38" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="991.3" y="533" width="0.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="994.26" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.05%)</title><rect x="108.3" y="661" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="111.25" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.11%)</title><rect x="989.3" y="549" width="1.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="992.35" y="559.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (16 samples, 0.43%)</title><rect x="973.4" y="661" width="5.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="976.40" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;ITriangleRasterizer&gt;::~shared_ptr() (5 samples, 0.14%)</title><rect x="851.9" y="645" width="1.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="854.85" y="655.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;00000000000618b0&gt; (1,097 samples, 29.66%)</title><rect x="133.1" y="629" width="350.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="136.14" y="639.5" >TexturemapRasterizer::drawFlatBottomTri(Triangl..</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (4 samples, 0.11%)</title><rect x="964.5" y="645" width="1.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="967.46" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="935.4" y="437" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="938.43" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (7 samples, 0.19%)</title><rect x="1049.6" y="501" width="2.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1052.64" y="511.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.03%)</title><rect x="1144.1" y="725" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1147.06" y="735.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1043.6" y="581" width="0.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1046.58" y="591.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::lock()&lt;000000000005c8a0&gt; (1 samples, 0.03%)</title><rect x="973.1" y="661" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="976.08" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="869.7" y="629" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="872.72" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.19%)</title><rect x="1052.8" y="597" width="2.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1055.83" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1011.7" y="533" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1014.68" y="543.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*)[inline] (2 samples, 0.05%)</title><rect x="1068.5" y="277" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1071.46" y="287.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.08%)</title><rect x="999.6" y="517" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1002.55" y="527.5" ></text>
</g>
<g >
<title>0xf4627310000055a3 (1 samples, 0.03%)</title><rect x="94.5" y="725" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="97.54" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="1052.5" y="613" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1055.51" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="987.1" y="581" width="0.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="990.11" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (2 samples, 0.05%)</title><rect x="933.5" y="581" width="0.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="936.52" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (28 samples, 0.76%)</title><rect x="95.2" y="725" width="8.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="98.17" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1016.8" y="469" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1019.78" y="479.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="972.1" y="597" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="975.12" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.11%)</title><rect x="1016.8" y="549" width="1.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1019.78" y="559.5" ></text>
</g>
<g >
<title>write (3 samples, 0.08%)</title><rect x="91.7" y="709" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="94.67" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() const (1 samples, 0.03%)</title><rect x="970.5" y="613" width="0.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="973.52" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (18 samples, 0.49%)</title><rect x="1029.9" y="597" width="5.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1032.86" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.05%)</title><rect x="983.6" y="437" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="986.60" y="447.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (2 samples, 0.05%)</title><rect x="1035.6" y="549" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1038.60" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.05%)</title><rect x="1040.1" y="645" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1043.07" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (2 samples, 0.05%)</title><rect x="916.0" y="549" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="918.97" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string(int)&lt;00000000000236c0&gt; (1 samples, 0.03%)</title><rect x="110.8" y="645" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="113.81" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.03%)</title><rect x="894.9" y="581" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="897.92" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007e050&gt; (2 samples, 0.05%)</title><rect x="887.9" y="629" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="890.90" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (2 samples, 0.05%)</title><rect x="991.9" y="565" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="994.90" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;::_M_ptr() (1 samples, 0.03%)</title><rect x="108.6" y="597" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="111.57" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.14%)</title><rect x="1060.8" y="645" width="1.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1063.80" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;)[inline] (1 samples, 0.03%)</title><rect x="1062.4" y="453" width="0.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1065.40" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1068.1" y="597" width="0.4" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="1071.14" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.03%)</title><rect x="1040.4" y="613" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1043.39" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="894.9" y="549" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="897.92" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="961.3" y="629" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="964.27" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.05%)</title><rect x="1035.6" y="533" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1038.60" y="543.5" ></text>
</g>
<g >
<title>operator-(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007c920&gt; (1 samples, 0.03%)</title><rect x="850.6" y="629" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="853.58" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.14%)</title><rect x="982.6" y="501" width="1.6" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="985.65" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.03%)</title><rect x="107.0" y="725" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="109.98" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.08%)</title><rect x="999.6" y="533" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1002.55" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="581" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1071.46" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="850.6" y="613" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="853.58" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6a30e360 (1 samples, 0.03%)</title><rect x="83.7" y="725" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="86.69" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (3 samples, 0.08%)</title><rect x="971.2" y="613" width="0.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="974.16" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="229" width="0.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1071.46" y="239.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (3 samples, 0.08%)</title><rect x="979.1" y="661" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="982.14" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::allocate(std::allocator&lt;SDL_Color&gt;&amp;, unsigned long)[inline] (12 samples, 0.32%)</title><rect x="1064.0" y="277" width="3.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1066.99" y="287.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="869.4" y="629" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="872.40" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="1008.5" y="485" width="0.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1011.49" y="495.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::inPixelRange(int const&amp;, int const&amp;)&lt;000000000005ca40&gt; (12 samples, 0.32%)</title><rect x="815.2" y="597" width="3.8" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="818.17" y="607.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d930&gt; (2 samples, 0.05%)</title><rect x="963.2" y="645" width="0.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="966.19" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.03%)</title><rect x="106.0" y="709" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="109.02" y="719.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromTriangles(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;)&lt;00000000000668b0&gt; (4 samples, 0.11%)</title><rect x="1018.1" y="661" width="1.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1021.06" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (12 samples, 0.32%)</title><rect x="1036.2" y="661" width="3.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1039.24" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="1025.4" y="645" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1028.39" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1002.1" y="533" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1005.11" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_get_Tp_allocator() (1 samples, 0.03%)</title><rect x="913.4" y="597" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="916.42" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1002.4" y="533" width="0.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1005.42" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (2 samples, 0.05%)</title><rect x="105.7" y="725" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="108.70" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (7 samples, 0.19%)</title><rect x="1052.8" y="613" width="2.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1055.83" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="1001.5" y="549" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1004.47" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1001.1" y="485" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1004.15" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (8 samples, 0.22%)</title><rect x="888.9" y="629" width="2.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="891.86" y="639.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f3b0&gt; (8 samples, 0.22%)</title><rect x="107.9" y="677" width="2.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="110.93" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="869.1" y="533" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="872.08" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1055.1" y="565" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1058.06" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;SDL_Color&gt; const&amp;) (12 samples, 0.32%)</title><rect x="1064.0" y="325" width="3.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1066.99" y="335.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;000000000007e110&gt; (55 samples, 1.49%)</title><rect x="870.4" y="629" width="17.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="873.36" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="987.8" y="565" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="990.75" y="575.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (2 samples, 0.05%)</title><rect x="967.0" y="597" width="0.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="970.02" y="607.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ff0&gt; (1 samples, 0.03%)</title><rect x="94.9" y="709" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="97.86" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (4 samples, 0.11%)</title><rect x="965.7" y="517" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="968.74" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::_M_seq() const (1 samples, 0.03%)</title><rect x="1062.7" y="325" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1065.72" y="335.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;)[inline] (17 samples, 0.46%)</title><rect x="1062.7" y="517" width="5.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1065.72" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="517" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1065.40" y="527.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="923.0" y="517" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="925.99" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangleInitializer(Triangle&amp;)&lt;0000000000061a30&gt; (1 samples, 0.03%)</title><rect x="637.2" y="613" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="640.16" y="623.5" ></text>
</g>
<g >
<title>0x217379654b207941 (12 samples, 0.32%)</title><rect x="87.2" y="725" width="3.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="90.20" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (1 samples, 0.03%)</title><rect x="1014.9" y="485" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1017.87" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="972.1" y="629" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="975.12" y="639.5" ></text>
</g>
<g >
<title>operator+(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007c870&gt; (1 samples, 0.03%)</title><rect x="851.5" y="645" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="854.54" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000027940&gt; (1 samples, 0.03%)</title><rect x="82.7" y="709" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="85.73" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="1001.1" y="469" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1004.15" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.03%)</title><rect x="997.6" y="485" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1000.64" y="495.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.08%)</title><rect x="1057.9" y="581" width="1.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1060.93" y="591.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (3 samples, 0.08%)</title><rect x="270.9" y="597" width="1.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="273.95" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.08%)</title><rect x="1006.9" y="485" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1009.89" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.05%)</title><rect x="1068.5" y="613" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1071.46" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1017.7" y="517" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1020.74" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (3 samples, 0.08%)</title><rect x="1054.1" y="453" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1057.10" y="463.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007bd20&gt; (1 samples, 0.03%)</title><rect x="978.5" y="661" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="981.50" y="671.5" ></text>
</g>
<g >
<title>0x525453202020201f (3 samples, 0.08%)</title><rect x="92.9" y="725" width="1.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="95.94" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (3 samples, 0.08%)</title><rect x="950.1" y="613" width="1.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="953.11" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (6 samples, 0.16%)</title><rect x="1033.0" y="453" width="2.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1036.05" y="463.5" ></text>
</g>
<g >
<title>_XOpenLC&lt;000000000005cd20&gt; (1 samples, 0.03%)</title><rect x="14.1" y="709" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.15" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="969.6" y="549" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="972.57" y="559.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1009.4" y="517" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1012.44" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;)[inline] (2 samples, 0.05%)</title><rect x="1068.5" y="197" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1071.46" y="207.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (18 samples, 0.49%)</title><rect x="1029.9" y="581" width="5.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1032.86" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (5 samples, 0.14%)</title><rect x="1026.7" y="597" width="1.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1029.67" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="947.9" y="597" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="950.88" y="607.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a380&gt; (2 samples, 0.05%)</title><rect x="883.1" y="565" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="886.12" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="1013.0" y="501" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1015.95" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007dcf0&gt; (1 samples, 0.03%)</title><rect x="885.7" y="597" width="0.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="888.67" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.03%)</title><rect x="963.8" y="629" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="966.83" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.08%)</title><rect x="934.8" y="501" width="1.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="937.80" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1186.8" y="725" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1189.81" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (2 samples, 0.05%)</title><rect x="909.9" y="597" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="912.91" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base()&lt;00000000000167a0&gt; (3 samples, 0.08%)</title><rect x="971.2" y="597" width="0.9" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="974.16" y="607.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.05%)</title><rect x="1017.1" y="517" width="0.6" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1020.10" y="527.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (104 samples, 2.81%)</title><rect x="984.9" y="629" width="33.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="987.88" y="639.5" >vo..</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="873.2" y="597" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="876.23" y="607.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af95f (2 samples, 0.05%)</title><rect x="77.6" y="725" width="0.7" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="80.63" y="735.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007bd20&gt; (19 samples, 0.51%)</title><rect x="405.9" y="597" width="6.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="408.89" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.05%)</title><rect x="862.1" y="613" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="865.06" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1055.1" y="501" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1058.06" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.08%)</title><rect x="934.8" y="517" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="937.80" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.11%)</title><rect x="1038.5" y="613" width="1.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1041.47" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (4 samples, 0.11%)</title><rect x="12.9" y="709" width="1.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="15.87" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="1049.0" y="501" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1052.00" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (1 samples, 0.03%)</title><rect x="1011.7" y="485" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1014.68" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (4 samples, 0.11%)</title><rect x="965.7" y="581" width="1.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="968.74" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.05%)</title><rect x="868.8" y="581" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="871.76" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="989.0" y="501" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="992.03" y="511.5" ></text>
</g>
<g >
<title>0x0264b00100000026 (1 samples, 0.03%)</title><rect x="86.9" y="725" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="89.88" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.11%)</title><rect x="985.5" y="549" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="988.52" y="559.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1001.5" y="581" width="0.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1004.47" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;) (2 samples, 0.05%)</title><rect x="859.5" y="613" width="0.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="862.51" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="891.1" y="613" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="894.09" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="901.0" y="613" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="903.98" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.16%)</title><rect x="976.6" y="613" width="1.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="979.59" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6b34c0c9 (1 samples, 0.03%)</title><rect x="85.9" y="725" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="88.92" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1068.5" y="405" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1071.46" y="415.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)[inline] (1 samples, 0.03%)</title><rect x="1068.1" y="565" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1071.14" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.03%)</title><rect x="1035.0" y="533" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1037.96" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="920.4" y="565" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="923.44" y="575.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.05%)</title><rect x="907.7" y="565" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="910.68" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.08%)</title><rect x="953.6" y="629" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="956.62" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (2 samples, 0.05%)</title><rect x="1022.2" y="613" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1025.20" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.05%)</title><rect x="1035.6" y="597" width="0.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1038.60" y="607.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469b0&gt; (4 samples, 0.11%)</title><rect x="481.8" y="613" width="1.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="484.81" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="998.3" y="549" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1001.28" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.05%)</title><rect x="924.3" y="453" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="927.27" y="463.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.11%)</title><rect x="942.1" y="629" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="945.13" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;::_Node_iterator(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, true&gt;*) (1 samples, 0.03%)</title><rect x="108.3" y="581" width="0.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="111.25" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (2 samples, 0.05%)</title><rect x="105.1" y="725" width="0.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="108.06" y="735.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (10 samples, 0.27%)</title><rect x="829.5" y="613" width="3.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="832.52" y="623.5" ></text>
</g>
<g >
<title>XFreeModifiermap&lt;0000000000028880&gt; (1 samples, 0.03%)</title><rect x="14.5" y="709" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="17.47" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1001.1" y="517" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1004.15" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.05%)</title><rect x="953.9" y="597" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="956.94" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1010.4" y="565" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1013.40" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="924.3" y="501" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="927.27" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (12 samples, 0.32%)</title><rect x="926.2" y="613" width="3.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="929.18" y="623.5" ></text>
</g>
<g >
<title>__lll_lock_wake_private@@GLIBC_PRIVATE&lt;0000000000089730&gt; (17 samples, 0.46%)</title><rect x="1076.4" y="725" width="5.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1079.43" y="735.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="485" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1065.40" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="961.9" y="629" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="964.91" y="639.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a380&gt; (1 samples, 0.03%)</title><rect x="885.7" y="565" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="888.67" y="575.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="901.3" y="629" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="904.30" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007dc90&gt; (1 samples, 0.03%)</title><rect x="885.7" y="581" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="888.67" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.08%)</title><rect x="969.2" y="597" width="1.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="972.25" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (2 samples, 0.05%)</title><rect x="878.3" y="597" width="0.7" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="881.33" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator++() (1 samples, 0.03%)</title><rect x="1018.1" y="565" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1021.06" y="575.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (19 samples, 0.51%)</title><rect x="1062.4" y="661" width="6.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1065.40" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c30&gt; (3 samples, 0.08%)</title><rect x="894.0" y="565" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="896.96" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (2 samples, 0.05%)</title><rect x="111.1" y="565" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="114.12" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.05%)</title><rect x="1068.5" y="357" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1071.46" y="367.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~_Vector_base() (2 samples, 0.05%)</title><rect x="1068.5" y="101" width="0.6" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1071.46" y="111.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="894.9" y="565" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="897.92" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="962.5" y="629" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="965.55" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.05%)</title><rect x="1041.3" y="629" width="0.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1044.34" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.05%)</title><rect x="964.8" y="629" width="0.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="967.78" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="1015.2" y="517" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1018.19" y="527.5" ></text>
</g>
<g >
<title>Triangle::setUVPoint(int, Vec2d const&amp;)&lt;000000000007bac0&gt; (2 samples, 0.05%)</title><rect x="948.8" y="645" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="951.83" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (15 samples, 0.41%)</title><rect x="980.1" y="629" width="4.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="983.09" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007dc90&gt; (5 samples, 0.14%)</title><rect x="959.7" y="629" width="1.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="962.68" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::unordered_map(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="112.7" y="645" width="0.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="115.72" y="655.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;0000000000010060&gt; (1 samples, 0.03%)</title><rect x="1014.9" y="453" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1017.87" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.05%)</title><rect x="1068.5" y="629" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1071.46" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="533" width="5.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1065.72" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.11%)</title><rect x="996.7" y="533" width="1.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="999.68" y="543.5" ></text>
</g>
<g >
<title>write (1 samples, 0.03%)</title><rect x="94.2" y="709" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="97.22" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="533" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1065.40" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="966.1" y="485" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="969.06" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015cd0&gt; (2 samples, 0.05%)</title><rect x="896.5" y="581" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="899.52" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (2 samples, 0.05%)</title><rect x="861.4" y="613" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="864.42" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (8 samples, 0.22%)</title><rect x="865.3" y="597" width="2.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="868.25" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (2 samples, 0.05%)</title><rect x="909.9" y="581" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="912.91" y="591.5" ></text>
</g>
<g >
<title>free (1 samples, 0.03%)</title><rect x="933.8" y="549" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="936.84" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.05%)</title><rect x="958.7" y="629" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="961.72" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061ff0&gt; (210 samples, 5.68%)</title><rect x="345.0" y="613" width="66.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="347.96" y="623.5" >Texture..</text>
</g>
<g >
<title>TexturemapRasterizer::drawFB_Scanline_prep(Triangle&amp;)&lt;0000000000062260&gt; (27 samples, 0.73%)</title><rect x="263.3" y="613" width="8.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="266.29" y="623.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.03%)</title><rect x="905.8" y="565" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="908.77" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="117" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1071.46" y="127.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000027560&gt; (1 samples, 0.03%)</title><rect x="82.7" y="661" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="85.73" y="671.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.03%)</title><rect x="1188.4" y="725" width="0.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1191.40" y="735.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af968 (1 samples, 0.03%)</title><rect x="78.6" y="725" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="81.59" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (3 samples, 0.08%)</title><rect x="916.6" y="581" width="1.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="919.61" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (1 samples, 0.03%)</title><rect x="1002.1" y="501" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1005.11" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.05%)</title><rect x="1005.9" y="437" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1008.93" y="447.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (2 samples, 0.05%)</title><rect x="916.0" y="517" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="918.97" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (6 samples, 0.16%)</title><rect x="1053.1" y="533" width="2.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1056.15" y="543.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.03%)</title><rect x="870.0" y="629" width="0.4" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="873.04" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;00000000000620c0&gt; (188 samples, 5.08%)</title><rect x="760.0" y="613" width="60.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="762.98" y="623.5" >Textur..</text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (15 samples, 0.41%)</title><rect x="1055.4" y="613" width="4.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1058.38" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000027760&gt; (11 samples, 0.30%)</title><rect x="1064.3" y="213" width="3.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1067.31" y="223.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (2 samples, 0.05%)</title><rect x="1063.4" y="261" width="0.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1066.35" y="271.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (6 samples, 0.16%)</title><rect x="965.7" y="645" width="2.0" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="968.74" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (46 samples, 1.24%)</title><rect x="1046.1" y="661" width="14.7" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1049.13" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (18 samples, 0.49%)</title><rect x="1029.9" y="629" width="5.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1032.86" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.03%)</title><rect x="964.1" y="581" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="967.14" y="591.5" ></text>
</g>
<g >
<title>pthread_sigmask@@GLIBC_2.32 (1 samples, 0.03%)</title><rect x="1187.1" y="725" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1190.13" y="735.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (3 samples, 0.08%)</title><rect x="953.6" y="645" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="956.62" y="655.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005b5a0&gt; (18 samples, 0.49%)</title><rect x="1029.9" y="661" width="5.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1032.86" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="946.3" y="629" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="949.28" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="108.9" y="661" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="111.89" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="963.8" y="613" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="966.83" y="623.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (5 samples, 0.14%)</title><rect x="985.2" y="581" width="1.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="988.20" y="591.5" ></text>
</g>
<g >
<title>0x00007f2e6b24e090 (1 samples, 0.03%)</title><rect x="85.6" y="725" width="0.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="88.60" y="735.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.05%)</title><rect x="916.0" y="565" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="918.97" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="967.0" y="581" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="970.02" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.05%)</title><rect x="1068.5" y="389" width="0.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1071.46" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1001.1" y="501" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1004.15" y="511.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="1144.7" y="725" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1147.70" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000277c0&gt; (1 samples, 0.03%)</title><rect x="1064.0" y="245" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1066.99" y="255.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::unordered_map(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (2 samples, 0.05%)</title><rect x="112.4" y="661" width="0.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="115.40" y="671.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (41 samples, 1.11%)</title><rect x="984.9" y="613" width="13.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="987.88" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000dd610&gt; (1 samples, 0.03%)</title><rect x="11.3" y="709" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="14.28" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;::_M_addr() (1 samples, 0.03%)</title><rect x="108.6" y="581" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="111.57" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000277c0&gt; (11 samples, 0.30%)</title><rect x="1064.3" y="229" width="3.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1067.31" y="239.5" ></text>
</g>
<g >
<title>write (1 samples, 0.03%)</title><rect x="93.9" y="709" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="96.90" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.08%)</title><rect x="954.6" y="645" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="957.57" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="1014.2" y="501" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1017.23" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (4 samples, 0.11%)</title><rect x="977.2" y="565" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="980.22" y="575.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;00000000000100a0&gt; (1 samples, 0.03%)</title><rect x="1023.5" y="597" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1026.48" y="607.5" ></text>
</g>
<g >
<title>Camera::getCameraPos()&lt;000000000005d190&gt; (1 samples, 0.03%)</title><rect x="113.4" y="661" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="116.36" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (6 samples, 0.16%)</title><rect x="1033.0" y="469" width="2.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1036.05" y="479.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (1 samples, 0.03%)</title><rect x="1055.1" y="613" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1058.06" y="623.5" ></text>
</g>
<g >
<title>0x564f4d202020201f (1 samples, 0.03%)</title><rect x="94.2" y="725" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="97.22" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.16%)</title><rect x="1050.0" y="469" width="1.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1052.96" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.08%)</title><rect x="988.4" y="533" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="991.39" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.05%)</title><rect x="1068.5" y="293" width="0.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1071.46" y="303.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.05%)</title><rect x="1003.7" y="549" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1006.70" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.08%)</title><rect x="1050.9" y="453" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1053.91" y="463.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (15 samples, 0.41%)</title><rect x="1055.4" y="629" width="4.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1058.38" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (5 samples, 0.14%)</title><rect x="955.5" y="645" width="1.6" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="958.53" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="878.0" y="597" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="881.01" y="607.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af980 (2 samples, 0.05%)</title><rect x="82.1" y="725" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="85.10" y="735.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;0000000000110470&gt; (142 samples, 3.84%)</title><rect x="28.8" y="709" width="45.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="31.82" y="719.5" >writ..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (10 samples, 0.27%)</title><rect x="1042.6" y="645" width="3.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1045.62" y="655.5" ></text>
</g>
<g >
<title>__nptl_death_event@@GLIBC_PRIVATE&lt;00000000000893f0&gt; (195 samples, 5.27%)</title><rect x="1081.9" y="725" width="62.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1084.86" y="735.5" >__nptl..</text>
</g>
<g >
<title>TexturemapRasterizer::drawFT_Scanline_prep(Triangle&amp;)&lt;0000000000061c50&gt; (19 samples, 0.51%)</title><rect x="631.1" y="613" width="6.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="634.10" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (3 samples, 0.08%)</title><rect x="1050.9" y="421" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1053.91" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.16%)</title><rect x="976.6" y="629" width="1.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="979.59" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (1 samples, 0.03%)</title><rect x="1046.8" y="629" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1049.77" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (18 samples, 0.49%)</title><rect x="1029.9" y="613" width="5.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1032.86" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="862.4" y="597" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="865.38" y="607.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;)&lt;000000000007d880&gt; (1 samples, 0.03%)</title><rect x="962.9" y="645" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="965.87" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1011.7" y="517" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1014.68" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::NewLocked(unsigned long, tcmalloc::PageHeap::LockingContext*)&lt;0000000000025ca0&gt; (1 samples, 0.03%)</title><rect x="1067.5" y="165" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1070.50" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1001.1" y="453" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1004.15" y="463.5" ></text>
</g>
<g >
<title>free (1 samples, 0.03%)</title><rect x="1060.8" y="613" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1063.80" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="987.1" y="549" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="990.11" y="559.5" ></text>
</g>
<g >
<title>TexturePNG::~TexturePNG()&lt;000000000003d8d0&gt; (2 samples, 0.05%)</title><rect x="1068.5" y="245" width="0.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1071.46" y="255.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="967.3" y="565" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="970.33" y="575.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (24 samples, 0.65%)</title><rect x="1047.7" y="629" width="7.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1050.72" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1003.4" y="533" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1006.38" y="543.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;000000000007dd60&gt; (7 samples, 0.19%)</title><rect x="957.1" y="645" width="2.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="960.13" y="655.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d930&gt; (3 samples, 0.08%)</title><rect x="952.7" y="629" width="0.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="955.66" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (10 samples, 0.27%)</title><rect x="992.9" y="549" width="3.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="995.85" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="109.8" y="629" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="112.85" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (10 samples, 0.27%)</title><rect x="892.0" y="629" width="3.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="895.05" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007dcf0&gt; (12 samples, 0.32%)</title><rect x="879.9" y="597" width="3.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="882.93" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1024.1" y="581" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1027.12" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1005.9" y="485" width="0.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1008.93" y="495.5" ></text>
</g>
<g >
<title>_XrmInternalStringToQuark&lt;00000000000349a0&gt; (1 samples, 0.03%)</title><rect x="15.4" y="709" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="18.42" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1026.4" y="597" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1029.35" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Renderer, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.03%)</title><rect x="111.8" y="613" width="0.3" height="15.0" fill="rgb(235,142,33)" rx="2" ry="2" />
<text  x="114.76" y="623.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1016.5" y="533" width="0.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1019.46" y="543.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007bb90&gt; (3 samples, 0.08%)</title><rect x="946.6" y="645" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="949.60" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++(int) (1 samples, 0.03%)</title><rect x="107.9" y="645" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="110.93" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="966.7" y="485" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="969.70" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (10 samples, 0.27%)</title><rect x="892.0" y="597" width="3.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="895.05" y="607.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ff0&gt; (1 samples, 0.03%)</title><rect x="104.7" y="725" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="107.74" y="735.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1032.4" y="501" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1035.41" y="511.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (2 samples, 0.05%)</title><rect x="967.0" y="613" width="0.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="970.02" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1009.1" y="517" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1012.12" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.05%)</title><rect x="924.3" y="469" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="927.27" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="112.7" y="629" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="115.72" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="961.3" y="645" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="964.27" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e800&gt; (1 samples, 0.03%)</title><rect x="1045.8" y="661" width="0.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1048.81" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() const (1 samples, 0.03%)</title><rect x="984.2" y="613" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="987.24" y="623.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000052980&gt; (18 samples, 0.49%)</title><rect x="1062.4" y="629" width="5.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1065.40" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="453" width="0.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1071.46" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1013.9" y="517" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1016.91" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (9 samples, 0.24%)</title><rect x="927.1" y="581" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="930.14" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (3 samples, 0.08%)</title><rect x="971.2" y="629" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="974.16" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="549" width="5.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1065.72" y="559.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464e0&gt; (328 samples, 8.87%)</title><rect x="526.5" y="613" width="104.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="529.47" y="623.5" >TexturePNG::..</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="972.4" y="645" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="975.44" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="851.2" y="613" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="854.22" y="623.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;0000000000010060&gt; (1 samples, 0.03%)</title><rect x="1011.7" y="469" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1014.68" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1059.5" y="549" width="0.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1062.53" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.05%)</title><rect x="1023.8" y="613" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1026.80" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1063.7" y="229" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1066.67" y="239.5" ></text>
</g>
<g >
<title>Triangle::getTriangleZCenter()&lt;000000000007c2a0&gt; (1 samples, 0.03%)</title><rect x="996.0" y="549" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="999.04" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1041.7" y="613" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1044.66" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="873.2" y="581" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="876.23" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (3 samples, 0.08%)</title><rect x="934.8" y="533" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="937.80" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="987.1" y="565" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="990.11" y="575.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007bbd0&gt; (12 samples, 0.32%)</title><rect x="844.8" y="629" width="3.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="847.84" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.08%)</title><rect x="999.6" y="501" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1002.55" y="511.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.05%)</title><rect x="466.8" y="597" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="469.82" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;0000000000026770&gt; (3 samples, 0.08%)</title><rect x="1018.4" y="549" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1021.38" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.05%)</title><rect x="967.7" y="597" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="970.65" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="972.1" y="581" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="975.12" y="591.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;00000000000620c0&gt; (174 samples, 4.70%)</title><rect x="411.9" y="613" width="55.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="414.95" y="623.5" >Textu..</text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="11.6" y="709" width="0.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="14.60" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="1031.1" y="517" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1034.14" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="990.3" y="533" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="993.30" y="543.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000686c0&gt; (1 samples, 0.03%)</title><rect x="873.2" y="613" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="876.23" y="623.5" ></text>
</g>
<g >
<title>0x00000001000009cc (13 samples, 0.35%)</title><rect x="10.0" y="725" width="4.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.03%)</title><rect x="1014.9" y="517" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1017.87" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.05%)</title><rect x="1060.2" y="645" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1063.16" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.03%)</title><rect x="1015.2" y="485" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1018.19" y="495.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (5 samples, 0.14%)</title><rect x="932.9" y="597" width="1.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="935.88" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.08%)</title><rect x="988.4" y="549" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="991.39" y="559.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5&lt;00000000000a78b0&gt; (1 samples, 0.03%)</title><rect x="74.4" y="709" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="77.44" y="719.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (2 samples, 0.05%)</title><rect x="1068.5" y="693" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1071.46" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="1055.1" y="517" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1058.06" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (8 samples, 0.22%)</title><rect x="865.3" y="613" width="2.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="868.25" y="623.5" ></text>
</g>
<g >
<title>0x00007f2e6a6d8d18 (1 samples, 0.03%)</title><rect x="85.0" y="725" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="87.97" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="919.8" y="581" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="922.80" y="591.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007c150&gt; (2 samples, 0.05%)</title><rect x="872.3" y="613" width="0.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="875.27" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (13 samples, 0.35%)</title><rect x="980.1" y="581" width="4.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="983.09" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="945.6" y="613" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="948.64" y="623.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1014.2" y="533" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1017.23" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.05%)</title><rect x="1000.5" y="517" width="0.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1003.51" y="527.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;0000000000051700&gt; (1 samples, 0.03%)</title><rect x="1068.1" y="629" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1071.14" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (15 samples, 0.41%)</title><rect x="1030.2" y="533" width="4.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1033.18" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.03%)</title><rect x="844.2" y="613" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="847.20" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1040.7" y="661" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1043.71" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (5 samples, 0.14%)</title><rect x="1019.7" y="661" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1022.65" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000dd700&gt; (2 samples, 0.05%)</title><rect x="10.0" y="709" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (2 samples, 0.05%)</title><rect x="1068.5" y="213" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1071.46" y="223.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (21 samples, 0.57%)</title><rect x="620.6" y="597" width="6.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="623.58" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1010.7" y="517" width="0.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1013.72" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.05%)</title><rect x="1035.6" y="613" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1038.60" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1016.8" y="501" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1019.78" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::_Safe_vector(__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1062.7" y="341" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1065.72" y="351.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (39 samples, 1.05%)</title><rect x="1047.7" y="645" width="12.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1050.72" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1068.1" y="549" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1071.14" y="559.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (12 samples, 0.32%)</title><rect x="1064.0" y="261" width="3.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1066.99" y="271.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="987.4" y="501" width="0.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="990.43" y="511.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (1 samples, 0.03%)</title><rect x="850.3" y="629" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="853.26" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (2 samples, 0.05%)</title><rect x="967.7" y="613" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="970.65" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="956.8" y="629" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="959.81" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.08%)</title><rect x="1038.8" y="581" width="0.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1041.79" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1013.6" y="501" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1016.59" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.11%)</title><rect x="1014.9" y="533" width="1.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1017.87" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000027760&gt; (1 samples, 0.03%)</title><rect x="82.7" y="677" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="85.73" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="15.7" y="709" width="0.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="18.74" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.05%)</title><rect x="1044.2" y="613" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1047.21" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000062170&gt; (37 samples, 1.00%)</title><rect x="637.8" y="613" width="11.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="640.80" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (18 samples, 0.49%)</title><rect x="1029.9" y="645" width="5.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1032.86" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="851.2" y="629" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="854.22" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.08%)</title><rect x="1063.0" y="309" width="1.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1066.04" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="994.8" y="517" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="997.77" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.05%)</title><rect x="1000.5" y="549" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1003.51" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh&gt;(Mesh*) (2 samples, 0.05%)</title><rect x="1068.5" y="501" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1071.46" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.05%)</title><rect x="1068.5" y="325" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1071.46" y="335.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.11%)</title><rect x="860.1" y="613" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="863.15" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (2 samples, 0.05%)</title><rect x="1046.4" y="645" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1049.45" y="655.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000022870&gt; (19 samples, 0.51%)</title><rect x="1062.4" y="693" width="6.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1065.40" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1055.1" y="533" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1058.06" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (10 samples, 0.27%)</title><rect x="892.0" y="613" width="3.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="895.05" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.05%)</title><rect x="982.0" y="501" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="985.01" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (2 samples, 0.05%)</title><rect x="995.4" y="517" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="998.41" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a90&gt; (2 samples, 0.05%)</title><rect x="987.1" y="517" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="990.11" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="844.5" y="581" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="847.52" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.08%)</title><rect x="1054.1" y="469" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1057.10" y="479.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.03%)</title><rect x="1144.7" y="709" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1147.70" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="962.5" y="613" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="965.55" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.03%)</title><rect x="1024.4" y="613" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1027.44" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="964.1" y="629" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="967.14" y="639.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000543f0&gt; (2 samples, 0.05%)</title><rect x="1035.6" y="661" width="0.6" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1038.60" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.03%)</title><rect x="868.4" y="597" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="871.44" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.03%)</title><rect x="1005.6" y="517" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1008.62" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (1 samples, 0.03%)</title><rect x="934.2" y="581" width="0.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="937.16" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="998.0" y="565" width="0.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1000.96" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;::_M_v() (1 samples, 0.03%)</title><rect x="108.6" y="629" width="0.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="111.57" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;::operator*() const (1 samples, 0.03%)</title><rect x="108.6" y="645" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="111.57" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.05%)</title><rect x="1068.5" y="437" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1071.46" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::NewWithSizeClass(unsigned long, unsigned int)&lt;0000000000027480&gt; (1 samples, 0.03%)</title><rect x="1067.5" y="181" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1070.50" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c30&gt; (2 samples, 0.05%)</title><rect x="1043.6" y="597" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1046.58" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (7 samples, 0.19%)</title><rect x="1032.7" y="501" width="2.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1035.73" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="979.8" y="629" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="982.78" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.03%)</title><rect x="1026.0" y="597" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1029.03" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="864.0" y="613" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="866.98" y="623.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;00000000000643e0&gt; (374 samples, 10.11%)</title><rect x="853.4" y="661" width="119.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="856.45" y="671.5" >Renderer::proj..</text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007db40&gt; (1 samples, 0.03%)</title><rect x="885.4" y="597" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="888.35" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.08%)</title><rect x="921.7" y="533" width="1.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="924.72" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (2 samples, 0.05%)</title><rect x="106.3" y="725" width="0.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="109.34" y="735.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (6 samples, 0.16%)</title><rect x="1012.3" y="533" width="1.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1015.31" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="878.7" y="581" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="881.65" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.03%)</title><rect x="945.6" y="597" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="948.64" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_can_compare(__gnu_debug::_Safe_iterator_base const&amp;) const&lt;00000000000dd910&gt; (1 samples, 0.03%)</title><rect x="897.8" y="629" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="900.79" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.05%)</title><rect x="988.7" y="517" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="991.71" y="527.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (37 samples, 1.00%)</title><rect x="913.7" y="597" width="11.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="916.74" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.11%)</title><rect x="965.7" y="501" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="968.74" y="511.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (15 samples, 0.41%)</title><rect x="1047.7" y="549" width="4.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1050.72" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="109.8" y="613" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="112.85" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (7 samples, 0.19%)</title><rect x="1052.8" y="565" width="2.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1055.83" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (9 samples, 0.24%)</title><rect x="927.1" y="597" width="2.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="930.14" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.11%)</title><rect x="1058.9" y="565" width="1.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1061.89" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_single_threaded()[inline] (1 samples, 0.03%)</title><rect x="1001.5" y="437" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1004.47" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.14%)</title><rect x="1053.5" y="501" width="1.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1056.47" y="511.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.03%)</title><rect x="110.8" y="629" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="113.81" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1026.0" y="645" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1029.03" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (14 samples, 0.38%)</title><rect x="901.6" y="629" width="4.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="904.62" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="935.4" y="453" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="938.43" y="463.5" ></text>
</g>
<g >
<title>Mat4x4::matrixLookAt(Mat4x4&amp;)&lt;0000000000070aa0&gt; (1 samples, 0.03%)</title><rect x="113.0" y="645" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="116.04" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="861.1" y="597" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="864.11" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (3 samples, 0.08%)</title><rect x="995.1" y="533" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="998.09" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.05%)</title><rect x="1003.1" y="549" width="0.6" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1006.06" y="559.5" ></text>
</g>
<g >
<title>0x000055a4e2269fff (182 samples, 4.92%)</title><rect x="16.1" y="725" width="58.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="19.06" y="735.5" >0x0000..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (1 samples, 0.03%)</title><rect x="1052.5" y="597" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1055.51" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.03%)</title><rect x="1026.0" y="581" width="0.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1029.03" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.08%)</title><rect x="1061.4" y="453" width="1.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1064.44" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (2 samples, 0.05%)</title><rect x="893.0" y="581" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="896.01" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="1008.8" y="469" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1011.81" y="479.5" ></text>
</g>
<g >
<title>0x00007f2e6a0c0bb5 (1 samples, 0.03%)</title><rect x="82.7" y="725" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="85.73" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TrianglePipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.14%)</title><rect x="1060.8" y="661" width="1.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1063.80" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.05%)</title><rect x="946.0" y="645" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="948.96" y="655.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1062.4" y="613" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1065.40" y="623.5" ></text>
</g>
<g >
<title>llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&amp;, void*&amp;, llvm::FoldingSetBase::FoldingSetInfo const&amp;)@@LLVM_16&lt;0000000000d27830&gt; (1 samples, 0.03%)</title><rect x="94.5" y="693" width="0.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="97.54" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1013.9" y="501" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1016.91" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (6 samples, 0.16%)</title><rect x="1026.4" y="629" width="1.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1029.35" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (6 samples, 0.16%)</title><rect x="1026.4" y="661" width="1.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1029.35" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1013.9" y="485" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1016.91" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.08%)</title><rect x="1061.4" y="437" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1064.44" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.03%)</title><rect x="972.4" y="613" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="975.44" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000062170&gt; (3 samples, 0.08%)</title><rect x="836.2" y="629" width="1.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="839.22" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.03%)</title><rect x="989.0" y="469" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="992.03" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.05%)</title><rect x="953.9" y="613" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="956.94" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.03%)</title><rect x="889.8" y="597" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="892.82" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.03%)</title><rect x="964.5" y="629" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="967.46" y="639.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1010.1" y="565" width="0.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1013.08" y="575.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d930&gt; (1 samples, 0.03%)</title><rect x="850.9" y="629" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="853.90" y="639.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469d0&gt; (2 samples, 0.05%)</title><rect x="627.3" y="597" width="0.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="630.27" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::operator-(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006a550&gt; (1 samples, 0.03%)</title><rect x="1017.7" y="533" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1020.74" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (4 samples, 0.11%)</title><rect x="996.7" y="517" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="999.68" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="1045.8" y="629" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1048.81" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1026.0" y="661" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1029.03" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (17 samples, 0.46%)</title><rect x="1062.7" y="581" width="5.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1065.72" y="591.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007a380&gt; (2 samples, 0.05%)</title><rect x="884.7" y="581" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="887.71" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="947.2" y="581" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="950.24" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="994.4" y="517" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="997.45" y="527.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (4 samples, 0.11%)</title><rect x="965.7" y="565" width="1.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="968.74" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1003.4" y="517" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1006.38" y="527.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469d0&gt; (1 samples, 0.03%)</title><rect x="832.7" y="613" width="0.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="835.71" y="623.5" ></text>
</g>
<g >
<title>all (3,699 samples, 100%)</title><rect x="10.0" y="741" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061ff0&gt; (9 samples, 0.24%)</title><rect x="837.2" y="629" width="2.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="840.18" y="639.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;0000000000010060&gt; (1 samples, 0.03%)</title><rect x="108.9" y="629" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="111.89" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="1010.7" y="485" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1013.72" y="495.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1022.2" y="581" width="0.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1025.20" y="591.5" ></text>
</g>
<g >
<title>0x000055a4e3debb1f (1 samples, 0.03%)</title><rect x="74.4" y="725" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="77.44" y="735.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (13 samples, 0.35%)</title><rect x="980.1" y="565" width="4.1" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="983.09" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (4 samples, 0.11%)</title><rect x="1061.1" y="581" width="1.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1064.12" y="591.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469b0&gt; (10 samples, 0.27%)</title><rect x="833.0" y="613" width="3.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="836.03" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (4 samples, 0.11%)</title><rect x="934.5" y="565" width="1.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="937.48" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (6 samples, 0.16%)</title><rect x="1053.1" y="517" width="2.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1056.15" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;0000000000012960&gt; (1 samples, 0.03%)</title><rect x="1011.7" y="501" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1014.68" y="511.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007e050&gt; (19 samples, 0.51%)</title><rect x="877.7" y="613" width="6.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="880.69" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1026.0" y="549" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1029.03" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="972.4" y="629" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="975.44" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.16%)</title><rect x="1033.0" y="485" width="2.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1036.05" y="495.5" ></text>
</g>
<g >
<title>VectorMathService::crossProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007dba0&gt; (4 samples, 0.11%)</title><rect x="949.8" y="629" width="1.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="952.79" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TrianglePipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (4 samples, 0.11%)</title><rect x="1061.1" y="613" width="1.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1064.12" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.03%)</title><rect x="988.1" y="549" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="991.07" y="559.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.03%)</title><rect x="946.0" y="629" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="948.96" y="639.5" ></text>
</g>
<g >
<title>0x00007f2e6a0af954 (3 samples, 0.08%)</title><rect x="75.4" y="725" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="78.40" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.08%)</title><rect x="1061.4" y="421" width="1.0" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1064.44" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (3 samples, 0.08%)</title><rect x="909.6" y="613" width="1.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="912.59" y="623.5" ></text>
</g>
<g >
<title>SDL_Texture_Blit::blit(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)&lt;000000000005c940&gt; (3 samples, 0.08%)</title><rect x="525.5" y="613" width="1.0" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="528.51" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (13 samples, 0.35%)</title><rect x="931.6" y="629" width="4.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="934.61" y="639.5" ></text>
</g>
<g >
<title>0x00007f2e6a6d3046 (1 samples, 0.03%)</title><rect x="84.6" y="725" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="87.65" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.05%)</title><rect x="1068.5" y="181" width="0.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1071.46" y="191.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007bb90&gt; (1 samples, 0.03%)</title><rect x="844.5" y="629" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="847.52" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="947.2" y="565" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="950.24" y="575.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000072670&gt; (19 samples, 0.51%)</title><rect x="1062.4" y="677" width="6.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1065.40" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.05%)</title><rect x="1068.5" y="309" width="0.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1071.46" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1001.5" y="501" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1004.47" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.05%)</title><rect x="1068.5" y="261" width="0.6" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1071.46" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (8 samples, 0.22%)</title><rect x="895.2" y="629" width="2.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="898.24" y="639.5" ></text>
</g>
<g >
<title>0x415254532020201f (2 samples, 0.05%)</title><rect x="91.0" y="725" width="0.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="94.03" y="735.5" ></text>
</g>
<g >
<title>0x554f52432020201f (1 samples, 0.03%)</title><rect x="93.9" y="725" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="96.90" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="947.9" y="613" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="950.88" y="623.5" ></text>
</g>
</g>
</svg>
