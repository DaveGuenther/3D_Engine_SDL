<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="854.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="837" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="837" > </text>
<g id="frames">
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (6 samples, 0.11%)</title><rect x="1142.5" y="629" width="1.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1145.46" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*) (1 samples, 0.02%)</title><rect x="1156.8" y="517" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1159.79" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (2 samples, 0.04%)</title><rect x="1137.0" y="677" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1140.03" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.04%)</title><rect x="1079.5" y="661" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1082.51" y="671.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000063910&gt; (2,854 samples, 52.50%)</title><rect x="358.2" y="725" width="619.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="361.18" y="735.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000063910&gt;</text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (4 samples, 0.07%)</title><rect x="1035.7" y="565" width="0.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1038.66" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.02%)</title><rect x="1122.5" y="597" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1125.49" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="358.6" y="693" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="361.62" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base()&lt;0000000000016710&gt; (1 samples, 0.02%)</title><rect x="357.3" y="677" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="360.31" y="687.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="1142.2" y="645" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1145.24" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="355.8" y="693" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="358.79" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;(unsigned long, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;) (1 samples, 0.02%)</title><rect x="1156.8" y="645" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1159.79" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator=(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1156.8" y="677" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1159.79" y="687.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(TexturePNG const&amp;)&lt;000000000003dcb0&gt; (30 samples, 0.55%)</title><rect x="1150.3" y="549" width="6.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1153.28" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (3 samples, 0.06%)</title><rect x="1082.3" y="661" width="0.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1085.33" y="671.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.02%)</title><rect x="1114.7" y="709" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1117.68" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1143.5" y="517" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1146.55" y="527.5" ></text>
</g>
<g >
<title>operator-(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007c350&gt; (1 samples, 0.02%)</title><rect x="1007.9" y="677" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1010.88" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="1120.5" y="581" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1123.54" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.04%)</title><rect x="1081.2" y="693" width="0.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1084.25" y="703.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;000000000008b550&gt; (3 samples, 0.06%)</title><rect x="1167.0" y="789" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1169.99" y="799.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000024750&gt; (23 samples, 0.42%)</title><rect x="1151.6" y="245" width="5.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1154.58" y="255.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d6c0&gt; (6 samples, 0.11%)</title><rect x="1065.6" y="677" width="1.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1068.62" y="687.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000052970&gt; (33 samples, 0.61%)</title><rect x="1149.6" y="693" width="7.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1152.62" y="703.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;0000000000039980&gt; (1 samples, 0.02%)</title><rect x="1149.4" y="693" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1152.41" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1095.1" y="645" width="0.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1098.14" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (8 samples, 0.15%)</title><rect x="1098.2" y="629" width="1.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1101.18" y="639.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;00000000000720a0&gt; (35 samples, 0.64%)</title><rect x="1149.4" y="741" width="7.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1152.41" y="751.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (28 samples, 0.52%)</title><rect x="1150.7" y="405" width="6.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1153.71" y="415.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1115.8" y="613" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1118.76" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="1092.3" y="581" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1095.32" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.04%)</title><rect x="1157.0" y="725" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1160.01" y="735.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1097.5" y="549" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1100.53" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Deallocate(void*, unsigned int)[inline] (1 samples, 0.02%)</title><rect x="977.3" y="581" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="980.27" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1061.5" y="677" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1064.49" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (1 samples, 0.02%)</title><rect x="1046.3" y="677" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1049.30" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (9 samples, 0.17%)</title><rect x="1017.6" y="661" width="2.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1020.65" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.02%)</title><rect x="1015.9" y="613" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1018.91" y="623.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007b600&gt; (25 samples, 0.46%)</title><rect x="650.1" y="677" width="5.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="653.14" y="687.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (24 samples, 0.44%)</title><rect x="1158.1" y="789" width="5.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1161.09" y="799.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.02%)</title><rect x="1101.7" y="629" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1104.65" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (3 samples, 0.06%)</title><rect x="1078.6" y="693" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1081.64" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.02%)</title><rect x="1094.9" y="645" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1097.92" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (6 samples, 0.11%)</title><rect x="1142.5" y="661" width="1.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1145.46" y="671.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;00000000000663f0&gt; (1 samples, 0.02%)</title><rect x="1099.3" y="613" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1102.26" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.09%)</title><rect x="1145.9" y="629" width="1.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1148.93" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (6 samples, 0.11%)</title><rect x="993.3" y="677" width="1.3" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="996.33" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1049.8" y="645" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1052.77" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (12 samples, 0.22%)</title><rect x="1081.7" y="709" width="2.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1084.68" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.04%)</title><rect x="1157.0" y="229" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1160.01" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (2 samples, 0.04%)</title><rect x="1024.8" y="661" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1027.81" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.02%)</title><rect x="1104.3" y="581" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1107.26" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,539 samples, 28.31%)</title><rect x="11.1" y="789" width="334.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="14.09" y="799.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (3 samples, 0.06%)</title><rect x="1134.2" y="645" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1137.21" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1095.6" y="613" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1098.57" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (3 samples, 0.06%)</title><rect x="1114.9" y="725" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1117.89" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1085.2" y="693" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1088.15" y="703.5" ></text>
</g>
<g >
<title>getpid (2 samples, 0.04%)</title><rect x="1165.3" y="789" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1168.25" y="799.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::allocate(std::allocator&lt;SDL_Color&gt;&amp;, unsigned long)[inline] (24 samples, 0.44%)</title><rect x="1151.4" y="341" width="5.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1154.36" y="351.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_erase_at_end(Triangle*) (1 samples, 0.02%)</title><rect x="1028.9" y="661" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1031.93" y="671.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (2 samples, 0.04%)</title><rect x="1096.7" y="565" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1099.66" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.04%)</title><rect x="1127.7" y="725" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1130.70" y="735.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="986.4" y="677" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="989.39" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.07%)</title><rect x="1048.9" y="549" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1051.90" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1095.6" y="629" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1098.57" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.02%)</title><rect x="1149.4" y="613" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1152.41" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.02%)</title><rect x="1102.5" y="597" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1105.52" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="355.8" y="645" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="358.79" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (4 samples, 0.07%)</title><rect x="1096.4" y="629" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1099.44" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1081.5" y="613" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1084.46" y="623.5" ></text>
</g>
<g >
<title>Camera::getCameraPos()&lt;000000000005cdc0&gt; (1 samples, 0.02%)</title><rect x="358.0" y="725" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="360.97" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (1 samples, 0.02%)</title><rect x="1031.8" y="677" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1034.75" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (3 samples, 0.06%)</title><rect x="1042.2" y="661" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1045.17" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.04%)</title><rect x="1157.0" y="453" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1160.01" y="463.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.02%)</title><rect x="1030.9" y="629" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1033.89" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (2 samples, 0.04%)</title><rect x="1094.3" y="581" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1097.27" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="1092.8" y="613" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1095.75" y="623.5" ></text>
</g>
<g >
<title>VectorMathService::crossProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d5d0&gt; (2 samples, 0.04%)</title><rect x="1064.5" y="693" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1067.53" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (6 samples, 0.11%)</title><rect x="1128.4" y="709" width="1.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1131.35" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (1 samples, 0.02%)</title><rect x="1047.4" y="645" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1050.38" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1106.4" y="565" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1109.43" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (21 samples, 0.39%)</title><rect x="1167.6" y="789" width="4.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1170.64" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.02%)</title><rect x="1081.0" y="677" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1084.03" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.02%)</title><rect x="1096.0" y="597" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1099.01" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1095.6" y="565" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1098.57" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (7 samples, 0.13%)</title><rect x="1120.8" y="533" width="1.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1123.75" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1129.4" y="677" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1132.44" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (1 samples, 0.02%)</title><rect x="1148.8" y="597" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1151.76" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.02%)</title><rect x="1028.9" y="677" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1031.93" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="977.3" y="661" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="980.27" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (7 samples, 0.13%)</title><rect x="1035.0" y="597" width="1.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1038.01" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (3 samples, 0.06%)</title><rect x="1127.0" y="725" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1130.05" y="735.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000061340&gt; (1,415 samples, 26.03%)</title><rect x="658.4" y="693" width="307.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="661.39" y="703.5" >TexturemapRasterizer::drawFlatTopTri(Tria..</text>
</g>
<g >
<title>operator*(float const&amp;, Vec3d const&amp;)&lt;000000000007d200&gt; (1 samples, 0.02%)</title><rect x="975.5" y="693" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="978.53" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="645" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1160.01" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (21 samples, 0.39%)</title><rect x="1109.7" y="709" width="4.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1112.68" y="719.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.02%)</title><rect x="977.3" y="645" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="980.27" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (7 samples, 0.13%)</title><rect x="1122.7" y="709" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1125.71" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1108.6" y="677" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1111.60" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (2 samples, 0.04%)</title><rect x="1106.2" y="645" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1109.21" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::Push(void*)[inline] (1 samples, 0.02%)</title><rect x="1148.8" y="485" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1151.76" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Renderer&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1157.4" y="741" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1160.44" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1149.0" y="581" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1151.97" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.04%)</title><rect x="1080.6" y="661" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1083.60" y="671.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.02%)</title><rect x="1148.8" y="565" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1151.76" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::_Vector_impl() (2 samples, 0.04%)</title><rect x="1043.7" y="645" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1046.69" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (4 samples, 0.07%)</title><rect x="1048.9" y="581" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1051.90" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_can_compare(__gnu_debug::_Safe_iterator_base const&amp;) const&lt;00000000000dd910&gt; (1 samples, 0.02%)</title><rect x="1020.3" y="693" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1023.25" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.04%)</title><rect x="1016.3" y="613" width="0.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1019.34" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::TryGetSizeClass(unsigned long, unsigned int*) const[inline] (1 samples, 0.02%)</title><rect x="1187.2" y="725" width="0.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1190.18" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.02%)</title><rect x="1078.0" y="693" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1080.99" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.02%)</title><rect x="1156.8" y="533" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1159.79" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="976.2" y="629" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="979.18" y="639.5" ></text>
</g>
<g >
<title>Renderer::drawReticle()&lt;0000000000065270&gt; (1 samples, 0.02%)</title><rect x="977.7" y="725" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="980.70" y="735.5" ></text>
</g>
<g >
<title>syscall@@GLIBC_2.2.5&lt;000000000010e720&gt; (20 samples, 0.37%)</title><rect x="1182.8" y="789" width="4.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1185.84" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1157.4" y="597" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1160.44" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::_Safe_sequence(__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1150.5" y="389" width="0.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1153.49" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (7 samples, 0.13%)</title><rect x="1107.3" y="709" width="1.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1110.30" y="719.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (34 samples, 0.63%)</title><rect x="1092.5" y="677" width="7.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1095.53" y="687.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464d0&gt; (429 samples, 7.89%)</title><rect x="429.6" y="677" width="93.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="432.60" y="687.5" >TexturePNG:..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000024750&gt; (2 samples, 0.04%)</title><rect x="344.7" y="629" width="0.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="347.72" y="639.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;)[inline] (30 samples, 0.55%)</title><rect x="1150.3" y="581" width="6.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1153.28" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.13%)</title><rect x="1122.7" y="661" width="1.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1125.71" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1102.3" y="613" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1105.30" y="623.5" ></text>
</g>
<g >
<title>do_calloc[inline] (2 samples, 0.04%)</title><rect x="344.7" y="757" width="0.5" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="347.72" y="767.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;0000000000079db0&gt; (5 samples, 0.09%)</title><rect x="1074.5" y="677" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1077.52" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (4 samples, 0.07%)</title><rect x="1082.1" y="677" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1085.12" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_base() (1 samples, 0.02%)</title><rect x="1102.5" y="565" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1105.52" y="575.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d6c0&gt; (6 samples, 0.11%)</title><rect x="1004.6" y="661" width="1.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1007.62" y="671.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.04%)</title><rect x="1157.0" y="437" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1160.01" y="447.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="355.1" y="645" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="358.14" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.04%)</title><rect x="988.1" y="661" width="0.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="991.12" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.02%)</title><rect x="1156.8" y="629" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1159.79" y="639.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (2 samples, 0.04%)</title><rect x="1150.7" y="357" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1153.71" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt;[inline] (1 samples, 0.02%)</title><rect x="350.6" y="725" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="353.58" y="735.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (19 samples, 0.35%)</title><rect x="1138.1" y="613" width="4.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1141.12" y="623.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.02%)</title><rect x="1150.7" y="277" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1153.71" y="287.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.02%)</title><rect x="1097.7" y="581" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1100.74" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1098.8" y="581" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1101.83" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;) (2 samples, 0.04%)</title><rect x="982.5" y="677" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="985.48" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000061d50&gt; (3 samples, 0.06%)</title><rect x="965.5" y="693" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="968.55" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.04%)</title><rect x="1099.5" y="597" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1102.48" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="613" width="6.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1153.28" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1102.1" y="597" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1105.09" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="976.6" y="661" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="979.62" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (3 samples, 0.06%)</title><rect x="1047.6" y="645" width="0.7" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1050.60" y="655.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000061d50&gt; (97 samples, 1.78%)</title><rect x="527.1" y="677" width="21.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="530.06" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1061.5" y="629" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1064.49" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="976.0" y="629" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="978.97" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (6 samples, 0.11%)</title><rect x="1122.9" y="549" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1125.92" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.04%)</title><rect x="1157.0" y="597" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1160.01" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.04%)</title><rect x="1087.3" y="709" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1090.33" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.04%)</title><rect x="1157.0" y="405" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1160.01" y="415.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1100.6" y="597" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1103.57" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="976.6" y="645" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="979.62" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1101.0" y="533" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1104.00" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1081.0" y="693" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1084.03" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.02%)</title><rect x="1149.0" y="613" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1151.97" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.02%)</title><rect x="1157.4" y="469" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1160.44" y="479.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.02%)</title><rect x="1011.4" y="693" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1014.35" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy(char*, char const*, unsigned long) (1 samples, 0.02%)</title><rect x="356.4" y="661" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="359.45" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1148.3" y="725" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1151.32" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.06%)</title><rect x="1127.0" y="693" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1130.05" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1101.0" y="597" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1104.00" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.02%)</title><rect x="1075.8" y="661" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1078.82" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.02%)</title><rect x="1085.2" y="629" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1088.15" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_get_Tp_allocator() const (1 samples, 0.02%)</title><rect x="1151.1" y="389" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1154.14" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (3 samples, 0.06%)</title><rect x="1105.1" y="661" width="0.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1108.13" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1049.6" y="501" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1052.55" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.02%)</title><rect x="1107.9" y="693" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1110.95" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (6 samples, 0.11%)</title><rect x="1142.5" y="597" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1145.46" y="607.5" ></text>
</g>
<g >
<title>0x6a08792b96f3cfff (2 samples, 0.04%)</title><rect x="10.2" y="789" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.22" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.02%)</title><rect x="1102.5" y="613" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1105.52" y="623.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (1 samples, 0.02%)</title><rect x="1102.3" y="533" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1105.30" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_create_storage(unsigned long) (2 samples, 0.04%)</title><rect x="1083.4" y="661" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1086.42" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (1 samples, 0.02%)</title><rect x="1075.8" y="645" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1078.82" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1105.1" y="549" width="0.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1108.13" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="661" width="6.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1153.28" y="671.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464d0&gt; (6 samples, 0.11%)</title><rect x="385.3" y="693" width="1.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="388.32" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (10 samples, 0.18%)</title><rect x="1029.2" y="693" width="2.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1032.15" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.07%)</title><rect x="1068.4" y="661" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1071.44" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="992.9" y="661" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="995.90" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (3 samples, 0.06%)</title><rect x="1059.5" y="693" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1062.54" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.02%)</title><rect x="1061.3" y="693" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1064.28" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (1 samples, 0.02%)</title><rect x="1097.5" y="565" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1100.53" y="575.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469c0&gt; (10 samples, 0.18%)</title><rect x="516.2" y="661" width="2.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="519.21" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (1 samples, 0.02%)</title><rect x="1025.5" y="693" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1028.46" y="703.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*) (1 samples, 0.02%)</title><rect x="356.2" y="725" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="359.23" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.11%)</title><rect x="1029.8" y="645" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1032.80" y="655.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008fa0&gt; (2 samples, 0.04%)</title><rect x="1164.4" y="789" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1167.39" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="977.3" y="693" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="980.27" y="703.5" ></text>
</g>
<g >
<title>write (4 samples, 0.07%)</title><rect x="1187.4" y="789" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1190.40" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (5 samples, 0.09%)</title><rect x="1012.7" y="645" width="1.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1015.65" y="655.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.02%)</title><rect x="1104.0" y="597" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1107.04" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1148.8" y="645" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1151.76" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1115.8" y="581" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1118.76" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="995.5" y="645" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="998.50" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="984.9" y="661" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="987.87" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (3 samples, 0.06%)</title><rect x="1093.6" y="629" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1096.62" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (10 samples, 0.18%)</title><rect x="1101.9" y="645" width="2.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1104.87" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (2 samples, 0.04%)</title><rect x="1009.6" y="693" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1012.61" y="703.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (1 samples, 0.02%)</title><rect x="1095.1" y="581" width="0.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1098.14" y="591.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469c0&gt; (4 samples, 0.07%)</title><rect x="657.5" y="677" width="0.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="660.52" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e430&gt; (2 samples, 0.04%)</title><rect x="1077.3" y="709" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1080.34" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_debug::_BeforeBeginHelper&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_S_Is&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::forward_iterator_tag&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1099.7" y="565" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1102.70" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1101.0" y="581" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1104.00" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.04%)</title><rect x="1076.5" y="693" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1079.47" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (7 samples, 0.13%)</title><rect x="1120.8" y="565" width="1.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1123.75" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*)[inline] (1 samples, 0.02%)</title><rect x="1157.4" y="453" width="0.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1160.44" y="463.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.02%)</title><rect x="1081.9" y="661" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1084.90" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.13%)</title><rect x="1048.3" y="645" width="1.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1051.25" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000c0c30&gt; (3 samples, 0.06%)</title><rect x="350.2" y="789" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="353.15" y="799.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b750&gt; (11 samples, 0.20%)</title><rect x="956.9" y="677" width="2.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="959.87" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="1142.0" y="549" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1145.03" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.02%)</title><rect x="1023.3" y="677" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1026.29" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (13 samples, 0.24%)</title><rect x="1124.2" y="725" width="2.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1127.23" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e430&gt; (2 samples, 0.04%)</title><rect x="1114.2" y="725" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1117.24" y="735.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (3 samples, 0.06%)</title><rect x="1040.7" y="645" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1043.65" y="655.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (2 samples, 0.04%)</title><rect x="344.3" y="773" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="347.29" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (1 samples, 0.02%)</title><rect x="355.1" y="677" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="358.14" y="687.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003cdb0&gt; (30 samples, 0.55%)</title><rect x="1150.3" y="677" width="6.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1153.28" y="687.5" ></text>
</g>
<g >
<title>free_fast_path[inline] (1 samples, 0.02%)</title><rect x="1187.2" y="773" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1190.18" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.09%)</title><rect x="989.2" y="629" width="1.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="992.21" y="639.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="355.6" y="725" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="358.58" y="735.5" ></text>
</g>
<g >
<title>TurnAction::update(bool)&lt;000000000000ab20&gt; (1 samples, 0.02%)</title><rect x="355.4" y="725" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="358.36" y="735.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.02%)</title><rect x="1037.2" y="597" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1040.18" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (1 samples, 0.02%)</title><rect x="1046.7" y="661" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1049.73" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data() const (1 samples, 0.02%)</title><rect x="356.7" y="565" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="359.66" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="355.8" y="709" width="0.4" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="358.79" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1157.4" y="533" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1160.44" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator++() (3 samples, 0.06%)</title><rect x="1130.5" y="677" width="0.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1133.52" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1039.4" y="613" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1042.35" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="976.2" y="613" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="979.18" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.02%)</title><rect x="1108.8" y="709" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1111.82" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.06%)</title><rect x="1049.1" y="533" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1052.12" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1148.1" y="741" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1151.11" y="751.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (4 samples, 0.07%)</title><rect x="990.3" y="693" width="0.9" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="993.29" y="703.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.02%)</title><rect x="1093.4" y="645" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1096.40" y="655.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5&lt;0000000000084250&gt; (1 samples, 0.02%)</title><rect x="346.2" y="789" width="0.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="349.24" y="799.5" ></text>
</g>
<g >
<title>XextFindDisplay&lt;0000000000005d40&gt; (1 samples, 0.02%)</title><rect x="346.0" y="789" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="349.03" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.06%)</title><rect x="1125.5" y="709" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1128.53" y="719.5" ></text>
</g>
<g >
<title>Triangle::setTrianglePoint(int, Vec3d const&amp;)&lt;000000000007b4b0&gt; (2 samples, 0.04%)</title><rect x="1063.4" y="709" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1066.45" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1141.6" y="533" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1144.59" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturemapRasterizer*&gt;(TexturemapRasterizer*, std::integral_constant&lt;bool, false&gt;) (1 samples, 0.02%)</title><rect x="977.1" y="677" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="980.05" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::GetSizeClass(unsigned long, unsigned int*)[inline] (1 samples, 0.02%)</title><rect x="1037.2" y="581" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1040.18" y="591.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005d480&gt; (330 samples, 6.07%)</title><rect x="978.8" y="709" width="71.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="981.79" y="719.5" >Clipper:..</text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000066010&gt; (145 samples, 2.67%)</title><rect x="1116.4" y="741" width="31.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1119.41" y="751.5" >Tr..</text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e430&gt; (3 samples, 0.06%)</title><rect x="1135.3" y="725" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1138.30" y="735.5" ></text>
</g>
<g >
<title>Event_Scanner::captureMouseMovement()&lt;000000000002bdb0&gt; (1 samples, 0.02%)</title><rect x="356.9" y="709" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="359.88" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1093.2" y="645" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1096.19" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1115.8" y="725" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1118.76" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;) (1 samples, 0.02%)</title><rect x="1150.9" y="293" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1153.93" y="303.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~_Vector_base() (2 samples, 0.04%)</title><rect x="1157.0" y="165" width="0.4" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1160.01" y="175.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1095.6" y="581" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1098.57" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (10 samples, 0.18%)</title><rect x="1034.4" y="645" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1037.36" y="655.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007b600&gt; (17 samples, 0.31%)</title><rect x="959.3" y="677" width="3.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="962.25" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (8 samples, 0.15%)</title><rect x="1057.8" y="693" width="1.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1060.80" y="703.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (24 samples, 0.44%)</title><rect x="1151.4" y="325" width="5.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1154.36" y="335.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (24 samples, 0.44%)</title><rect x="1151.4" y="357" width="5.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1154.36" y="367.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;0000000000043140&gt; (5 samples, 0.09%)</title><rect x="380.3" y="693" width="1.1" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="383.32" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (18 samples, 0.33%)</title><rect x="1138.3" y="581" width="3.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1141.34" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (6 samples, 0.11%)</title><rect x="1010.0" y="693" width="1.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1013.05" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="1147.2" y="629" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1150.24" y="639.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.04%)</title><rect x="1019.2" y="645" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1022.16" y="655.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b750&gt; (9 samples, 0.17%)</title><rect x="645.2" y="661" width="1.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="648.15" y="671.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.02%)</title><rect x="1187.2" y="757" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1190.18" y="767.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (3 samples, 0.06%)</title><rect x="1105.1" y="613" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1108.13" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1101.0" y="549" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1104.00" y="559.5" ></text>
</g>
<g >
<title>PackedCache&lt;35&gt;::TryGet(unsigned long, unsigned int*) const[inline] (1 samples, 0.02%)</title><rect x="1187.2" y="709" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1190.18" y="719.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (1 samples, 0.02%)</title><rect x="1081.5" y="661" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1084.46" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (12 samples, 0.22%)</title><rect x="1107.1" y="725" width="2.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1110.08" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*, Mesh&gt;(Mesh*, Mesh*, std::allocator&lt;Mesh&gt;&amp;)[inline] (2 samples, 0.04%)</title><rect x="1157.0" y="613" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.01" y="623.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1085.2" y="613" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1088.15" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (5 samples, 0.09%)</title><rect x="1133.8" y="661" width="1.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1136.78" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (11 samples, 0.20%)</title><rect x="1017.6" y="677" width="2.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1020.65" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (25 samples, 0.46%)</title><rect x="1117.3" y="645" width="5.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1120.28" y="655.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007bba0&gt; (1 samples, 0.02%)</title><rect x="1062.6" y="709" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1065.58" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1101.7" y="597" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1104.65" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.11%)</title><rect x="1027.0" y="645" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1029.98" y="655.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b750&gt; (13 samples, 0.24%)</title><rect x="940.8" y="661" width="2.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="943.80" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TrianglePipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (3 samples, 0.06%)</title><rect x="1148.8" y="677" width="0.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1151.76" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1147.9" y="741" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1150.89" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (7 samples, 0.13%)</title><rect x="1120.8" y="517" width="1.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1123.75" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector(__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1081.9" y="693" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1084.90" y="703.5" ></text>
</g>
<g >
<title>free_fast_path[inline] (1 samples, 0.02%)</title><rect x="977.3" y="629" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="980.27" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1098.8" y="597" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1101.83" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000028820&gt; (1 samples, 0.02%)</title><rect x="1157.2" y="85" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1160.22" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.06%)</title><rect x="989.6" y="613" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="992.64" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::_Safe_container() (1 samples, 0.02%)</title><rect x="1041.7" y="677" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1044.74" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;0000000000061c90&gt; (2 samples, 0.04%)</title><rect x="969.7" y="693" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="972.67" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (3 samples, 0.06%)</title><rect x="352.3" y="757" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="355.32" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (14 samples, 0.26%)</title><rect x="1017.2" y="693" width="3.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1020.21" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1096.0" y="581" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1099.01" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.11%)</title><rect x="1027.0" y="661" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1029.98" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1095.1" y="613" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1098.14" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.09%)</title><rect x="1089.1" y="709" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1092.06" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base()&lt;0000000000016710&gt; (1 samples, 0.02%)</title><rect x="1045.9" y="645" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1048.86" y="655.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;&gt;(std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt;&amp;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;)[inline] (1 samples, 0.02%)</title><rect x="356.7" y="629" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="359.66" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.02%)</title><rect x="1147.2" y="613" width="0.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1150.24" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1099.9" y="629" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1102.92" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.06%)</title><rect x="1100.3" y="613" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1103.35" y="623.5" ></text>
</g>
<g >
<title>XChangeProperty&lt;00000000000227b0&gt; (1 samples, 0.02%)</title><rect x="345.2" y="789" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="348.16" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TrianglePipeline&gt;::~shared_ptr() (5 samples, 0.09%)</title><rect x="1148.3" y="741" width="1.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1151.32" y="751.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.06%)</title><rect x="1139.6" y="565" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1142.64" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.02%)</title><rect x="1157.4" y="613" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1160.44" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005e430&gt; (21 samples, 0.39%)</title><rect x="1020.7" y="693" width="4.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1023.68" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="1092.8" y="597" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1095.75" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (25 samples, 0.46%)</title><rect x="1117.3" y="693" width="5.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1120.28" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.04%)</title><rect x="1157.0" y="389" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1160.01" y="399.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (4 samples, 0.07%)</title><rect x="994.9" y="661" width="0.8" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="997.85" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (6 samples, 0.11%)</title><rect x="1142.5" y="581" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1145.46" y="591.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000543e0&gt; (7 samples, 0.13%)</title><rect x="1122.7" y="725" width="1.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1125.71" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::PopRange(int, void**, void**)[inline] (1 samples, 0.02%)</title><rect x="1157.2" y="69" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1160.22" y="79.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.9" y="757" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1160.87" y="767.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="976.0" y="661" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="978.97" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007da80&gt; (1 samples, 0.02%)</title><rect x="1008.5" y="693" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1011.53" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="1081.5" y="581" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1084.46" y="591.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.02%)</title><rect x="1149.4" y="629" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1152.41" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh&gt;(Mesh*) (2 samples, 0.04%)</title><rect x="1157.0" y="565" width="0.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1160.01" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="517" width="6.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1153.28" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (4 samples, 0.07%)</title><rect x="1105.8" y="661" width="0.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1108.78" y="671.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::setstate(std::_Ios_Iostate)[inline] (1 samples, 0.02%)</title><rect x="1182.6" y="773" width="0.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1185.62" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.02%)</title><rect x="1156.8" y="581" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1159.79" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.02%)</title><rect x="1093.2" y="597" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1096.19" y="607.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;0000000000110470&gt; (8 samples, 0.15%)</title><rect x="1188.3" y="789" width="1.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1191.26" y="799.5" ></text>
</g>
<g >
<title>Renderer::setWindowTitle(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000632c0&gt; (1 samples, 0.02%)</title><rect x="1157.7" y="757" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1160.66" y="767.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (1 samples, 0.02%)</title><rect x="1132.0" y="661" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1135.04" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="988.3" y="629" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="991.34" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.02%)</title><rect x="1090.1" y="613" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1093.15" y="623.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d360&gt; (4 samples, 0.07%)</title><rect x="1066.9" y="693" width="0.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1069.92" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;::__normal_iterator(Mesh* const&amp;) (1 samples, 0.02%)</title><rect x="1136.2" y="693" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1139.17" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1037.0" y="645" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1039.96" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.04%)</title><rect x="1157.0" y="501" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1160.01" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.02%)</title><rect x="1103.0" y="581" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1105.95" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.04%)</title><rect x="988.6" y="677" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="991.56" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;&gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="645" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="359.66" y="655.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469a0&gt; (20 samples, 0.37%)</title><rect x="518.4" y="661" width="4.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="521.38" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.02%)</title><rect x="1157.4" y="325" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1160.44" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="629" width="6.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1153.28" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.02%)</title><rect x="1104.0" y="613" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1107.04" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (30 samples, 0.55%)</title><rect x="1150.3" y="485" width="6.5" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1153.28" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.02%)</title><rect x="1026.1" y="677" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1029.11" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() (1 samples, 0.02%)</title><rect x="1016.8" y="645" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1019.78" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015c40&gt; (1 samples, 0.02%)</title><rect x="1018.9" y="645" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1021.95" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (1 samples, 0.02%)</title><rect x="1156.6" y="357" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1159.57" y="367.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_invalidate_all() const&lt;000000000001c150&gt; (1 samples, 0.02%)</title><rect x="1028.7" y="677" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1031.72" y="687.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="1114.7" y="725" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1117.68" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.04%)</title><rect x="1081.2" y="709" width="0.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1084.25" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Deallocate(void*, unsigned int)[inline] (1 samples, 0.02%)</title><rect x="1148.8" y="501" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1151.76" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Renderer, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1157.4" y="725" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1160.44" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (4 samples, 0.07%)</title><rect x="1037.8" y="613" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1040.83" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1099.0" y="565" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1102.05" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="1061.5" y="645" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1064.49" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (5 samples, 0.09%)</title><rect x="1176.3" y="789" width="1.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1179.32" y="799.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (97 samples, 1.78%)</title><rect x="359.3" y="693" width="21.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="362.27" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1039.4" y="629" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1042.35" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.04%)</title><rect x="1157.0" y="709" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1160.01" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000249b0&gt; (2 samples, 0.04%)</title><rect x="344.7" y="677" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="347.72" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.02%)</title><rect x="1157.4" y="357" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1160.44" y="367.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;0000000000079db0&gt; (25 samples, 0.46%)</title><rect x="998.8" y="629" width="5.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1001.76" y="639.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (3 samples, 0.06%)</title><rect x="1027.6" y="629" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1030.63" y="639.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.07%)</title><rect x="1104.3" y="645" width="0.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1107.26" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.09%)</title><rect x="1068.2" y="693" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1071.22" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1085.2" y="645" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1088.15" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (8 samples, 0.15%)</title><rect x="1044.3" y="677" width="1.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1047.35" y="687.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (4 samples, 0.07%)</title><rect x="719.4" y="677" width="0.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="722.39" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach_single(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd580&gt; (1 samples, 0.02%)</title><rect x="351.9" y="789" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="354.89" y="799.5" ></text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.02%)</title><rect x="1148.8" y="517" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1151.76" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (30 samples, 0.55%)</title><rect x="1150.3" y="469" width="6.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1153.28" y="479.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;)&lt;000000000007d950&gt; (8 samples, 0.15%)</title><rect x="1005.9" y="677" width="1.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1008.92" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;SDL_Color&gt; const&amp;) (25 samples, 0.46%)</title><rect x="1151.4" y="389" width="5.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1154.36" y="399.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (7 samples, 0.13%)</title><rect x="655.6" y="677" width="1.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="658.57" y="687.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007bb80&gt; (1 samples, 0.02%)</title><rect x="992.5" y="677" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="995.47" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size() const (1 samples, 0.02%)</title><rect x="1150.1" y="613" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1153.06" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (6 samples, 0.11%)</title><rect x="1112.1" y="661" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1115.07" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="1040.2" y="581" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1043.22" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.04%)</title><rect x="1049.3" y="517" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1052.34" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (3 samples, 0.06%)</title><rect x="1105.1" y="677" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1108.13" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::Sampler::TryRecordAllocationFast(unsigned long)[inline] (1 samples, 0.02%)</title><rect x="1114.7" y="677" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1117.68" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.04%)</title><rect x="1008.1" y="677" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1011.09" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="693" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="359.66" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (1 samples, 0.02%)</title><rect x="1044.1" y="645" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1047.13" y="655.5" ></text>
</g>
<g >
<title>IAction_Updater::numberOfActiveCommands(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt; const&amp;) const&lt;000000000000d220&gt; (2 samples, 0.04%)</title><rect x="354.9" y="725" width="0.5" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="357.93" y="735.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010010&gt; (2 samples, 0.04%)</title><rect x="1112.7" y="645" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1115.72" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000249b0&gt; (23 samples, 0.42%)</title><rect x="1151.6" y="293" width="5.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1154.58" y="303.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::~unordered_map() (1 samples, 0.02%)</title><rect x="357.3" y="725" width="0.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="360.31" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.06%)</title><rect x="1108.2" y="693" width="0.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1111.16" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt;[inline] (2 samples, 0.04%)</title><rect x="1018.5" y="629" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1021.51" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_impl::_Vector_impl(std::allocator&lt;SDL_Color&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1156.6" y="373" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1159.57" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1157.4" y="485" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1160.44" y="495.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000061d50&gt; (81 samples, 1.49%)</title><rect x="816.9" y="677" width="17.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="819.85" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.02%)</title><rect x="974.2" y="693" width="0.2" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="977.23" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (26 samples, 0.48%)</title><rect x="1011.6" y="693" width="5.6" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1014.57" y="703.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1156.8" y="565" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1159.79" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1141.6" y="549" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1144.59" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (4 samples, 0.07%)</title><rect x="1076.0" y="709" width="0.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1079.04" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (3 samples, 0.06%)</title><rect x="1024.6" y="677" width="0.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1027.59" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="1126.6" y="661" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1129.62" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (2 samples, 0.04%)</title><rect x="1028.7" y="693" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1031.72" y="703.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007b600&gt; (1 samples, 0.02%)</title><rect x="526.0" y="661" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="528.98" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="1126.8" y="709" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1129.83" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.04%)</title><rect x="657.1" y="677" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="660.09" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1096.2" y="629" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1099.23" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (7 samples, 0.13%)</title><rect x="1105.1" y="709" width="1.5" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1108.13" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1095.6" y="549" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1098.57" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (53 samples, 0.97%)</title><rect x="1136.4" y="725" width="11.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1139.38" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (3 samples, 0.06%)</title><rect x="1012.7" y="629" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1015.65" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.04%)</title><rect x="1141.6" y="485" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1144.59" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1149.8" y="645" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1152.84" y="655.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007bba0&gt; (1 samples, 0.02%)</title><rect x="992.7" y="677" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="995.68" y="687.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints()&lt;000000000007b680&gt; (17 samples, 0.31%)</title><rect x="1064.1" y="709" width="3.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1067.10" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long)[inline] (1 samples, 0.02%)</title><rect x="1148.8" y="581" width="0.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1151.76" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (4 samples, 0.07%)</title><rect x="1048.9" y="597" width="0.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1051.90" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.06%)</title><rect x="1079.5" y="693" width="0.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1082.51" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;000000000007d790&gt; (9 samples, 0.17%)</title><rect x="1071.9" y="709" width="2.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1074.91" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.02%)</title><rect x="1020.0" y="677" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1023.03" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1157.4" y="581" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1160.44" y="591.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;00000000000251d0&gt; (1 samples, 0.02%)</title><rect x="1157.4" y="661" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1160.44" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.02%)</title><rect x="1156.8" y="613" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1159.79" y="623.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007b5c0&gt; (1 samples, 0.02%)</title><rect x="976.2" y="709" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="979.18" y="719.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;0000000000079db0&gt; (4 samples, 0.07%)</title><rect x="1066.1" y="661" width="0.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1069.05" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (5 samples, 0.09%)</title><rect x="1084.3" y="709" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1087.29" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1087.5" y="693" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1090.54" y="703.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (1 samples, 0.02%)</title><rect x="429.4" y="677" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="432.38" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.04%)</title><rect x="1143.3" y="533" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1146.33" y="543.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.02%)</title><rect x="356.4" y="645" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="359.45" y="655.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005b590&gt; (25 samples, 0.46%)</title><rect x="1117.3" y="725" width="5.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1120.28" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1101.4" y="565" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1104.43" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (1 samples, 0.02%)</title><rect x="1037.2" y="629" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1040.18" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000dd670&gt; (4 samples, 0.07%)</title><rect x="352.1" y="789" width="0.9" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="355.10" y="799.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469a0&gt; (26 samples, 0.48%)</title><rect x="808.2" y="661" width="5.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="811.17" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1099.0" y="533" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1102.05" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.04%)</title><rect x="1010.9" y="677" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1013.92" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.09%)</title><rect x="1142.7" y="565" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1145.68" y="575.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.02%)</title><rect x="356.4" y="693" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="359.45" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.04%)</title><rect x="982.9" y="677" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="985.91" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (3 samples, 0.06%)</title><rect x="1032.0" y="661" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1034.97" y="671.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000680f0&gt; (3 samples, 0.06%)</title><rect x="1105.1" y="597" width="0.7" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1108.13" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.04%)</title><rect x="1101.2" y="613" width="0.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1104.22" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1101.7" y="581" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1104.65" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::allocator&lt;Triangle&gt;&amp;)[inline] (4 samples, 0.07%)</title><rect x="1105.8" y="677" width="0.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1108.78" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (169 samples, 3.11%)</title><rect x="682.7" y="677" width="36.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="685.70" y="687.5" >SDL..</text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (25 samples, 0.46%)</title><rect x="1117.3" y="677" width="5.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1120.28" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.07%)</title><rect x="1148.5" y="693" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1151.54" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1081.5" y="597" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1084.46" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.09%)</title><rect x="989.2" y="677" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="992.21" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length(unsigned long) (1 samples, 0.02%)</title><rect x="1149.8" y="613" width="0.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1152.84" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (26 samples, 0.48%)</title><rect x="1044.3" y="693" width="5.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1047.35" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1095.6" y="533" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1098.57" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.06%)</title><rect x="987.9" y="677" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="990.91" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.02%)</title><rect x="1110.1" y="693" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1113.12" y="703.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.02%)</title><rect x="10.0" y="773" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="1122.3" y="581" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1125.27" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (4 samples, 0.07%)</title><rect x="1068.4" y="629" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1071.44" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangleInitializer(Triangle&amp;)&lt;0000000000061610&gt; (1 samples, 0.02%)</title><rect x="526.0" y="677" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="528.98" y="687.5" ></text>
</g>
<g >
<title>_dl_audit_symbind_alt@@GLIBC_PRIVATE&lt;0000000000017b50&gt; (1 samples, 0.02%)</title><rect x="1164.0" y="789" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1166.95" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="1088.8" y="693" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1091.84" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (5 samples, 0.09%)</title><rect x="1039.6" y="645" width="1.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1042.57" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (2 samples, 0.04%)</title><rect x="344.7" y="709" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="347.72" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (7 samples, 0.13%)</title><rect x="1122.7" y="677" width="1.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1125.71" y="687.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (2 samples, 0.04%)</title><rect x="1150.7" y="373" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1153.71" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::operator-(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006d170&gt; (1 samples, 0.02%)</title><rect x="1104.7" y="613" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1107.69" y="623.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (25 samples, 0.46%)</title><rect x="1117.3" y="661" width="5.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1120.28" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="974.0" y="661" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="977.01" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.02%)</title><rect x="351.7" y="773" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="354.67" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (23 samples, 0.42%)</title><rect x="1129.9" y="693" width="5.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1132.87" y="703.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007b5c0&gt; (1 samples, 0.02%)</title><rect x="1061.7" y="709" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1064.71" y="719.5" ></text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d570&gt; (1 samples, 0.02%)</title><rect x="1073.9" y="709" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1076.87" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1099.9" y="613" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1102.92" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (8 samples, 0.15%)</title><rect x="1101.9" y="629" width="1.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1104.87" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.02%)</title><rect x="1109.0" y="709" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1112.03" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.09%)</title><rect x="1087.8" y="709" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1090.76" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (45 samples, 0.83%)</title><rect x="419.6" y="677" width="9.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="422.61" y="687.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;00000000000516f0&gt; (1 samples, 0.02%)</title><rect x="1156.8" y="693" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1159.79" y="703.5" ></text>
</g>
<g >
<title>llseek (1 samples, 0.02%)</title><rect x="1165.9" y="789" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1168.91" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.06%)</title><rect x="1062.8" y="645" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1065.80" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (3 samples, 0.06%)</title><rect x="352.3" y="773" width="0.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="355.32" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (2 samples, 0.04%)</title><rect x="1109.2" y="709" width="0.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1112.25" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.02%)</title><rect x="1100.8" y="597" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1103.78" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1105.6" y="533" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1108.56" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (1 samples, 0.02%)</title><rect x="1157.4" y="341" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1160.44" y="351.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="975.8" y="693" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="978.75" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1126.2" y="709" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1129.18" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.02%)</title><rect x="1009.4" y="693" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1012.40" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.04%)</title><rect x="1050.0" y="693" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1052.99" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d720&gt; (7 samples, 0.13%)</title><rect x="1074.1" y="709" width="1.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1077.08" y="719.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007b600&gt; (2 samples, 0.04%)</title><rect x="815.8" y="661" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="818.77" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.02%)</title><rect x="1093.4" y="629" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1096.40" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="565" width="6.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1153.28" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (4 samples, 0.07%)</title><rect x="1102.7" y="613" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1105.74" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::unordered_map(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="709" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="359.66" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.02%)</title><rect x="353.6" y="789" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="356.62" y="799.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;00000000000469a0&gt; (2 samples, 0.04%)</title><rect x="965.1" y="677" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="968.11" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*) (1 samples, 0.02%)</title><rect x="356.4" y="677" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="359.45" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1113.2" y="645" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1116.16" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (5 samples, 0.09%)</title><rect x="1037.6" y="629" width="1.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1040.62" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.04%)</title><rect x="1008.1" y="645" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1011.09" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="1111.0" y="645" width="0.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1113.99" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1149.0" y="501" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1151.97" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (1 samples, 0.02%)</title><rect x="1031.5" y="677" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1034.54" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (6 samples, 0.11%)</title><rect x="1035.2" y="581" width="1.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1038.23" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.02%)</title><rect x="1041.3" y="677" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1044.31" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge()&lt;0000000000028c00&gt; (1 samples, 0.02%)</title><rect x="1157.2" y="101" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1160.22" y="111.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1115.8" y="661" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1118.76" y="671.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (18 samples, 0.33%)</title><rect x="1143.8" y="677" width="3.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1146.76" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.04%)</title><rect x="1141.6" y="517" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1144.59" y="527.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (30 samples, 0.55%)</title><rect x="1150.3" y="453" width="6.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1153.28" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (4 samples, 0.07%)</title><rect x="1110.8" y="677" width="0.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1113.77" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="645" width="6.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1153.28" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)[inline] (2 samples, 0.04%)</title><rect x="355.8" y="661" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="358.79" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000061480&gt; (1,252 samples, 23.03%)</title><rect x="386.6" y="693" width="271.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="389.62" y="703.5" >TexturemapRasterizer::drawFlatBottom..</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1081.5" y="565" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1084.46" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_from_begin() const (1 samples, 0.02%)</title><rect x="1104.7" y="581" width="0.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1107.69" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.04%)</title><rect x="1079.5" y="677" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1082.51" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.06%)</title><rect x="1035.9" y="549" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1038.88" y="559.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt; &gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="677" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="359.66" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.04%)</title><rect x="1068.9" y="613" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1071.87" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (9 samples, 0.17%)</title><rect x="1090.6" y="597" width="1.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1093.58" y="607.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;00000000000430e0&gt; (18 samples, 0.33%)</title><rect x="381.4" y="693" width="3.9" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="384.41" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="1145.5" y="629" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1148.50" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.02%)</title><rect x="357.1" y="709" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="360.10" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.02%)</title><rect x="1011.1" y="661" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1014.13" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.04%)</title><rect x="1157.0" y="421" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1160.01" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1061.5" y="613" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1064.49" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1090.4" y="613" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1093.36" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1149.0" y="597" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1151.97" y="607.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (1 samples, 0.02%)</title><rect x="1012.9" y="613" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1015.87" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.09%)</title><rect x="989.2" y="645" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="992.21" y="655.5" ></text>
</g>
<g >
<title>do_malloc[inline] (2 samples, 0.04%)</title><rect x="344.7" y="725" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="347.72" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="355.8" y="725" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="358.79" y="735.5" ></text>
</g>
<g >
<title>tc_calloc (2 samples, 0.04%)</title><rect x="344.7" y="773" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="347.72" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (3 samples, 0.06%)</title><rect x="1131.4" y="661" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1134.39" y="671.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000004f7a0&gt; (2 samples, 0.04%)</title><rect x="1149.8" y="661" width="0.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1152.84" y="671.5" ></text>
</g>
<g >
<title>main&lt;000000000000a7e0&gt; (3,703 samples, 68.12%)</title><rect x="354.3" y="773" width="803.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="357.28" y="783.5" >main&lt;000000000000a7e0&gt;</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 0.07%)</title><rect x="1068.4" y="677" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1071.44" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="1125.7" y="693" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1128.75" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1031.1" y="677" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1034.10" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (3 samples, 0.06%)</title><rect x="1096.7" y="597" width="0.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1099.66" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_PopRange(void**, int, void**, void**)[inline] (1 samples, 0.02%)</title><rect x="1157.2" y="37" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1160.22" y="47.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="355.6" y="693" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="358.58" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (11 samples, 0.20%)</title><rect x="1090.1" y="677" width="2.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1093.15" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::begin() (1 samples, 0.02%)</title><rect x="355.6" y="677" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="358.58" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="1133.3" y="645" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1136.34" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1085.2" y="581" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1088.15" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (10 samples, 0.18%)</title><rect x="1034.4" y="629" width="2.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1037.36" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1101.9" y="613" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1104.87" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::begin() (1 samples, 0.02%)</title><rect x="1136.2" y="709" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1139.17" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1157.4" y="709" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1160.44" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1062.8" y="677" width="0.6" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1065.80" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.07%)</title><rect x="1089.3" y="677" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1092.28" y="687.5" ></text>
</g>
<g >
<title>Triangle::setUVPoint(int, Vec2d const&amp;)&lt;000000000007b4f0&gt; (1 samples, 0.02%)</title><rect x="993.1" y="677" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="996.12" y="687.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (21 samples, 0.39%)</title><rect x="1095.4" y="645" width="4.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1098.36" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1147.5" y="661" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1150.45" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() const (1 samples, 0.02%)</title><rect x="1083.9" y="677" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1086.85" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="581" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="359.66" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.02%)</title><rect x="1081.7" y="693" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1084.68" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.02%)</title><rect x="1099.7" y="581" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1102.70" y="591.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (18 samples, 0.33%)</title><rect x="1143.8" y="693" width="3.9" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1146.76" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1096.2" y="613" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1099.23" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000245a0&gt; (1 samples, 0.02%)</title><rect x="1157.0" y="69" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1160.01" y="79.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000ba70&gt; (1 samples, 0.02%)</title><rect x="1164.2" y="789" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1167.17" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.04%)</title><rect x="1038.7" y="629" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1041.70" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.02%)</title><rect x="1082.8" y="629" width="0.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1085.77" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;!std::__are_same&lt;SDL_Color, bool&gt;::__value, void&gt;::__type std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::push_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.02%)</title><rect x="1149.4" y="645" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1152.41" y="655.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (5 samples, 0.09%)</title><rect x="986.8" y="677" width="1.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="989.82" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (9 samples, 0.17%)</title><rect x="1082.1" y="693" width="2.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1085.12" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="1069.3" y="709" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1072.31" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.02%)</title><rect x="1156.8" y="597" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1159.79" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;000000000007db40&gt; (77 samples, 1.42%)</title><rect x="991.8" y="693" width="16.7" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="994.81" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1061.5" y="693" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1064.49" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.06%)</title><rect x="1127.0" y="709" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1130.05" y="719.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (2 samples, 0.04%)</title><rect x="1150.7" y="341" width="0.4" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1153.71" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy(char*, char const*, unsigned long) (1 samples, 0.02%)</title><rect x="1156.8" y="501" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1159.79" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1041.1" y="613" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1044.09" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.02%)</title><rect x="1122.3" y="549" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1125.27" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length(unsigned long) (1 samples, 0.02%)</title><rect x="1149.8" y="597" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1152.84" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d720&gt; (8 samples, 0.15%)</title><rect x="1004.2" y="677" width="1.7" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1007.19" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.02%)</title><rect x="1115.8" y="693" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1118.76" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.06%)</title><rect x="1080.4" y="693" width="0.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1083.38" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (5 samples, 0.09%)</title><rect x="1043.3" y="677" width="1.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1046.26" y="687.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.02%)</title><rect x="1007.7" y="677" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1010.66" y="687.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.02%)</title><rect x="1098.0" y="629" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1100.96" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1062.8" y="661" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1065.80" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.04%)</title><rect x="1157.0" y="581" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1160.01" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="1122.3" y="565" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1125.27" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::ByteSizeForClass(unsigned int)[inline] (1 samples, 0.02%)</title><rect x="1142.2" y="613" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1145.24" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.02%)</title><rect x="1104.3" y="613" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1107.26" y="623.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (58 samples, 1.07%)</title><rect x="1092.5" y="709" width="12.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1095.53" y="719.5" ></text>
</g>
<g >
<title>xcb_get_setup&lt;000000000000e2d0&gt; (1 samples, 0.02%)</title><rect x="10.4" y="773" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="13.43" y="783.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;0000000000066300&gt; (58 samples, 1.07%)</title><rect x="1092.5" y="725" width="12.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1095.53" y="735.5" ></text>
</g>
<g >
<title>all (5,436 samples, 100%)</title><rect x="10.0" y="805" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.04%)</title><rect x="1093.8" y="613" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1096.84" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.06%)</title><rect x="1088.2" y="661" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1091.19" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 0.07%)</title><rect x="1048.9" y="565" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1051.90" y="575.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.02%)</title><rect x="1149.4" y="661" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1152.41" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::_Safe_container(__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1150.5" y="405" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1153.49" y="415.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (23 samples, 0.42%)</title><rect x="980.1" y="693" width="5.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="983.09" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1157.4" y="517" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1160.44" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_unordered_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; &gt;::~_Safe_unordered_container() (1 samples, 0.02%)</title><rect x="357.3" y="693" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="360.31" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (12 samples, 0.22%)</title><rect x="653.0" y="661" width="2.6" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="655.97" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d570&gt; (2 samples, 0.04%)</title><rect x="995.7" y="661" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="998.72" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (8 samples, 0.15%)</title><rect x="1128.1" y="725" width="1.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1131.13" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_PopRange(void**, int, void**, void**)[inline] (1 samples, 0.02%)</title><rect x="1157.2" y="53" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1160.22" y="63.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.06%)</title><rect x="1113.4" y="661" width="0.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1116.37" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (1 samples, 0.02%)</title><rect x="355.1" y="661" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="358.14" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.02%)</title><rect x="1116.0" y="741" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1118.98" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.02%)</title><rect x="1079.9" y="677" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1082.94" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (6 samples, 0.11%)</title><rect x="1142.5" y="645" width="1.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1145.46" y="655.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.11%)</title><rect x="1093.6" y="645" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1096.62" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1149.0" y="485" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1151.97" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.06%)</title><rect x="1104.3" y="629" width="0.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1107.26" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1099.0" y="517" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1102.05" y="527.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060430&gt; (2,844 samples, 52.32%)</title><rect x="358.8" y="709" width="617.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="361.83" y="719.5" >TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060430&gt;</text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_get_Tp_allocator() (1 samples, 0.02%)</title><rect x="1083.0" y="677" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1085.98" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.02%)</title><rect x="1093.0" y="597" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1095.97" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::deallocate(std::allocator&lt;SDL_Color&gt;&amp;, SDL_Color*, unsigned long)[inline] (2 samples, 0.04%)</title><rect x="1157.0" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1160.01" y="143.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.11%)</title><rect x="1029.8" y="661" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1032.80" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;::pair(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.4" y="725" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="359.45" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;)[inline] (1 samples, 0.02%)</title><rect x="1157.4" y="373" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1160.44" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (2 samples, 0.04%)</title><rect x="1103.6" y="613" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1106.61" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="977.5" y="709" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="980.49" y="719.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (3 samples, 0.06%)</title><rect x="1157.0" y="757" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1160.01" y="767.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (11 samples, 0.20%)</title><rect x="1090.1" y="709" width="2.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1093.15" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.04%)</title><rect x="1157.0" y="469" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1160.01" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.02%)</title><rect x="1094.1" y="581" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1097.05" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;ITriangleRasterizer&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="977.3" y="709" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="980.27" y="719.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::unordered_map(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="725" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="359.66" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (2 samples, 0.04%)</title><rect x="1043.7" y="629" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1046.69" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="1070.6" y="693" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1073.61" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1106.4" y="549" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1109.43" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.02%)</title><rect x="1046.1" y="677" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1049.08" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061ae0&gt; (266 samples, 4.89%)</title><rect x="834.4" y="677" width="57.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="837.44" y="687.5" >Textur..</text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000061ae0&gt; (247 samples, 4.54%)</title><rect x="548.1" y="677" width="53.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="551.12" y="687.5" >Textu..</text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (3 samples, 0.06%)</title><rect x="1071.0" y="709" width="0.7" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="1074.04" y="719.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010010&gt; (1 samples, 0.02%)</title><rect x="1133.1" y="645" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1136.13" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1140.9" y="549" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1143.94" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_move_assign(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.02%)</title><rect x="1115.3" y="693" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1118.33" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (7 samples, 0.13%)</title><rect x="983.3" y="677" width="1.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="986.35" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1016.1" y="613" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1019.13" y="623.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000030520&gt; (3 samples, 0.06%)</title><rect x="356.9" y="741" width="0.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="359.88" y="751.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d720&gt; (37 samples, 0.68%)</title><rect x="996.2" y="661" width="8.0" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="999.16" y="671.5" ></text>
</g>
<g >
<title>pthread_once@@GLIBC_2.34 (1 samples, 0.02%)</title><rect x="10.2" y="773" width="0.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="13.22" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (4 samples, 0.07%)</title><rect x="1048.9" y="613" width="0.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1051.90" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.04%)</title><rect x="1137.7" y="693" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1140.69" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1115.8" y="677" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1118.76" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.06%)</title><rect x="984.2" y="661" width="0.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="987.22" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.02%)</title><rect x="1032.6" y="661" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1035.62" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.09%)</title><rect x="1142.7" y="549" width="1.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1145.68" y="559.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000064de0&gt; (3,494 samples, 64.28%)</title><rect x="357.5" y="741" width="758.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="360.53" y="751.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000064de0&gt;</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.4" y="709" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="359.45" y="719.5" ></text>
</g>
<g >
<title>_XimLcctstowcs&lt;000000000006dd20&gt; (1 samples, 0.02%)</title><rect x="347.3" y="789" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="350.33" y="799.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000024330&gt; (1 samples, 0.02%)</title><rect x="1157.0" y="53" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1160.01" y="63.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (1 samples, 0.02%)</title><rect x="1148.8" y="613" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1151.76" y="623.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.02%)</title><rect x="1114.0" y="693" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1117.03" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1146.8" y="581" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1149.80" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="355.6" y="709" width="0.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="358.58" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.04%)</title><rect x="1095.8" y="629" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1098.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (3 samples, 0.06%)</title><rect x="1088.2" y="629" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1091.19" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1103.2" y="565" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1106.17" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (49 samples, 0.90%)</title><rect x="1050.4" y="709" width="10.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1053.42" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="533" width="6.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1153.28" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.02%)</title><rect x="1093.0" y="565" width="0.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1095.97" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.04%)</title><rect x="1073.4" y="693" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1076.43" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (16 samples, 0.29%)</title><rect x="1046.5" y="677" width="3.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1049.52" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (4 samples, 0.07%)</title><rect x="1060.2" y="693" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1063.19" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1085.2" y="533" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1088.15" y="543.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061bc0&gt; (209 samples, 3.84%)</title><rect x="601.7" y="677" width="45.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="604.74" y="687.5" >Text..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="976.6" y="677" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="979.62" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (8 samples, 0.15%)</title><rect x="1111.6" y="677" width="1.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1114.64" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.04%)</title><rect x="1157.0" y="485" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1160.01" y="495.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dda0&gt; (1 samples, 0.02%)</title><rect x="1164.2" y="773" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1167.17" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="988.3" y="597" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="991.34" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (1 samples, 0.02%)</title><rect x="1142.2" y="661" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1145.24" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (5 samples, 0.09%)</title><rect x="1039.6" y="613" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1042.57" y="623.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d6c0&gt; (31 samples, 0.57%)</title><rect x="997.5" y="645" width="6.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1000.46" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::__copy_move_backward_a&lt;true, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (1 samples, 0.02%)</title><rect x="1092.5" y="613" width="0.3" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1095.53" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.13%)</title><rect x="1122.7" y="645" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1125.71" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (7 samples, 0.13%)</title><rect x="1120.8" y="501" width="1.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1123.75" y="511.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_backward_a1&lt;true, Triangle*, Triangle*&gt;(Triangle*, Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1092.5" y="597" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1095.53" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1095.1" y="629" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1098.14" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++(int) (1 samples, 0.02%)</title><rect x="355.1" y="709" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="358.14" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (32 samples, 0.59%)</title><rect x="1033.7" y="661" width="7.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1036.71" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.04%)</title><rect x="1106.2" y="629" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1109.21" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1156.8" y="549" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1159.79" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.04%)</title><rect x="1157.0" y="357" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1160.01" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1099.0" y="581" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1102.05" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.02%)</title><rect x="1067.6" y="677" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1070.57" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.4" y="389" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1160.44" y="399.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469c0&gt; (8 samples, 0.15%)</title><rect x="806.4" y="661" width="1.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="809.43" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (8 samples, 0.15%)</title><rect x="1013.7" y="645" width="1.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1016.74" y="655.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (1 samples, 0.02%)</title><rect x="815.6" y="661" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="818.55" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.02%)</title><rect x="1080.8" y="645" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1083.81" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.02%)</title><rect x="1094.1" y="597" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1097.05" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1126.6" y="629" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1129.62" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.02%)</title><rect x="1033.1" y="661" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1036.06" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (6 samples, 0.11%)</title><rect x="1046.9" y="661" width="1.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1049.95" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDrawUV_Point()&lt;0000000000061c90&gt; (61 samples, 1.12%)</title><rect x="943.6" y="677" width="13.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="946.62" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.02%)</title><rect x="1100.1" y="613" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1103.13" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1011.1" y="645" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1014.13" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (11 samples, 0.20%)</title><rect x="1090.1" y="645" width="2.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1093.15" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.02%)</title><rect x="1039.1" y="645" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1042.14" y="655.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (4 samples, 0.07%)</title><rect x="1166.1" y="789" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1169.12" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1061.7" y="693" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1064.71" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (4 samples, 0.07%)</title><rect x="1141.2" y="565" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1144.16" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="501" width="6.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1153.28" y="511.5" ></text>
</g>
<g >
<title>TrianglePipeline::getTrianglePipeline()&lt;0000000000066430&gt; (11 samples, 0.20%)</title><rect x="1090.1" y="725" width="2.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1093.15" y="735.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469c0&gt; (1 samples, 0.02%)</title><rect x="525.8" y="661" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="528.76" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.02%)</title><rect x="1108.6" y="661" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1111.60" y="671.5" ></text>
</g>
<g >
<title>Triangle::setTrianglePoint(int, Vec3d const&amp;)&lt;000000000007b4b0&gt; (1 samples, 0.02%)</title><rect x="989.0" y="693" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="991.99" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (2 samples, 0.04%)</title><rect x="1016.3" y="597" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1019.34" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (1 samples, 0.02%)</title><rect x="1150.9" y="309" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1153.93" y="319.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1103.2" y="549" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1106.17" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="976.2" y="677" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="979.18" y="687.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;0000000000079db0&gt; (5 samples, 0.09%)</title><rect x="1004.8" y="645" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1007.84" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::TryRecordAllocationFast(unsigned long)[inline] (1 samples, 0.02%)</title><rect x="1114.7" y="693" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1117.68" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1103.2" y="517" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1106.17" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="1088.8" y="709" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1091.84" y="719.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.02%)</title><rect x="347.3" y="773" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="350.33" y="783.5" ></text>
</g>
<g >
<title>TrianglePipeline::~TrianglePipeline()&lt;00000000000267c0&gt; (2 samples, 0.04%)</title><rect x="1148.8" y="661" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1151.76" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="974.0" y="677" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="977.01" y="687.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (8 samples, 0.15%)</title><rect x="962.9" y="677" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="965.94" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1115.8" y="709" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1118.76" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (26 samples, 0.48%)</title><rect x="1138.1" y="693" width="5.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1141.12" y="703.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (20 samples, 0.37%)</title><rect x="511.9" y="661" width="4.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="514.87" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.04%)</title><rect x="1141.6" y="501" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1144.59" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000028820&gt; (1 samples, 0.02%)</title><rect x="1157.0" y="85" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1160.01" y="95.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (24 samples, 0.44%)</title><rect x="1129.9" y="709" width="5.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1132.87" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006b550&gt; (2 samples, 0.04%)</title><rect x="1103.6" y="629" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1106.61" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_cget() const (1 samples, 0.02%)</title><rect x="356.9" y="629" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="359.88" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1115.5" y="725" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1118.54" y="735.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;)&lt;000000000007d2b0&gt; (2 samples, 0.04%)</title><rect x="1077.8" y="709" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1080.77" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.4" y="645" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1160.44" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.02%)</title><rect x="1149.8" y="629" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1152.84" y="639.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::~Mesh_Pipeline() (2 samples, 0.04%)</title><rect x="1157.0" y="661" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1160.01" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::begin() (1 samples, 0.02%)</title><rect x="1136.2" y="725" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1139.17" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.04%)</title><rect x="1089.7" y="661" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1092.71" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.02%)</title><rect x="1039.4" y="645" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1042.35" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;&amp;&amp;) (1 samples, 0.02%)</title><rect x="1092.8" y="581" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1095.75" y="591.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007b750&gt; (14 samples, 0.26%)</title><rect x="647.1" y="677" width="3.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="650.10" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_backward_a2&lt;true, Triangle*, Triangle*&gt;(Triangle*, Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1092.5" y="581" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1095.53" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.02%)</title><rect x="1135.9" y="725" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1138.95" y="735.5" ></text>
</g>
<g >
<title>Triangle::setTexture(std::shared_ptr&lt;TexturePNG&gt;)&lt;000000000007b530&gt; (1 samples, 0.02%)</title><rect x="992.9" y="677" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="995.90" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.07%)</title><rect x="1146.2" y="613" width="0.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1149.15" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.4" y="293" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1160.44" y="303.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.04%)</title><rect x="1147.0" y="645" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1150.02" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1105.1" y="565" width="0.7" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1108.13" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Mesh_Pipeline&gt;::~shared_ptr() (2 samples, 0.04%)</title><rect x="1157.0" y="741" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1160.01" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (7 samples, 0.13%)</title><rect x="1122.7" y="565" width="1.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1125.71" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="976.0" y="677" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="978.97" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (7 samples, 0.13%)</title><rect x="1132.3" y="677" width="1.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1135.26" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt; (2 samples, 0.04%)</title><rect x="344.7" y="661" width="0.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="347.72" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.07%)</title><rect x="1088.0" y="677" width="0.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1090.98" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (1 samples, 0.02%)</title><rect x="1076.7" y="661" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1079.69" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.02%)</title><rect x="1142.0" y="533" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1145.03" y="543.5" ></text>
</g>
<g >
<title>std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)[inline] (1 samples, 0.02%)</title><rect x="1182.6" y="757" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1185.62" y="767.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (6 samples, 0.11%)</title><rect x="1100.3" y="629" width="1.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1103.35" y="639.5" ></text>
</g>
<g >
<title>memalign_fast_path&lt;tcmalloc::malloc_oom&gt;[inline] (2 samples, 0.04%)</title><rect x="1180.9" y="757" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1183.88" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.02%)</title><rect x="1084.9" y="693" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1087.94" y="703.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;00000000000464d0&gt; (420 samples, 7.73%)</title><rect x="722.6" y="677" width="91.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="725.65" y="687.5" >TexturePNG..</text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_Safe_sequence_base()&lt;0000000000015da0&gt; (1 samples, 0.02%)</title><rect x="1041.7" y="645" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1044.74" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000c0cf0&gt; (10 samples, 0.18%)</title><rect x="348.0" y="789" width="2.2" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="350.98" y="799.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (1 samples, 0.02%)</title><rect x="1150.9" y="325" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1153.93" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (1 samples, 0.02%)</title><rect x="1102.5" y="581" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1105.52" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.09%)</title><rect x="1089.1" y="693" width="1.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1092.06" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.02%)</title><rect x="1011.8" y="661" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1014.78" y="671.5" ></text>
</g>
<g >
<title>Triangle::getTriangleZCenter()&lt;000000000007bcd0&gt; (1 samples, 0.02%)</title><rect x="1099.3" y="597" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1102.26" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (6 samples, 0.11%)</title><rect x="1042.0" y="677" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1044.96" y="687.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.02%)</title><rect x="1101.7" y="645" width="0.2" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1104.65" y="655.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.02%)</title><rect x="1104.9" y="629" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1107.91" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (4 samples, 0.07%)</title><rect x="1032.0" y="677" width="0.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1034.97" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.04%)</title><rect x="1113.6" y="645" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1116.59" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (2 samples, 0.04%)</title><rect x="1027.2" y="629" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1030.20" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (6 samples, 0.11%)</title><rect x="1142.5" y="613" width="1.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1145.46" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1061.5" y="661" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1064.49" y="671.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.04%)</title><rect x="1106.2" y="613" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1109.21" y="623.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::~__new_allocator() (1 samples, 0.02%)</title><rect x="1084.1" y="693" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1087.07" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.02%)</title><rect x="1020.5" y="693" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1023.47" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="976.2" y="693" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="979.18" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015c40&gt; (2 samples, 0.04%)</title><rect x="1019.6" y="661" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1022.60" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.02%)</title><rect x="1104.0" y="645" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1107.04" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt;* std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt;::operator()&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;&gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;) const (1 samples, 0.02%)</title><rect x="356.7" y="661" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="359.66" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.02%)</title><rect x="1106.9" y="725" width="0.2" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="1109.86" y="735.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (11 samples, 0.20%)</title><rect x="1090.1" y="661" width="2.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1093.15" y="671.5" ></text>
</g>
<g >
<title>_XlcGetCSValues&lt;0000000000052d90&gt; (1 samples, 0.02%)</title><rect x="347.5" y="789" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="350.55" y="799.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;000000000002a7a0&gt; (1 samples, 0.02%)</title><rect x="1165.7" y="789" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1168.69" y="799.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (19 samples, 0.35%)</title><rect x="1138.1" y="645" width="4.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1141.12" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (11 samples, 0.20%)</title><rect x="1090.1" y="629" width="2.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1093.15" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.02%)</title><rect x="1083.6" y="645" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1086.64" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__can_advance&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag, long&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, std::pair&lt;long, __gnu_debug::_Distance_precision&gt; const&amp;, int) (1 samples, 0.02%)</title><rect x="1093.0" y="629" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1095.97" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1091.9" y="581" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1094.88" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::insert_or_assign&lt;int&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, int&amp;) (1 samples, 0.02%)</title><rect x="356.9" y="677" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="359.88" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.17%)</title><rect x="1099.9" y="661" width="2.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1102.92" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="976.0" y="645" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="978.97" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1149.0" y="469" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1151.97" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;::_Node_iterator(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;*) (1 samples, 0.02%)</title><rect x="355.6" y="661" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="358.58" y="671.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1101.0" y="613" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1104.00" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (24 samples, 0.44%)</title><rect x="1129.9" y="725" width="5.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1132.87" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1085.2" y="661" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1088.15" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (1 samples, 0.02%)</title><rect x="1081.5" y="677" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1084.46" y="687.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.02%)</title><rect x="1079.7" y="645" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1082.73" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.02%)</title><rect x="1157.4" y="565" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1160.44" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (1 samples, 0.02%)</title><rect x="1102.3" y="549" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1105.30" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1063.2" y="613" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1066.23" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1149.0" y="517" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1151.97" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1085.2" y="549" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1088.15" y="559.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (7 samples, 0.13%)</title><rect x="1067.8" y="709" width="1.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1070.79" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (47 samples, 0.86%)</title><rect x="1031.3" y="693" width="10.2" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1034.32" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.13%)</title><rect x="1048.3" y="629" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1051.25" y="639.5" ></text>
</g>
<g >
<title>Mat4x4::matrixMatrixMultiplication(Mat4x4&amp;, Mat4x4&amp;)&lt;00000000000701f0&gt; (1 samples, 0.02%)</title><rect x="355.4" y="693" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="358.36" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.06%)</title><rect x="1062.8" y="629" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1065.80" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1094.3" y="629" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1097.27" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.02%)</title><rect x="1025.2" y="693" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1028.24" y="703.5" ></text>
</g>
<g >
<title>Event_Scanner::scanInput()&lt;000000000002c350&gt; (2 samples, 0.04%)</title><rect x="356.9" y="725" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="359.88" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.02%)</title><rect x="1129.0" y="677" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1132.00" y="687.5" ></text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.02%)</title><rect x="1187.2" y="741" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1190.18" y="751.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (6 samples, 0.11%)</title><rect x="1056.5" y="693" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1059.50" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (2 samples, 0.04%)</title><rect x="1007.0" y="645" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1010.01" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000024750&gt; (1 samples, 0.02%)</title><rect x="350.6" y="709" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="353.58" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.04%)</title><rect x="815.8" y="645" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="818.77" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (9 samples, 0.17%)</title><rect x="1026.3" y="677" width="2.0" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1029.33" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (25 samples, 0.46%)</title><rect x="1117.3" y="709" width="5.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1120.28" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1102.3" y="597" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1105.30" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1015.3" y="613" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1018.26" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (2 samples, 0.04%)</title><rect x="1036.5" y="645" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1039.53" y="655.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;00000000000430e0&gt; (10 samples, 0.18%)</title><rect x="720.5" y="677" width="2.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="723.47" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.02%)</title><rect x="1147.0" y="629" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1150.02" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="277" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1160.01" y="287.5" ></text>
</g>
<g >
<title>TextureList::insertOrAssignTexture(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003cbe0&gt; (1 samples, 0.02%)</title><rect x="1149.4" y="677" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1152.41" y="687.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (1 samples, 0.02%)</title><rect x="1164.8" y="789" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1167.82" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.02%)</title><rect x="1106.6" y="725" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1109.64" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;ITriangleRasterizer&gt;::shared_ptr&lt;TexturemapRasterizer, void&gt;(TexturemapRasterizer*) (2 samples, 0.04%)</title><rect x="976.8" y="709" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="979.84" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.04%)</title><rect x="1008.1" y="661" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1011.09" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;TexturemapRasterizer, void&gt;(TexturemapRasterizer*) (2 samples, 0.04%)</title><rect x="976.8" y="693" width="0.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="979.84" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt; (1 samples, 0.02%)</title><rect x="350.6" y="741" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="353.58" y="751.5" ></text>
</g>
<g >
<title>brk@@GLIBC_2.2.5&lt;0000000000105100&gt; (1 samples, 0.02%)</title><rect x="1165.0" y="789" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1168.04" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.04%)</title><rect x="1157.0" y="213" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1160.01" y="223.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000dd700&gt; (3 samples, 0.06%)</title><rect x="350.8" y="789" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="353.80" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1085.2" y="565" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1088.15" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1150.1" y="645" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1153.06" y="655.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000061d00&gt; (3 samples, 0.06%)</title><rect x="816.2" y="677" width="0.7" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="819.20" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (4 samples, 0.07%)</title><rect x="1045.2" y="661" width="0.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1048.21" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1102.3" y="581" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1105.30" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (3 samples, 0.06%)</title><rect x="1060.4" y="677" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1063.41" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1097.3" y="629" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1100.31" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_from_begin() const (1 samples, 0.02%)</title><rect x="1093.0" y="581" width="0.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1095.97" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (22 samples, 0.40%)</title><rect x="1117.7" y="597" width="4.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1120.72" y="607.5" ></text>
</g>
<g >
<title>XFilterEvent&lt;000000000001dc30&gt; (1 samples, 0.02%)</title><rect x="345.4" y="789" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="348.38" y="799.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (2 samples, 0.04%)</title><rect x="1137.0" y="693" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1140.03" y="703.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;00000000000469c0&gt; (2 samples, 0.04%)</title><rect x="964.7" y="677" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="967.68" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (4 samples, 0.07%)</title><rect x="1132.9" y="661" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1135.91" y="671.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;00000000000227e0&gt; (35 samples, 0.64%)</title><rect x="1149.4" y="757" width="7.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1152.41" y="767.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;00000000000229a0&gt; (3,663 samples, 67.38%)</title><rect x="354.3" y="757" width="795.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="357.28" y="767.5" >Engine_3D::engine_update()&lt;00000000000229a0&gt;</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.09%)</title><rect x="989.2" y="661" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="992.21" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (7 samples, 0.13%)</title><rect x="1122.7" y="629" width="1.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1125.71" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017da0&gt; (1 samples, 0.02%)</title><rect x="1080.6" y="645" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1083.60" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (44 samples, 0.81%)</title><rect x="1138.1" y="709" width="9.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1141.12" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="1120.1" y="565" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1123.10" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.04%)</title><rect x="1157.0" y="693" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1160.01" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (6 samples, 0.11%)</title><rect x="1142.5" y="677" width="1.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1145.46" y="687.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (2 samples, 0.04%)</title><rect x="344.7" y="741" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="347.72" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="976.0" y="693" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="978.97" y="703.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;0000000000043140&gt; (1 samples, 0.02%)</title><rect x="720.3" y="677" width="0.2" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="723.26" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance&lt;long&gt;(std::pair&lt;long, __gnu_debug::_Distance_precision&gt; const&amp;, int) const (1 samples, 0.02%)</title><rect x="1093.0" y="613" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1095.97" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;Triangle&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1083.2" y="677" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1086.20" y="687.5" ></text>
</g>
<g >
<title>Triangle::setTexture(std::shared_ptr&lt;TexturePNG&gt;)&lt;000000000007b530&gt; (3 samples, 0.06%)</title><rect x="1062.8" y="709" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1065.80" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="629" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1160.01" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061bc0&gt; (237 samples, 4.36%)</title><rect x="892.2" y="677" width="51.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="895.18" y="687.5" >Textu..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.02%)</title><rect x="1135.1" y="725" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1138.08" y="735.5" ></text>
</g>
<g >
<title>TexturePNG::~TexturePNG()&lt;000000000003d8c0&gt; (1 samples, 0.02%)</title><rect x="1157.4" y="421" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1160.44" y="431.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (58 samples, 1.07%)</title><rect x="1092.5" y="693" width="12.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1095.53" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="977.3" y="677" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="980.27" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (19 samples, 0.35%)</title><rect x="1138.1" y="629" width="4.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1141.12" y="639.5" ></text>
</g>
<g >
<title>Vec3d::toThousandths()&lt;000000000007cb10&gt; (3 samples, 0.06%)</title><rect x="974.4" y="693" width="0.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="977.45" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="533" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1160.01" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.02%)</title><rect x="1101.4" y="549" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1104.43" y="559.5" ></text>
</g>
<g >
<title>free_fast_path[inline] (1 samples, 0.02%)</title><rect x="1148.8" y="549" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1151.76" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000024210&gt; (1 samples, 0.02%)</title><rect x="1157.0" y="37" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1160.01" y="47.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::~__new_allocator() (1 samples, 0.02%)</title><rect x="356.0" y="645" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="359.01" y="655.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt; (3,703 samples, 68.12%)</title><rect x="354.3" y="789" width="803.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="357.28" y="799.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt;</text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (5 samples, 0.09%)</title><rect x="1089.1" y="725" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1092.06" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*)[inline] (2 samples, 0.04%)</title><rect x="1157.0" y="341" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1160.01" y="351.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1081.5" y="629" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1084.46" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.04%)</title><rect x="1157.0" y="677" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1160.01" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.02%)</title><rect x="1157.4" y="677" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1160.44" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1093.2" y="613" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1096.19" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1131.8" y="645" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1134.82" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (3 samples, 0.06%)</title><rect x="1096.7" y="613" width="0.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1099.66" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1097.1" y="565" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1100.09" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.04%)</title><rect x="1042.8" y="661" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1045.83" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.07%)</title><rect x="1140.3" y="565" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1143.29" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (6 samples, 0.11%)</title><rect x="961.6" y="661" width="1.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="964.64" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012ba0&gt; (6 samples, 0.11%)</title><rect x="1014.2" y="629" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1017.17" y="639.5" ></text>
</g>
<g >
<title>XML_SetBillionLaughsAttackProtectionActivationThreshold (2 samples, 0.04%)</title><rect x="345.6" y="789" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="348.59" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1101.0" y="565" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1104.00" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="197" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1160.01" y="207.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="974.0" y="645" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="977.01" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.04%)</title><rect x="1101.2" y="581" width="0.5" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1104.22" y="591.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;0000000000037600&gt; (2 samples, 0.04%)</title><rect x="10.7" y="789" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="13.65" y="799.5" ></text>
</g>
<g >
<title>_IO_vfprintf (2 samples, 0.04%)</title><rect x="346.5" y="789" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="349.46" y="799.5" ></text>
</g>
<g >
<title>Triangle::setUVPoint(int, Vec2d const&amp;)&lt;000000000007b4f0&gt; (1 samples, 0.02%)</title><rect x="1063.9" y="709" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1066.88" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.06%)</title><rect x="1088.2" y="645" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1091.19" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (2 samples, 0.04%)</title><rect x="351.5" y="789" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="354.45" y="799.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1106.0" y="645" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1108.99" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (18 samples, 0.33%)</title><rect x="985.1" y="693" width="3.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="988.08" y="703.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000063f40&gt; (495 samples, 9.11%)</title><rect x="977.9" y="725" width="107.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="980.92" y="735.5" >Renderer::pro..</text>
</g>
<g >
<title>__vsnprintf@@GLIBC_2.2.5&lt;00000000000814d0&gt; (1 samples, 0.02%)</title><rect x="1163.7" y="789" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1166.73" y="799.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_a1&lt;false, Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (3 samples, 0.06%)</title><rect x="1105.1" y="645" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1108.13" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1093.2" y="629" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1096.19" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1127.5" y="645" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1130.48" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.02%)</title><rect x="1109.9" y="693" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1112.90" y="703.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="974.0" y="693" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="977.01" y="703.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007bb80&gt; (3 samples, 0.06%)</title><rect x="1061.9" y="709" width="0.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1064.93" y="719.5" ></text>
</g>
<g >
<title>std::pair&lt;__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::forward_iterator_tag&gt;, bool&gt; std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::insert_or_assign&lt;int&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, int&amp;) (1 samples, 0.02%)</title><rect x="356.9" y="693" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="359.88" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFB_Scanline_prep(Triangle&amp;)&lt;0000000000061e40&gt; (15 samples, 0.28%)</title><rect x="522.7" y="677" width="3.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="525.72" y="687.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (2 samples, 0.04%)</title><rect x="1149.8" y="677" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1152.84" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.02%)</title><rect x="1104.0" y="629" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1107.04" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1148.8" y="629" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1151.76" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1062.8" y="693" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1065.80" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1013.1" y="613" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1016.09" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1106.4" y="597" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1109.43" y="607.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;0000000000745500&gt; (18 samples, 0.33%)</title><rect x="1177.4" y="789" width="3.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1180.41" y="799.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d6c0&gt; (5 samples, 0.09%)</title><rect x="1074.5" y="693" width="1.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1077.52" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TrianglePipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 0.07%)</title><rect x="1148.5" y="725" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1151.54" y="735.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.02%)</title><rect x="1104.3" y="597" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1107.26" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.04%)</title><rect x="1075.6" y="677" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1078.60" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1149.2" y="661" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1152.19" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (19 samples, 0.35%)</title><rect x="1138.1" y="677" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1141.12" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.06%)</title><rect x="1091.2" y="581" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1094.23" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (5 samples, 0.09%)</title><rect x="989.2" y="693" width="1.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="992.21" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1095.6" y="597" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1098.57" y="607.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.02%)</title><rect x="801.9" y="661" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="804.88" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (23 samples, 0.42%)</title><rect x="1012.0" y="661" width="5.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1015.00" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1126.6" y="677" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1129.62" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.04%)</title><rect x="1028.3" y="677" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1031.28" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFT_Scanline_prep(Triangle&amp;)&lt;0000000000061830&gt; (9 samples, 0.17%)</title><rect x="813.8" y="677" width="2.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="816.82" y="687.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;&gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;)[inline] (1 samples, 0.02%)</title><rect x="356.7" y="613" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="359.66" y="623.5" ></text>
</g>
<g >
<title>tc_free (1 samples, 0.02%)</title><rect x="1187.2" y="789" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1190.18" y="799.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.20%)</title><rect x="1092.5" y="661" width="2.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1095.53" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.04%)</title><rect x="1075.6" y="693" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1078.60" y="703.5" ></text>
</g>
<g >
<title>OBJ::buildMesh(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000510a0&gt; (35 samples, 0.64%)</title><rect x="1149.4" y="709" width="7.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1152.41" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1146.8" y="565" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1149.80" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (2 samples, 0.04%)</title><rect x="1076.9" y="709" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1079.91" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (1 samples, 0.02%)</title><rect x="1042.6" y="645" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1045.61" y="655.5" ></text>
</g>
<g >
<title>__poll@@GLIBC_2.2.5&lt;0000000000102f20&gt; (2 samples, 0.04%)</title><rect x="1163.3" y="789" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1166.30" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (5 samples, 0.09%)</title><rect x="1070.0" y="709" width="1.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1072.96" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.07%)</title><rect x="1148.5" y="709" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1151.54" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1081.5" y="549" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1084.46" y="559.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (1 samples, 0.02%)</title><rect x="1111.4" y="661" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1114.42" y="671.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;00000000001128d0&gt; (6 samples, 0.11%)</title><rect x="1181.3" y="789" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1184.32" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="988.3" y="613" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="991.34" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt; (23 samples, 0.42%)</title><rect x="1151.6" y="277" width="5.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1154.58" y="287.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (23 samples, 0.42%)</title><rect x="1117.7" y="613" width="5.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1120.72" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1094.3" y="613" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1097.27" y="623.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a1&lt;false, SDL_Color const*, SDL_Color*&gt;(SDL_Color const*, SDL_Color const*, SDL_Color*) (1 samples, 0.02%)</title><rect x="1150.7" y="309" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1153.71" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="1103.2" y="533" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1106.17" y="543.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1116.2" y="741" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1119.20" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (7 samples, 0.13%)</title><rect x="1122.7" y="581" width="1.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1125.71" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::get_allocator() const (1 samples, 0.02%)</title><rect x="1115.1" y="693" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1118.11" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1149.0" y="533" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1151.97" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt;[inline] (1 samples, 0.02%)</title><rect x="351.7" y="741" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="354.67" y="751.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.06%)</title><rect x="1102.7" y="597" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1105.74" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.02%)</title><rect x="1129.7" y="709" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1132.65" y="719.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry(std::istream&amp;, bool)&lt;000000000012a9f0&gt; (1 samples, 0.02%)</title><rect x="1182.6" y="789" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1185.62" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.04%)</title><rect x="1101.2" y="597" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1104.22" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (5 samples, 0.09%)</title><rect x="1131.2" y="677" width="1.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1134.17" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (7 samples, 0.13%)</title><rect x="1122.7" y="597" width="1.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1125.71" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::~_Safe_container() (1 samples, 0.02%)</title><rect x="357.3" y="709" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="360.31" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (4 samples, 0.07%)</title><rect x="1079.3" y="709" width="0.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1082.29" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.09%)</title><rect x="1087.8" y="693" width="1.0" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1090.76" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (25 samples, 0.46%)</title><rect x="1117.3" y="629" width="5.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1120.28" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="1085.2" y="597" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1088.15" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned int)&lt;0000000000028ca0&gt; (1 samples, 0.02%)</title><rect x="1157.0" y="101" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1160.01" y="111.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (8 samples, 0.15%)</title><rect x="1048.3" y="661" width="1.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1051.25" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)[inline] (2 samples, 0.04%)</title><rect x="355.8" y="677" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="358.79" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.04%)</title><rect x="1157.0" y="325" width="0.4" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1160.01" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000286e0&gt; (2 samples, 0.04%)</title><rect x="344.7" y="693" width="0.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="347.72" y="703.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (7 samples, 0.13%)</title><rect x="1122.7" y="613" width="1.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1125.71" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (2 samples, 0.04%)</title><rect x="1010.5" y="677" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1013.48" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (17 samples, 0.31%)</title><rect x="1085.4" y="725" width="3.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1088.37" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (7 samples, 0.13%)</title><rect x="1105.1" y="693" width="1.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1108.13" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1105.1" y="581" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1108.13" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (3 samples, 0.06%)</title><rect x="1113.4" y="677" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1116.37" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.02%)</title><rect x="1071.7" y="709" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1074.70" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.06%)</title><rect x="1098.6" y="613" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1101.61" y="623.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt;(unsigned long const&amp;, unsigned long const&amp;) (1 samples, 0.02%)</title><rect x="1038.5" y="597" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1041.48" y="607.5" ></text>
</g>
<g >
<title>0x00000000ffffffff (1 samples, 0.02%)</title><rect x="10.0" y="789" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_a2&lt;false, Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (3 samples, 0.06%)</title><rect x="1105.1" y="629" width="0.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1108.13" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000061d00&gt; (4 samples, 0.07%)</title><rect x="526.2" y="677" width="0.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="529.20" y="687.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.02%)</title><rect x="1156.8" y="485" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1159.79" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1094.3" y="597" width="0.4" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1097.27" y="607.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (35 samples, 0.64%)</title><rect x="1149.4" y="725" width="7.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1152.41" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (6 samples, 0.11%)</title><rect x="1015.5" y="629" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1018.47" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (7 samples, 0.13%)</title><rect x="1119.0" y="581" width="1.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1122.02" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.04%)</title><rect x="987.5" y="661" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="990.47" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="355.1" y="693" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="358.14" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.02%)</title><rect x="1094.7" y="597" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1097.71" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1144.4" y="645" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1147.42" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::move_backward&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (3 samples, 0.06%)</title><rect x="1092.5" y="645" width="0.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1095.53" y="655.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, SDL_Color&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, std::allocator&lt;SDL_Color&gt;&amp;) (2 samples, 0.04%)</title><rect x="1150.7" y="389" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1153.71" y="399.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (7 samples, 0.13%)</title><rect x="1120.8" y="549" width="1.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1123.75" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (6 samples, 0.11%)</title><rect x="1144.6" y="645" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1147.63" y="655.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (8 samples, 0.15%)</title><rect x="1034.8" y="613" width="1.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1037.79" y="623.5" ></text>
</g>
<g >
<title>_XFlush&lt;0000000000044a10&gt; (2 samples, 0.04%)</title><rect x="346.9" y="789" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="349.89" y="799.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (1 samples, 0.02%)</title><rect x="1110.8" y="645" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1113.77" y="655.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (1 samples, 0.02%)</title><rect x="1013.5" y="629" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1016.52" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_backward&lt;true, false, std::random_access_iterator_tag&gt;::__copy_move_b&lt;Triangle*, Triangle*&gt;(Triangle*, Triangle*, Triangle*) (1 samples, 0.02%)</title><rect x="1092.5" y="565" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1095.53" y="575.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (9 samples, 0.17%)</title><rect x="1090.6" y="613" width="1.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1093.58" y="623.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007d6c0&gt; (2 samples, 0.04%)</title><rect x="1006.6" y="645" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1009.57" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.4" y="405" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1160.44" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1099.9" y="597" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1102.92" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1157.4" y="693" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1160.44" y="703.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1157.4" y="549" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1160.44" y="559.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.02%)</title><rect x="1134.9" y="693" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1137.86" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (3 samples, 0.06%)</title><rect x="1096.7" y="581" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1099.66" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.02%)</title><rect x="1081.9" y="677" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1084.90" y="687.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (1 samples, 0.02%)</title><rect x="525.5" y="661" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="528.54" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1071.5" y="693" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1074.48" y="703.5" ></text>
</g>
<g >
<title>tc_memalign (2 samples, 0.04%)</title><rect x="1180.9" y="773" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1183.88" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.04%)</title><rect x="989.9" y="597" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="992.86" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.02%)</title><rect x="351.7" y="757" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="354.67" y="767.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (17 samples, 0.31%)</title><rect x="1143.8" y="661" width="3.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1146.76" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="517" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1160.01" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.02%)</title><rect x="1142.2" y="677" width="0.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1145.24" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (21 samples, 0.39%)</title><rect x="1109.7" y="725" width="4.5" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1112.68" y="735.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1079.1" y="677" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1082.08" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (39 samples, 0.72%)</title><rect x="1032.8" y="677" width="8.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1035.84" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.06%)</title><rect x="1097.3" y="613" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1100.31" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangleInitializer(Triangle&amp;)&lt;0000000000061610&gt; (2 samples, 0.04%)</title><rect x="815.8" y="677" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="818.77" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="976.2" y="661" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="979.18" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (19 samples, 0.35%)</title><rect x="1138.1" y="661" width="4.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1141.12" y="671.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;00000000000663f0&gt; (1 samples, 0.02%)</title><rect x="1103.4" y="597" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1106.39" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (5 samples, 0.09%)</title><rect x="1128.6" y="693" width="1.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1131.57" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.02%)</title><rect x="988.8" y="661" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="991.77" y="671.5" ></text>
</g>
<g >
<title>Camera::rotateCamera(Vec3d)&lt;000000000005cac0&gt; (1 samples, 0.02%)</title><rect x="355.4" y="709" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="358.36" y="719.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="977.1" y="661" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="980.05" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007da80&gt; (44 samples, 0.81%)</title><rect x="994.6" y="677" width="9.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="997.64" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.02%)</title><rect x="1103.8" y="581" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1106.82" y="591.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1115.8" y="629" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1118.76" y="639.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (2 samples, 0.04%)</title><rect x="1131.4" y="645" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1134.39" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="976.2" y="645" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="979.18" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1135.7" y="709" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1138.73" y="719.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.02%)</title><rect x="1017.0" y="661" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1019.99" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1102.1" y="613" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1105.09" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (1 samples, 0.02%)</title><rect x="1097.5" y="581" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1100.53" y="591.5" ></text>
</g>
<g >
<title>operator+(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007cf40&gt; (1 samples, 0.02%)</title><rect x="1007.4" y="661" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1010.44" y="671.5" ></text>
</g>
<g >
<title>Input_Parser::getRangeInput[abi:cxx11]()&lt;00000000000304c0&gt; (1 samples, 0.02%)</title><rect x="356.7" y="741" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="359.66" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (7 samples, 0.13%)</title><rect x="1029.6" y="677" width="1.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1032.58" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1059.3" y="677" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1062.32" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;)[inline] (2 samples, 0.04%)</title><rect x="1157.0" y="261" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1160.01" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (3 samples, 0.06%)</title><rect x="1110.8" y="661" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1113.77" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.02%)</title><rect x="1100.1" y="629" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1103.13" y="639.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="1037.2" y="613" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1040.18" y="623.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::deallocate(SDL_Color*, unsigned long) (2 samples, 0.04%)</title><rect x="1157.0" y="117" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1160.01" y="127.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__miter_base&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.02%)</title><rect x="1092.8" y="629" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1095.75" y="639.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (1 samples, 0.02%)</title><rect x="1013.3" y="629" width="0.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1016.30" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (8 samples, 0.15%)</title><rect x="1037.4" y="645" width="1.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1040.40" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (6 samples, 0.11%)</title><rect x="1015.5" y="645" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1018.47" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (3 samples, 0.06%)</title><rect x="1136.8" y="709" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1139.82" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.02%)</title><rect x="976.6" y="693" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="979.62" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (3 samples, 0.06%)</title><rect x="1137.5" y="709" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1140.47" y="719.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.04%)</title><rect x="975.1" y="693" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="978.10" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d720&gt; (4 samples, 0.07%)</title><rect x="1006.1" y="661" width="0.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1009.14" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.09%)</title><rect x="1145.9" y="645" width="1.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1148.93" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.02%)</title><rect x="1102.1" y="581" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1105.09" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.02%)</title><rect x="1095.1" y="597" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1098.14" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (8 samples, 0.15%)</title><rect x="1099.9" y="645" width="1.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1102.92" y="655.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (20 samples, 0.37%)</title><rect x="802.1" y="661" width="4.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="805.09" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.02%)</title><rect x="1129.2" y="677" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1132.22" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::TexturemapRasterizer(SDL_Renderer*) (1 samples, 0.02%)</title><rect x="358.6" y="709" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="361.62" y="719.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f320&gt; (11 samples, 0.20%)</title><rect x="354.3" y="741" width="2.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="357.28" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000dd670&gt; (1 samples, 0.02%)</title><rect x="1045.6" y="645" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1048.65" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.02%)</title><rect x="1104.7" y="597" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1107.69" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.02%)</title><rect x="1085.2" y="677" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1088.15" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.02%)</title><rect x="1149.4" y="597" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1152.41" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="421" width="6.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1153.28" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1126.4" y="693" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1129.40" y="703.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (18 samples, 0.33%)</title><rect x="1138.3" y="597" width="3.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1141.34" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;, bool&gt; std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::try_emplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&amp;&gt;(std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, false, true&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, int&amp;) (1 samples, 0.02%)</title><rect x="356.9" y="661" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="359.88" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000249b0&gt; (1 samples, 0.02%)</title><rect x="350.6" y="757" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="353.58" y="767.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.02%)</title><rect x="1150.7" y="325" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1153.71" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1115.8" y="597" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1118.76" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.06%)</title><rect x="1061.1" y="709" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1064.06" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.04%)</title><rect x="1097.5" y="597" width="0.5" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1100.53" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (11 samples, 0.20%)</title><rect x="1090.1" y="693" width="2.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1093.15" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (1 samples, 0.02%)</title><rect x="1100.1" y="581" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1103.13" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012a00&gt; (1 samples, 0.02%)</title><rect x="1094.5" y="565" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1097.49" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1103.2" y="581" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1106.17" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.02%)</title><rect x="1008.3" y="629" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1011.31" y="639.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007b600&gt; (17 samples, 0.31%)</title><rect x="970.3" y="693" width="3.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="973.32" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.06%)</title><rect x="1123.6" y="533" width="0.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1126.58" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000128d0&gt; (1 samples, 0.02%)</title><rect x="1100.1" y="597" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1103.13" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.02%)</title><rect x="1094.7" y="613" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1097.71" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000dd610&gt; (3 samples, 0.06%)</title><rect x="353.0" y="789" width="0.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="355.97" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.04%)</title><rect x="1075.6" y="709" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1078.60" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.06%)</title><rect x="1040.7" y="629" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1043.65" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.4" y="629" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1160.44" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (7 samples, 0.13%)</title><rect x="1122.7" y="693" width="1.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1125.71" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (19 samples, 0.35%)</title><rect x="1172.2" y="789" width="4.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1175.20" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_sequence() (1 samples, 0.02%)</title><rect x="1041.7" y="661" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1044.74" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="1142.0" y="565" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1145.03" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.02%)</title><rect x="1104.9" y="597" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1107.91" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.04%)</title><rect x="1095.8" y="613" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1098.79" y="623.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007d360&gt; (5 samples, 0.09%)</title><rect x="1078.2" y="709" width="1.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1081.21" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.02%)</title><rect x="1101.2" y="565" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1104.22" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (5 samples, 0.09%)</title><rect x="1080.2" y="709" width="1.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1083.16" y="719.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000543e0&gt; (2 samples, 0.04%)</title><rect x="1157.0" y="549" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1160.01" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__copy_move_backward_a&lt;true, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1092.5" y="629" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1095.53" y="639.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010010&gt; (1 samples, 0.02%)</title><rect x="1075.8" y="629" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1078.82" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator=(std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.02%)</title><rect x="1156.8" y="661" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1159.79" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="1007.2" y="629" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1010.23" y="639.5" ></text>
</g>
<g >
<title>do_free_with_callback[inline] (1 samples, 0.02%)</title><rect x="977.3" y="597" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="980.27" y="607.5" ></text>
</g>
<g >
<title>operator*(float const&amp;, Vec3d const&amp;)&lt;000000000007d200&gt; (2 samples, 0.04%)</title><rect x="1007.0" y="661" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1010.01" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_to_end() const (1 samples, 0.02%)</title><rect x="1103.8" y="597" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1106.82" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (1 samples, 0.02%)</title><rect x="1157.4" y="437" width="0.3" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1160.44" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (5 samples, 0.09%)</title><rect x="1133.8" y="677" width="1.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1136.78" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;)[inline] (1 samples, 0.02%)</title><rect x="355.8" y="629" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="358.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.04%)</title><rect x="1009.0" y="693" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1011.96" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007d720&gt; (9 samples, 0.17%)</title><rect x="1065.0" y="693" width="1.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1067.97" y="703.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (5 samples, 0.09%)</title><rect x="1039.6" y="629" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1042.57" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.02%)</title><rect x="1101.7" y="613" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1104.65" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (5 samples, 0.09%)</title><rect x="1023.5" y="677" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1026.51" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.02%)</title><rect x="1105.8" y="645" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1108.78" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;::pair(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;) (1 samples, 0.02%)</title><rect x="356.7" y="597" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="359.66" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.02%)</title><rect x="984.9" y="677" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="987.87" y="687.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.02%)</title><rect x="977.3" y="613" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="980.27" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="990.9" y="677" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="993.95" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.04%)</title><rect x="1146.6" y="597" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1149.59" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.07%)</title><rect x="1068.4" y="645" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1071.44" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt;[inline] (23 samples, 0.42%)</title><rect x="1151.6" y="261" width="5.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1154.58" y="271.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000061bc0&gt; (16 samples, 0.29%)</title><rect x="966.2" y="693" width="3.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="969.20" y="703.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator(std::allocator&lt;char&gt; const&amp;)[inline] (1 samples, 0.02%)</title><rect x="355.8" y="597" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="358.79" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.02%)</title><rect x="1104.9" y="613" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1107.91" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (13 samples, 0.24%)</title><rect x="1041.5" y="693" width="2.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1044.52" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="1101.7" y="565" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1104.65" y="575.5" ></text>
</g>
<g >
<title>memalign[inline] (1 samples, 0.02%)</title><rect x="1181.1" y="741" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1184.10" y="751.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.04%)</title><rect x="353.8" y="789" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="356.84" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.06%)</title><rect x="1127.0" y="661" width="0.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1130.05" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.02%)</title><rect x="1099.5" y="581" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1102.48" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.02%)</title><rect x="970.1" y="693" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="973.11" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017da0&gt; (4 samples, 0.07%)</title><rect x="1030.0" y="629" width="0.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1033.02" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.04%)</title><rect x="1157.0" y="245" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1160.01" y="255.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (23 samples, 0.42%)</title><rect x="1094.9" y="661" width="5.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1097.92" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::GetFastPathCache()[inline] (1 samples, 0.02%)</title><rect x="1180.9" y="725" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1183.88" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_create_storage(unsigned long) (24 samples, 0.44%)</title><rect x="1151.4" y="373" width="5.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1154.36" y="383.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.04%)</title><rect x="1082.5" y="645" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1085.55" y="655.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::malloc_oom&gt;[inline] (1 samples, 0.02%)</title><rect x="1180.9" y="741" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1183.88" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000286e0&gt; (1 samples, 0.02%)</title><rect x="350.6" y="773" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="353.58" y="783.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.06%)</title><rect x="1127.0" y="677" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1130.05" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000286e0&gt; (24 samples, 0.44%)</title><rect x="1151.4" y="309" width="5.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1154.36" y="319.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.02%)</title><rect x="1081.5" y="645" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1084.46" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;00000000000129d0&gt; (1 samples, 0.02%)</title><rect x="1102.3" y="565" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1105.30" y="575.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromTriangles(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;)&lt;00000000000662e0&gt; (7 samples, 0.13%)</title><rect x="1105.1" y="725" width="1.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1108.13" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.02%)</title><rect x="1103.2" y="501" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1106.17" y="511.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;000000000000ffd0&gt; (1 samples, 0.02%)</title><rect x="1094.5" y="549" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1097.49" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.02%)</title><rect x="1094.7" y="629" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1097.71" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (1 samples, 0.02%)</title><rect x="1149.0" y="549" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1151.97" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (3 samples, 0.06%)</title><rect x="991.2" y="693" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="994.16" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.02%)</title><rect x="1104.5" y="613" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1107.47" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.04%)</title><rect x="1157.0" y="149" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1160.01" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction(std::allocator&lt;char&gt; const&amp;)[inline] (1 samples, 0.02%)</title><rect x="355.8" y="613" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="358.79" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.04%)</title><rect x="1099.5" y="613" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1102.48" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (3 samples, 0.06%)</title><rect x="1114.9" y="709" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1117.89" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.02%)</title><rect x="1076.7" y="677" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1079.69" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (17 samples, 0.31%)</title><rect x="1110.3" y="693" width="3.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1113.33" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.02%)</title><rect x="994.4" y="661" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="997.42" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (25 samples, 0.46%)</title><rect x="1011.8" y="677" width="5.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1014.78" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.02%)</title><rect x="1028.5" y="661" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1031.50" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (14 samples, 0.26%)</title><rect x="1025.7" y="693" width="3.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1028.68" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.02%)</title><rect x="1150.1" y="629" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1153.06" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::Push(void*)[inline] (1 samples, 0.02%)</title><rect x="977.3" y="565" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="980.27" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="181" width="0.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1160.01" y="191.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (2 samples, 0.04%)</title><rect x="1157.0" y="293" width="0.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1160.01" y="303.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.02%)</title><rect x="1037.2" y="645" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1040.18" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;) (1 samples, 0.02%)</title><rect x="1069.7" y="709" width="0.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1072.74" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.02%)</title><rect x="1008.7" y="693" width="0.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1011.75" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000024950&gt;[inline] (2 samples, 0.04%)</title><rect x="344.7" y="645" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="347.72" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_get_Tp_allocator() (1 samples, 0.02%)</title><rect x="1114.9" y="693" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1117.89" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.04%)</title><rect x="1157.0" y="373" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1160.01" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt;[inline] (1 samples, 0.02%)</title><rect x="1076.7" y="645" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1079.69" y="655.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010010&gt; (2 samples, 0.04%)</title><rect x="1014.8" y="613" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1017.82" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.04%)</title><rect x="1033.3" y="661" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1036.27" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base() (4 samples, 0.07%)</title><rect x="1043.5" y="661" width="0.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1046.48" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.02%)</title><rect x="1007.4" y="645" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1010.44" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000254d0&gt; (2 samples, 0.04%)</title><rect x="976.4" y="709" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="979.40" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.02%)</title><rect x="1099.0" y="549" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1102.05" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="597" width="6.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1153.28" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (24 samples, 0.44%)</title><rect x="1099.9" y="677" width="5.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1102.92" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.02%)</title><rect x="1149.0" y="565" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1151.97" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (1 samples, 0.02%)</title><rect x="1157.4" y="309" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1160.44" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.02%)</title><rect x="1126.6" y="645" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1129.62" y="655.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.04%)</title><rect x="1040.2" y="597" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1043.22" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::ClassIndexMaybe(unsigned long, unsigned int*)[inline] (1 samples, 0.02%)</title><rect x="1037.2" y="565" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1040.18" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (3 samples, 0.06%)</title><rect x="1018.3" y="645" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1021.30" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (1 samples, 0.02%)</title><rect x="1147.7" y="709" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1150.67" y="719.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.28%)</title><rect x="1101.9" y="661" width="3.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1104.87" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) const (1 samples, 0.02%)</title><rect x="356.9" y="645" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="359.88" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.02%)</title><rect x="988.3" y="645" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="991.34" y="655.5" ></text>
</g>
<g >
<title>_XwcFreeStringList&lt;0000000000056730&gt; (1 samples, 0.02%)</title><rect x="347.8" y="789" width="0.2" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="350.76" y="799.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.02%)</title><rect x="1142.2" y="629" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1145.24" y="639.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (30 samples, 0.55%)</title><rect x="1150.3" y="437" width="6.5" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1153.28" y="447.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (3 samples, 0.06%)</title><rect x="1040.7" y="661" width="0.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1043.65" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.02%)</title><rect x="1115.8" y="645" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1118.76" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (7 samples, 0.13%)</title><rect x="1120.8" y="581" width="1.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1123.75" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.02%)</title><rect x="1157.4" y="501" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1160.44" y="511.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a2&lt;false, SDL_Color const*, SDL_Color*&gt;(SDL_Color const*, SDL_Color const*, SDL_Color*) (1 samples, 0.02%)</title><rect x="1150.7" y="293" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1153.71" y="303.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;0000000000079db0&gt; (2 samples, 0.04%)</title><rect x="1006.6" y="629" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1009.57" y="639.5" ></text>
</g>
<g >
<title>do_free[inline] (1 samples, 0.02%)</title><rect x="1148.8" y="533" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1151.76" y="543.5" ></text>
</g>
<g >
<title>TexturePNG::~TexturePNG()&lt;000000000003d8c0&gt; (2 samples, 0.04%)</title><rect x="1157.0" y="309" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1160.01" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.02%)</title><rect x="1106.4" y="581" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1109.43" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.06%)</title><rect x="1080.4" y="677" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1083.38" y="687.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;000000000000ffc0&gt; (2 samples, 0.04%)</title><rect x="1014.4" y="613" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1017.39" y="623.5" ></text>
</g>
</g>
</svg>
