<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="902.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="885" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="885" > </text>
<g id="frames">
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1167.2" y="565" width="0.4" height="15.0" fill="rgb(247,171,47)" rx="2" ry="2" />
<text  x="1170.21" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1174.9" y="693" width="0.9" height="15.0" fill="rgb(241,170,6)" rx="2" ry="2" />
<text  x="1177.94" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.03%)</title><rect x="1188.0" y="421" width="0.4" height="15.0" fill="rgb(220,71,31)" rx="2" ry="2" />
<text  x="1190.96" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1188.4" y="389" width="0.8" height="15.0" fill="rgb(237,147,32)" rx="2" ry="2" />
<text  x="1191.37" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.03%)</title><rect x="153.3" y="565" width="0.4" height="15.0" fill="rgb(221,163,27)" rx="2" ry="2" />
<text  x="156.28" y="575.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (2 samples, 0.07%)</title><rect x="1188.4" y="453" width="0.8" height="15.0" fill="rgb(227,17,9)" rx="2" ry="2" />
<text  x="1191.37" y="463.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (14 samples, 0.48%)</title><rect x="1157.4" y="677" width="5.7" height="15.0" fill="rgb(210,104,14)" rx="2" ry="2" />
<text  x="1160.44" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="1188.8" y="197" width="0.4" height="15.0" fill="rgb(248,127,36)" rx="2" ry="2" />
<text  x="1191.78" y="207.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.03%)</title><rect x="707.3" y="581" width="0.4" height="15.0" fill="rgb(219,158,6)" rx="2" ry="2" />
<text  x="710.25" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="425.6" y="709" width="0.4" height="15.0" fill="rgb(248,139,20)" rx="2" ry="2" />
<text  x="428.58" y="719.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="428.4" y="677" width="0.4" height="15.0" fill="rgb(254,180,36)" rx="2" ry="2" />
<text  x="431.43" y="687.5" ></text>
</g>
<g >
<title>~vector (6 samples, 0.21%)</title><rect x="389.0" y="677" width="2.4" height="15.0" fill="rgb(251,9,19)" rx="2" ry="2" />
<text  x="391.95" y="687.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;00000000000546d0&gt; (16 samples, 0.55%)</title><rect x="1181.0" y="709" width="6.6" height="15.0" fill="rgb(253,12,13)" rx="2" ry="2" />
<text  x="1184.05" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.03%)</title><rect x="1188.0" y="357" width="0.4" height="15.0" fill="rgb(227,170,53)" rx="2" ry="2" />
<text  x="1190.96" y="367.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1166.4" y="629" width="0.4" height="15.0" fill="rgb(213,192,49)" rx="2" ry="2" />
<text  x="1169.39" y="639.5" ></text>
</g>
<g >
<title>~__shared_count (3 samples, 0.10%)</title><rect x="240.0" y="693" width="1.2" height="15.0" fill="rgb(225,229,50)" rx="2" ry="2" />
<text  x="242.98" y="703.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="426.0" y="661" width="0.4" height="15.0" fill="rgb(235,38,16)" rx="2" ry="2" />
<text  x="428.99" y="671.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="133" width="0.4" height="15.0" fill="rgb(206,114,52)" rx="2" ry="2" />
<text  x="1191.78" y="143.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1188.4" y="485" width="0.8" height="15.0" fill="rgb(253,8,37)" rx="2" ry="2" />
<text  x="1191.37" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1180.2" y="549" width="0.4" height="15.0" fill="rgb(233,161,50)" rx="2" ry="2" />
<text  x="1183.23" y="559.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (1 samples, 0.03%)</title><rect x="707.3" y="565" width="0.4" height="15.0" fill="rgb(236,116,48)" rx="2" ry="2" />
<text  x="710.25" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.03%)</title><rect x="104.8" y="661" width="0.4" height="15.0" fill="rgb(238,36,53)" rx="2" ry="2" />
<text  x="107.84" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="263.6" y="693" width="0.4" height="15.0" fill="rgb(235,125,31)" rx="2" ry="2" />
<text  x="266.58" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,773 samples, 61.16%)</title><rect x="434.5" y="725" width="721.7" height="15.0" fill="rgb(216,181,35)" rx="2" ry="2" />
<text  x="437.54" y="735.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="426.4" y="661" width="0.4" height="15.0" fill="rgb(211,96,42)" rx="2" ry="2" />
<text  x="429.40" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1164.8" y="613" width="0.4" height="15.0" fill="rgb(243,114,4)" rx="2" ry="2" />
<text  x="1167.76" y="623.5" ></text>
</g>
<g >
<title>vector (14 samples, 0.48%)</title><rect x="1181.5" y="565" width="5.7" height="15.0" fill="rgb(225,32,6)" rx="2" ry="2" />
<text  x="1184.45" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="419.1" y="693" width="0.4" height="15.0" fill="rgb(238,217,16)" rx="2" ry="2" />
<text  x="422.07" y="703.5" ></text>
</g>
<g >
<title>0x00007ff44ea72a5a (1 samples, 0.03%)</title><rect x="33.6" y="645" width="0.4" height="15.0" fill="rgb(246,19,32)" rx="2" ry="2" />
<text  x="36.61" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1161.1" y="613" width="0.4" height="15.0" fill="rgb(242,133,25)" rx="2" ry="2" />
<text  x="1164.10" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="661" width="5.7" height="15.0" fill="rgb(210,17,22)" rx="2" ry="2" />
<text  x="1184.45" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063020&gt; (55 samples, 1.90%)</title><rect x="241.2" y="709" width="22.4" height="15.0" fill="rgb(206,16,43)" rx="2" ry="2" />
<text  x="244.20" y="719.5" >T..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.10%)</title><rect x="75.5" y="645" width="1.3" height="15.0" fill="rgb(208,133,43)" rx="2" ry="2" />
<text  x="78.53" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (25 samples, 0.86%)</title><rect x="202.9" y="661" width="10.2" height="15.0" fill="rgb(223,40,44)" rx="2" ry="2" />
<text  x="205.94" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.03%)</title><rect x="1161.5" y="613" width="0.4" height="15.0" fill="rgb(209,136,25)" rx="2" ry="2" />
<text  x="1164.51" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="1188.0" y="549" width="0.4" height="15.0" fill="rgb(240,179,3)" rx="2" ry="2" />
<text  x="1190.96" y="559.5" ></text>
</g>
<g >
<title>pa_pstream_register_memfd_mempool&lt;0000000000048a20&gt; (1 samples, 0.03%)</title><rect x="33.2" y="661" width="0.4" height="15.0" fill="rgb(230,161,22)" rx="2" ry="2" />
<text  x="36.20" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="549" width="5.7" height="15.0" fill="rgb(216,213,15)" rx="2" ry="2" />
<text  x="1184.45" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.03%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(213,212,52)" rx="2" ry="2" />
<text  x="1192.59" y="271.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="32.8" y="629" width="0.4" height="15.0" fill="rgb(224,78,53)" rx="2" ry="2" />
<text  x="35.79" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="424.0" y="693" width="0.8" height="15.0" fill="rgb(238,25,35)" rx="2" ry="2" />
<text  x="426.96" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1157.4" y="629" width="0.4" height="15.0" fill="rgb(224,113,34)" rx="2" ry="2" />
<text  x="1160.44" y="639.5" ></text>
</g>
<g >
<title>0x00007ff44ea6a355 (1 samples, 0.03%)</title><rect x="33.6" y="677" width="0.4" height="15.0" fill="rgb(210,161,16)" rx="2" ry="2" />
<text  x="36.61" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="430.9" y="661" width="0.4" height="15.0" fill="rgb(244,156,24)" rx="2" ry="2" />
<text  x="433.88" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="424.4" y="581" width="0.4" height="15.0" fill="rgb(216,22,30)" rx="2" ry="2" />
<text  x="427.36" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1179.8" y="693" width="0.4" height="15.0" fill="rgb(233,56,0)" rx="2" ry="2" />
<text  x="1182.82" y="703.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (1 samples, 0.03%)</title><rect x="352.7" y="693" width="0.4" height="15.0" fill="rgb(242,120,22)" rx="2" ry="2" />
<text  x="355.73" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (35 samples, 1.21%)</title><rect x="1142.0" y="645" width="14.2" height="15.0" fill="rgb(213,89,10)" rx="2" ry="2" />
<text  x="1144.97" y="655.5" ></text>
</g>
<g >
<title>_Safe_sequence_base (1 samples, 0.03%)</title><rect x="426.0" y="725" width="0.4" height="15.0" fill="rgb(232,160,2)" rx="2" ry="2" />
<text  x="428.99" y="735.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;0000000000018db0&gt; (1 samples, 0.03%)</title><rect x="31.2" y="325" width="0.4" height="15.0" fill="rgb(217,213,51)" rx="2" ry="2" />
<text  x="34.17" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1188.4" y="421" width="0.8" height="15.0" fill="rgb(241,121,35)" rx="2" ry="2" />
<text  x="1191.37" y="431.5" ></text>
</g>
<g >
<title>all (2,899 samples, 100%)</title><rect x="10.0" y="853" width="1180.0" height="15.0" fill="rgb(228,44,30)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (36 samples, 1.24%)</title><rect x="139.0" y="693" width="14.7" height="15.0" fill="rgb(248,179,32)" rx="2" ry="2" />
<text  x="142.03" y="703.5" ></text>
</g>
<g >
<title>MaterialMapper::doMap(std::shared_ptr&lt;MTL&gt;, std::shared_ptr&lt;TextureList&gt;)&lt;000000000003abb0&gt; (1 samples, 0.03%)</title><rect x="1180.6" y="709" width="0.4" height="15.0" fill="rgb(249,93,17)" rx="2" ry="2" />
<text  x="1183.64" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.14%)</title><rect x="421.9" y="709" width="1.6" height="15.0" fill="rgb(225,120,5)" rx="2" ry="2" />
<text  x="424.92" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.10%)</title><rect x="187.1" y="661" width="1.2" height="15.0" fill="rgb(237,203,42)" rx="2" ry="2" />
<text  x="190.06" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000d2370&gt; (1 samples, 0.03%)</title><rect x="419.9" y="597" width="0.4" height="15.0" fill="rgb(207,46,22)" rx="2" ry="2" />
<text  x="422.89" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.03%)</title><rect x="1188.0" y="389" width="0.4" height="15.0" fill="rgb(249,154,9)" rx="2" ry="2" />
<text  x="1190.96" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="1180.2" y="709" width="0.4" height="15.0" fill="rgb(234,111,6)" rx="2" ry="2" />
<text  x="1183.23" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.10%)</title><rect x="1156.2" y="741" width="1.2" height="15.0" fill="rgb(217,189,32)" rx="2" ry="2" />
<text  x="1159.22" y="751.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (37 samples, 1.28%)</title><rect x="247.3" y="693" width="15.1" height="15.0" fill="rgb(209,134,24)" rx="2" ry="2" />
<text  x="250.30" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (2 samples, 0.07%)</title><rect x="433.7" y="645" width="0.8" height="15.0" fill="rgb(245,190,0)" rx="2" ry="2" />
<text  x="436.73" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="426.8" y="661" width="0.4" height="15.0" fill="rgb(225,43,23)" rx="2" ry="2" />
<text  x="429.81" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (9 samples, 0.31%)</title><rect x="99.5" y="693" width="3.7" height="15.0" fill="rgb(210,130,40)" rx="2" ry="2" />
<text  x="102.55" y="703.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1172.9" y="613" width="0.4" height="15.0" fill="rgb(206,24,20)" rx="2" ry="2" />
<text  x="1175.90" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="1165.6" y="645" width="0.8" height="15.0" fill="rgb(253,145,18)" rx="2" ry="2" />
<text  x="1168.58" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TrianglePipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (1 samples, 0.03%)</title><rect x="1180.2" y="693" width="0.4" height="15.0" fill="rgb(241,71,33)" rx="2" ry="2" />
<text  x="1183.23" y="703.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="111.4" y="645" width="0.4" height="15.0" fill="rgb(240,199,28)" rx="2" ry="2" />
<text  x="114.35" y="655.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1172.9" y="565" width="0.4" height="15.0" fill="rgb(229,160,42)" rx="2" ry="2" />
<text  x="1175.90" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.10%)</title><rect x="1168.0" y="597" width="1.2" height="15.0" fill="rgb(218,118,24)" rx="2" ry="2" />
<text  x="1171.02" y="607.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.14%)</title><rect x="30.8" y="613" width="1.6" height="15.0" fill="rgb(223,115,42)" rx="2" ry="2" />
<text  x="33.76" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1165.2" y="581" width="0.4" height="15.0" fill="rgb(230,131,16)" rx="2" ry="2" />
<text  x="1168.17" y="591.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.03%)</title><rect x="1173.7" y="677" width="0.4" height="15.0" fill="rgb(207,215,48)" rx="2" ry="2" />
<text  x="1176.72" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (1 samples, 0.03%)</title><rect x="1188.0" y="485" width="0.4" height="15.0" fill="rgb(209,175,14)" rx="2" ry="2" />
<text  x="1190.96" y="495.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.03%)</title><rect x="197.6" y="661" width="0.5" height="15.0" fill="rgb(228,200,28)" rx="2" ry="2" />
<text  x="200.64" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt;(std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="645" width="0.4" height="15.0" fill="rgb(251,187,4)" rx="2" ry="2" />
<text  x="1190.96" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.4" y="693" width="0.4" height="15.0" fill="rgb(212,225,18)" rx="2" ry="2" />
<text  x="35.39" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.03%)</title><rect x="428.4" y="709" width="0.4" height="15.0" fill="rgb(234,181,22)" rx="2" ry="2" />
<text  x="431.43" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="1165.2" y="517" width="0.4" height="15.0" fill="rgb(226,164,39)" rx="2" ry="2" />
<text  x="1168.17" y="527.5" ></text>
</g>
<g >
<title>_Vector_impl (2 samples, 0.07%)</title><rect x="69.0" y="677" width="0.8" height="15.0" fill="rgb(221,23,28)" rx="2" ry="2" />
<text  x="72.02" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (5 samples, 0.17%)</title><rect x="1177.8" y="725" width="2.0" height="15.0" fill="rgb(209,79,32)" rx="2" ry="2" />
<text  x="1180.79" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (1 samples, 0.03%)</title><rect x="32.8" y="501" width="0.4" height="15.0" fill="rgb(254,155,10)" rx="2" ry="2" />
<text  x="35.79" y="511.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.14%)</title><rect x="30.8" y="661" width="1.6" height="15.0" fill="rgb(233,126,13)" rx="2" ry="2" />
<text  x="33.76" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (20 samples, 0.69%)</title><rect x="103.6" y="693" width="8.2" height="15.0" fill="rgb(214,204,9)" rx="2" ry="2" />
<text  x="106.62" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.21%)</title><rect x="33.6" y="725" width="2.5" height="15.0" fill="rgb(217,49,14)" rx="2" ry="2" />
<text  x="36.61" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.03%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(253,226,14)" rx="2" ry="2" />
<text  x="1192.59" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::SLL_TryPop(void**, void**)[inline] (1 samples, 0.03%)</title><rect x="32.4" y="549" width="0.4" height="15.0" fill="rgb(241,183,48)" rx="2" ry="2" />
<text  x="35.39" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1169.2" y="581" width="0.4" height="15.0" fill="rgb(233,7,35)" rx="2" ry="2" />
<text  x="1172.24" y="591.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1176.2" y="725" width="0.4" height="15.0" fill="rgb(232,0,53)" rx="2" ry="2" />
<text  x="1179.16" y="735.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="431.3" y="645" width="0.4" height="15.0" fill="rgb(242,35,16)" rx="2" ry="2" />
<text  x="434.28" y="655.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt;(unsigned long const&amp;, unsigned long const&amp;) (1 samples, 0.03%)</title><rect x="422.3" y="613" width="0.4" height="15.0" fill="rgb(207,201,41)" rx="2" ry="2" />
<text  x="425.33" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (1 samples, 0.03%)</title><rect x="419.1" y="661" width="0.4" height="15.0" fill="rgb(215,211,42)" rx="2" ry="2" />
<text  x="422.07" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="707.3" y="597" width="0.4" height="15.0" fill="rgb(235,73,54)" rx="2" ry="2" />
<text  x="710.25" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1180.2" y="597" width="0.4" height="15.0" fill="rgb(248,102,19)" rx="2" ry="2" />
<text  x="1183.23" y="607.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;00000000000534c0&gt; (2 samples, 0.07%)</title><rect x="1187.6" y="709" width="0.8" height="15.0" fill="rgb(225,89,18)" rx="2" ry="2" />
<text  x="1190.56" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.03%)</title><rect x="316.5" y="661" width="0.4" height="15.0" fill="rgb(207,66,0)" rx="2" ry="2" />
<text  x="319.50" y="671.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::allocate(unsigned long, void const*) (1 samples, 0.03%)</title><rect x="421.9" y="629" width="0.4" height="15.0" fill="rgb(205,36,15)" rx="2" ry="2" />
<text  x="424.92" y="639.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="92.6" y="661" width="0.4" height="15.0" fill="rgb(239,202,41)" rx="2" ry="2" />
<text  x="95.63" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="426.8" y="693" width="0.4" height="15.0" fill="rgb(223,48,3)" rx="2" ry="2" />
<text  x="429.81" y="703.5" ></text>
</g>
<g >
<title>Renderer::Renderer(int, int, std::shared_ptr&lt;Camera&gt;) (6 samples, 0.21%)</title><rect x="30.8" y="757" width="2.4" height="15.0" fill="rgb(252,79,52)" rx="2" ry="2" />
<text  x="33.76" y="767.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.03%)</title><rect x="1179.8" y="645" width="0.4" height="15.0" fill="rgb(211,145,29)" rx="2" ry="2" />
<text  x="1182.82" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt;(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="629" width="0.4" height="15.0" fill="rgb(222,85,29)" rx="2" ry="2" />
<text  x="1190.96" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (25 samples, 0.86%)</title><rect x="342.5" y="677" width="10.2" height="15.0" fill="rgb(214,118,21)" rx="2" ry="2" />
<text  x="345.55" y="687.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.03%)</title><rect x="392.6" y="661" width="0.4" height="15.0" fill="rgb(253,196,33)" rx="2" ry="2" />
<text  x="395.61" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="431.3" y="661" width="0.4" height="15.0" fill="rgb(238,129,25)" rx="2" ry="2" />
<text  x="434.28" y="671.5" ></text>
</g>
<g >
<title>pa_pstream_set_srbchannel&lt;0000000000047c90&gt; (1 samples, 0.03%)</title><rect x="33.2" y="645" width="0.4" height="15.0" fill="rgb(213,157,53)" rx="2" ry="2" />
<text  x="36.20" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (4 samples, 0.14%)</title><rect x="226.5" y="661" width="1.7" height="15.0" fill="rgb(229,19,13)" rx="2" ry="2" />
<text  x="229.54" y="671.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (4 samples, 0.14%)</title><rect x="137.4" y="693" width="1.6" height="15.0" fill="rgb(219,110,46)" rx="2" ry="2" />
<text  x="140.40" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.10%)</title><rect x="1163.5" y="629" width="1.3" height="15.0" fill="rgb(250,110,31)" rx="2" ry="2" />
<text  x="1166.54" y="639.5" ></text>
</g>
<g >
<title>syscall@@GLIBC_2.2.5&lt;0000000000100550&gt; (2 samples, 0.07%)</title><rect x="433.7" y="629" width="0.8" height="15.0" fill="rgb(218,58,49)" rx="2" ry="2" />
<text  x="436.73" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1189.2" y="357" width="0.8" height="15.0" fill="rgb(228,68,4)" rx="2" ry="2" />
<text  x="1192.19" y="367.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="36.1" y="741" width="0.4" height="15.0" fill="rgb(236,95,47)" rx="2" ry="2" />
<text  x="39.05" y="751.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.14%)</title><rect x="30.8" y="645" width="1.6" height="15.0" fill="rgb(240,142,7)" rx="2" ry="2" />
<text  x="33.76" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="428.8" y="677" width="0.4" height="15.0" fill="rgb(207,73,16)" rx="2" ry="2" />
<text  x="431.84" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="32.4" y="581" width="0.4" height="15.0" fill="rgb(227,227,38)" rx="2" ry="2" />
<text  x="35.39" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_update_bbegin(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;*) (1 samples, 0.03%)</title><rect x="1181.0" y="661" width="0.5" height="15.0" fill="rgb(251,107,12)" rx="2" ry="2" />
<text  x="1184.05" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.10%)</title><rect x="1170.5" y="629" width="1.2" height="15.0" fill="rgb(229,123,33)" rx="2" ry="2" />
<text  x="1173.46" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="419.5" y="693" width="0.8" height="15.0" fill="rgb(227,15,14)" rx="2" ry="2" />
<text  x="422.48" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="398.7" y="645" width="0.4" height="15.0" fill="rgb(240,152,33)" rx="2" ry="2" />
<text  x="401.72" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.03%)</title><rect x="263.6" y="709" width="0.4" height="15.0" fill="rgb(216,21,11)" rx="2" ry="2" />
<text  x="266.58" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (18 samples, 0.62%)</title><rect x="302.3" y="661" width="7.3" height="15.0" fill="rgb(245,214,9)" rx="2" ry="2" />
<text  x="305.25" y="671.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1171.3" y="613" width="0.4" height="15.0" fill="rgb(220,8,6)" rx="2" ry="2" />
<text  x="1174.28" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1188.4" y="133" width="0.4" height="15.0" fill="rgb(210,14,27)" rx="2" ry="2" />
<text  x="1191.37" y="143.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (1 samples, 0.03%)</title><rect x="415.4" y="709" width="0.4" height="15.0" fill="rgb(228,97,34)" rx="2" ry="2" />
<text  x="418.41" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (5 samples, 0.17%)</title><rect x="218.0" y="645" width="2.0" height="15.0" fill="rgb(232,24,2)" rx="2" ry="2" />
<text  x="221.00" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1174.5" y="565" width="0.4" height="15.0" fill="rgb(246,178,29)" rx="2" ry="2" />
<text  x="1177.53" y="575.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000048170&gt; (1 samples, 0.03%)</title><rect x="388.1" y="677" width="0.4" height="15.0" fill="rgb(220,187,38)" rx="2" ry="2" />
<text  x="391.14" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1189.2" y="501" width="0.8" height="15.0" fill="rgb(237,175,28)" rx="2" ry="2" />
<text  x="1192.19" y="511.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="709" width="0.4" height="15.0" fill="rgb(237,228,3)" rx="2" ry="2" />
<text  x="35.79" y="719.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.03%)</title><rect x="312.4" y="629" width="0.4" height="15.0" fill="rgb(212,22,46)" rx="2" ry="2" />
<text  x="315.43" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1187.2" y="677" width="0.4" height="15.0" fill="rgb(230,66,27)" rx="2" ry="2" />
<text  x="1190.15" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.07%)</title><rect x="399.1" y="645" width="0.8" height="15.0" fill="rgb(243,23,16)" rx="2" ry="2" />
<text  x="402.13" y="655.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="415.8" y="693" width="0.8" height="15.0" fill="rgb(238,56,51)" rx="2" ry="2" />
<text  x="418.82" y="703.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.03%)</title><rect x="1186.7" y="421" width="0.5" height="15.0" fill="rgb(218,62,48)" rx="2" ry="2" />
<text  x="1189.74" y="431.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.03%)</title><rect x="31.2" y="357" width="0.4" height="15.0" fill="rgb(210,3,27)" rx="2" ry="2" />
<text  x="34.17" y="367.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (3 samples, 0.10%)</title><rect x="429.2" y="709" width="1.3" height="15.0" fill="rgb(251,111,34)" rx="2" ry="2" />
<text  x="432.25" y="719.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::end() (2 samples, 0.07%)</title><rect x="1188.4" y="757" width="0.8" height="15.0" fill="rgb(233,106,10)" rx="2" ry="2" />
<text  x="1191.37" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="421.5" y="709" width="0.4" height="15.0" fill="rgb(221,203,9)" rx="2" ry="2" />
<text  x="424.51" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (1 samples, 0.03%)</title><rect x="1174.5" y="677" width="0.4" height="15.0" fill="rgb(242,85,40)" rx="2" ry="2" />
<text  x="1177.53" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.07%)</title><rect x="1171.7" y="533" width="0.8" height="15.0" fill="rgb(252,77,49)" rx="2" ry="2" />
<text  x="1174.68" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (3 samples, 0.10%)</title><rect x="391.8" y="693" width="1.2" height="15.0" fill="rgb(230,133,3)" rx="2" ry="2" />
<text  x="394.80" y="703.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.03%)</title><rect x="430.5" y="725" width="0.4" height="15.0" fill="rgb(254,115,4)" rx="2" ry="2" />
<text  x="433.47" y="735.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.03%)</title><rect x="1172.1" y="469" width="0.4" height="15.0" fill="rgb(228,200,29)" rx="2" ry="2" />
<text  x="1175.09" y="479.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1174.5" y="581" width="0.4" height="15.0" fill="rgb(243,61,2)" rx="2" ry="2" />
<text  x="1177.53" y="591.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;000000000006ca60&gt; (1 samples, 0.03%)</title><rect x="213.5" y="661" width="0.4" height="15.0" fill="rgb(208,139,7)" rx="2" ry="2" />
<text  x="216.52" y="671.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (369 samples, 12.73%)</title><rect x="727.6" y="613" width="150.2" height="15.0" fill="rgb(246,42,53)" rx="2" ry="2" />
<text  x="730.61" y="623.5" >nouveau_drm_screen_..</text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1164.4" y="565" width="0.4" height="15.0" fill="rgb(209,136,22)" rx="2" ry="2" />
<text  x="1167.36" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1188.4" y="469" width="0.8" height="15.0" fill="rgb(254,224,8)" rx="2" ry="2" />
<text  x="1191.37" y="479.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (2 samples, 0.07%)</title><rect x="1120.8" y="581" width="0.8" height="15.0" fill="rgb(248,226,24)" rx="2" ry="2" />
<text  x="1123.80" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="421.9" y="661" width="0.4" height="15.0" fill="rgb(231,59,5)" rx="2" ry="2" />
<text  x="424.92" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;InGame_Action_Updater, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (2 samples, 0.07%)</title><rect x="1189.2" y="757" width="0.8" height="15.0" fill="rgb(244,32,53)" rx="2" ry="2" />
<text  x="1192.19" y="767.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1170.1" y="613" width="0.4" height="15.0" fill="rgb(254,67,24)" rx="2" ry="2" />
<text  x="1173.06" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1170.5" y="597" width="0.4" height="15.0" fill="rgb(206,111,43)" rx="2" ry="2" />
<text  x="1173.46" y="607.5" ></text>
</g>
<g >
<title>fstatat@@GLIBC_2.33&lt;00000000000f6380&gt; (1 samples, 0.03%)</title><rect x="34.0" y="645" width="0.4" height="15.0" fill="rgb(252,17,22)" rx="2" ry="2" />
<text  x="37.02" y="655.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.03%)</title><rect x="262.8" y="693" width="0.4" height="15.0" fill="rgb(223,110,27)" rx="2" ry="2" />
<text  x="265.77" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="429.7" y="693" width="0.8" height="15.0" fill="rgb(244,132,35)" rx="2" ry="2" />
<text  x="432.66" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="420.7" y="661" width="0.4" height="15.0" fill="rgb(205,155,22)" rx="2" ry="2" />
<text  x="423.70" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1188.4" y="613" width="0.8" height="15.0" fill="rgb(247,213,10)" rx="2" ry="2" />
<text  x="1191.37" y="623.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (39 samples, 1.35%)</title><rect x="1157.4" y="709" width="15.9" height="15.0" fill="rgb(213,126,22)" rx="2" ry="2" />
<text  x="1160.44" y="719.5" ></text>
</g>
<g >
<title>~vector (10 samples, 0.34%)</title><rect x="216.0" y="677" width="4.0" height="15.0" fill="rgb(218,197,35)" rx="2" ry="2" />
<text  x="218.96" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.03%)</title><rect x="1164.8" y="565" width="0.4" height="15.0" fill="rgb(246,26,28)" rx="2" ry="2" />
<text  x="1167.76" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (1 samples, 0.03%)</title><rect x="423.5" y="709" width="0.5" height="15.0" fill="rgb(241,201,54)" rx="2" ry="2" />
<text  x="426.55" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="424.0" y="709" width="0.8" height="15.0" fill="rgb(206,18,46)" rx="2" ry="2" />
<text  x="426.96" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1179.8" y="725" width="0.4" height="15.0" fill="rgb(244,82,42)" rx="2" ry="2" />
<text  x="1182.82" y="735.5" ></text>
</g>
<g >
<title>__shared_ptr (2 samples, 0.07%)</title><rect x="223.7" y="693" width="0.8" height="15.0" fill="rgb(236,223,21)" rx="2" ry="2" />
<text  x="226.69" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000062130&gt; (370 samples, 12.76%)</title><rect x="264.0" y="725" width="150.6" height="15.0" fill="rgb(233,102,50)" rx="2" ry="2" />
<text  x="266.99" y="735.5" >TexturemapRasterize..</text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.03%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(247,198,30)" rx="2" ry="2" />
<text  x="1192.59" y="303.5" ></text>
</g>
<g >
<title>InOutRasterizer (2 samples, 0.07%)</title><rect x="36.9" y="709" width="0.8" height="15.0" fill="rgb(223,7,23)" rx="2" ry="2" />
<text  x="39.86" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.17%)</title><rect x="30.8" y="709" width="2.0" height="15.0" fill="rgb(253,71,48)" rx="2" ry="2" />
<text  x="33.76" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="1168.8" y="565" width="0.4" height="15.0" fill="rgb(253,131,28)" rx="2" ry="2" />
<text  x="1171.83" y="575.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003ecb0&gt; (7 samples, 0.24%)</title><rect x="33.2" y="757" width="2.9" height="15.0" fill="rgb(224,45,26)" rx="2" ry="2" />
<text  x="36.20" y="767.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="430.9" y="693" width="0.8" height="15.0" fill="rgb(254,38,1)" rx="2" ry="2" />
<text  x="433.88" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="428.8" y="661" width="0.4" height="15.0" fill="rgb(234,174,48)" rx="2" ry="2" />
<text  x="431.84" y="671.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (96 samples, 3.31%)</title><rect x="54.0" y="693" width="39.0" height="15.0" fill="rgb(206,137,40)" rx="2" ry="2" />
<text  x="56.96" y="703.5" >Tex..</text>
</g>
<g >
<title>sqrtf32 (1 samples, 0.03%)</title><rect x="36.1" y="661" width="0.4" height="15.0" fill="rgb(231,5,15)" rx="2" ry="2" />
<text  x="39.05" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.03%)</title><rect x="316.5" y="677" width="0.4" height="15.0" fill="rgb(231,203,2)" rx="2" ry="2" />
<text  x="319.50" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.07%)</title><rect x="1188.4" y="341" width="0.8" height="15.0" fill="rgb(249,194,54)" rx="2" ry="2" />
<text  x="1191.37" y="351.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (2 samples, 0.07%)</title><rect x="98.7" y="693" width="0.8" height="15.0" fill="rgb(246,140,8)" rx="2" ry="2" />
<text  x="101.73" y="703.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::allocate(unsigned long, void const*) (1 samples, 0.03%)</title><rect x="1182.7" y="309" width="0.4" height="15.0" fill="rgb(214,190,24)" rx="2" ry="2" />
<text  x="1185.67" y="319.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (3 samples, 0.10%)</title><rect x="433.3" y="725" width="1.2" height="15.0" fill="rgb(253,225,26)" rx="2" ry="2" />
<text  x="436.32" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (1 samples, 0.03%)</title><rect x="422.3" y="645" width="0.4" height="15.0" fill="rgb(236,0,11)" rx="2" ry="2" />
<text  x="425.33" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt;[inline] (1 samples, 0.03%)</title><rect x="428.4" y="581" width="0.4" height="15.0" fill="rgb(205,27,8)" rx="2" ry="2" />
<text  x="431.43" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_invalidate_all() const&lt;000000000001d120&gt; (1 samples, 0.03%)</title><rect x="429.2" y="693" width="0.5" height="15.0" fill="rgb(252,151,37)" rx="2" ry="2" />
<text  x="432.25" y="703.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.03%)</title><rect x="1180.6" y="629" width="0.4" height="15.0" fill="rgb(226,100,14)" rx="2" ry="2" />
<text  x="1183.64" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.03%)</title><rect x="1161.5" y="597" width="0.4" height="15.0" fill="rgb(209,151,54)" rx="2" ry="2" />
<text  x="1164.51" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000080040&gt; (7 samples, 0.24%)</title><rect x="415.8" y="709" width="2.9" height="15.0" fill="rgb(220,193,3)" rx="2" ry="2" />
<text  x="418.82" y="719.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="433.3" y="661" width="0.4" height="15.0" fill="rgb(222,109,48)" rx="2" ry="2" />
<text  x="436.32" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="216.8" y="661" width="0.4" height="15.0" fill="rgb(209,132,10)" rx="2" ry="2" />
<text  x="219.77" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.03%)</title><rect x="224.1" y="661" width="0.4" height="15.0" fill="rgb(235,150,44)" rx="2" ry="2" />
<text  x="227.10" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (1 samples, 0.03%)</title><rect x="422.3" y="661" width="0.4" height="15.0" fill="rgb(207,226,27)" rx="2" ry="2" />
<text  x="425.33" y="671.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (4 samples, 0.14%)</title><rect x="1182.3" y="389" width="1.6" height="15.0" fill="rgb(212,207,14)" rx="2" ry="2" />
<text  x="1185.27" y="399.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (88 samples, 3.04%)</title><rect x="353.1" y="693" width="35.9" height="15.0" fill="rgb(226,28,13)" rx="2" ry="2" />
<text  x="356.13" y="703.5" >Tex..</text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (15 samples, 0.52%)</title><rect x="213.9" y="693" width="6.1" height="15.0" fill="rgb(224,33,44)" rx="2" ry="2" />
<text  x="216.93" y="703.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.03%)</title><rect x="32.8" y="565" width="0.4" height="15.0" fill="rgb(249,17,41)" rx="2" ry="2" />
<text  x="35.79" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.4" y="293" width="0.8" height="15.0" fill="rgb(230,222,54)" rx="2" ry="2" />
<text  x="1191.37" y="303.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (27 samples, 0.93%)</title><rect x="341.7" y="693" width="11.0" height="15.0" fill="rgb(218,97,23)" rx="2" ry="2" />
<text  x="344.74" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long) (1 samples, 0.03%)</title><rect x="421.9" y="645" width="0.4" height="15.0" fill="rgb(228,48,45)" rx="2" ry="2" />
<text  x="424.92" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (21 samples, 0.72%)</title><rect x="367.8" y="661" width="8.5" height="15.0" fill="rgb(218,183,0)" rx="2" ry="2" />
<text  x="370.79" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (468 samples, 16.14%)</title><rect x="933.6" y="645" width="190.5" height="15.0" fill="rgb(226,191,32)" rx="2" ry="2" />
<text  x="936.57" y="655.5" >__driDriverGetExtensions..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (13 samples, 0.45%)</title><rect x="1181.9" y="453" width="5.3" height="15.0" fill="rgb(225,113,15)" rx="2" ry="2" />
<text  x="1184.86" y="463.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f8e0&gt; (1 samples, 0.03%)</title><rect x="36.1" y="757" width="0.4" height="15.0" fill="rgb(212,1,26)" rx="2" ry="2" />
<text  x="39.05" y="767.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.03%)</title><rect x="1179.8" y="661" width="0.4" height="15.0" fill="rgb(249,229,13)" rx="2" ry="2" />
<text  x="1182.82" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (7 samples, 0.24%)</title><rect x="312.8" y="693" width="2.9" height="15.0" fill="rgb(252,141,26)" rx="2" ry="2" />
<text  x="315.84" y="703.5" ></text>
</g>
<g >
<title>_Safe_iterator (11 samples, 0.38%)</title><rect x="1182.3" y="405" width="4.4" height="15.0" fill="rgb(232,121,54)" rx="2" ry="2" />
<text  x="1185.27" y="415.5" ></text>
</g>
<g >
<title>shared_ptr (1 samples, 0.03%)</title><rect x="1169.6" y="597" width="0.5" height="15.0" fill="rgb(245,127,29)" rx="2" ry="2" />
<text  x="1172.65" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (1 samples, 0.03%)</title><rect x="1183.5" y="325" width="0.4" height="15.0" fill="rgb(222,96,10)" rx="2" ry="2" />
<text  x="1186.49" y="335.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (634 samples, 21.87%)</title><rect x="619.7" y="645" width="258.1" height="15.0" fill="rgb(222,103,40)" rx="2" ry="2" />
<text  x="622.74" y="655.5" >__driDriverGetExtensions_d3d12&lt;000..</text>
</g>
<g >
<title>XrmGetResource&lt;0000000000049c50&gt; (1 samples, 0.03%)</title><rect x="1175.8" y="677" width="0.4" height="15.0" fill="rgb(226,59,36)" rx="2" ry="2" />
<text  x="1178.75" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (7 samples, 0.24%)</title><rect x="217.2" y="661" width="2.8" height="15.0" fill="rgb(224,226,52)" rx="2" ry="2" />
<text  x="220.18" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (29 samples, 1.00%)</title><rect x="250.6" y="677" width="11.8" height="15.0" fill="rgb(226,197,4)" rx="2" ry="2" />
<text  x="253.56" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="427.6" y="693" width="0.4" height="15.0" fill="rgb(210,128,38)" rx="2" ry="2" />
<text  x="430.62" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1174.9" y="677" width="0.9" height="15.0" fill="rgb(233,62,53)" rx="2" ry="2" />
<text  x="1177.94" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::back() (1 samples, 0.03%)</title><rect x="1180.6" y="613" width="0.4" height="15.0" fill="rgb(242,6,32)" rx="2" ry="2" />
<text  x="1183.64" y="623.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (28 samples, 0.97%)</title><rect x="142.3" y="677" width="11.4" height="15.0" fill="rgb(211,124,46)" rx="2" ry="2" />
<text  x="145.29" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt;[inline] (1 samples, 0.03%)</title><rect x="1171.7" y="469" width="0.4" height="15.0" fill="rgb(239,98,29)" rx="2" ry="2" />
<text  x="1174.68" y="479.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::push_back(Mesh const&amp;) (2 samples, 0.07%)</title><rect x="1188.4" y="677" width="0.8" height="15.0" fill="rgb(229,82,21)" rx="2" ry="2" />
<text  x="1191.37" y="687.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="420.3" y="629" width="0.4" height="15.0" fill="rgb(239,167,19)" rx="2" ry="2" />
<text  x="423.29" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.03%)</title><rect x="1157.4" y="661" width="0.4" height="15.0" fill="rgb(225,198,29)" rx="2" ry="2" />
<text  x="1160.44" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::getVectorLength(Vec3d const&amp;) (1 samples, 0.03%)</title><rect x="417.4" y="677" width="0.5" height="15.0" fill="rgb(225,65,9)" rx="2" ry="2" />
<text  x="420.44" y="687.5" ></text>
</g>
<g >
<title>_Safe_iterator_base (1 samples, 0.03%)</title><rect x="1158.7" y="645" width="0.4" height="15.0" fill="rgb(245,100,48)" rx="2" ry="2" />
<text  x="1161.66" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.03%)</title><rect x="1172.5" y="581" width="0.4" height="15.0" fill="rgb(227,136,41)" rx="2" ry="2" />
<text  x="1175.50" y="591.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.03%)</title><rect x="388.5" y="677" width="0.5" height="15.0" fill="rgb(231,99,45)" rx="2" ry="2" />
<text  x="391.54" y="687.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate(unsigned long, void const*) (1 samples, 0.03%)</title><rect x="1188.0" y="437" width="0.4" height="15.0" fill="rgb(225,68,44)" rx="2" ry="2" />
<text  x="1190.96" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1174.1" y="597" width="0.4" height="15.0" fill="rgb(250,191,35)" rx="2" ry="2" />
<text  x="1177.13" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1189.2" y="549" width="0.8" height="15.0" fill="rgb(215,29,46)" rx="2" ry="2" />
<text  x="1192.19" y="559.5" ></text>
</g>
<g >
<title>0x00007ff44ea6e999 (1 samples, 0.03%)</title><rect x="34.4" y="661" width="0.4" height="15.0" fill="rgb(229,30,51)" rx="2" ry="2" />
<text  x="37.42" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::Sampler::TryRecordAllocationFast(unsigned long)[inline] (1 samples, 0.03%)</title><rect x="421.9" y="565" width="0.4" height="15.0" fill="rgb(208,30,47)" rx="2" ry="2" />
<text  x="424.92" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="431.3" y="629" width="0.4" height="15.0" fill="rgb(253,175,48)" rx="2" ry="2" />
<text  x="434.28" y="639.5" ></text>
</g>
<g >
<title>Camera::setCameraPos(Vec3d)&lt;000000000005ed90&gt; (1 samples, 0.03%)</title><rect x="36.1" y="725" width="0.4" height="15.0" fill="rgb(227,134,5)" rx="2" ry="2" />
<text  x="39.05" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.03%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(206,177,8)" rx="2" ry="2" />
<text  x="1192.59" y="223.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1174.9" y="709" width="0.9" height="15.0" fill="rgb(251,47,41)" rx="2" ry="2" />
<text  x="1177.94" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="428.8" y="693" width="0.4" height="15.0" fill="rgb(234,106,28)" rx="2" ry="2" />
<text  x="431.84" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1165.2" y="549" width="0.4" height="15.0" fill="rgb(238,8,34)" rx="2" ry="2" />
<text  x="1168.17" y="559.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005d580&gt; (1 samples, 0.03%)</title><rect x="1179.8" y="741" width="0.4" height="15.0" fill="rgb(212,156,31)" rx="2" ry="2" />
<text  x="1182.82" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;00000000000257f0&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="69" width="0.4" height="15.0" fill="rgb(210,203,15)" rx="2" ry="2" />
<text  x="1191.78" y="79.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="424.4" y="565" width="0.4" height="15.0" fill="rgb(251,43,33)" rx="2" ry="2" />
<text  x="427.36" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1189.2" y="581" width="0.8" height="15.0" fill="rgb(217,218,27)" rx="2" ry="2" />
<text  x="1192.19" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1182.7" y="325" width="0.4" height="15.0" fill="rgb(207,55,20)" rx="2" ry="2" />
<text  x="1185.67" y="335.5" ></text>
</g>
<g >
<title>pa_pstream_attach_memfd_shmid&lt;0000000000046ed0&gt; (1 samples, 0.03%)</title><rect x="33.2" y="549" width="0.4" height="15.0" fill="rgb(245,122,24)" rx="2" ry="2" />
<text  x="36.20" y="559.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (10 samples, 0.34%)</title><rect x="258.3" y="661" width="4.1" height="15.0" fill="rgb(218,17,37)" rx="2" ry="2" />
<text  x="261.29" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1175.3" y="597" width="0.5" height="15.0" fill="rgb(241,154,15)" rx="2" ry="2" />
<text  x="1178.35" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*) (1 samples, 0.03%)</title><rect x="1180.2" y="741" width="0.4" height="15.0" fill="rgb(251,22,0)" rx="2" ry="2" />
<text  x="1183.23" y="751.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000067320&gt; (2,798 samples, 96.52%)</title><rect x="36.9" y="757" width="1138.9" height="15.0" fill="rgb(220,22,17)" rx="2" ry="2" />
<text  x="39.86" y="767.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000067320&gt;</text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.03%)</title><rect x="427.2" y="645" width="0.4" height="15.0" fill="rgb(244,163,27)" rx="2" ry="2" />
<text  x="430.21" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**)&lt;0000000000025b80&gt; (1 samples, 0.03%)</title><rect x="153.3" y="517" width="0.4" height="15.0" fill="rgb(240,5,43)" rx="2" ry="2" />
<text  x="156.28" y="527.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (2 samples, 0.07%)</title><rect x="34.8" y="645" width="0.8" height="15.0" fill="rgb(230,89,20)" rx="2" ry="2" />
<text  x="37.83" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1189.2" y="485" width="0.8" height="15.0" fill="rgb(226,38,36)" rx="2" ry="2" />
<text  x="1192.19" y="495.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length(char const*) (2 samples, 0.07%)</title><rect x="325.5" y="645" width="0.8" height="15.0" fill="rgb(254,41,45)" rx="2" ry="2" />
<text  x="328.45" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000d2460&gt; (1 samples, 0.03%)</title><rect x="419.9" y="613" width="0.4" height="15.0" fill="rgb(223,17,26)" rx="2" ry="2" />
<text  x="422.89" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="428.4" y="629" width="0.4" height="15.0" fill="rgb(240,67,5)" rx="2" ry="2" />
<text  x="431.43" y="639.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints() (1 samples, 0.03%)</title><rect x="1187.2" y="693" width="0.4" height="15.0" fill="rgb(221,35,24)" rx="2" ry="2" />
<text  x="1190.15" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1158.3" y="645" width="0.4" height="15.0" fill="rgb(206,71,16)" rx="2" ry="2" />
<text  x="1161.25" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (10 samples, 0.34%)</title><rect x="149.6" y="661" width="4.1" height="15.0" fill="rgb(251,134,6)" rx="2" ry="2" />
<text  x="152.61" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="428.4" y="565" width="0.4" height="15.0" fill="rgb(245,57,54)" rx="2" ry="2" />
<text  x="431.43" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (8 samples, 0.28%)</title><rect x="427.2" y="725" width="3.3" height="15.0" fill="rgb(214,83,44)" rx="2" ry="2" />
<text  x="430.21" y="735.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="32.8" y="533" width="0.4" height="15.0" fill="rgb(223,33,1)" rx="2" ry="2" />
<text  x="35.79" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (24 samples, 0.83%)</title><rect x="82.5" y="661" width="9.7" height="15.0" fill="rgb(252,191,13)" rx="2" ry="2" />
<text  x="85.45" y="671.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks() (19 samples, 0.66%)</title><rect x="1180.6" y="725" width="7.8" height="15.0" fill="rgb(217,37,10)" rx="2" ry="2" />
<text  x="1183.64" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1171.7" y="581" width="0.8" height="15.0" fill="rgb(225,124,26)" rx="2" ry="2" />
<text  x="1174.68" y="591.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (7 samples, 0.24%)</title><rect x="1183.9" y="341" width="2.8" height="15.0" fill="rgb(248,218,10)" rx="2" ry="2" />
<text  x="1186.89" y="351.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="30.8" y="453" width="0.8" height="15.0" fill="rgb(212,128,29)" rx="2" ry="2" />
<text  x="33.76" y="463.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (1 samples, 0.03%)</title><rect x="1180.6" y="661" width="0.4" height="15.0" fill="rgb(219,46,47)" rx="2" ry="2" />
<text  x="1183.64" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="432.1" y="725" width="0.4" height="15.0" fill="rgb(220,100,44)" rx="2" ry="2" />
<text  x="435.10" y="735.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;0000000000031740&gt; (1 samples, 0.03%)</title><rect x="36.5" y="757" width="0.4" height="15.0" fill="rgb(210,190,29)" rx="2" ry="2" />
<text  x="39.46" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.10%)</title><rect x="420.3" y="693" width="1.2" height="15.0" fill="rgb(210,159,23)" rx="2" ry="2" />
<text  x="423.29" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1174.1" y="741" width="0.4" height="15.0" fill="rgb(244,199,46)" rx="2" ry="2" />
<text  x="1177.13" y="751.5" ></text>
</g>
<g >
<title>0x00007ff44ea6ab4e (1 samples, 0.03%)</title><rect x="33.6" y="693" width="0.4" height="15.0" fill="rgb(210,10,22)" rx="2" ry="2" />
<text  x="36.61" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (6 samples, 0.21%)</title><rect x="1184.3" y="309" width="2.4" height="15.0" fill="rgb(208,171,8)" rx="2" ry="2" />
<text  x="1187.30" y="319.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;) (2 samples, 0.07%)</title><rect x="432.5" y="741" width="0.8" height="15.0" fill="rgb(227,9,26)" rx="2" ry="2" />
<text  x="435.50" y="751.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;0000000000068980&gt; (1 samples, 0.03%)</title><rect x="1166.8" y="613" width="0.4" height="15.0" fill="rgb(216,171,43)" rx="2" ry="2" />
<text  x="1169.80" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1180.2" y="517" width="0.4" height="15.0" fill="rgb(226,170,38)" rx="2" ry="2" />
<text  x="1183.23" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1188.4" y="245" width="0.8" height="15.0" fill="rgb(232,128,19)" rx="2" ry="2" />
<text  x="1191.37" y="255.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,776 samples, 61.26%)</title><rect x="433.3" y="741" width="722.9" height="15.0" fill="rgb(254,34,30)" rx="2" ry="2" />
<text  x="436.32" y="751.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>Triangle::Triangle() (2 samples, 0.07%)</title><rect x="424.8" y="725" width="0.8" height="15.0" fill="rgb(250,16,44)" rx="2" ry="2" />
<text  x="427.77" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="239.6" y="645" width="0.4" height="15.0" fill="rgb(217,10,39)" rx="2" ry="2" />
<text  x="242.57" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1188.4" y="517" width="0.8" height="15.0" fill="rgb(243,143,53)" rx="2" ry="2" />
<text  x="1191.37" y="527.5" ></text>
</g>
<g >
<title>pa_flist_new_with_name&lt;00000000000301a0&gt; (1 samples, 0.03%)</title><rect x="33.2" y="453" width="0.4" height="15.0" fill="rgb(241,29,1)" rx="2" ry="2" />
<text  x="36.20" y="463.5" ></text>
</g>
<g >
<title>~_Safe_sequence_base (2 samples, 0.07%)</title><rect x="1174.9" y="741" width="0.9" height="15.0" fill="rgb(245,1,29)" rx="2" ry="2" />
<text  x="1177.94" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt;[inline] (1 samples, 0.03%)</title><rect x="1172.1" y="485" width="0.4" height="15.0" fill="rgb(229,124,45)" rx="2" ry="2" />
<text  x="1175.09" y="495.5" ></text>
</g>
<g >
<title>Event_Scanner::scanInput()&lt;000000000002d380&gt; (1 samples, 0.03%)</title><rect x="36.5" y="741" width="0.4" height="15.0" fill="rgb(214,196,21)" rx="2" ry="2" />
<text  x="39.46" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.4" y="645" width="0.8" height="15.0" fill="rgb(248,160,15)" rx="2" ry="2" />
<text  x="1191.37" y="655.5" ></text>
</g>
<g >
<title>SDL_CreateThread&lt;000000000003ecb0&gt; (1 samples, 0.03%)</title><rect x="33.2" y="741" width="0.4" height="15.0" fill="rgb(229,130,39)" rx="2" ry="2" />
<text  x="36.20" y="751.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (2 samples, 0.07%)</title><rect x="208.2" y="645" width="0.8" height="15.0" fill="rgb(216,56,19)" rx="2" ry="2" />
<text  x="211.23" y="655.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="581" width="5.7" height="15.0" fill="rgb(237,183,47)" rx="2" ry="2" />
<text  x="1184.45" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate(std::allocator&lt;char&gt;&amp;, unsigned long) (1 samples, 0.03%)</title><rect x="1188.0" y="453" width="0.4" height="15.0" fill="rgb(248,199,21)" rx="2" ry="2" />
<text  x="1190.96" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (4 samples, 0.14%)</title><rect x="395.1" y="661" width="1.6" height="15.0" fill="rgb(233,52,3)" rx="2" ry="2" />
<text  x="398.06" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.14%)</title><rect x="30.8" y="693" width="1.6" height="15.0" fill="rgb(226,134,10)" rx="2" ry="2" />
<text  x="33.76" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::DLL_Remove(tcmalloc::Span*)&lt;0000000000028550&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="37" width="0.4" height="15.0" fill="rgb(231,226,45)" rx="2" ry="2" />
<text  x="1191.78" y="47.5" ></text>
</g>
<g >
<title>tc_new (1 samples, 0.03%)</title><rect x="1183.9" y="325" width="0.4" height="15.0" fill="rgb(208,131,38)" rx="2" ry="2" />
<text  x="1186.89" y="335.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.03%)</title><rect x="111.8" y="693" width="0.4" height="15.0" fill="rgb(207,117,10)" rx="2" ry="2" />
<text  x="114.76" y="703.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.03%)</title><rect x="378.0" y="661" width="0.4" height="15.0" fill="rgb(217,127,22)" rx="2" ry="2" />
<text  x="380.96" y="671.5" ></text>
</g>
<g >
<title>dlerror@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="30.8" y="533" width="0.8" height="15.0" fill="rgb(237,217,42)" rx="2" ry="2" />
<text  x="33.76" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (3 samples, 0.10%)</title><rect x="194.0" y="645" width="1.2" height="15.0" fill="rgb(221,9,33)" rx="2" ry="2" />
<text  x="196.98" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1188.4" y="85" width="0.4" height="15.0" fill="rgb(253,184,37)" rx="2" ry="2" />
<text  x="1191.37" y="95.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.03%)</title><rect x="414.2" y="693" width="0.4" height="15.0" fill="rgb(240,67,24)" rx="2" ry="2" />
<text  x="417.19" y="703.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.03%)</title><rect x="1166.4" y="645" width="0.4" height="15.0" fill="rgb(248,122,39)" rx="2" ry="2" />
<text  x="1169.39" y="655.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1181.0" y="581" width="0.5" height="15.0" fill="rgb(250,159,40)" rx="2" ry="2" />
<text  x="1184.05" y="591.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (5 samples, 0.17%)</title><rect x="1177.8" y="709" width="2.0" height="15.0" fill="rgb(223,175,41)" rx="2" ry="2" />
<text  x="1180.79" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1159.5" y="597" width="0.4" height="15.0" fill="rgb(252,217,26)" rx="2" ry="2" />
<text  x="1162.47" y="607.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.03%)</title><rect x="421.9" y="597" width="0.4" height="15.0" fill="rgb(246,223,25)" rx="2" ry="2" />
<text  x="424.92" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="430.9" y="677" width="0.8" height="15.0" fill="rgb(234,123,51)" rx="2" ry="2" />
<text  x="433.88" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.07%)</title><rect x="1189.2" y="421" width="0.8" height="15.0" fill="rgb(247,228,20)" rx="2" ry="2" />
<text  x="1192.19" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Renderer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1189.2" y="693" width="0.8" height="15.0" fill="rgb(212,115,50)" rx="2" ry="2" />
<text  x="1192.19" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (5 samples, 0.17%)</title><rect x="34.0" y="709" width="2.1" height="15.0" fill="rgb(235,152,32)" rx="2" ry="2" />
<text  x="37.02" y="719.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (6 samples, 0.21%)</title><rect x="379.6" y="661" width="2.4" height="15.0" fill="rgb(215,27,14)" rx="2" ry="2" />
<text  x="382.59" y="671.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="428.4" y="645" width="0.4" height="15.0" fill="rgb(247,198,20)" rx="2" ry="2" />
<text  x="431.43" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1174.5" y="693" width="0.4" height="15.0" fill="rgb(208,111,48)" rx="2" ry="2" />
<text  x="1177.53" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1164.4" y="581" width="0.4" height="15.0" fill="rgb(206,82,3)" rx="2" ry="2" />
<text  x="1167.36" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (539 samples, 18.59%)</title><rect x="912.4" y="661" width="219.4" height="15.0" fill="rgb(253,3,36)" rx="2" ry="2" />
<text  x="915.40" y="671.5" >__driDriverGetExtensions_d3d..</text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (28 samples, 0.97%)</title><rect x="364.9" y="677" width="11.4" height="15.0" fill="rgb(243,2,1)" rx="2" ry="2" />
<text  x="367.94" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Ios_Openmode) (1 samples, 0.03%)</title><rect x="1187.6" y="693" width="0.4" height="15.0" fill="rgb(235,207,2)" rx="2" ry="2" />
<text  x="1190.56" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1167.2" y="597" width="0.4" height="15.0" fill="rgb(237,111,50)" rx="2" ry="2" />
<text  x="1170.21" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1174.1" y="677" width="0.4" height="15.0" fill="rgb(230,175,34)" rx="2" ry="2" />
<text  x="1177.13" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.03%)</title><rect x="428.8" y="709" width="0.4" height="15.0" fill="rgb(223,133,33)" rx="2" ry="2" />
<text  x="431.84" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (4 samples, 0.14%)</title><rect x="1163.5" y="645" width="1.7" height="15.0" fill="rgb(209,152,45)" rx="2" ry="2" />
<text  x="1166.54" y="655.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (19 samples, 0.66%)</title><rect x="1124.1" y="645" width="7.7" height="15.0" fill="rgb(214,167,7)" rx="2" ry="2" />
<text  x="1127.06" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (2 samples, 0.07%)</title><rect x="1189.2" y="565" width="0.8" height="15.0" fill="rgb(230,12,0)" rx="2" ry="2" />
<text  x="1192.19" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.17%)</title><rect x="389.4" y="661" width="2.0" height="15.0" fill="rgb(240,218,48)" rx="2" ry="2" />
<text  x="392.36" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_base() (1 samples, 0.03%)</title><rect x="421.1" y="629" width="0.4" height="15.0" fill="rgb(248,43,23)" rx="2" ry="2" />
<text  x="424.11" y="639.5" ></text>
</g>
<g >
<title>_ReuseOrAllocNode (1 samples, 0.03%)</title><rect x="1165.6" y="565" width="0.4" height="15.0" fill="rgb(207,3,31)" rx="2" ry="2" />
<text  x="1168.58" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1187.2" y="645" width="0.4" height="15.0" fill="rgb(242,225,51)" rx="2" ry="2" />
<text  x="1190.15" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1,773 samples, 61.16%)</title><rect x="434.5" y="709" width="721.7" height="15.0" fill="rgb(235,32,20)" rx="2" ry="2" />
<text  x="437.54" y="719.5" >SDL_DYNAPI_entry</text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (2 samples, 0.07%)</title><rect x="430.9" y="725" width="0.8" height="15.0" fill="rgb(219,129,10)" rx="2" ry="2" />
<text  x="433.88" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push_back(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="677" width="0.4" height="15.0" fill="rgb(248,50,35)" rx="2" ry="2" />
<text  x="1190.96" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1188.4" y="709" width="0.8" height="15.0" fill="rgb(217,84,52)" rx="2" ry="2" />
<text  x="1191.37" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.03%)</title><rect x="1180.2" y="629" width="0.4" height="15.0" fill="rgb(254,152,8)" rx="2" ry="2" />
<text  x="1183.23" y="639.5" ></text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (2,848 samples, 98.24%)</title><rect x="30.8" y="821" width="1159.2" height="15.0" fill="rgb(242,5,34)" rx="2" ry="2" />
<text  x="33.76" y="831.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.21%)</title><rect x="33.6" y="741" width="2.5" height="15.0" fill="rgb(243,194,38)" rx="2" ry="2" />
<text  x="36.61" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="431.3" y="597" width="0.4" height="15.0" fill="rgb(208,138,30)" rx="2" ry="2" />
<text  x="434.28" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned int)&lt;0000000000029e60&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="117" width="0.4" height="15.0" fill="rgb(232,3,22)" rx="2" ry="2" />
<text  x="1191.78" y="127.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.03%)</title><rect x="1170.9" y="597" width="0.4" height="15.0" fill="rgb(217,53,44)" rx="2" ry="2" />
<text  x="1173.87" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1160.7" y="629" width="0.4" height="15.0" fill="rgb(238,95,19)" rx="2" ry="2" />
<text  x="1163.69" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.03%)</title><rect x="431.7" y="693" width="0.4" height="15.0" fill="rgb(211,118,29)" rx="2" ry="2" />
<text  x="434.69" y="703.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.03%)</title><rect x="433.3" y="565" width="0.4" height="15.0" fill="rgb(238,182,10)" rx="2" ry="2" />
<text  x="436.32" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1179.8" y="613" width="0.4" height="15.0" fill="rgb(218,205,37)" rx="2" ry="2" />
<text  x="1182.82" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1189.2" y="405" width="0.8" height="15.0" fill="rgb(236,64,15)" rx="2" ry="2" />
<text  x="1192.19" y="415.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.03%)</title><rect x="1181.0" y="597" width="0.5" height="15.0" fill="rgb(248,79,37)" rx="2" ry="2" />
<text  x="1184.05" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="1174.5" y="613" width="0.4" height="15.0" fill="rgb(207,69,41)" rx="2" ry="2" />
<text  x="1177.53" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="425.6" y="661" width="0.4" height="15.0" fill="rgb(236,4,16)" rx="2" ry="2" />
<text  x="428.58" y="671.5" ></text>
</g>
<g >
<title>_Safe_sequence (4 samples, 0.14%)</title><rect x="67.4" y="677" width="1.6" height="15.0" fill="rgb(216,83,47)" rx="2" ry="2" />
<text  x="70.39" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="424.4" y="549" width="0.4" height="15.0" fill="rgb(211,96,23)" rx="2" ry="2" />
<text  x="427.36" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (1 samples, 0.03%)</title><rect x="419.1" y="677" width="0.4" height="15.0" fill="rgb(244,208,40)" rx="2" ry="2" />
<text  x="422.07" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="426.4" y="709" width="0.4" height="15.0" fill="rgb(210,180,0)" rx="2" ry="2" />
<text  x="429.40" y="719.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1180.2" y="725" width="0.4" height="15.0" fill="rgb(214,215,24)" rx="2" ry="2" />
<text  x="1183.23" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1174.1" y="629" width="0.4" height="15.0" fill="rgb(244,193,52)" rx="2" ry="2" />
<text  x="1177.13" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1189.2" y="661" width="0.8" height="15.0" fill="rgb(254,190,29)" rx="2" ry="2" />
<text  x="1192.19" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.07%)</title><rect x="1188.4" y="277" width="0.8" height="15.0" fill="rgb(240,63,42)" rx="2" ry="2" />
<text  x="1191.37" y="287.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="420.3" y="645" width="0.4" height="15.0" fill="rgb(242,209,10)" rx="2" ry="2" />
<text  x="423.29" y="655.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="1180.2" y="661" width="0.4" height="15.0" fill="rgb(244,80,2)" rx="2" ry="2" />
<text  x="1183.23" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1171.7" y="501" width="0.4" height="15.0" fill="rgb(246,222,3)" rx="2" ry="2" />
<text  x="1174.68" y="511.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (5 samples, 0.17%)</title><rect x="1177.8" y="693" width="2.0" height="15.0" fill="rgb(226,137,29)" rx="2" ry="2" />
<text  x="1180.79" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1186.7" y="389" width="0.5" height="15.0" fill="rgb(242,72,36)" rx="2" ry="2" />
<text  x="1189.74" y="399.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="102.8" y="677" width="0.4" height="15.0" fill="rgb(246,67,52)" rx="2" ry="2" />
<text  x="105.80" y="687.5" ></text>
</g>
<g >
<title>_Parameter (1 samples, 0.03%)</title><rect x="305.9" y="645" width="0.4" height="15.0" fill="rgb(241,96,9)" rx="2" ry="2" />
<text  x="308.92" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (3 samples, 0.10%)</title><rect x="1166.8" y="629" width="1.2" height="15.0" fill="rgb(217,62,11)" rx="2" ry="2" />
<text  x="1169.80" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="426.8" y="709" width="0.4" height="15.0" fill="rgb(249,53,30)" rx="2" ry="2" />
<text  x="429.81" y="719.5" ></text>
</g>
<g >
<title>_Xutf8TextListToTextProperty&lt;00000000000552c0&gt; (1 samples, 0.03%)</title><rect x="1175.8" y="725" width="0.4" height="15.0" fill="rgb(231,54,15)" rx="2" ry="2" />
<text  x="1178.75" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.03%)</title><rect x="1170.9" y="565" width="0.4" height="15.0" fill="rgb(224,81,18)" rx="2" ry="2" />
<text  x="1173.87" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1188.4" y="597" width="0.8" height="15.0" fill="rgb(235,17,30)" rx="2" ry="2" />
<text  x="1191.37" y="607.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (4 samples, 0.14%)</title><rect x="30.8" y="677" width="1.6" height="15.0" fill="rgb(231,156,24)" rx="2" ry="2" />
<text  x="33.76" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.03%)</title><rect x="1181.9" y="389" width="0.4" height="15.0" fill="rgb(240,159,7)" rx="2" ry="2" />
<text  x="1184.86" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.03%)</title><rect x="1188.0" y="405" width="0.4" height="15.0" fill="rgb(228,217,23)" rx="2" ry="2" />
<text  x="1190.96" y="415.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push_back(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="693" width="0.4" height="15.0" fill="rgb(252,182,34)" rx="2" ry="2" />
<text  x="1190.96" y="703.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.07%)</title><rect x="222.9" y="661" width="0.8" height="15.0" fill="rgb(216,157,44)" rx="2" ry="2" />
<text  x="225.88" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1164.8" y="597" width="0.4" height="15.0" fill="rgb(233,3,34)" rx="2" ry="2" />
<text  x="1167.76" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (1 samples, 0.03%)</title><rect x="418.7" y="709" width="0.4" height="15.0" fill="rgb(217,17,0)" rx="2" ry="2" />
<text  x="421.67" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1161.9" y="645" width="0.4" height="15.0" fill="rgb(237,183,44)" rx="2" ry="2" />
<text  x="1164.91" y="655.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.03%)</title><rect x="1181.9" y="421" width="0.4" height="15.0" fill="rgb(230,172,24)" rx="2" ry="2" />
<text  x="1184.86" y="431.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.03%)</title><rect x="416.2" y="677" width="0.4" height="15.0" fill="rgb(225,113,41)" rx="2" ry="2" />
<text  x="419.22" y="687.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.03%)</title><rect x="1180.2" y="757" width="0.4" height="15.0" fill="rgb(248,111,11)" rx="2" ry="2" />
<text  x="1183.23" y="767.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1170.9" y="549" width="0.4" height="15.0" fill="rgb(233,24,5)" rx="2" ry="2" />
<text  x="1173.87" y="559.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1158.3" y="629" width="0.4" height="15.0" fill="rgb(227,97,22)" rx="2" ry="2" />
<text  x="1161.25" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (6 samples, 0.21%)</title><rect x="1184.3" y="293" width="2.4" height="15.0" fill="rgb(209,80,23)" rx="2" ry="2" />
<text  x="1187.30" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="294.9" y="645" width="0.8" height="15.0" fill="rgb(245,7,26)" rx="2" ry="2" />
<text  x="297.93" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1173.7" y="709" width="0.4" height="15.0" fill="rgb(227,151,54)" rx="2" ry="2" />
<text  x="1176.72" y="719.5" ></text>
</g>
<g >
<title>_glapi_tls_Context&lt;0000000000000008&gt; (26 samples, 0.90%)</title><rect x="20.2" y="837" width="10.6" height="15.0" fill="rgb(212,53,1)" rx="2" ry="2" />
<text  x="23.18" y="847.5" ></text>
</g>
<g >
<title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream()[inline] (1 samples, 0.03%)</title><rect x="1187.6" y="677" width="0.4" height="15.0" fill="rgb(205,44,1)" rx="2" ry="2" />
<text  x="1190.56" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="1165.2" y="565" width="0.4" height="15.0" fill="rgb(240,26,36)" rx="2" ry="2" />
<text  x="1168.17" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1171.7" y="565" width="0.8" height="15.0" fill="rgb(212,152,20)" rx="2" ry="2" />
<text  x="1174.68" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="1180.2" y="645" width="0.4" height="15.0" fill="rgb(232,81,26)" rx="2" ry="2" />
<text  x="1183.23" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006da70&gt; (1 samples, 0.03%)</title><rect x="1170.9" y="613" width="0.4" height="15.0" fill="rgb(228,82,9)" rx="2" ry="2" />
<text  x="1173.87" y="623.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (10 samples, 0.34%)</title><rect x="198.9" y="661" width="4.0" height="15.0" fill="rgb(206,158,39)" rx="2" ry="2" />
<text  x="201.87" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (1 samples, 0.03%)</title><rect x="1165.2" y="645" width="0.4" height="15.0" fill="rgb(212,19,26)" rx="2" ry="2" />
<text  x="1168.17" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::~_Safe_sequence() (1 samples, 0.03%)</title><rect x="1188.4" y="181" width="0.4" height="15.0" fill="rgb(239,48,32)" rx="2" ry="2" />
<text  x="1191.37" y="191.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1180.2" y="581" width="0.4" height="15.0" fill="rgb(245,141,53)" rx="2" ry="2" />
<text  x="1183.23" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1188.4" y="437" width="0.8" height="15.0" fill="rgb(206,175,47)" rx="2" ry="2" />
<text  x="1191.37" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1168.4" y="565" width="0.4" height="15.0" fill="rgb(233,4,25)" rx="2" ry="2" />
<text  x="1171.43" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1161.9" y="629" width="0.4" height="15.0" fill="rgb(242,178,33)" rx="2" ry="2" />
<text  x="1164.91" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (28 samples, 0.97%)</title><rect x="183.8" y="677" width="11.4" height="15.0" fill="rgb(224,14,36)" rx="2" ry="2" />
<text  x="186.80" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (11 samples, 0.38%)</title><rect x="348.2" y="661" width="4.5" height="15.0" fill="rgb(224,17,33)" rx="2" ry="2" />
<text  x="351.25" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (6 samples, 0.21%)</title><rect x="191.5" y="645" width="2.5" height="15.0" fill="rgb(245,182,44)" rx="2" ry="2" />
<text  x="194.54" y="655.5" ></text>
</g>
<g >
<title>_XlcOpenConverter&lt;0000000000053990&gt; (1 samples, 0.03%)</title><rect x="1175.8" y="693" width="0.4" height="15.0" fill="rgb(246,102,34)" rx="2" ry="2" />
<text  x="1178.75" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="1171.7" y="597" width="0.8" height="15.0" fill="rgb(230,135,1)" rx="2" ry="2" />
<text  x="1174.68" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1174.9" y="645" width="0.9" height="15.0" fill="rgb(211,8,40)" rx="2" ry="2" />
<text  x="1177.94" y="655.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="32.4" y="645" width="0.4" height="15.0" fill="rgb(237,35,47)" rx="2" ry="2" />
<text  x="35.39" y="655.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="645" width="0.4" height="15.0" fill="rgb(221,221,25)" rx="2" ry="2" />
<text  x="35.79" y="655.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.07%)</title><rect x="30.8" y="469" width="0.8" height="15.0" fill="rgb(248,212,45)" rx="2" ry="2" />
<text  x="33.76" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::TryRecordAllocationFast(unsigned long)[inline] (1 samples, 0.03%)</title><rect x="421.9" y="581" width="0.4" height="15.0" fill="rgb(214,151,41)" rx="2" ry="2" />
<text  x="424.92" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1177.0" y="709" width="0.8" height="15.0" fill="rgb(244,203,40)" rx="2" ry="2" />
<text  x="1179.97" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;00000000000298d0&gt; (6 samples, 0.21%)</title><rect x="1184.3" y="325" width="2.4" height="15.0" fill="rgb(227,79,26)" rx="2" ry="2" />
<text  x="1187.30" y="335.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (1 samples, 0.03%)</title><rect x="1188.8" y="181" width="0.4" height="15.0" fill="rgb(219,153,26)" rx="2" ry="2" />
<text  x="1191.78" y="191.5" ></text>
</g>
<g >
<title>_start&lt;000000000000acf0&gt; (2,848 samples, 98.24%)</title><rect x="30.8" y="837" width="1159.2" height="15.0" fill="rgb(212,220,51)" rx="2" ry="2" />
<text  x="33.76" y="847.5" >_start&lt;000000000000acf0&gt;</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="424.0" y="645" width="0.8" height="15.0" fill="rgb(229,59,49)" rx="2" ry="2" />
<text  x="426.96" y="655.5" ></text>
</g>
<g >
<title>0x00007ff44ea7613a (1 samples, 0.03%)</title><rect x="34.4" y="565" width="0.4" height="15.0" fill="rgb(205,107,7)" rx="2" ry="2" />
<text  x="37.42" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="517" width="5.7" height="15.0" fill="rgb(251,104,7)" rx="2" ry="2" />
<text  x="1184.45" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (11 samples, 0.38%)</title><rect x="1182.3" y="421" width="4.4" height="15.0" fill="rgb(248,69,43)" rx="2" ry="2" />
<text  x="1185.27" y="431.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.07%)</title><rect x="1162.3" y="645" width="0.8" height="15.0" fill="rgb(229,114,31)" rx="2" ry="2" />
<text  x="1165.32" y="655.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (2 samples, 0.07%)</title><rect x="53.1" y="693" width="0.9" height="15.0" fill="rgb(238,53,31)" rx="2" ry="2" />
<text  x="56.15" y="703.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;00000000000688c0&gt; (39 samples, 1.35%)</title><rect x="1157.4" y="741" width="15.9" height="15.0" fill="rgb(218,164,42)" rx="2" ry="2" />
<text  x="1160.44" y="751.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="1174.1" y="565" width="0.4" height="15.0" fill="rgb(242,47,11)" rx="2" ry="2" />
<text  x="1177.13" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.21%)</title><rect x="1168.0" y="645" width="2.5" height="15.0" fill="rgb(239,189,27)" rx="2" ry="2" />
<text  x="1171.02" y="655.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000d5860&gt; (1 samples, 0.03%)</title><rect x="1161.5" y="581" width="0.4" height="15.0" fill="rgb(241,107,41)" rx="2" ry="2" />
<text  x="1164.51" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006da70&gt; (1 samples, 0.03%)</title><rect x="1172.5" y="597" width="0.4" height="15.0" fill="rgb(235,212,51)" rx="2" ry="2" />
<text  x="1175.50" y="607.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.03%)</title><rect x="1161.1" y="597" width="0.4" height="15.0" fill="rgb(251,98,44)" rx="2" ry="2" />
<text  x="1164.10" y="607.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.45%)</title><rect x="1157.8" y="661" width="5.3" height="15.0" fill="rgb(228,8,7)" rx="2" ry="2" />
<text  x="1160.84" y="671.5" ></text>
</g>
<g >
<title>InOutRasterizer (1 samples, 0.03%)</title><rect x="264.0" y="709" width="0.4" height="15.0" fill="rgb(228,173,12)" rx="2" ry="2" />
<text  x="266.99" y="719.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (2 samples, 0.07%)</title><rect x="1174.9" y="661" width="0.9" height="15.0" fill="rgb(248,151,32)" rx="2" ry="2" />
<text  x="1177.94" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1171.7" y="549" width="0.8" height="15.0" fill="rgb(222,159,51)" rx="2" ry="2" />
<text  x="1174.68" y="559.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000074510&gt; (19 samples, 0.66%)</title><rect x="1180.6" y="757" width="7.8" height="15.0" fill="rgb(216,158,46)" rx="2" ry="2" />
<text  x="1183.64" y="767.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1174.5" y="597" width="0.4" height="15.0" fill="rgb(225,144,35)" rx="2" ry="2" />
<text  x="1177.53" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="423.1" y="645" width="0.4" height="15.0" fill="rgb(220,57,45)" rx="2" ry="2" />
<text  x="426.14" y="655.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="419.5" y="677" width="0.8" height="15.0" fill="rgb(247,87,18)" rx="2" ry="2" />
<text  x="422.48" y="687.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (19 samples, 0.66%)</title><rect x="1180.6" y="741" width="7.8" height="15.0" fill="rgb(253,150,2)" rx="2" ry="2" />
<text  x="1183.64" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1174.1" y="661" width="0.4" height="15.0" fill="rgb(210,211,49)" rx="2" ry="2" />
<text  x="1177.13" y="671.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="36.1" y="709" width="0.4" height="15.0" fill="rgb(213,80,40)" rx="2" ry="2" />
<text  x="39.05" y="719.5" ></text>
</g>
<g >
<title>~vector (7 samples, 0.24%)</title><rect x="310.0" y="677" width="2.8" height="15.0" fill="rgb(234,41,32)" rx="2" ry="2" />
<text  x="312.99" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1171.3" y="565" width="0.4" height="15.0" fill="rgb(243,77,26)" rx="2" ry="2" />
<text  x="1174.28" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (14 samples, 0.48%)</title><rect x="1181.5" y="469" width="5.7" height="15.0" fill="rgb(241,62,37)" rx="2" ry="2" />
<text  x="1184.45" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1179.0" y="645" width="0.4" height="15.0" fill="rgb(248,148,34)" rx="2" ry="2" />
<text  x="1182.01" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="310.4" y="661" width="0.4" height="15.0" fill="rgb(222,220,40)" rx="2" ry="2" />
<text  x="313.39" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1188.4" y="117" width="0.4" height="15.0" fill="rgb(233,14,8)" rx="2" ry="2" />
<text  x="1191.37" y="127.5" ></text>
</g>
<g >
<title>__shared_ptr (1 samples, 0.03%)</title><rect x="393.4" y="693" width="0.4" height="15.0" fill="rgb(226,37,9)" rx="2" ry="2" />
<text  x="396.43" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="613" width="0.4" height="15.0" fill="rgb(211,61,14)" rx="2" ry="2" />
<text  x="35.79" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1156.6" y="709" width="0.8" height="15.0" fill="rgb(206,227,38)" rx="2" ry="2" />
<text  x="1159.62" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1171.3" y="597" width="0.4" height="15.0" fill="rgb(215,128,43)" rx="2" ry="2" />
<text  x="1174.28" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.03%)</title><rect x="32.0" y="565" width="0.4" height="15.0" fill="rgb(237,111,9)" rx="2" ry="2" />
<text  x="34.98" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="1162.3" y="629" width="0.8" height="15.0" fill="rgb(251,18,16)" rx="2" ry="2" />
<text  x="1165.32" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.03%)</title><rect x="1174.5" y="629" width="0.4" height="15.0" fill="rgb(206,61,5)" rx="2" ry="2" />
<text  x="1177.53" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (9 samples, 0.31%)</title><rect x="1120.4" y="613" width="3.7" height="15.0" fill="rgb(210,125,44)" rx="2" ry="2" />
<text  x="1123.40" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="1174.5" y="645" width="0.4" height="15.0" fill="rgb(223,24,24)" rx="2" ry="2" />
<text  x="1177.53" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (1 samples, 0.03%)</title><rect x="414.6" y="725" width="0.4" height="15.0" fill="rgb(221,223,17)" rx="2" ry="2" />
<text  x="417.59" y="735.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (2 samples, 0.07%)</title><rect x="1120.8" y="597" width="0.8" height="15.0" fill="rgb(216,5,36)" rx="2" ry="2" />
<text  x="1123.80" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1164.4" y="613" width="0.4" height="15.0" fill="rgb(218,20,34)" rx="2" ry="2" />
<text  x="1167.36" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="421.1" y="645" width="0.4" height="15.0" fill="rgb(231,166,23)" rx="2" ry="2" />
<text  x="424.11" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.03%)</title><rect x="110.5" y="645" width="0.4" height="15.0" fill="rgb(248,119,11)" rx="2" ry="2" />
<text  x="113.54" y="655.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (4 samples, 0.14%)</title><rect x="80.8" y="661" width="1.7" height="15.0" fill="rgb(223,40,52)" rx="2" ry="2" />
<text  x="83.82" y="671.5" ></text>
</g>
<g >
<title>Renderer::~Renderer()&lt;0000000000026140&gt; (2 samples, 0.07%)</title><rect x="1189.2" y="677" width="0.8" height="15.0" fill="rgb(253,88,42)" rx="2" ry="2" />
<text  x="1192.19" y="687.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (13 samples, 0.45%)</title><rect x="1168.0" y="661" width="5.3" height="15.0" fill="rgb(226,85,22)" rx="2" ry="2" />
<text  x="1171.02" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1188.4" y="373" width="0.8" height="15.0" fill="rgb(247,116,40)" rx="2" ry="2" />
<text  x="1191.37" y="383.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="426.0" y="677" width="0.4" height="15.0" fill="rgb(230,171,2)" rx="2" ry="2" />
<text  x="428.99" y="687.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1165.2" y="597" width="0.4" height="15.0" fill="rgb(212,165,16)" rx="2" ry="2" />
<text  x="1168.17" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (937 samples, 32.32%)</title><rect x="505.0" y="677" width="381.4" height="15.0" fill="rgb(213,19,5)" rx="2" ry="2" />
<text  x="507.96" y="687.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SDL_Color*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::operator-(long) const (1 samples, 0.03%)</title><rect x="1180.6" y="597" width="0.4" height="15.0" fill="rgb(221,207,45)" rx="2" ry="2" />
<text  x="1183.64" y="607.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="423.1" y="661" width="0.4" height="15.0" fill="rgb(246,223,30)" rx="2" ry="2" />
<text  x="426.14" y="671.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (29 samples, 1.00%)</title><rect x="228.2" y="661" width="11.8" height="15.0" fill="rgb(212,121,54)" rx="2" ry="2" />
<text  x="231.17" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="1189.2" y="709" width="0.8" height="15.0" fill="rgb(232,158,24)" rx="2" ry="2" />
<text  x="1192.19" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="422.7" y="661" width="0.4" height="15.0" fill="rgb(231,80,36)" rx="2" ry="2" />
<text  x="425.74" y="671.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="30.8" y="421" width="0.8" height="15.0" fill="rgb(212,35,13)" rx="2" ry="2" />
<text  x="33.76" y="431.5" ></text>
</g>
<g >
<title>pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &amp;, 0UL, TexturePNG &amp;, 0UL&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="149" width="0.4" height="15.0" fill="rgb(223,158,18)" rx="2" ry="2" />
<text  x="1191.78" y="159.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="1179.0" y="661" width="0.4" height="15.0" fill="rgb(223,213,13)" rx="2" ry="2" />
<text  x="1182.01" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="32.8" y="517" width="0.4" height="15.0" fill="rgb(217,23,47)" rx="2" ry="2" />
<text  x="35.79" y="527.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1165.2" y="501" width="0.4" height="15.0" fill="rgb(212,40,51)" rx="2" ry="2" />
<text  x="1168.17" y="511.5" ></text>
</g>
<g >
<title>~_Vector_base (1 samples, 0.03%)</title><rect x="1188.0" y="533" width="0.4" height="15.0" fill="rgb(233,171,51)" rx="2" ry="2" />
<text  x="1190.96" y="543.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (418 samples, 14.42%)</title><rect x="953.9" y="629" width="170.2" height="15.0" fill="rgb(226,203,49)" rx="2" ry="2" />
<text  x="956.92" y="639.5" >__driDriverGetExtensio..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1181.0" y="645" width="0.5" height="15.0" fill="rgb(213,113,42)" rx="2" ry="2" />
<text  x="1184.05" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="222.9" y="677" width="0.8" height="15.0" fill="rgb(254,111,8)" rx="2" ry="2" />
<text  x="225.88" y="687.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.07%)</title><rect x="1189.2" y="373" width="0.8" height="15.0" fill="rgb(216,1,7)" rx="2" ry="2" />
<text  x="1192.19" y="383.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1189.2" y="725" width="0.8" height="15.0" fill="rgb(228,4,37)" rx="2" ry="2" />
<text  x="1192.19" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (7 samples, 0.24%)</title><rect x="1183.9" y="389" width="2.8" height="15.0" fill="rgb(209,116,40)" rx="2" ry="2" />
<text  x="1186.89" y="399.5" ></text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="420.3" y="661" width="0.4" height="15.0" fill="rgb(247,3,5)" rx="2" ry="2" />
<text  x="423.29" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1161.9" y="613" width="0.4" height="15.0" fill="rgb(240,214,10)" rx="2" ry="2" />
<text  x="1164.91" y="623.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003e1d0&gt; (14 samples, 0.48%)</title><rect x="1181.5" y="693" width="5.7" height="15.0" fill="rgb(209,14,47)" rx="2" ry="2" />
<text  x="1184.45" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (14 samples, 0.48%)</title><rect x="229.8" y="645" width="5.7" height="15.0" fill="rgb(250,199,48)" rx="2" ry="2" />
<text  x="232.80" y="655.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="32.4" y="661" width="0.4" height="15.0" fill="rgb(230,188,42)" rx="2" ry="2" />
<text  x="35.39" y="671.5" ></text>
</g>
<g >
<title>tc_new (1 samples, 0.03%)</title><rect x="421.9" y="613" width="0.4" height="15.0" fill="rgb(222,160,43)" rx="2" ry="2" />
<text  x="424.92" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.10%)</title><rect x="1166.8" y="645" width="1.2" height="15.0" fill="rgb(248,71,2)" rx="2" ry="2" />
<text  x="1169.80" y="655.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.03%)</title><rect x="31.2" y="373" width="0.4" height="15.0" fill="rgb(212,162,8)" rx="2" ry="2" />
<text  x="34.17" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1175.3" y="581" width="0.5" height="15.0" fill="rgb(205,121,3)" rx="2" ry="2" />
<text  x="1178.35" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (8 samples, 0.28%)</title><rect x="235.5" y="645" width="3.3" height="15.0" fill="rgb(236,150,51)" rx="2" ry="2" />
<text  x="238.50" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1179.0" y="629" width="0.4" height="15.0" fill="rgb(210,38,31)" rx="2" ry="2" />
<text  x="1182.01" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1173.3" y="725" width="0.4" height="15.0" fill="rgb(221,189,36)" rx="2" ry="2" />
<text  x="1176.31" y="735.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="1187.6" y="645" width="0.4" height="15.0" fill="rgb(245,174,23)" rx="2" ry="2" />
<text  x="1190.56" y="655.5" ></text>
</g>
<g >
<title>pa_context_disconnect@@PULSE_0&lt;0000000000013130&gt; (1 samples, 0.03%)</title><rect x="33.2" y="629" width="0.4" height="15.0" fill="rgb(237,154,24)" rx="2" ry="2" />
<text  x="36.20" y="639.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (14 samples, 0.48%)</title><rect x="1157.4" y="693" width="5.7" height="15.0" fill="rgb(230,187,40)" rx="2" ry="2" />
<text  x="1160.44" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="429.7" y="677" width="0.8" height="15.0" fill="rgb(233,104,28)" rx="2" ry="2" />
<text  x="432.66" y="687.5" ></text>
</g>
<g >
<title>_Parameter (3 samples, 0.10%)</title><rect x="378.4" y="661" width="1.2" height="15.0" fill="rgb(231,7,31)" rx="2" ry="2" />
<text  x="381.37" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_single(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1186.7" y="373" width="0.5" height="15.0" fill="rgb(213,102,42)" rx="2" ry="2" />
<text  x="1189.74" y="383.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::malloc_oom&gt;[inline] (1 samples, 0.03%)</title><rect x="32.4" y="597" width="0.4" height="15.0" fill="rgb(242,135,23)" rx="2" ry="2" />
<text  x="35.39" y="607.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (4 samples, 0.14%)</title><rect x="1188.4" y="773" width="1.6" height="15.0" fill="rgb(249,133,23)" rx="2" ry="2" />
<text  x="1191.37" y="783.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.03%)</title><rect x="425.6" y="725" width="0.4" height="15.0" fill="rgb(228,207,46)" rx="2" ry="2" />
<text  x="428.58" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.03%)</title><rect x="424.4" y="597" width="0.4" height="15.0" fill="rgb(245,29,40)" rx="2" ry="2" />
<text  x="427.36" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (16 samples, 0.55%)</title><rect x="1166.8" y="677" width="6.5" height="15.0" fill="rgb(228,169,23)" rx="2" ry="2" />
<text  x="1169.80" y="687.5" ></text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000b770&gt; (2 samples, 0.07%)</title><rect x="30.8" y="405" width="0.8" height="15.0" fill="rgb(244,112,31)" rx="2" ry="2" />
<text  x="33.76" y="415.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.03%)</title><rect x="413.8" y="693" width="0.4" height="15.0" fill="rgb(207,89,45)" rx="2" ry="2" />
<text  x="416.78" y="703.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="422.7" y="645" width="0.4" height="15.0" fill="rgb(214,133,11)" rx="2" ry="2" />
<text  x="425.74" y="655.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (25 samples, 0.86%)</title><rect x="1163.1" y="693" width="10.2" height="15.0" fill="rgb(234,0,28)" rx="2" ry="2" />
<text  x="1166.14" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1178.6" y="661" width="0.4" height="15.0" fill="rgb(207,38,32)" rx="2" ry="2" />
<text  x="1181.60" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1169.2" y="565" width="0.4" height="15.0" fill="rgb(215,11,7)" rx="2" ry="2" />
<text  x="1172.24" y="575.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.03%)</title><rect x="1169.6" y="581" width="0.5" height="15.0" fill="rgb(214,47,21)" rx="2" ry="2" />
<text  x="1172.65" y="591.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000023910&gt; (2,812 samples, 97.00%)</title><rect x="36.1" y="773" width="1144.5" height="15.0" fill="rgb(209,180,42)" rx="2" ry="2" />
<text  x="39.05" y="783.5" >Engine_3D::engine_update()&lt;0000000000023910&gt;</text>
</g>
<g >
<title>~__concurrence_lock_error (2 samples, 0.07%)</title><rect x="419.5" y="661" width="0.8" height="15.0" fill="rgb(228,193,52)" rx="2" ry="2" />
<text  x="422.48" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1174.1" y="581" width="0.4" height="15.0" fill="rgb(209,84,18)" rx="2" ry="2" />
<text  x="1177.13" y="591.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (39 samples, 1.35%)</title><rect x="1157.4" y="725" width="15.9" height="15.0" fill="rgb(243,112,0)" rx="2" ry="2" />
<text  x="1160.44" y="735.5" ></text>
</g>
<g >
<title>~__shared_ptr (2 samples, 0.07%)</title><rect x="1189.2" y="741" width="0.8" height="15.0" fill="rgb(247,208,8)" rx="2" ry="2" />
<text  x="1192.19" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach_single(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d22e0&gt; (1 samples, 0.03%)</title><rect x="426.4" y="613" width="0.4" height="15.0" fill="rgb(245,87,2)" rx="2" ry="2" />
<text  x="429.40" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (9 samples, 0.31%)</title><rect x="396.7" y="661" width="3.6" height="15.0" fill="rgb(234,200,8)" rx="2" ry="2" />
<text  x="399.69" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="597" width="0.4" height="15.0" fill="rgb(225,145,11)" rx="2" ry="2" />
<text  x="35.79" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="424.0" y="677" width="0.8" height="15.0" fill="rgb(228,51,13)" rx="2" ry="2" />
<text  x="426.96" y="687.5" ></text>
</g>
<g >
<title>pa_context_disconnect@@PULSE_0&lt;0000000000013130&gt; (1 samples, 0.03%)</title><rect x="33.2" y="581" width="0.4" height="15.0" fill="rgb(205,26,6)" rx="2" ry="2" />
<text  x="36.20" y="591.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1188.4" y="725" width="0.8" height="15.0" fill="rgb(239,79,19)" rx="2" ry="2" />
<text  x="1191.37" y="735.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="110.9" y="645" width="0.5" height="15.0" fill="rgb(214,45,0)" rx="2" ry="2" />
<text  x="113.95" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (22 samples, 0.76%)</title><rect x="455.3" y="693" width="9.0" height="15.0" fill="rgb(238,90,47)" rx="2" ry="2" />
<text  x="458.30" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="426.8" y="677" width="0.4" height="15.0" fill="rgb(237,20,51)" rx="2" ry="2" />
<text  x="429.81" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.03%)</title><rect x="1180.2" y="565" width="0.4" height="15.0" fill="rgb(246,13,54)" rx="2" ry="2" />
<text  x="1183.23" y="575.5" ></text>
</g>
<g >
<title>OBJ_Chunk::OBJ_Chunk(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1181.0" y="693" width="0.5" height="15.0" fill="rgb(240,205,8)" rx="2" ry="2" />
<text  x="1184.05" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="1167.6" y="597" width="0.4" height="15.0" fill="rgb(251,138,43)" rx="2" ry="2" />
<text  x="1170.61" y="607.5" ></text>
</g>
<g >
<title>pa_run_once&lt;0000000000040340&gt; (1 samples, 0.03%)</title><rect x="33.2" y="485" width="0.4" height="15.0" fill="rgb(224,166,32)" rx="2" ry="2" />
<text  x="36.20" y="495.5" ></text>
</g>
<g >
<title>_dl_catch_exception@@GLIBC_PRIVATE&lt;000000000014fcd0&gt; (2 samples, 0.07%)</title><rect x="30.8" y="501" width="0.8" height="15.0" fill="rgb(215,155,41)" rx="2" ry="2" />
<text  x="33.76" y="511.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (3 samples, 0.10%)</title><rect x="220.0" y="693" width="1.3" height="15.0" fill="rgb(240,90,39)" rx="2" ry="2" />
<text  x="223.03" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.07%)</title><rect x="1156.6" y="725" width="0.8" height="15.0" fill="rgb(235,159,37)" rx="2" ry="2" />
<text  x="1159.62" y="735.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1,700 samples, 58.64%)</title><rect x="464.3" y="693" width="691.9" height="15.0" fill="rgb(249,172,19)" rx="2" ry="2" />
<text  x="467.25" y="703.5" >__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt;</text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.21%)</title><rect x="30.8" y="741" width="2.4" height="15.0" fill="rgb(226,1,47)" rx="2" ry="2" />
<text  x="33.76" y="751.5" ></text>
</g>
<g >
<title>do_malloc[inline] (1 samples, 0.03%)</title><rect x="153.3" y="597" width="0.4" height="15.0" fill="rgb(207,92,19)" rx="2" ry="2" />
<text  x="156.28" y="607.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1179.8" y="629" width="0.4" height="15.0" fill="rgb(205,92,34)" rx="2" ry="2" />
<text  x="1182.82" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.10%)</title><rect x="288.8" y="661" width="1.2" height="15.0" fill="rgb(249,91,25)" rx="2" ry="2" />
<text  x="291.82" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::input_iterator_tag) (1 samples, 0.03%)</title><rect x="1183.5" y="309" width="0.4" height="15.0" fill="rgb(209,24,27)" rx="2" ry="2" />
<text  x="1186.49" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000029a10&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="101" width="0.4" height="15.0" fill="rgb(227,4,47)" rx="2" ry="2" />
<text  x="1191.78" y="111.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.03%)</title><rect x="433.3" y="597" width="0.4" height="15.0" fill="rgb(207,210,27)" rx="2" ry="2" />
<text  x="436.32" y="607.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (35 samples, 1.21%)</title><rect x="713.4" y="613" width="14.2" height="15.0" fill="rgb(245,53,37)" rx="2" ry="2" />
<text  x="716.36" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1165.6" y="629" width="0.8" height="15.0" fill="rgb(210,151,29)" rx="2" ry="2" />
<text  x="1168.58" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="97.5" y="629" width="0.8" height="15.0" fill="rgb(232,204,43)" rx="2" ry="2" />
<text  x="100.51" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="1179.4" y="645" width="0.4" height="15.0" fill="rgb(232,199,41)" rx="2" ry="2" />
<text  x="1182.42" y="655.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="36.1" y="677" width="0.4" height="15.0" fill="rgb(214,27,51)" rx="2" ry="2" />
<text  x="39.05" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__cxx1998::vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="661" width="0.4" height="15.0" fill="rgb(222,202,53)" rx="2" ry="2" />
<text  x="1190.96" y="671.5" ></text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="1165.2" y="613" width="0.4" height="15.0" fill="rgb(233,87,36)" rx="2" ry="2" />
<text  x="1168.17" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.17%)</title><rect x="396.7" y="645" width="2.0" height="15.0" fill="rgb(252,197,48)" rx="2" ry="2" />
<text  x="399.69" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.03%)</title><rect x="431.3" y="613" width="0.4" height="15.0" fill="rgb(227,224,50)" rx="2" ry="2" />
<text  x="434.28" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1156.6" y="693" width="0.8" height="15.0" fill="rgb(246,42,32)" rx="2" ry="2" />
<text  x="1159.62" y="703.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (4 samples, 0.14%)</title><rect x="1171.7" y="629" width="1.6" height="15.0" fill="rgb(241,31,48)" rx="2" ry="2" />
<text  x="1174.68" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1188.4" y="501" width="0.8" height="15.0" fill="rgb(249,87,38)" rx="2" ry="2" />
<text  x="1191.37" y="511.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (8 samples, 0.28%)</title><rect x="306.3" y="645" width="3.3" height="15.0" fill="rgb(229,117,15)" rx="2" ry="2" />
<text  x="309.32" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.4" y="533" width="0.8" height="15.0" fill="rgb(246,129,14)" rx="2" ry="2" />
<text  x="1191.37" y="543.5" ></text>
</g>
<g >
<title>vector (1 samples, 0.03%)</title><rect x="400.3" y="693" width="0.5" height="15.0" fill="rgb(227,7,2)" rx="2" ry="2" />
<text  x="403.35" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="433.3" y="613" width="0.4" height="15.0" fill="rgb(221,130,8)" rx="2" ry="2" />
<text  x="436.32" y="623.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (14 samples, 0.48%)</title><rect x="93.0" y="693" width="5.7" height="15.0" fill="rgb(207,68,18)" rx="2" ry="2" />
<text  x="96.04" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (1 samples, 0.03%)</title><rect x="430.1" y="661" width="0.4" height="15.0" fill="rgb(253,0,45)" rx="2" ry="2" />
<text  x="433.06" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="36.5" y="693" width="0.4" height="15.0" fill="rgb(211,176,32)" rx="2" ry="2" />
<text  x="39.46" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.07%)</title><rect x="1189.2" y="325" width="0.8" height="15.0" fill="rgb(222,89,1)" rx="2" ry="2" />
<text  x="1192.19" y="335.5" ></text>
</g>
<g >
<title>__close@@GLIBC_2.2.5&lt;00000000000f7540&gt; (1 samples, 0.03%)</title><rect x="33.6" y="629" width="0.4" height="15.0" fill="rgb(248,207,27)" rx="2" ry="2" />
<text  x="36.61" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (20 samples, 0.69%)</title><rect x="103.6" y="677" width="8.2" height="15.0" fill="rgb(236,210,0)" rx="2" ry="2" />
<text  x="106.62" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.03%)</title><rect x="1179.8" y="757" width="0.4" height="15.0" fill="rgb(254,145,29)" rx="2" ry="2" />
<text  x="1182.82" y="767.5" ></text>
</g>
<g >
<title>_XimLocalWcLookupString&lt;000000000006a790&gt; (3 samples, 0.10%)</title><rect x="34.8" y="661" width="1.3" height="15.0" fill="rgb(247,82,16)" rx="2" ry="2" />
<text  x="37.83" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="183.0" y="677" width="0.8" height="15.0" fill="rgb(234,191,35)" rx="2" ry="2" />
<text  x="185.99" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (1 samples, 0.03%)</title><rect x="1176.2" y="709" width="0.4" height="15.0" fill="rgb(212,221,45)" rx="2" ry="2" />
<text  x="1179.16" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (36 samples, 1.24%)</title><rect x="77.6" y="677" width="14.6" height="15.0" fill="rgb(240,170,53)" rx="2" ry="2" />
<text  x="80.57" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;SDL_Color&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (1 samples, 0.03%)</title><rect x="1188.4" y="197" width="0.4" height="15.0" fill="rgb(253,151,34)" rx="2" ry="2" />
<text  x="1191.37" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="501" width="0.4" height="15.0" fill="rgb(226,153,47)" rx="2" ry="2" />
<text  x="1190.96" y="511.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.03%)</title><rect x="153.3" y="645" width="0.4" height="15.0" fill="rgb(231,171,9)" rx="2" ry="2" />
<text  x="156.28" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1166.0" y="581" width="0.4" height="15.0" fill="rgb(215,76,5)" rx="2" ry="2" />
<text  x="1168.98" y="591.5" ></text>
</g>
<g >
<title>pa_pstream_register_memfd_mempool&lt;0000000000048a20&gt; (1 samples, 0.03%)</title><rect x="33.2" y="565" width="0.4" height="15.0" fill="rgb(240,101,43)" rx="2" ry="2" />
<text  x="36.20" y="575.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (2 samples, 0.07%)</title><rect x="34.8" y="629" width="0.8" height="15.0" fill="rgb(210,122,23)" rx="2" ry="2" />
<text  x="37.83" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="417.0" y="661" width="0.4" height="15.0" fill="rgb(227,105,9)" rx="2" ry="2" />
<text  x="420.04" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.03%)</title><rect x="32.8" y="485" width="0.4" height="15.0" fill="rgb(220,170,1)" rx="2" ry="2" />
<text  x="35.79" y="495.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.03%)</title><rect x="707.3" y="629" width="0.4" height="15.0" fill="rgb(229,4,45)" rx="2" ry="2" />
<text  x="710.25" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="418.3" y="693" width="0.4" height="15.0" fill="rgb(212,9,25)" rx="2" ry="2" />
<text  x="421.26" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (14 samples, 0.48%)</title><rect x="1181.5" y="501" width="5.7" height="15.0" fill="rgb(236,45,53)" rx="2" ry="2" />
<text  x="1184.45" y="511.5" ></text>
</g>
<g >
<title>_XrmDefaultInitParseInfo&lt;0000000000054bb0&gt; (1 samples, 0.03%)</title><rect x="1175.8" y="709" width="0.4" height="15.0" fill="rgb(246,226,16)" rx="2" ry="2" />
<text  x="1178.75" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="1161.1" y="645" width="0.8" height="15.0" fill="rgb(224,31,38)" rx="2" ry="2" />
<text  x="1164.10" y="655.5" ></text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005f510&gt; (23 samples, 0.79%)</title><rect x="415.4" y="725" width="9.4" height="15.0" fill="rgb(227,20,30)" rx="2" ry="2" />
<text  x="418.41" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1174.5" y="725" width="0.4" height="15.0" fill="rgb(236,153,54)" rx="2" ry="2" />
<text  x="1177.53" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="1180.2" y="533" width="0.4" height="15.0" fill="rgb(252,99,43)" rx="2" ry="2" />
<text  x="1183.23" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1157.4" y="645" width="0.4" height="15.0" fill="rgb(234,37,35)" rx="2" ry="2" />
<text  x="1160.44" y="655.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.07%)</title><rect x="1188.4" y="357" width="0.8" height="15.0" fill="rgb(241,85,4)" rx="2" ry="2" />
<text  x="1191.37" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (23 samples, 0.79%)</title><rect x="316.9" y="693" width="9.4" height="15.0" fill="rgb(225,168,37)" rx="2" ry="2" />
<text  x="319.91" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.03%)</title><rect x="1157.4" y="613" width="0.4" height="15.0" fill="rgb(228,191,22)" rx="2" ry="2" />
<text  x="1160.44" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets(unsigned long) (2 samples, 0.07%)</title><rect x="1188.4" y="213" width="0.8" height="15.0" fill="rgb(251,178,26)" rx="2" ry="2" />
<text  x="1191.37" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1171.7" y="485" width="0.4" height="15.0" fill="rgb(240,146,44)" rx="2" ry="2" />
<text  x="1174.68" y="495.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (10 samples, 0.34%)</title><rect x="384.1" y="645" width="4.0" height="15.0" fill="rgb(225,97,22)" rx="2" ry="2" />
<text  x="387.07" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.07%)</title><rect x="1159.1" y="613" width="0.8" height="15.0" fill="rgb(226,8,4)" rx="2" ry="2" />
<text  x="1162.07" y="623.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="420.7" y="629" width="0.4" height="15.0" fill="rgb(226,44,2)" rx="2" ry="2" />
<text  x="423.70" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.03%)</title><rect x="1179.8" y="677" width="0.4" height="15.0" fill="rgb(250,218,33)" rx="2" ry="2" />
<text  x="1182.82" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="430.9" y="709" width="0.8" height="15.0" fill="rgb(225,165,30)" rx="2" ry="2" />
<text  x="433.88" y="719.5" ></text>
</g>
<g >
<title>~__shared_count (1 samples, 0.03%)</title><rect x="263.2" y="693" width="0.4" height="15.0" fill="rgb(238,3,36)" rx="2" ry="2" />
<text  x="266.18" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (19 samples, 0.66%)</title><rect x="69.8" y="677" width="7.8" height="15.0" fill="rgb(245,175,30)" rx="2" ry="2" />
<text  x="72.83" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (3 samples, 0.10%)</title><rect x="420.3" y="709" width="1.2" height="15.0" fill="rgb(216,88,27)" rx="2" ry="2" />
<text  x="423.29" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="426.4" y="693" width="0.4" height="15.0" fill="rgb(237,160,40)" rx="2" ry="2" />
<text  x="429.40" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1189.2" y="533" width="0.8" height="15.0" fill="rgb(250,123,29)" rx="2" ry="2" />
<text  x="1192.19" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)[inline] (1 samples, 0.03%)</title><rect x="428.4" y="613" width="0.4" height="15.0" fill="rgb(217,148,9)" rx="2" ry="2" />
<text  x="431.43" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="1168.4" y="533" width="0.4" height="15.0" fill="rgb(210,136,12)" rx="2" ry="2" />
<text  x="1171.43" y="543.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="661" width="0.4" height="15.0" fill="rgb(235,131,1)" rx="2" ry="2" />
<text  x="35.79" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (1 samples, 0.03%)</title><rect x="1173.3" y="741" width="0.4" height="15.0" fill="rgb(228,109,22)" rx="2" ry="2" />
<text  x="1176.31" y="751.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (10 samples, 0.34%)</title><rect x="88.2" y="645" width="4.0" height="15.0" fill="rgb(241,58,42)" rx="2" ry="2" />
<text  x="91.15" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="422.3" y="629" width="0.4" height="15.0" fill="rgb(246,67,26)" rx="2" ry="2" />
<text  x="425.33" y="639.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1165.6" y="581" width="0.4" height="15.0" fill="rgb(220,45,18)" rx="2" ry="2" />
<text  x="1168.58" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (60 samples, 2.07%)</title><rect x="1131.8" y="661" width="24.4" height="15.0" fill="rgb(249,24,46)" rx="2" ry="2" />
<text  x="1134.79" y="671.5" >n..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1187.2" y="661" width="0.4" height="15.0" fill="rgb(209,130,3)" rx="2" ry="2" />
<text  x="1190.15" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (1 samples, 0.03%)</title><rect x="431.7" y="725" width="0.4" height="15.0" fill="rgb(224,211,39)" rx="2" ry="2" />
<text  x="434.69" y="735.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.03%)</title><rect x="391.0" y="629" width="0.4" height="15.0" fill="rgb(247,43,17)" rx="2" ry="2" />
<text  x="393.99" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;::_M_update_guaranteed_capacity() (6 samples, 0.21%)</title><rect x="221.3" y="693" width="2.4" height="15.0" fill="rgb(226,125,16)" rx="2" ry="2" />
<text  x="224.25" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1173.7" y="725" width="0.4" height="15.0" fill="rgb(223,202,12)" rx="2" ry="2" />
<text  x="1176.72" y="735.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (20 samples, 0.69%)</title><rect x="405.2" y="693" width="8.2" height="15.0" fill="rgb(220,53,14)" rx="2" ry="2" />
<text  x="408.23" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="597" width="0.4" height="15.0" fill="rgb(228,80,4)" rx="2" ry="2" />
<text  x="1190.96" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (1 samples, 0.03%)</title><rect x="430.1" y="629" width="0.4" height="15.0" fill="rgb(239,36,9)" rx="2" ry="2" />
<text  x="433.06" y="639.5" ></text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000014fdd0&gt; (2 samples, 0.07%)</title><rect x="30.8" y="517" width="0.8" height="15.0" fill="rgb(242,220,19)" rx="2" ry="2" />
<text  x="33.76" y="527.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dbc0&gt; (2 samples, 0.07%)</title><rect x="30.8" y="389" width="0.8" height="15.0" fill="rgb(250,127,19)" rx="2" ry="2" />
<text  x="33.76" y="399.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1171.7" y="453" width="0.4" height="15.0" fill="rgb(208,164,1)" rx="2" ry="2" />
<text  x="1174.68" y="463.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (4 samples, 0.14%)</title><rect x="1182.3" y="373" width="1.6" height="15.0" fill="rgb(236,138,32)" rx="2" ry="2" />
<text  x="1185.27" y="383.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ed0&gt; (25 samples, 0.86%)</title><rect x="10.0" y="837" width="10.2" height="15.0" fill="rgb(240,137,33)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1181.9" y="437" width="0.4" height="15.0" fill="rgb(249,162,19)" rx="2" ry="2" />
<text  x="1184.86" y="447.5" ></text>
</g>
<g >
<title>_XimLocalOpenIM&lt;000000000006b8e0&gt; (3 samples, 0.10%)</title><rect x="34.8" y="677" width="1.3" height="15.0" fill="rgb(238,98,10)" rx="2" ry="2" />
<text  x="37.83" y="687.5" ></text>
</g>
<g >
<title>~_Safe_unordered_container_base (12 samples, 0.41%)</title><rect x="1182.3" y="437" width="4.9" height="15.0" fill="rgb(245,162,32)" rx="2" ry="2" />
<text  x="1185.27" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (8 samples, 0.28%)</title><rect x="319.8" y="645" width="3.2" height="15.0" fill="rgb(226,85,38)" rx="2" ry="2" />
<text  x="322.76" y="655.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;00000000000685f0&gt; (9 samples, 0.31%)</title><rect x="1176.2" y="757" width="3.6" height="15.0" fill="rgb(233,214,31)" rx="2" ry="2" />
<text  x="1179.16" y="767.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="693" width="0.4" height="15.0" fill="rgb(251,147,24)" rx="2" ry="2" />
<text  x="35.79" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000d2120&gt; (1 samples, 0.03%)</title><rect x="1172.1" y="501" width="0.4" height="15.0" fill="rgb(210,196,23)" rx="2" ry="2" />
<text  x="1175.09" y="511.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;00000000000561b0&gt; (2 samples, 0.07%)</title><rect x="1188.4" y="565" width="0.8" height="15.0" fill="rgb(249,118,30)" rx="2" ry="2" />
<text  x="1191.37" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.03%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(205,69,54)" rx="2" ry="2" />
<text  x="1192.59" y="287.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000066430&gt; (43 samples, 1.48%)</title><rect x="415.0" y="741" width="17.5" height="15.0" fill="rgb(241,185,33)" rx="2" ry="2" />
<text  x="418.00" y="751.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="1175.8" y="741" width="0.4" height="15.0" fill="rgb(249,95,51)" rx="2" ry="2" />
<text  x="1178.75" y="751.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;0000000000080040&gt; (2 samples, 0.07%)</title><rect x="427.2" y="709" width="0.8" height="15.0" fill="rgb(209,223,16)" rx="2" ry="2" />
<text  x="430.21" y="719.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (1 samples, 0.03%)</title><rect x="31.2" y="341" width="0.4" height="15.0" fill="rgb(250,207,8)" rx="2" ry="2" />
<text  x="34.17" y="351.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="533" width="5.7" height="15.0" fill="rgb(218,130,27)" rx="2" ry="2" />
<text  x="1184.45" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1180.2" y="613" width="0.4" height="15.0" fill="rgb(206,86,37)" rx="2" ry="2" />
<text  x="1183.23" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FreeList::TryPop(void**)[inline] (1 samples, 0.03%)</title><rect x="32.4" y="565" width="0.4" height="15.0" fill="rgb(249,169,4)" rx="2" ry="2" />
<text  x="35.39" y="575.5" ></text>
</g>
<g >
<title>_Safe_sequence (3 samples, 0.10%)</title><rect x="285.2" y="677" width="1.2" height="15.0" fill="rgb(248,206,20)" rx="2" ry="2" />
<text  x="288.16" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1169.2" y="597" width="0.4" height="15.0" fill="rgb(242,186,13)" rx="2" ry="2" />
<text  x="1172.24" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.03%)</title><rect x="426.4" y="677" width="0.4" height="15.0" fill="rgb(209,223,35)" rx="2" ry="2" />
<text  x="429.40" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="581" width="0.4" height="15.0" fill="rgb(219,92,0)" rx="2" ry="2" />
<text  x="1173.06" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (411 samples, 14.18%)</title><rect x="710.5" y="629" width="167.3" height="15.0" fill="rgb(221,64,27)" rx="2" ry="2" />
<text  x="713.51" y="639.5" >nouveau_drm_screen_cr..</text>
</g>
<g >
<title>pa_memimport_attach_memfd&lt;0000000000044a60&gt; (1 samples, 0.03%)</title><rect x="33.2" y="533" width="0.4" height="15.0" fill="rgb(230,96,37)" rx="2" ry="2" />
<text  x="36.20" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (4 samples, 0.14%)</title><rect x="366.2" y="661" width="1.6" height="15.0" fill="rgb(219,22,7)" rx="2" ry="2" />
<text  x="369.16" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.03%)</title><rect x="32.8" y="469" width="0.4" height="15.0" fill="rgb(207,184,26)" rx="2" ry="2" />
<text  x="35.79" y="479.5" ></text>
</g>
<g >
<title>basic_string (1 samples, 0.03%)</title><rect x="1179.4" y="661" width="0.4" height="15.0" fill="rgb(217,47,15)" rx="2" ry="2" />
<text  x="1182.42" y="671.5" ></text>
</g>
<g >
<title>tc_calloc (1 samples, 0.03%)</title><rect x="32.8" y="581" width="0.4" height="15.0" fill="rgb(249,18,38)" rx="2" ry="2" />
<text  x="35.79" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1173.7" y="693" width="0.4" height="15.0" fill="rgb(213,3,19)" rx="2" ry="2" />
<text  x="1176.72" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1174.5" y="709" width="0.4" height="15.0" fill="rgb(254,33,10)" rx="2" ry="2" />
<text  x="1177.53" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (14 samples, 0.48%)</title><rect x="290.0" y="661" width="5.7" height="15.0" fill="rgb(210,112,25)" rx="2" ry="2" />
<text  x="293.04" y="671.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.03%)</title><rect x="433.3" y="581" width="0.4" height="15.0" fill="rgb(246,25,39)" rx="2" ry="2" />
<text  x="436.32" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000018b00&gt; (1 samples, 0.03%)</title><rect x="426.4" y="645" width="0.4" height="15.0" fill="rgb(241,98,41)" rx="2" ry="2" />
<text  x="429.40" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (4 samples, 0.14%)</title><rect x="323.8" y="645" width="1.7" height="15.0" fill="rgb(243,53,43)" rx="2" ry="2" />
<text  x="326.83" y="655.5" ></text>
</g>
<g >
<title>pa_flist_new&lt;00000000000302e0&gt; (1 samples, 0.03%)</title><rect x="33.2" y="469" width="0.4" height="15.0" fill="rgb(209,150,43)" rx="2" ry="2" />
<text  x="36.20" y="479.5" ></text>
</g>
<g >
<title>pa_mainloop_dispatch@@PULSE_0&lt;0000000000026c20&gt; (1 samples, 0.03%)</title><rect x="33.2" y="677" width="0.4" height="15.0" fill="rgb(234,23,51)" rx="2" ry="2" />
<text  x="36.20" y="687.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.07%)</title><rect x="1188.4" y="661" width="0.8" height="15.0" fill="rgb(245,8,53)" rx="2" ry="2" />
<text  x="1191.37" y="671.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (21 samples, 0.72%)</title><rect x="877.8" y="645" width="8.6" height="15.0" fill="rgb(214,166,44)" rx="2" ry="2" />
<text  x="880.80" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1174.1" y="725" width="0.4" height="15.0" fill="rgb(212,182,44)" rx="2" ry="2" />
<text  x="1177.13" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (6 samples, 0.21%)</title><rect x="108.1" y="645" width="2.4" height="15.0" fill="rgb(208,112,11)" rx="2" ry="2" />
<text  x="111.10" y="655.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="432.1" y="677" width="0.4" height="15.0" fill="rgb(241,177,1)" rx="2" ry="2" />
<text  x="435.10" y="687.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (3 samples, 0.10%)</title><rect x="79.6" y="661" width="1.2" height="15.0" fill="rgb(210,178,24)" rx="2" ry="2" />
<text  x="82.60" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (2 samples, 0.07%)</title><rect x="1171.7" y="517" width="0.8" height="15.0" fill="rgb(239,91,49)" rx="2" ry="2" />
<text  x="1174.68" y="527.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="36.5" y="677" width="0.4" height="15.0" fill="rgb(223,24,33)" rx="2" ry="2" />
<text  x="39.46" y="687.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(char*, char const*, unsigned long) (2 samples, 0.07%)</title><rect x="419.5" y="645" width="0.8" height="15.0" fill="rgb(211,69,17)" rx="2" ry="2" />
<text  x="422.48" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="645" width="5.7" height="15.0" fill="rgb(211,4,48)" rx="2" ry="2" />
<text  x="1184.45" y="655.5" ></text>
</g>
<g >
<title>char const* std::__addressof&lt;char const&gt;(char const&amp;) (1 samples, 0.03%)</title><rect x="98.3" y="629" width="0.4" height="15.0" fill="rgb(208,10,1)" rx="2" ry="2" />
<text  x="101.33" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.03%)</title><rect x="32.8" y="453" width="0.4" height="15.0" fill="rgb(217,172,40)" rx="2" ry="2" />
<text  x="35.79" y="463.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (183 samples, 6.31%)</title><rect x="37.7" y="709" width="74.5" height="15.0" fill="rgb(252,21,38)" rx="2" ry="2" />
<text  x="40.68" y="719.5" >Scanline..</text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1189.2" y="517" width="0.8" height="15.0" fill="rgb(244,159,24)" rx="2" ry="2" />
<text  x="1192.19" y="527.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt; (2,848 samples, 98.24%)</title><rect x="30.8" y="805" width="1159.2" height="15.0" fill="rgb(219,73,36)" rx="2" ry="2" />
<text  x="33.76" y="815.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023240&gt;</text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.03%)</title><rect x="424.4" y="613" width="0.4" height="15.0" fill="rgb(225,134,6)" rx="2" ry="2" />
<text  x="427.36" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1172.9" y="549" width="0.4" height="15.0" fill="rgb(213,191,49)" rx="2" ry="2" />
<text  x="1175.90" y="559.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;0000000000085390&gt; (6 samples, 0.21%)</title><rect x="1121.6" y="597" width="2.5" height="15.0" fill="rgb(235,130,14)" rx="2" ry="2" />
<text  x="1124.62" y="607.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.03%)</title><rect x="432.9" y="725" width="0.4" height="15.0" fill="rgb(229,149,33)" rx="2" ry="2" />
<text  x="435.91" y="735.5" ></text>
</g>
<g >
<title>OBJ_Lex_triFace::lex(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051610&gt; (1 samples, 0.03%)</title><rect x="1181.0" y="677" width="0.5" height="15.0" fill="rgb(253,98,1)" rx="2" ry="2" />
<text  x="1184.05" y="687.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;TexturePNG&amp;&gt; &gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;*, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp;, std::tuple&lt;TexturePNG&amp;&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="1182.7" y="293" width="0.4" height="15.0" fill="rgb(210,37,15)" rx="2" ry="2" />
<text  x="1185.67" y="303.5" ></text>
</g>
<g >
<title>do_calloc[inline] (1 samples, 0.03%)</title><rect x="153.3" y="629" width="0.4" height="15.0" fill="rgb(223,38,25)" rx="2" ry="2" />
<text  x="156.28" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Distance_traits&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__is_integer&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;::__type&gt;::__type __gnu_debug::__get_distance&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::random_access_iterator_tag) (2 samples, 0.07%)</title><rect x="1189.2" y="389" width="0.8" height="15.0" fill="rgb(224,219,15)" rx="2" ry="2" />
<text  x="1192.19" y="399.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (1 samples, 0.03%)</title><rect x="392.6" y="677" width="0.4" height="15.0" fill="rgb(249,55,42)" rx="2" ry="2" />
<text  x="395.61" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1181.0" y="565" width="0.5" height="15.0" fill="rgb(249,24,35)" rx="2" ry="2" />
<text  x="1184.05" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create(unsigned long&amp;, unsigned long) (1 samples, 0.03%)</title><rect x="1188.0" y="469" width="0.4" height="15.0" fill="rgb(205,23,35)" rx="2" ry="2" />
<text  x="1190.96" y="479.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.07%)</title><rect x="213.1" y="677" width="0.8" height="15.0" fill="rgb(220,97,50)" rx="2" ry="2" />
<text  x="216.11" y="687.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (148 samples, 5.11%)</title><rect x="153.7" y="693" width="60.2" height="15.0" fill="rgb(248,189,30)" rx="2" ry="2" />
<text  x="156.68" y="703.5" >Textur..</text>
</g>
<g >
<title>~__concurrence_lock_error (1 samples, 0.03%)</title><rect x="428.4" y="661" width="0.4" height="15.0" fill="rgb(249,215,38)" rx="2" ry="2" />
<text  x="431.43" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::shared_ptr&lt;Triangle_Modifier&gt;, std::allocator&lt;std::shared_ptr&lt;Triangle_Modifier&gt; &gt; &gt;::_M_erase_at_end(std::shared_ptr&lt;Triangle_Modifier&gt;*) (1 samples, 0.03%)</title><rect x="1188.4" y="165" width="0.4" height="15.0" fill="rgb(206,59,43)" rx="2" ry="2" />
<text  x="1191.37" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(214,195,38)" rx="2" ry="2" />
<text  x="1192.59" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate(std::__detail::_Hash_node_base**, unsigned long) (2 samples, 0.07%)</title><rect x="1188.4" y="261" width="0.8" height="15.0" fill="rgb(207,128,21)" rx="2" ry="2" />
<text  x="1191.37" y="271.5" ></text>
</g>
<g >
<title>__gnu_debug::operator==(__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1180.6" y="693" width="0.4" height="15.0" fill="rgb(249,27,45)" rx="2" ry="2" />
<text  x="1183.64" y="703.5" ></text>
</g>
<g >
<title>MesaGLInteropGLXExportObject&lt;00000000000361f0&gt; (4 samples, 0.14%)</title><rect x="30.8" y="629" width="1.6" height="15.0" fill="rgb(223,217,35)" rx="2" ry="2" />
<text  x="33.76" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (4 samples, 0.14%)</title><rect x="421.9" y="693" width="1.6" height="15.0" fill="rgb(222,5,3)" rx="2" ry="2" />
<text  x="424.92" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (6 samples, 0.21%)</title><rect x="105.7" y="645" width="2.4" height="15.0" fill="rgb(234,137,24)" rx="2" ry="2" />
<text  x="108.65" y="655.5" ></text>
</g>
<g >
<title>~__shared_ptr (1 samples, 0.03%)</title><rect x="1179.4" y="629" width="0.4" height="15.0" fill="rgb(205,27,23)" rx="2" ry="2" />
<text  x="1182.42" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1186.7" y="405" width="0.5" height="15.0" fill="rgb(233,101,8)" rx="2" ry="2" />
<text  x="1189.74" y="415.5" ></text>
</g>
<g >
<title>0x00007ff44ea76172 (1 samples, 0.03%)</title><rect x="34.4" y="581" width="0.4" height="15.0" fill="rgb(211,82,11)" rx="2" ry="2" />
<text  x="37.42" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="431.7" y="709" width="0.4" height="15.0" fill="rgb(230,203,33)" rx="2" ry="2" />
<text  x="434.69" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="428.0" y="693" width="0.4" height="15.0" fill="rgb(235,217,52)" rx="2" ry="2" />
<text  x="431.03" y="703.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (17 samples, 0.59%)</title><rect x="406.5" y="677" width="6.9" height="15.0" fill="rgb(219,226,7)" rx="2" ry="2" />
<text  x="409.45" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="426.0" y="709" width="0.4" height="15.0" fill="rgb(212,63,54)" rx="2" ry="2" />
<text  x="428.99" y="719.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;000000000006a5e0&gt; (2 samples, 0.07%)</title><rect x="416.6" y="693" width="0.8" height="15.0" fill="rgb(254,93,39)" rx="2" ry="2" />
<text  x="419.63" y="703.5" ></text>
</g>
<g >
<title>dlopen@@GLIBC_2.34 (2 samples, 0.07%)</title><rect x="30.8" y="549" width="0.8" height="15.0" fill="rgb(238,94,36)" rx="2" ry="2" />
<text  x="33.76" y="559.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (19 samples, 0.66%)</title><rect x="318.5" y="661" width="7.8" height="15.0" fill="rgb(245,126,25)" rx="2" ry="2" />
<text  x="321.53" y="671.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.03%)</title><rect x="388.5" y="661" width="0.5" height="15.0" fill="rgb(231,199,6)" rx="2" ry="2" />
<text  x="391.54" y="671.5" ></text>
</g>
<g >
<title>_Safe_vector (1 samples, 0.03%)</title><rect x="426.4" y="725" width="0.4" height="15.0" fill="rgb(243,112,18)" rx="2" ry="2" />
<text  x="429.40" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="629" width="5.7" height="15.0" fill="rgb(207,197,36)" rx="2" ry="2" />
<text  x="1184.45" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="1174.9" y="725" width="0.9" height="15.0" fill="rgb(229,221,2)" rx="2" ry="2" />
<text  x="1177.94" y="735.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (7 samples, 0.24%)</title><rect x="707.7" y="629" width="2.8" height="15.0" fill="rgb(212,6,46)" rx="2" ry="2" />
<text  x="710.66" y="639.5" ></text>
</g>
<g >
<title>dlmopen@@GLIBC_2.34 (2 samples, 0.07%)</title><rect x="30.8" y="485" width="0.8" height="15.0" fill="rgb(215,76,45)" rx="2" ry="2" />
<text  x="33.76" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp; std::forward&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::remove_reference&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;::type&amp;) (1 samples, 0.03%)</title><rect x="1177.4" y="677" width="0.4" height="15.0" fill="rgb(224,161,11)" rx="2" ry="2" />
<text  x="1180.38" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1161.1" y="565" width="0.4" height="15.0" fill="rgb(220,118,12)" rx="2" ry="2" />
<text  x="1164.10" y="575.5" ></text>
</g>
<g >
<title>tc_malloc (1 samples, 0.03%)</title><rect x="32.4" y="613" width="0.4" height="15.0" fill="rgb(238,114,12)" rx="2" ry="2" />
<text  x="35.39" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (37 samples, 1.28%)</title><rect x="224.9" y="677" width="15.1" height="15.0" fill="rgb(215,218,3)" rx="2" ry="2" />
<text  x="227.92" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.03%)</title><rect x="1174.1" y="549" width="0.4" height="15.0" fill="rgb(205,115,43)" rx="2" ry="2" />
<text  x="1177.13" y="559.5" ></text>
</g>
<g >
<title>pa_mainloop_iterate@@PULSE_0&lt;0000000000027400&gt; (1 samples, 0.03%)</title><rect x="33.2" y="693" width="0.4" height="15.0" fill="rgb(205,144,51)" rx="2" ry="2" />
<text  x="36.20" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (16 samples, 0.55%)</title><rect x="393.8" y="693" width="6.5" height="15.0" fill="rgb(228,54,4)" rx="2" ry="2" />
<text  x="396.84" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.03%)</title><rect x="1181.9" y="405" width="0.4" height="15.0" fill="rgb(249,84,20)" rx="2" ry="2" />
<text  x="1184.86" y="415.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_istream()[inline] (1 samples, 0.03%)</title><rect x="1187.6" y="661" width="0.4" height="15.0" fill="rgb(234,199,21)" rx="2" ry="2" />
<text  x="1190.56" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1179.8" y="709" width="0.4" height="15.0" fill="rgb(252,128,2)" rx="2" ry="2" />
<text  x="1182.82" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Allocate(unsigned long, unsigned int, void* (*)(unsigned long))[inline] (1 samples, 0.03%)</title><rect x="153.3" y="581" width="0.4" height="15.0" fill="rgb(233,125,7)" rx="2" ry="2" />
<text  x="156.28" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (2 samples, 0.07%)</title><rect x="317.7" y="661" width="0.8" height="15.0" fill="rgb(253,207,37)" rx="2" ry="2" />
<text  x="320.72" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.31%)</title><rect x="1163.1" y="661" width="3.7" height="15.0" fill="rgb(248,120,8)" rx="2" ry="2" />
<text  x="1166.14" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="1161.1" y="629" width="0.8" height="15.0" fill="rgb(248,214,4)" rx="2" ry="2" />
<text  x="1164.10" y="639.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="1170.1" y="597" width="0.4" height="15.0" fill="rgb(222,180,21)" rx="2" ry="2" />
<text  x="1173.06" y="607.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (1 samples, 0.03%)</title><rect x="433.3" y="645" width="0.4" height="15.0" fill="rgb(226,32,24)" rx="2" ry="2" />
<text  x="436.32" y="655.5" ></text>
</g>
<g >
<title>__shared_ptr (3 samples, 0.10%)</title><rect x="315.7" y="693" width="1.2" height="15.0" fill="rgb(226,84,13)" rx="2" ry="2" />
<text  x="318.68" y="703.5" ></text>
</g>
<g >
<title>~vector (1 samples, 0.03%)</title><rect x="1188.0" y="565" width="0.4" height="15.0" fill="rgb(247,188,42)" rx="2" ry="2" />
<text  x="1190.96" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="427.2" y="677" width="0.4" height="15.0" fill="rgb(238,128,41)" rx="2" ry="2" />
<text  x="430.21" y="687.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="36.5" y="709" width="0.4" height="15.0" fill="rgb(216,99,6)" rx="2" ry="2" />
<text  x="39.46" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="33.2" y="709" width="0.4" height="15.0" fill="rgb(220,86,32)" rx="2" ry="2" />
<text  x="36.20" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (2 samples, 0.07%)</title><rect x="1183.1" y="341" width="0.8" height="15.0" fill="rgb(253,25,5)" rx="2" ry="2" />
<text  x="1186.08" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="426.0" y="693" width="0.4" height="15.0" fill="rgb(246,14,44)" rx="2" ry="2" />
<text  x="428.99" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1189.2" y="613" width="0.8" height="15.0" fill="rgb(247,186,20)" rx="2" ry="2" />
<text  x="1192.19" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (12 samples, 0.41%)</title><rect x="93.8" y="661" width="4.9" height="15.0" fill="rgb(247,62,16)" rx="2" ry="2" />
<text  x="96.85" y="671.5" ></text>
</g>
<g >
<title>std::__detail::operator!=(std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;, std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1161.1" y="581" width="0.4" height="15.0" fill="rgb(248,91,20)" rx="2" ry="2" />
<text  x="1164.10" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (35 samples, 1.21%)</title><rect x="693.0" y="629" width="14.3" height="15.0" fill="rgb(216,147,14)" rx="2" ry="2" />
<text  x="696.01" y="639.5" ></text>
</g>
<g >
<title>_Safe_sequence (6 samples, 0.21%)</title><rect x="178.5" y="677" width="2.5" height="15.0" fill="rgb(218,31,2)" rx="2" ry="2" />
<text  x="181.51" y="687.5" ></text>
</g>
<g >
<title>_XOpenLC&lt;000000000005f270&gt; (1 samples, 0.03%)</title><rect x="35.6" y="629" width="0.5" height="15.0" fill="rgb(238,207,44)" rx="2" ry="2" />
<text  x="38.64" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.17%)</title><rect x="310.8" y="661" width="2.0" height="15.0" fill="rgb(211,145,28)" rx="2" ry="2" />
<text  x="313.80" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;) (558 samples, 19.25%)</title><rect x="36.9" y="725" width="227.1" height="15.0" fill="rgb(225,115,17)" rx="2" ry="2" />
<text  x="39.86" y="735.5" >TexturemapRasterizer::drawFlat..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.03%)</title><rect x="1181.0" y="629" width="0.5" height="15.0" fill="rgb(253,56,11)" rx="2" ry="2" />
<text  x="1184.05" y="639.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="427.2" y="661" width="0.4" height="15.0" fill="rgb(218,199,30)" rx="2" ry="2" />
<text  x="430.21" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1170.5" y="613" width="0.4" height="15.0" fill="rgb(206,164,7)" rx="2" ry="2" />
<text  x="1173.46" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (17 samples, 0.59%)</title><rect x="188.3" y="661" width="6.9" height="15.0" fill="rgb(220,114,2)" rx="2" ry="2" />
<text  x="191.28" y="671.5" ></text>
</g>
<g >
<title>Renderer::setWindowTitle(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;00000000000657a0&gt; (1 samples, 0.03%)</title><rect x="1175.8" y="757" width="0.4" height="15.0" fill="rgb(208,65,23)" rx="2" ry="2" />
<text  x="1178.75" y="767.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="517" width="0.4" height="15.0" fill="rgb(215,115,29)" rx="2" ry="2" />
<text  x="1190.96" y="527.5" ></text>
</g>
<g >
<title>operator() (1 samples, 0.03%)</title><rect x="420.7" y="645" width="0.4" height="15.0" fill="rgb(214,87,30)" rx="2" ry="2" />
<text  x="423.70" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.07%)</title><rect x="1189.2" y="453" width="0.8" height="15.0" fill="rgb(239,63,23)" rx="2" ry="2" />
<text  x="1192.19" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.03%)</title><rect x="1167.2" y="581" width="0.4" height="15.0" fill="rgb(237,80,32)" rx="2" ry="2" />
<text  x="1170.21" y="591.5" ></text>
</g>
<g >
<title>nouveau_drm_screen_create (663 samples, 22.87%)</title><rect x="886.4" y="677" width="269.8" height="15.0" fill="rgb(218,65,46)" rx="2" ry="2" />
<text  x="889.35" y="687.5" >nouveau_drm_screen_create</text>
</g>
<g >
<title>0x00007ff44ea6e5e6 (1 samples, 0.03%)</title><rect x="34.4" y="645" width="0.4" height="15.0" fill="rgb(229,208,3)" rx="2" ry="2" />
<text  x="37.42" y="655.5" ></text>
</g>
<g >
<title>SDL_Color&amp; std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::emplace_back&lt;SDL_Color&gt;(SDL_Color&amp;&amp;) (1 samples, 0.03%)</title><rect x="1180.6" y="645" width="0.4" height="15.0" fill="rgb(228,226,26)" rx="2" ry="2" />
<text  x="1183.64" y="655.5" ></text>
</g>
<g >
<title>~vector (13 samples, 0.45%)</title><rect x="93.4" y="677" width="5.3" height="15.0" fill="rgb(211,127,9)" rx="2" ry="2" />
<text  x="96.44" y="687.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.07%)</title><rect x="1188.4" y="325" width="0.8" height="15.0" fill="rgb(218,123,29)" rx="2" ry="2" />
<text  x="1191.37" y="335.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.03%)</title><rect x="393.0" y="693" width="0.4" height="15.0" fill="rgb(244,100,20)" rx="2" ry="2" />
<text  x="396.02" y="703.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="1174.9" y="613" width="0.9" height="15.0" fill="rgb(246,214,52)" rx="2" ry="2" />
<text  x="1177.94" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.10%)</title><rect x="1166.8" y="661" width="1.2" height="15.0" fill="rgb(222,1,36)" rx="2" ry="2" />
<text  x="1169.80" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.03%)</title><rect x="71.5" y="661" width="0.4" height="15.0" fill="rgb(207,7,12)" rx="2" ry="2" />
<text  x="74.46" y="671.5" ></text>
</g>
<g >
<title>0x00007ff44ea79cc0 (1 samples, 0.03%)</title><rect x="34.4" y="613" width="0.4" height="15.0" fill="rgb(217,90,26)" rx="2" ry="2" />
<text  x="37.42" y="623.5" ></text>
</g>
<g >
<title>__shared_ptr (1 samples, 0.03%)</title><rect x="103.2" y="693" width="0.4" height="15.0" fill="rgb(230,56,17)" rx="2" ry="2" />
<text  x="106.21" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt; (1 samples, 0.03%)</title><rect x="153.3" y="533" width="0.4" height="15.0" fill="rgb(222,77,34)" rx="2" ry="2" />
<text  x="156.28" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="1177.0" y="741" width="0.8" height="15.0" fill="rgb(205,191,34)" rx="2" ry="2" />
<text  x="1179.97" y="751.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (2 samples, 0.07%)</title><rect x="30.8" y="581" width="0.8" height="15.0" fill="rgb(215,155,12)" rx="2" ry="2" />
<text  x="33.76" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.03%)</title><rect x="425.6" y="693" width="0.4" height="15.0" fill="rgb(232,57,44)" rx="2" ry="2" />
<text  x="428.58" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (44 samples, 1.52%)</title><rect x="195.2" y="677" width="17.9" height="15.0" fill="rgb(215,196,28)" rx="2" ry="2" />
<text  x="198.20" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000063020&gt; (34 samples, 1.17%)</title><rect x="400.8" y="709" width="13.8" height="15.0" fill="rgb(240,148,49)" rx="2" ry="2" />
<text  x="403.76" y="719.5" ></text>
</g>
<g >
<title>ScanlineRasterizer::drawFlatTopTri(Triangle&amp;, SDL_Color) (152 samples, 5.24%)</title><rect x="264.4" y="709" width="61.9" height="15.0" fill="rgb(209,111,36)" rx="2" ry="2" />
<text  x="267.40" y="719.5" >Scanli..</text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1177.4" y="693" width="0.4" height="15.0" fill="rgb(249,46,53)" rx="2" ry="2" />
<text  x="1180.38" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (14 samples, 0.48%)</title><rect x="1181.5" y="485" width="5.7" height="15.0" fill="rgb(210,194,50)" rx="2" ry="2" />
<text  x="1184.45" y="495.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="32.8" y="549" width="0.4" height="15.0" fill="rgb(220,191,31)" rx="2" ry="2" />
<text  x="35.79" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.10%)</title><rect x="1159.9" y="645" width="1.2" height="15.0" fill="rgb(240,30,2)" rx="2" ry="2" />
<text  x="1162.88" y="655.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(char const*) (1 samples, 0.03%)</title><rect x="1180.6" y="677" width="0.4" height="15.0" fill="rgb(225,132,7)" rx="2" ry="2" />
<text  x="1183.64" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="1156.6" y="677" width="0.8" height="15.0" fill="rgb(226,227,28)" rx="2" ry="2" />
<text  x="1159.62" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (29 samples, 1.00%)</title><rect x="376.3" y="677" width="11.8" height="15.0" fill="rgb(233,227,24)" rx="2" ry="2" />
<text  x="379.33" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.10%)</title><rect x="1171.7" y="613" width="1.2" height="15.0" fill="rgb(231,179,36)" rx="2" ry="2" />
<text  x="1174.68" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;0000000000025f60&gt; (1 samples, 0.03%)</title><rect x="153.3" y="549" width="0.4" height="15.0" fill="rgb(216,212,39)" rx="2" ry="2" />
<text  x="156.28" y="559.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.07%)</title><rect x="92.2" y="677" width="0.8" height="15.0" fill="rgb(241,0,53)" rx="2" ry="2" />
<text  x="95.22" y="687.5" ></text>
</g>
<g >
<title>_Parameter (2 samples, 0.07%)</title><rect x="198.1" y="661" width="0.8" height="15.0" fill="rgb(253,19,36)" rx="2" ry="2" />
<text  x="201.05" y="671.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (3 samples, 0.10%)</title><rect x="433.3" y="709" width="1.2" height="15.0" fill="rgb(245,177,23)" rx="2" ry="2" />
<text  x="436.32" y="719.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.21%)</title><rect x="30.8" y="725" width="2.4" height="15.0" fill="rgb(226,179,39)" rx="2" ry="2" />
<text  x="33.76" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (11 samples, 0.38%)</title><rect x="94.3" y="645" width="4.4" height="15.0" fill="rgb(206,143,9)" rx="2" ry="2" />
<text  x="97.26" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (6 samples, 0.21%)</title><rect x="410.9" y="661" width="2.5" height="15.0" fill="rgb(218,218,43)" rx="2" ry="2" />
<text  x="413.93" y="671.5" ></text>
</g>
<g >
<title>malloc_fast_path&lt;tcmalloc::cpp_throw_oom&gt;[inline] (1 samples, 0.03%)</title><rect x="1183.9" y="309" width="0.4" height="15.0" fill="rgb(205,164,2)" rx="2" ry="2" />
<text  x="1186.89" y="319.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt; (1 samples, 0.03%)</title><rect x="1188.4" y="149" width="0.4" height="15.0" fill="rgb(205,124,3)" rx="2" ry="2" />
<text  x="1191.37" y="159.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="613" width="0.4" height="15.0" fill="rgb(215,104,52)" rx="2" ry="2" />
<text  x="1190.96" y="623.5" ></text>
</g>
<g >
<title>main&lt;000000000000adf0&gt; (2,848 samples, 98.24%)</title><rect x="30.8" y="789" width="1159.2" height="15.0" fill="rgb(226,109,12)" rx="2" ry="2" />
<text  x="33.76" y="799.5" >main&lt;000000000000adf0&gt;</text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.8" y="677" width="0.4" height="15.0" fill="rgb(215,129,27)" rx="2" ry="2" />
<text  x="35.79" y="687.5" ></text>
</g>
<g >
<title>0x00007ff44ea7b2d6 (1 samples, 0.03%)</title><rect x="34.0" y="661" width="0.4" height="15.0" fill="rgb(206,113,14)" rx="2" ry="2" />
<text  x="37.02" y="671.5" ></text>
</g>
<g >
<title>TrianglePipeline::~TrianglePipeline()&lt;00000000000277b0&gt; (1 samples, 0.03%)</title><rect x="1180.2" y="677" width="0.4" height="15.0" fill="rgb(241,175,21)" rx="2" ry="2" />
<text  x="1183.23" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1189.2" y="341" width="0.8" height="15.0" fill="rgb(206,146,54)" rx="2" ry="2" />
<text  x="1192.19" y="351.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.21%)</title><rect x="1168.0" y="629" width="2.5" height="15.0" fill="rgb(217,18,2)" rx="2" ry="2" />
<text  x="1171.02" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.03%)</title><rect x="1164.8" y="581" width="0.4" height="15.0" fill="rgb(245,133,0)" rx="2" ry="2" />
<text  x="1167.76" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (13 samples, 0.45%)</title><rect x="395.1" y="677" width="5.2" height="15.0" fill="rgb(228,228,28)" rx="2" ry="2" />
<text  x="398.06" y="687.5" ></text>
</g>
<g >
<title>_Alloc_hider (1 samples, 0.03%)</title><rect x="1166.8" y="597" width="0.4" height="15.0" fill="rgb(218,152,27)" rx="2" ry="2" />
<text  x="1169.80" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1174.5" y="741" width="0.4" height="15.0" fill="rgb(212,37,47)" rx="2" ry="2" />
<text  x="1177.53" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.03%)</title><rect x="424.4" y="629" width="0.4" height="15.0" fill="rgb(252,133,43)" rx="2" ry="2" />
<text  x="427.36" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1172.9" y="533" width="0.4" height="15.0" fill="rgb(251,26,32)" rx="2" ry="2" />
<text  x="1175.90" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.10%)</title><rect x="420.3" y="677" width="1.2" height="15.0" fill="rgb(223,66,45)" rx="2" ry="2" />
<text  x="423.29" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (1 samples, 0.03%)</title><rect x="430.1" y="645" width="0.4" height="15.0" fill="rgb(216,136,44)" rx="2" ry="2" />
<text  x="433.06" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_to_end() const (1 samples, 0.03%)</title><rect x="1170.9" y="581" width="0.4" height="15.0" fill="rgb(218,6,26)" rx="2" ry="2" />
<text  x="1173.87" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="432.1" y="709" width="0.4" height="15.0" fill="rgb(207,81,22)" rx="2" ry="2" />
<text  x="435.10" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000d24e0&gt; (1 samples, 0.03%)</title><rect x="419.9" y="629" width="0.4" height="15.0" fill="rgb(218,165,28)" rx="2" ry="2" />
<text  x="422.89" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="427.2" y="629" width="0.4" height="15.0" fill="rgb(224,123,25)" rx="2" ry="2" />
<text  x="430.21" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (34 samples, 1.17%)</title><rect x="295.7" y="677" width="13.9" height="15.0" fill="rgb(240,149,33)" rx="2" ry="2" />
<text  x="298.74" y="687.5" ></text>
</g>
<g >
<title>0x00007ff44ea79fda (1 samples, 0.03%)</title><rect x="34.4" y="629" width="0.4" height="15.0" fill="rgb(229,154,53)" rx="2" ry="2" />
<text  x="37.42" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (5 samples, 0.17%)</title><rect x="1177.8" y="741" width="2.0" height="15.0" fill="rgb(247,79,44)" rx="2" ry="2" />
<text  x="1180.79" y="751.5" ></text>
</g>
<g >
<title>_Vector_impl (5 samples, 0.17%)</title><rect x="181.0" y="677" width="2.0" height="15.0" fill="rgb(212,219,11)" rx="2" ry="2" />
<text  x="183.96" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.07%)</title><rect x="1183.1" y="357" width="0.8" height="15.0" fill="rgb(236,81,8)" rx="2" ry="2" />
<text  x="1186.08" y="367.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (3 samples, 0.10%)</title><rect x="433.3" y="677" width="1.2" height="15.0" fill="rgb(232,60,35)" rx="2" ry="2" />
<text  x="436.32" y="687.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (3 samples, 0.10%)</title><rect x="433.3" y="693" width="1.2" height="15.0" fill="rgb(222,25,11)" rx="2" ry="2" />
<text  x="436.32" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (6 samples, 0.21%)</title><rect x="1184.3" y="277" width="2.4" height="15.0" fill="rgb(230,189,54)" rx="2" ry="2" />
<text  x="1187.30" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()[inline] (1 samples, 0.03%)</title><rect x="428.4" y="597" width="0.4" height="15.0" fill="rgb(250,70,49)" rx="2" ry="2" />
<text  x="431.43" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (2 samples, 0.07%)</title><rect x="374.7" y="645" width="0.8" height="15.0" fill="rgb(214,153,21)" rx="2" ry="2" />
<text  x="377.71" y="655.5" ></text>
</g>
<g >
<title>0x00007ff44ea7a596 (1 samples, 0.03%)</title><rect x="33.6" y="661" width="0.4" height="15.0" fill="rgb(224,77,24)" rx="2" ry="2" />
<text  x="36.61" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;) (1 samples, 0.03%)</title><rect x="36.1" y="693" width="0.4" height="15.0" fill="rgb(222,103,39)" rx="2" ry="2" />
<text  x="39.05" y="703.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_swrast&lt;00000000000b33b0&gt; (1 samples, 0.03%)</title><rect x="32.0" y="549" width="0.4" height="15.0" fill="rgb(233,79,2)" rx="2" ry="2" />
<text  x="34.98" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="1159.1" y="645" width="0.8" height="15.0" fill="rgb(239,146,37)" rx="2" ry="2" />
<text  x="1162.07" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.03%)</title><rect x="1176.6" y="725" width="0.4" height="15.0" fill="rgb(236,139,37)" rx="2" ry="2" />
<text  x="1179.57" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="423.1" y="677" width="0.4" height="15.0" fill="rgb(237,136,16)" rx="2" ry="2" />
<text  x="426.14" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.07%)</title><rect x="1159.1" y="629" width="0.8" height="15.0" fill="rgb(235,10,21)" rx="2" ry="2" />
<text  x="1162.07" y="639.5" ></text>
</g>
<g >
<title>base::internal::HookList&lt;void (*)(void const*, unsigned long)&gt;::empty() const[inline] (1 samples, 0.03%)</title><rect x="1183.9" y="293" width="0.4" height="15.0" fill="rgb(240,40,12)" rx="2" ry="2" />
<text  x="1186.89" y="303.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (2 samples, 0.07%)</title><rect x="1174.9" y="629" width="0.9" height="15.0" fill="rgb(245,42,14)" rx="2" ry="2" />
<text  x="1177.94" y="639.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;) (1 samples, 0.03%)</title><rect x="432.1" y="693" width="0.4" height="15.0" fill="rgb(230,120,52)" rx="2" ry="2" />
<text  x="435.10" y="703.5" ></text>
</g>
<g >
<title>UseAction*&amp; std::__get_helper&lt;0ul, UseAction*&amp;&amp;&gt;(std::_Tuple_impl&lt;0ul, UseAction*&amp;&amp;&gt;&amp;) (2 samples, 0.07%)</title><rect x="1188.4" y="741" width="0.8" height="15.0" fill="rgb(251,7,4)" rx="2" ry="2" />
<text  x="1191.37" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, false, true&gt;, bool&gt; std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, TexturePNG, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt; &gt;::insert_or_assign&lt;TexturePNG&amp;&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, TexturePNG&amp;) (1 samples, 0.03%)</title><rect x="1182.7" y="341" width="0.4" height="15.0" fill="rgb(219,211,6)" rx="2" ry="2" />
<text  x="1185.67" y="351.5" ></text>
</g>
<g >
<title>pa_memtrap_add&lt;00000000000447d0&gt; (1 samples, 0.03%)</title><rect x="33.2" y="517" width="0.4" height="15.0" fill="rgb(235,150,50)" rx="2" ry="2" />
<text  x="36.20" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;0000000000025a80&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="85" width="0.4" height="15.0" fill="rgb(225,46,49)" rx="2" ry="2" />
<text  x="1191.78" y="95.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008e00&gt; (2 samples, 0.07%)</title><rect x="30.8" y="437" width="0.8" height="15.0" fill="rgb(216,219,5)" rx="2" ry="2" />
<text  x="33.76" y="447.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000264a0&gt; (1 samples, 0.03%)</title><rect x="1174.1" y="613" width="0.4" height="15.0" fill="rgb(239,205,18)" rx="2" ry="2" />
<text  x="1177.13" y="623.5" ></text>
</g>
<g >
<title>0x00007ff44ea7659b (1 samples, 0.03%)</title><rect x="34.4" y="597" width="0.4" height="15.0" fill="rgb(228,199,7)" rx="2" ry="2" />
<text  x="37.42" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_move_assign(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.03%)</title><rect x="1174.1" y="709" width="0.4" height="15.0" fill="rgb(252,198,43)" rx="2" ry="2" />
<text  x="1177.13" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (1 samples, 0.03%)</title><rect x="428.0" y="709" width="0.4" height="15.0" fill="rgb(236,38,25)" rx="2" ry="2" />
<text  x="431.03" y="719.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1172.9" y="597" width="0.4" height="15.0" fill="rgb(236,151,5)" rx="2" ry="2" />
<text  x="1175.90" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="424.0" y="661" width="0.8" height="15.0" fill="rgb(223,73,2)" rx="2" ry="2" />
<text  x="426.96" y="671.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.03%)</title><rect x="299.0" y="661" width="0.4" height="15.0" fill="rgb(227,117,53)" rx="2" ry="2" />
<text  x="302.00" y="671.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.07%)</title><rect x="34.0" y="693" width="0.8" height="15.0" fill="rgb(251,42,44)" rx="2" ry="2" />
<text  x="37.02" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000025f00&gt;[inline] (1 samples, 0.03%)</title><rect x="1188.0" y="373" width="0.4" height="15.0" fill="rgb(209,119,43)" rx="2" ry="2" />
<text  x="1190.96" y="383.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(char const*, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="399.9" y="645" width="0.4" height="15.0" fill="rgb(231,49,5)" rx="2" ry="2" />
<text  x="402.94" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (6 samples, 0.21%)</title><rect x="1184.3" y="261" width="2.4" height="15.0" fill="rgb(236,140,33)" rx="2" ry="2" />
<text  x="1187.30" y="271.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;0000000000023790&gt; (19 samples, 0.66%)</title><rect x="1180.6" y="773" width="7.8" height="15.0" fill="rgb(237,84,22)" rx="2" ry="2" />
<text  x="1183.64" y="783.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="707.3" y="613" width="0.4" height="15.0" fill="rgb(251,196,36)" rx="2" ry="2" />
<text  x="710.25" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (1 samples, 0.03%)</title><rect x="1188.8" y="165" width="0.4" height="15.0" fill="rgb(224,158,10)" rx="2" ry="2" />
<text  x="1191.78" y="175.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.03%)</title><rect x="1166.4" y="613" width="0.4" height="15.0" fill="rgb(213,121,48)" rx="2" ry="2" />
<text  x="1169.39" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::input_iterator_tag) (2 samples, 0.07%)</title><rect x="1188.4" y="629" width="0.8" height="15.0" fill="rgb(225,176,47)" rx="2" ry="2" />
<text  x="1191.37" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.03%)</title><rect x="1166.0" y="597" width="0.4" height="15.0" fill="rgb(224,143,52)" rx="2" ry="2" />
<text  x="1168.98" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000025640&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="53" width="0.4" height="15.0" fill="rgb(233,177,10)" rx="2" ry="2" />
<text  x="1191.78" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1187.2" y="629" width="0.4" height="15.0" fill="rgb(249,44,18)" rx="2" ry="2" />
<text  x="1190.15" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (1 samples, 0.03%)</title><rect x="53.6" y="677" width="0.4" height="15.0" fill="rgb(251,195,51)" rx="2" ry="2" />
<text  x="56.55" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.03%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(251,165,17)" rx="2" ry="2" />
<text  x="1192.59" y="255.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1163.1" y="645" width="0.4" height="15.0" fill="rgb(247,21,3)" rx="2" ry="2" />
<text  x="1166.14" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="76.8" y="645" width="0.8" height="15.0" fill="rgb(228,165,5)" rx="2" ry="2" />
<text  x="79.75" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1189.2" y="645" width="0.8" height="15.0" fill="rgb(235,122,24)" rx="2" ry="2" />
<text  x="1192.19" y="655.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063890&gt; (317 samples, 10.93%)</title><rect x="112.2" y="709" width="129.0" height="15.0" fill="rgb(228,180,34)" rx="2" ry="2" />
<text  x="115.17" y="719.5" >TexturemapRaster..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const* std::__addressof&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;OBJ_Lex_triFace*, std::__cxx1998::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt; &gt;, std::__debug::vector&lt;OBJ_Lex_triFace, std::allocator&lt;OBJ_Lex_triFace&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="93.4" y="661" width="0.4" height="15.0" fill="rgb(219,143,19)" rx="2" ry="2" />
<text  x="96.44" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.03%)</title><rect x="1172.9" y="581" width="0.4" height="15.0" fill="rgb(215,222,3)" rx="2" ry="2" />
<text  x="1175.90" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1188.4" y="549" width="0.8" height="15.0" fill="rgb(219,155,50)" rx="2" ry="2" />
<text  x="1191.37" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1188.0" y="581" width="0.4" height="15.0" fill="rgb(235,63,32)" rx="2" ry="2" />
<text  x="1190.96" y="591.5" ></text>
</g>
<g >
<title>_XimOpenIM&lt;0000000000063610&gt; (3 samples, 0.10%)</title><rect x="34.8" y="693" width="1.3" height="15.0" fill="rgb(209,75,30)" rx="2" ry="2" />
<text  x="37.83" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1188.4" y="581" width="0.8" height="15.0" fill="rgb(249,159,18)" rx="2" ry="2" />
<text  x="1191.37" y="591.5" ></text>
</g>
<g >
<title>pa_pdispatch_run&lt;0000000000042f30&gt; (1 samples, 0.03%)</title><rect x="33.2" y="613" width="0.4" height="15.0" fill="rgb(214,10,33)" rx="2" ry="2" />
<text  x="36.20" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (16 samples, 0.55%)</title><rect x="105.2" y="661" width="6.6" height="15.0" fill="rgb(232,149,19)" rx="2" ry="2" />
<text  x="108.25" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.03%)</title><rect x="1174.1" y="645" width="0.4" height="15.0" fill="rgb(248,6,31)" rx="2" ry="2" />
<text  x="1177.13" y="655.5" ></text>
</g>
<g >
<title>0x00007ff44ea6abfe (1 samples, 0.03%)</title><rect x="33.6" y="709" width="0.4" height="15.0" fill="rgb(244,109,43)" rx="2" ry="2" />
<text  x="36.61" y="719.5" ></text>
</g>
<g >
<title>_Vector_impl (3 samples, 0.10%)</title><rect x="286.4" y="677" width="1.2" height="15.0" fill="rgb(234,150,26)" rx="2" ry="2" />
<text  x="289.38" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.03%)</title><rect x="1174.1" y="693" width="0.4" height="15.0" fill="rgb(238,111,30)" rx="2" ry="2" />
<text  x="1177.13" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1188.4" y="693" width="0.8" height="15.0" fill="rgb(248,99,12)" rx="2" ry="2" />
<text  x="1191.37" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (23 samples, 0.79%)</title><rect x="316.9" y="677" width="9.4" height="15.0" fill="rgb(219,227,16)" rx="2" ry="2" />
<text  x="319.91" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="597" width="5.7" height="15.0" fill="rgb(235,11,23)" rx="2" ry="2" />
<text  x="1184.45" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1177.0" y="725" width="0.8" height="15.0" fill="rgb(238,135,13)" rx="2" ry="2" />
<text  x="1179.97" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (1 samples, 0.03%)</title><rect x="425.6" y="677" width="0.4" height="15.0" fill="rgb(250,156,41)" rx="2" ry="2" />
<text  x="428.58" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (38 samples, 1.31%)</title><rect x="224.5" y="693" width="15.5" height="15.0" fill="rgb(205,96,35)" rx="2" ry="2" />
<text  x="227.51" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__throw_concurrence_lock_error() (7 samples, 0.24%)</title><rect x="1183.9" y="357" width="2.8" height="15.0" fill="rgb(227,129,47)" rx="2" ry="2" />
<text  x="1186.89" y="367.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000065e00&gt; (929 samples, 32.05%)</title><rect x="36.9" y="741" width="378.1" height="15.0" fill="rgb(238,99,29)" rx="2" ry="2" />
<text  x="39.86" y="751.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;0000000000..</text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (20 samples, 0.69%)</title><rect x="287.6" y="677" width="8.1" height="15.0" fill="rgb(239,63,20)" rx="2" ry="2" />
<text  x="290.60" y="687.5" ></text>
</g>
<g >
<title>base::subtle::NoBarrier_Load(long const volatile*)[inline] (1 samples, 0.03%)</title><rect x="1183.9" y="277" width="0.4" height="15.0" fill="rgb(249,33,31)" rx="2" ry="2" />
<text  x="1186.89" y="287.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="422.7" y="629" width="0.4" height="15.0" fill="rgb(247,104,45)" rx="2" ry="2" />
<text  x="425.74" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000063890&gt; (183 samples, 6.31%)</title><rect x="326.3" y="709" width="74.5" height="15.0" fill="rgb(248,127,3)" rx="2" ry="2" />
<text  x="329.27" y="719.5" >Texturem..</text>
</g>
<g >
<title>_Node_const_iterator (1 samples, 0.03%)</title><rect x="1165.6" y="597" width="0.4" height="15.0" fill="rgb(219,59,27)" rx="2" ry="2" />
<text  x="1168.58" y="607.5" ></text>
</g>
<g >
<title>__shared_count (1 samples, 0.03%)</title><rect x="417.9" y="693" width="0.4" height="15.0" fill="rgb(243,198,46)" rx="2" ry="2" />
<text  x="420.85" y="703.5" ></text>
</g>
<g >
<title>Engine_3D::Engine_3D() (13 samples, 0.45%)</title><rect x="30.8" y="773" width="5.3" height="15.0" fill="rgb(240,220,23)" rx="2" ry="2" />
<text  x="33.76" y="783.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007ff80&gt; (1 samples, 0.03%)</title><rect x="417.4" y="693" width="0.5" height="15.0" fill="rgb(216,163,0)" rx="2" ry="2" />
<text  x="420.44" y="703.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init()&lt;00000000000b7ef0&gt; (1 samples, 0.03%)</title><rect x="1187.6" y="629" width="0.4" height="15.0" fill="rgb(239,136,8)" rx="2" ry="2" />
<text  x="1190.56" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (3 samples, 0.10%)</title><rect x="1168.0" y="613" width="1.2" height="15.0" fill="rgb(241,10,8)" rx="2" ry="2" />
<text  x="1171.02" y="623.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.03%)</title><rect x="1182.7" y="357" width="0.4" height="15.0" fill="rgb(223,0,11)" rx="2" ry="2" />
<text  x="1185.67" y="367.5" ></text>
</g>
<g >
<title>SDL_RenderDrawPoint&lt;000000000003feb0&gt; (1 samples, 0.03%)</title><rect x="262.4" y="693" width="0.4" height="15.0" fill="rgb(239,13,25)" rx="2" ry="2" />
<text  x="265.36" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1189.2" y="597" width="0.8" height="15.0" fill="rgb(235,201,7)" rx="2" ry="2" />
<text  x="1192.19" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="1167.2" y="549" width="0.4" height="15.0" fill="rgb(206,24,50)" rx="2" ry="2" />
<text  x="1170.21" y="559.5" ></text>
</g>
<g >
<title>do_malloc_or_cpp_alloc[inline] (1 samples, 0.03%)</title><rect x="153.3" y="613" width="0.4" height="15.0" fill="rgb(224,183,36)" rx="2" ry="2" />
<text  x="156.28" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="1167.2" y="613" width="0.8" height="15.0" fill="rgb(223,41,42)" rx="2" ry="2" />
<text  x="1170.21" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000d23d0&gt;[inline] (1 samples, 0.03%)</title><rect x="1188.4" y="101" width="0.4" height="15.0" fill="rgb(250,163,14)" rx="2" ry="2" />
<text  x="1191.37" y="111.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.03%)</title><rect x="1176.2" y="741" width="0.4" height="15.0" fill="rgb(222,156,46)" rx="2" ry="2" />
<text  x="1179.16" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold() (1 samples, 0.03%)</title><rect x="1173.7" y="741" width="0.4" height="15.0" fill="rgb(221,158,47)" rx="2" ry="2" />
<text  x="1176.72" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.10%)</title><rect x="1168.0" y="581" width="1.2" height="15.0" fill="rgb(229,99,22)" rx="2" ry="2" />
<text  x="1171.02" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.03%)</title><rect x="224.1" y="677" width="0.4" height="15.0" fill="rgb(235,184,40)" rx="2" ry="2" />
<text  x="227.10" y="687.5" ></text>
</g>
<g >
<title>Triangle::toString[abi:cxx11]() (1 samples, 0.03%)</title><rect x="391.4" y="693" width="0.4" height="15.0" fill="rgb(214,182,30)" rx="2" ry="2" />
<text  x="394.39" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000d2550&gt; (1 samples, 0.03%)</title><rect x="1168.4" y="549" width="0.4" height="15.0" fill="rgb(253,33,24)" rx="2" ry="2" />
<text  x="1171.43" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="375.5" y="645" width="0.8" height="15.0" fill="rgb(208,199,10)" rx="2" ry="2" />
<text  x="378.52" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Triangle_Modifier, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.03%)</title><rect x="238.8" y="645" width="0.4" height="15.0" fill="rgb(216,125,8)" rx="2" ry="2" />
<text  x="241.75" y="655.5" ></text>
</g>
<g >
<title>basic_string (2 samples, 0.07%)</title><rect x="1189.2" y="437" width="0.8" height="15.0" fill="rgb(237,219,22)" rx="2" ry="2" />
<text  x="1192.19" y="447.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;00000000000602a0&gt; (1 samples, 0.03%)</title><rect x="1176.6" y="741" width="0.4" height="15.0" fill="rgb(209,122,17)" rx="2" ry="2" />
<text  x="1179.57" y="751.5" ></text>
</g>
<g >
<title>pa_fdsem_get&lt;0000000000027290&gt; (1 samples, 0.03%)</title><rect x="33.2" y="437" width="0.4" height="15.0" fill="rgb(223,170,15)" rx="2" ry="2" />
<text  x="36.20" y="447.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="433.3" y="629" width="0.4" height="15.0" fill="rgb(236,161,10)" rx="2" ry="2" />
<text  x="436.32" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1171.3" y="581" width="0.4" height="15.0" fill="rgb(207,71,7)" rx="2" ry="2" />
<text  x="1174.28" y="591.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (742 samples, 25.60%)</title><rect x="584.3" y="661" width="302.1" height="15.0" fill="rgb(253,155,28)" rx="2" ry="2" />
<text  x="587.33" y="671.5" >__driDriverGetExtensions_d3d12&lt;000000000..</text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="36.5" y="725" width="0.4" height="15.0" fill="rgb(214,55,48)" rx="2" ry="2" />
<text  x="39.46" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (2 samples, 0.07%)</title><rect x="416.6" y="677" width="0.8" height="15.0" fill="rgb(251,220,34)" rx="2" ry="2" />
<text  x="419.63" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (3 samples, 0.10%)</title><rect x="390.2" y="645" width="1.2" height="15.0" fill="rgb(236,228,31)" rx="2" ry="2" />
<text  x="393.17" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="33.2" y="725" width="0.4" height="15.0" fill="rgb(218,153,40)" rx="2" ry="2" />
<text  x="36.20" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="677" width="5.7" height="15.0" fill="rgb(219,82,42)" rx="2" ry="2" />
<text  x="1184.45" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle_Modifier*&gt; &gt;, std::is_move_constructible&lt;Triangle_Modifier*&gt;, std::is_move_assignable&lt;Triangle_Modifier*&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle_Modifier*&gt;(Triangle_Modifier*&amp;, Triangle_Modifier*&amp;) (2 samples, 0.07%)</title><rect x="1188.4" y="405" width="0.8" height="15.0" fill="rgb(214,90,26)" rx="2" ry="2" />
<text  x="1191.37" y="415.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.03%)</title><rect x="34.4" y="677" width="0.4" height="15.0" fill="rgb(254,141,28)" rx="2" ry="2" />
<text  x="37.42" y="687.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (7 samples, 0.24%)</title><rect x="299.4" y="661" width="2.9" height="15.0" fill="rgb(228,16,48)" rx="2" ry="2" />
<text  x="302.40" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (2 samples, 0.07%)</title><rect x="1169.2" y="613" width="0.9" height="15.0" fill="rgb(251,176,48)" rx="2" ry="2" />
<text  x="1172.24" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::operator[](unsigned long) (14 samples, 0.48%)</title><rect x="71.9" y="661" width="5.7" height="15.0" fill="rgb(246,202,10)" rx="2" ry="2" />
<text  x="74.87" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000d2310&gt; (1 samples, 0.03%)</title><rect x="426.4" y="629" width="0.4" height="15.0" fill="rgb(210,114,27)" rx="2" ry="2" />
<text  x="429.40" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1164.4" y="597" width="0.4" height="15.0" fill="rgb(216,179,49)" rx="2" ry="2" />
<text  x="1167.36" y="607.5" ></text>
</g>
<g >
<title>pa_hashmap_put&lt;000000000002d560&gt; (1 samples, 0.03%)</title><rect x="33.2" y="501" width="0.4" height="15.0" fill="rgb(219,143,29)" rx="2" ry="2" />
<text  x="36.20" y="511.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="1165.6" y="613" width="0.8" height="15.0" fill="rgb(248,198,16)" rx="2" ry="2" />
<text  x="1168.58" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.4" y="677" width="0.4" height="15.0" fill="rgb(218,119,30)" rx="2" ry="2" />
<text  x="35.39" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, true&gt;*) (2 samples, 0.07%)</title><rect x="1188.4" y="229" width="0.8" height="15.0" fill="rgb(226,92,45)" rx="2" ry="2" />
<text  x="1191.37" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.03%)</title><rect x="1170.9" y="533" width="0.4" height="15.0" fill="rgb(228,54,48)" rx="2" ry="2" />
<text  x="1173.87" y="543.5" ></text>
</g>
<g >
<title>__glx_Main&lt;0000000000053fd0&gt; (4 samples, 0.14%)</title><rect x="30.8" y="597" width="1.6" height="15.0" fill="rgb(226,9,54)" rx="2" ry="2" />
<text  x="33.76" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt;::operator=(__gnu_debug::_Safe_container&lt;std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, __gnu_debug::_Safe_unordered_container, true&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1181.0" y="613" width="0.5" height="15.0" fill="rgb(228,96,30)" rx="2" ry="2" />
<text  x="1184.05" y="623.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (9 samples, 0.31%)</title><rect x="1152.6" y="629" width="3.6" height="15.0" fill="rgb(229,130,3)" rx="2" ry="2" />
<text  x="1155.55" y="639.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (9 samples, 0.31%)</title><rect x="723.9" y="597" width="3.7" height="15.0" fill="rgb(215,163,42)" rx="2" ry="2" />
<text  x="726.94" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="219.2" y="629" width="0.8" height="15.0" fill="rgb(251,218,29)" rx="2" ry="2" />
<text  x="222.22" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.03%)</title><rect x="1165.2" y="533" width="0.4" height="15.0" fill="rgb(205,85,52)" rx="2" ry="2" />
<text  x="1168.17" y="543.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000047c50&gt; (84 samples, 2.90%)</title><rect x="275.4" y="693" width="34.2" height="15.0" fill="rgb(211,73,30)" rx="2" ry="2" />
<text  x="278.39" y="703.5" >Te..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy(unsigned long) (4 samples, 0.14%)</title><rect x="311.2" y="645" width="1.6" height="15.0" fill="rgb(240,86,48)" rx="2" ry="2" />
<text  x="314.21" y="655.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (2 samples, 0.07%)</title><rect x="433.7" y="661" width="0.8" height="15.0" fill="rgb(212,81,41)" rx="2" ry="2" />
<text  x="436.73" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (7 samples, 0.24%)</title><rect x="1183.9" y="373" width="2.8" height="15.0" fill="rgb(233,188,17)" rx="2" ry="2" />
<text  x="1186.89" y="383.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (6 samples, 0.21%)</title><rect x="389.0" y="693" width="2.4" height="15.0" fill="rgb(254,119,8)" rx="2" ry="2" />
<text  x="391.95" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="428.4" y="693" width="0.4" height="15.0" fill="rgb(223,107,3)" rx="2" ry="2" />
<text  x="431.43" y="703.5" ></text>
</g>
<g >
<title>InOutRasterizer::isPixelContainedIn2dTriangle(int, int) (2 samples, 0.07%)</title><rect x="274.6" y="693" width="0.8" height="15.0" fill="rgb(235,225,31)" rx="2" ry="2" />
<text  x="277.57" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (1 samples, 0.03%)</title><rect x="423.5" y="693" width="0.5" height="15.0" fill="rgb(229,164,12)" rx="2" ry="2" />
<text  x="426.55" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, TexturePNG&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (1 samples, 0.03%)</title><rect x="1181.5" y="453" width="0.4" height="15.0" fill="rgb(220,75,25)" rx="2" ry="2" />
<text  x="1184.45" y="463.5" ></text>
</g>
<g >
<title>_Vector_impl (4 samples, 0.14%)</title><rect x="363.3" y="677" width="1.6" height="15.0" fill="rgb(215,200,40)" rx="2" ry="2" />
<text  x="366.31" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="314.9" y="677" width="0.8" height="15.0" fill="rgb(222,110,22)" rx="2" ry="2" />
<text  x="317.87" y="687.5" ></text>
</g>
<g >
<title>radeon_drm_winsys_create&lt;00000000006ff410&gt; (1 samples, 0.03%)</title><rect x="433.3" y="549" width="0.4" height="15.0" fill="rgb(207,47,37)" rx="2" ry="2" />
<text  x="436.32" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (2 samples, 0.07%)</title><rect x="323.0" y="645" width="0.8" height="15.0" fill="rgb(234,83,12)" rx="2" ry="2" />
<text  x="326.01" y="655.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;) (1 samples, 0.03%)</title><rect x="416.2" y="661" width="0.4" height="15.0" fill="rgb(220,212,10)" rx="2" ry="2" />
<text  x="419.22" y="671.5" ></text>
</g>
<g >
<title>_Parameter&lt;__gnu_cxx::__normal_iterator&lt;Triangle *, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; (1 samples, 0.03%)</title><rect x="1174.5" y="661" width="0.4" height="15.0" fill="rgb(219,226,45)" rx="2" ry="2" />
<text  x="1177.53" y="671.5" ></text>
</g>
<g >
<title>pa_pdispatch_unref&lt;0000000000041d10&gt; (1 samples, 0.03%)</title><rect x="33.2" y="597" width="0.4" height="15.0" fill="rgb(250,203,17)" rx="2" ry="2" />
<text  x="36.20" y="607.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (7 samples, 0.24%)</title><rect x="1170.5" y="645" width="2.8" height="15.0" fill="rgb(213,153,2)" rx="2" ry="2" />
<text  x="1173.46" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Error_formatter&amp; __gnu_debug::_Error_formatter::_M_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* const&amp;, char const*) (2 samples, 0.07%)</title><rect x="1188.4" y="309" width="0.8" height="15.0" fill="rgb(226,60,6)" rx="2" ry="2" />
<text  x="1191.37" y="319.5" ></text>
</g>
<g >
<title>SDL_Color* std::__niter_base&lt;SDL_Color*&gt;(SDL_Color*) (1 samples, 0.03%)</title><rect x="305.5" y="645" width="0.4" height="15.0" fill="rgb(240,21,12)" rx="2" ry="2" />
<text  x="308.51" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.03%)</title><rect x="1165.2" y="629" width="0.4" height="15.0" fill="rgb(219,14,40)" rx="2" ry="2" />
<text  x="1168.17" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="419.1" y="709" width="0.4" height="15.0" fill="rgb(226,126,1)" rx="2" ry="2" />
<text  x="422.07" y="719.5" ></text>
</g>
<g >
<title>0x00007ff44ea67129 (1 samples, 0.03%)</title><rect x="34.0" y="677" width="0.4" height="15.0" fill="rgb(229,7,53)" rx="2" ry="2" />
<text  x="37.02" y="687.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length(char const*) (1 samples, 0.03%)</title><rect x="239.2" y="645" width="0.4" height="15.0" fill="rgb(228,8,5)" rx="2" ry="2" />
<text  x="242.16" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (9 samples, 0.31%)</title><rect x="1163.1" y="677" width="3.7" height="15.0" fill="rgb(242,20,51)" rx="2" ry="2" />
<text  x="1166.14" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (3 samples, 0.10%)</title><rect x="421.9" y="677" width="1.2" height="15.0" fill="rgb(213,16,32)" rx="2" ry="2" />
<text  x="424.92" y="687.5" ></text>
</g>
<g >
<title>SDL_SetRenderDrawColor&lt;000000000003fe50&gt; (1 samples, 0.03%)</title><rect x="413.4" y="693" width="0.4" height="15.0" fill="rgb(241,199,15)" rx="2" ry="2" />
<text  x="416.37" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (14 samples, 0.48%)</title><rect x="1181.5" y="613" width="5.7" height="15.0" fill="rgb(221,213,5)" rx="2" ry="2" />
<text  x="1184.45" y="623.5" ></text>
</g>
<g >
<title>_Vector_impl_data (1 samples, 0.03%)</title><rect x="426.8" y="725" width="0.4" height="15.0" fill="rgb(240,49,27)" rx="2" ry="2" />
<text  x="429.81" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.03%)</title><rect x="427.2" y="693" width="0.4" height="15.0" fill="rgb(236,164,19)" rx="2" ry="2" />
<text  x="430.21" y="703.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;0000000000028e50&gt; (2 samples, 0.07%)</title><rect x="31.6" y="581" width="0.8" height="15.0" fill="rgb(249,35,10)" rx="2" ry="2" />
<text  x="34.57" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (2 samples, 0.07%)</title><rect x="1189.2" y="629" width="0.8" height="15.0" fill="rgb(241,158,47)" rx="2" ry="2" />
<text  x="1192.19" y="639.5" ></text>
</g>
<g >
<title>_Parameter&lt;SDL_Color&gt; (10 samples, 0.34%)</title><rect x="209.0" y="645" width="4.1" height="15.0" fill="rgb(216,98,22)" rx="2" ry="2" />
<text  x="212.04" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.03%)</title><rect x="1164.8" y="629" width="0.4" height="15.0" fill="rgb(225,109,10)" rx="2" ry="2" />
<text  x="1167.76" y="639.5" ></text>
</g>
<g >
<title>Triangle::getDistanceToCamera(Vec3d) (8 samples, 0.28%)</title><rect x="309.6" y="693" width="3.2" height="15.0" fill="rgb(253,110,19)" rx="2" ry="2" />
<text  x="312.58" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use() (2 samples, 0.07%)</title><rect x="419.5" y="709" width="0.8" height="15.0" fill="rgb(238,134,49)" rx="2" ry="2" />
<text  x="422.48" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.03%)</title><rect x="1175.3" y="565" width="0.5" height="15.0" fill="rgb(233,202,36)" rx="2" ry="2" />
<text  x="1178.35" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000025c50&gt; (1 samples, 0.03%)</title><rect x="32.8" y="437" width="0.4" height="15.0" fill="rgb(227,87,37)" rx="2" ry="2" />
<text  x="35.79" y="447.5" ></text>
</g>
<g >
<title>glAreTexturesResidentEXT&lt;0000000000045960&gt; (2 samples, 0.07%)</title><rect x="30.8" y="565" width="0.8" height="15.0" fill="rgb(213,1,53)" rx="2" ry="2" />
<text  x="33.76" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator bool() const (2 samples, 0.07%)</title><rect x="138.2" y="677" width="0.8" height="15.0" fill="rgb(237,16,3)" rx="2" ry="2" />
<text  x="141.22" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*) (2 samples, 0.07%)</title><rect x="1189.2" y="469" width="0.8" height="15.0" fill="rgb(249,134,4)" rx="2" ry="2" />
<text  x="1192.19" y="479.5" ></text>
</g>
<g >
<title>_Xlcmbstowcs&lt;0000000000055c70&gt; (1 samples, 0.03%)</title><rect x="35.6" y="645" width="0.5" height="15.0" fill="rgb(252,202,17)" rx="2" ry="2" />
<text  x="38.64" y="655.5" ></text>
</g>
<g >
<title>fgetc (2 samples, 0.07%)</title><rect x="34.8" y="613" width="0.8" height="15.0" fill="rgb(221,114,38)" rx="2" ry="2" />
<text  x="37.83" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare(char const*) const (1 samples, 0.03%)</title><rect x="1180.2" y="501" width="0.4" height="15.0" fill="rgb(217,100,38)" rx="2" ry="2" />
<text  x="1183.23" y="511.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (5 samples, 0.17%)</title><rect x="1177.8" y="677" width="2.0" height="15.0" fill="rgb(243,223,32)" rx="2" ry="2" />
<text  x="1180.79" y="687.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1189.6" y="197" width="0.4" height="15.0" fill="rgb(215,81,30)" rx="2" ry="2" />
<text  x="1192.59" y="207.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::operator[](unsigned long) (15 samples, 0.52%)</title><rect x="382.0" y="661" width="6.1" height="15.0" fill="rgb(246,213,7)" rx="2" ry="2" />
<text  x="385.03" y="671.5" ></text>
</g>
<g >
<title>__driDriverGetExtensions_d3d12&lt;00000000000b3460&gt; (1 samples, 0.03%)</title><rect x="32.4" y="629" width="0.4" height="15.0" fill="rgb(222,172,22)" rx="2" ry="2" />
<text  x="35.39" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.03%)</title><rect x="421.1" y="661" width="0.4" height="15.0" fill="rgb(222,136,54)" rx="2" ry="2" />
<text  x="424.11" y="671.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000152d10&gt; (3 samples, 0.10%)</title><rect x="726.4" y="581" width="1.2" height="15.0" fill="rgb(226,197,28)" rx="2" ry="2" />
<text  x="729.38" y="591.5" ></text>
</g>
</g>
</svg>
