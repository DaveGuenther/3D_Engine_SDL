<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="854.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="837" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="837" > </text>
<g id="frames">
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (9 samples, 0.33%)</title><rect x="760.7" y="581" width="3.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="763.71" y="591.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="942.2" y="645" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="945.22" y="655.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (12 samples, 0.44%)</title><rect x="973.0" y="725" width="5.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="975.97" y="735.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.11%)</title><rect x="1020.2" y="357" width="1.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1023.19" y="367.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.07%)</title><rect x="885.5" y="597" width="0.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="888.47" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="927.5" y="565" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="930.49" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000129c0&gt; (2 samples, 0.07%)</title><rect x="879.4" y="597" width="0.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="882.41" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_single(__gnu_debug::_Safe_iterator_base*)&lt;00000000000dd610&gt; (4 samples, 0.15%)</title><rect x="14.3" y="773" width="1.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="17.33" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="911.0" y="613" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="914.03" y="623.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt; &gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="113.1" y="661" width="0.4" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="116.10" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.07%)</title><rect x="1024.1" y="501" width="0.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1027.09" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 0.15%)</title><rect x="1018.0" y="517" width="1.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1021.02" y="527.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="664.1" y="645" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="667.11" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="617.3" y="613" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="620.33" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFT_Scanline_prep(Triangle&amp;)&lt;0000000000062460&gt; (1 samples, 0.04%)</title><rect x="126.5" y="693" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="129.53" y="703.5" ></text>
</g>
<g >
<title>Triangle::setUnitNormalFromPoints()&lt;000000000007c670&gt; (16 samples, 0.59%)</title><rect x="788.0" y="709" width="6.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="791.00" y="719.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="695.7" y="629" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="698.73" y="639.5" ></text>
</g>
<g >
<title>free (1 samples, 0.04%)</title><rect x="1024.1" y="117" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1027.09" y="127.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007e710&gt; (9 samples, 0.33%)</title><rect x="658.5" y="677" width="3.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="661.48" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_debug::_BeforeBeginHelper&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_S_Is&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::forward_iterator_tag&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="980.3" y="677" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="983.34" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.18%)</title><rect x="893.3" y="597" width="2.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="896.27" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (5 samples, 0.18%)</title><rect x="851.7" y="693" width="2.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="854.68" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="875.1" y="565" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="878.07" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (4 samples, 0.15%)</title><rect x="1018.0" y="533" width="1.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1021.02" y="543.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (7 samples, 0.26%)</title><rect x="955.6" y="725" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="958.65" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="616.5" y="645" width="1.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="619.46" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="875.9" y="581" width="0.9" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="878.94" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_can_compare(__gnu_debug::_Safe_iterator_base const&amp;) const&lt;00000000000dd910&gt; (1 samples, 0.04%)</title><rect x="682.7" y="693" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="685.74" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.11%)</title><rect x="927.5" y="597" width="1.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="930.49" y="607.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000690e0&gt; (1 samples, 0.04%)</title><rect x="863.8" y="645" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="866.81" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.04%)</title><rect x="921.0" y="565" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="923.99" y="575.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.11%)</title><rect x="574.9" y="677" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="577.88" y="687.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="929.2" y="533" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="932.22" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="1019.3" y="453" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1022.32" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (4 samples, 0.15%)</title><rect x="898.9" y="629" width="1.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="901.90" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000129c0&gt; (7 samples, 0.26%)</title><rect x="671.9" y="645" width="3.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="674.91" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005ec50&gt; (5 samples, 0.18%)</title><rect x="950.0" y="725" width="2.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="953.01" y="735.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007cb70&gt; (1 samples, 0.04%)</title><rect x="784.5" y="709" width="0.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="787.54" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned int, int)&lt;0000000000026390&gt; (1 samples, 0.04%)</title><rect x="1024.5" y="85" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1027.52" y="95.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (5 samples, 0.18%)</title><rect x="698.8" y="661" width="2.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="701.77" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="915.4" y="597" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="918.36" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="989.4" y="645" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="992.43" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="899.3" y="565" width="0.5" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="902.33" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (4 samples, 0.15%)</title><rect x="909.3" y="613" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="912.30" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="623.0" y="693" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="625.96" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_base() (1 samples, 0.04%)</title><rect x="881.1" y="565" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="884.14" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (16 samples, 0.59%)</title><rect x="671.5" y="677" width="6.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="674.48" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1024.1" y="597" width="0.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1027.09" y="607.5" ></text>
</g>
<g >
<title>0x00007fb487dbf314 (1 samples, 0.04%)</title><rect x="93.2" y="773" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="96.17" y="783.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="954.8" y="709" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="957.78" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (1 samples, 0.04%)</title><rect x="751.6" y="661" width="0.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="754.62" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (8 samples, 0.29%)</title><rect x="901.9" y="613" width="3.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="904.93" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (4 samples, 0.15%)</title><rect x="820.9" y="693" width="1.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="823.93" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (4 samples, 0.15%)</title><rect x="876.8" y="629" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="879.81" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="975.6" y="693" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="978.57" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt;(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*) (1 samples, 0.04%)</title><rect x="1023.2" y="629" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1026.22" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.04%)</title><rect x="695.3" y="629" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="698.30" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.04%)</title><rect x="1015.0" y="645" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1017.99" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="1010.2" y="645" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1013.23" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="995.5" y="693" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="998.50" y="703.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007ada0&gt; (2 samples, 0.07%)</title><rect x="790.6" y="661" width="0.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="793.60" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (6 samples, 0.22%)</title><rect x="970.4" y="581" width="2.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="973.37" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (4 samples, 0.15%)</title><rect x="832.6" y="677" width="1.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="835.62" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (1 samples, 0.04%)</title><rect x="814.9" y="661" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="817.86" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="800.1" y="693" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="803.13" y="703.5" ></text>
</g>
<g >
<title>0x00007fb487dc663d (1 samples, 0.04%)</title><rect x="94.0" y="789" width="0.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="97.04" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="863.4" y="549" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="866.38" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="580.1" y="693" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="583.07" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="784.1" y="645" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="787.10" y="655.5" ></text>
</g>
<g >
<title>TextureList::getTextureByFilename(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;000000000003ce30&gt; (8 samples, 0.29%)</title><rect x="1019.8" y="677" width="3.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1022.76" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (3 samples, 0.11%)</title><rect x="683.2" y="693" width="1.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="686.17" y="703.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (9 samples, 0.33%)</title><rect x="760.7" y="597" width="3.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="763.71" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.04%)</title><rect x="834.8" y="709" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="837.79" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (5 samples, 0.18%)</title><rect x="964.3" y="581" width="2.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="967.31" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="834.4" y="661" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="837.35" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="737.3" y="629" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="740.32" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="904.5" y="533" width="0.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="907.53" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.04%)</title><rect x="864.7" y="629" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="867.68" y="639.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="113.1" y="677" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="116.10" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (9 samples, 0.33%)</title><rect x="942.7" y="677" width="3.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="945.65" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005ec50&gt; (1 samples, 0.04%)</title><rect x="870.3" y="645" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="873.31" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (6 samples, 0.22%)</title><rect x="882.4" y="597" width="2.6" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="885.44" y="607.5" ></text>
</g>
<g >
<title>_XrmDefaultInitParseInfo&lt;000000000005c4c0&gt; (1 samples, 0.04%)</title><rect x="107.9" y="789" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="110.90" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="570.5" y="645" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="573.54" y="655.5" ></text>
</g>
<g >
<title>operator+(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007d290&gt; (1 samples, 0.04%)</title><rect x="690.1" y="693" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="693.10" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (1 samples, 0.04%)</title><rect x="740.8" y="645" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="743.79" y="655.5" ></text>
</g>
<g >
<title>SDL_Color* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.11%)</title><rect x="1020.2" y="373" width="1.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1023.19" y="383.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="822.7" y="693" width="0.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="825.66" y="703.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromMeshes(std::shared_ptr&lt;Mesh_Pipeline&gt;)&lt;0000000000067000&gt; (127 samples, 4.66%)</title><rect x="960.8" y="741" width="55.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="963.84" y="751.5" >Trian..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.04%)</title><rect x="980.3" y="693" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="983.34" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="580.1" y="677" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="583.07" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (5 samples, 0.18%)</title><rect x="962.1" y="581" width="2.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="965.14" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="872.0" y="597" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="875.04" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="864.2" y="629" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="867.24" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (24 samples, 0.88%)</title><rect x="886.3" y="629" width="10.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="889.34" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="116.1" y="725" width="0.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="119.13" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;)[inline] (2 samples, 0.07%)</title><rect x="1024.1" y="261" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1027.09" y="271.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~_Vector_base() (14 samples, 0.51%)</title><rect x="752.0" y="661" width="6.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="755.05" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="908.0" y="549" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="911.00" y="559.5" ></text>
</g>
<g >
<title>0x217379654b207941 (11 samples, 0.40%)</title><rect x="97.9" y="789" width="4.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="100.94" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="928.8" y="565" width="0.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="931.79" y="575.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (31 samples, 1.14%)</title><rect x="916.2" y="645" width="13.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="919.23" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006c540&gt; (1 samples, 0.04%)</title><rect x="864.7" y="645" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="867.68" y="655.5" ></text>
</g>
<g >
<title>0x000000010000170c (17 samples, 0.62%)</title><rect x="10.4" y="789" width="7.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="13.43" y="799.5" ></text>
</g>
<g >
<title>free (1 samples, 0.04%)</title><rect x="1006.3" y="645" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1009.33" y="655.5" ></text>
</g>
<g >
<title>OBJ::OBJ(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;TextureList&gt;) (10 samples, 0.37%)</title><rect x="1019.8" y="725" width="4.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1022.76" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012af0&gt; (1 samples, 0.04%)</title><rect x="866.8" y="565" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="869.84" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="881.6" y="597" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="884.57" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::operator&lt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000006c010&gt; (1 samples, 0.04%)</title><rect x="901.5" y="629" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="904.50" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.18%)</title><rect x="1007.2" y="581" width="2.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1010.20" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="866.0" y="613" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="868.98" y="623.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (1 samples, 0.04%)</title><rect x="896.7" y="629" width="0.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="899.73" y="639.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.07%)</title><rect x="104.9" y="789" width="0.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="107.87" y="799.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long)[inline] (1 samples, 0.04%)</title><rect x="720.0" y="629" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="722.99" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_can_advance(long, bool) const (1 samples, 0.04%)</title><rect x="924.5" y="597" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="927.46" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="954.8" y="565" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="957.78" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="277" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1027.09" y="287.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (1 samples, 0.04%)</title><rect x="720.0" y="645" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="722.99" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (2 samples, 0.07%)</title><rect x="1024.1" y="453" width="0.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1027.09" y="463.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (5 samples, 0.18%)</title><rect x="935.7" y="709" width="2.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="938.72" y="719.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000046a50&gt; (1 samples, 0.04%)</title><rect x="345.7" y="677" width="0.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="348.72" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_requires_reallocation(unsigned long) const (2 samples, 0.07%)</title><rect x="993.8" y="709" width="0.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="996.77" y="719.5" ></text>
</g>
<g >
<title>0x00007fb487dec161 (1 samples, 0.04%)</title><rect x="94.9" y="789" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="97.90" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (7 samples, 0.26%)</title><rect x="969.9" y="693" width="3.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="972.94" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Mesh_Pipeline&gt;::shared_ptr(std::shared_ptr&lt;Mesh_Pipeline&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1017.2" y="741" width="0.4" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1020.16" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate()&lt;0000000000027560&gt; (4 samples, 0.15%)</title><rect x="1021.5" y="261" width="1.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1024.49" y="271.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="908.4" y="549" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="911.43" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="533" width="3.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1022.76" y="543.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="925.8" y="565" width="0.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="928.76" y="575.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::~__new_allocator() (2 samples, 0.07%)</title><rect x="757.2" y="613" width="0.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="760.25" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;TexturePNG&gt;(TexturePNG*) (2 samples, 0.07%)</title><rect x="1024.1" y="325" width="0.9" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1027.09" y="335.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="181" width="0.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1027.09" y="191.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005ec50&gt; (12 samples, 0.44%)</title><rect x="684.9" y="693" width="5.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="687.90" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (64 samples, 2.35%)</title><rect x="709.2" y="661" width="27.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="712.16" y="671.5" >v..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="629.5" y="645" width="1.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="632.46" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (2 samples, 0.07%)</title><rect x="1024.1" y="437" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1027.09" y="447.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="917.5" y="533" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="920.53" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturePNG, std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(TexturePNG*&amp;, std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="613" width="3.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1022.76" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (4 samples, 0.15%)</title><rect x="932.7" y="517" width="1.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="935.69" y="527.5" ></text>
</g>
<g >
<title>write (1 samples, 0.04%)</title><rect x="102.7" y="773" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="105.70" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="911.9" y="613" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="914.89" y="623.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007cb90&gt; (1 samples, 0.04%)</title><rect x="580.9" y="709" width="0.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="583.94" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (11 samples, 0.40%)</title><rect x="846.9" y="693" width="4.8" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="849.92" y="703.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007ada0&gt; (16 samples, 0.59%)</title><rect x="651.5" y="629" width="7.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="654.55" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (20 samples, 0.73%)</title><rect x="916.2" y="629" width="8.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="919.23" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (2 samples, 0.07%)</title><rect x="941.8" y="677" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="944.78" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (15 samples, 0.55%)</title><rect x="741.2" y="645" width="6.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="744.22" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.11%)</title><rect x="976.4" y="709" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="979.44" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (4 samples, 0.15%)</title><rect x="762.9" y="501" width="1.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="765.88" y="511.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (47 samples, 1.73%)</title><rect x="909.3" y="661" width="20.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="912.30" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="946.5" y="677" width="0.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="949.55" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1024.1" y="357" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1027.09" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (3 samples, 0.11%)</title><rect x="717.8" y="645" width="1.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="720.83" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="834.4" y="565" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="837.35" y="575.5" ></text>
</g>
<g >
<title>0x00007fb487be4230 (1 samples, 0.04%)</title><rect x="73.7" y="773" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="76.68" y="783.5" ></text>
</g>
<g >
<title>0x00007fb4878af968 (2 samples, 0.07%)</title><rect x="82.3" y="789" width="0.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="85.34" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (7 samples, 0.26%)</title><rect x="969.9" y="629" width="3.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="972.94" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFB_CalcSlopes(Triangle&amp;)&lt;00000000000629d0&gt; (2 samples, 0.07%)</title><rect x="243.1" y="677" width="0.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="246.05" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (4 samples, 0.15%)</title><rect x="909.3" y="597" width="1.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="912.30" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="1011.1" y="645" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1014.09" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (19 samples, 0.70%)</title><rect x="739.5" y="661" width="8.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="742.49" y="671.5" ></text>
</g>
<g >
<title>operator new[](unsigned long) (2 samples, 0.07%)</title><rect x="719.1" y="613" width="0.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="722.13" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000129c0&gt; (4 samples, 0.15%)</title><rect x="984.2" y="677" width="1.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="987.24" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (4 samples, 0.15%)</title><rect x="897.2" y="629" width="1.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="900.17" y="639.5" ></text>
</g>
<g >
<title>0x00007fb4878af977 (1 samples, 0.04%)</title><rect x="86.2" y="789" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="89.24" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (8 samples, 0.29%)</title><rect x="603.9" y="677" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="606.90" y="687.5" ></text>
</g>
<g >
<title>Triangle::getTriangleZCenter()&lt;000000000007ccc0&gt; (1 samples, 0.04%)</title><rect x="895.4" y="597" width="0.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="898.43" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1024.1" y="213" width="0.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1027.09" y="223.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007e6b0&gt; (5 samples, 0.18%)</title><rect x="808.4" y="693" width="2.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="811.36" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="969.5" y="597" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="972.51" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (2 samples, 0.07%)</title><rect x="941.8" y="661" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="944.78" y="671.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (21 samples, 0.77%)</title><rect x="960.8" y="613" width="9.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="963.84" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.15%)</title><rect x="827.4" y="581" width="1.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="830.42" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (18 samples, 0.66%)</title><rect x="856.0" y="597" width="7.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="859.01" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="920.1" y="549" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="923.12" y="559.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.07%)</title><rect x="904.5" y="597" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="907.53" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="921.0" y="533" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="923.99" y="543.5" ></text>
</g>
<g >
<title>operator new[](unsigned long) (4 samples, 0.15%)</title><rect x="1004.6" y="645" width="1.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1007.60" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="811.0" y="709" width="0.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="813.96" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (3 samples, 0.11%)</title><rect x="862.5" y="565" width="1.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="865.51" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="920.6" y="517" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="923.56" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="824.4" y="677" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="827.39" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach_single(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd580&gt; (6 samples, 0.22%)</title><rect x="11.7" y="773" width="2.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="14.73" y="783.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="629.9" y="629" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="632.89" y="639.5" ></text>
</g>
<g >
<title>std::allocator&lt;Triangle&gt;::~allocator()[inline] (5 samples, 0.18%)</title><rect x="755.9" y="629" width="2.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="758.95" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="926.2" y="549" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="929.19" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator*() const (1 samples, 0.04%)</title><rect x="875.5" y="613" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="878.51" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="734.7" y="581" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="737.72" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="955.2" y="661" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="958.21" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="727.4" y="645" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="730.36" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (3 samples, 0.11%)</title><rect x="574.9" y="693" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="577.88" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="875.1" y="581" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="878.07" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="867.7" y="597" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="870.71" y="607.5" ></text>
</g>
<g >
<title>0x203a535046202d1f (1 samples, 0.04%)</title><rect x="97.5" y="789" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="100.50" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015d30&gt; (1 samples, 0.04%)</title><rect x="681.0" y="645" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="684.01" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1016.7" y="741" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1019.73" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (3 samples, 0.11%)</title><rect x="875.5" y="629" width="1.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="878.51" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (5 samples, 0.18%)</title><rect x="752.9" y="645" width="2.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="755.91" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="863.8" y="613" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="866.81" y="623.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (18 samples, 0.66%)</title><rect x="729.1" y="613" width="7.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="732.09" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="619.1" y="629" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="622.06" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (20 samples, 0.73%)</title><rect x="995.9" y="661" width="8.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="998.93" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000129c0&gt; (4 samples, 0.15%)</title><rect x="883.3" y="581" width="1.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="886.30" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (47 samples, 1.73%)</title><rect x="358.7" y="677" width="20.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="361.72" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="293" width="0.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1027.09" y="303.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (13 samples, 0.48%)</title><rect x="759.0" y="645" width="5.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="761.98" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="1003.7" y="533" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1006.73" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (1 samples, 0.04%)</title><rect x="829.2" y="629" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="832.16" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="928.4" y="565" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="931.36" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (3 samples, 0.11%)</title><rect x="953.5" y="629" width="1.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="956.48" y="639.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private@@GLIBC_PRIVATE&lt;0000000000089670&gt; (18 samples, 0.66%)</title><rect x="1025.0" y="789" width="7.8" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1027.96" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="954.8" y="613" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="957.78" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="897.2" y="597" width="1.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="900.17" y="607.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000046570&gt; (175 samples, 6.42%)</title><rect x="383.4" y="677" width="75.8" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="386.41" y="687.5" >TextureP..</text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="569.7" y="677" width="0.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="572.68" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="717.4" y="645" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="720.39" y="655.5" ></text>
</g>
<g >
<title>glIsTextureEXT&lt;000000000002a7a0&gt; (2 samples, 0.07%)</title><rect x="1128.9" y="789" width="0.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1131.92" y="799.5" ></text>
</g>
<g >
<title>0x00007fb4879558ce (1 samples, 0.04%)</title><rect x="91.4" y="789" width="0.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="94.44" y="799.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.11%)</title><rect x="733.4" y="581" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="736.42" y="591.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (1 samples, 0.04%)</title><rect x="117.4" y="709" width="0.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="120.43" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000dd670&gt; (2 samples, 0.07%)</title><rect x="110.9" y="789" width="0.9" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="113.93" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="908.4" y="565" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="911.43" y="575.5" ></text>
</g>
<g >
<title>0x00007fb4878af96e (5 samples, 0.18%)</title><rect x="83.6" y="789" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="86.64" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (8 samples, 0.29%)</title><rect x="612.1" y="677" width="3.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="615.13" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="955.2" y="677" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="958.21" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.18%)</title><rect x="889.8" y="597" width="2.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="892.80" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (18 samples, 0.66%)</title><rect x="856.0" y="661" width="7.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="859.01" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="998.5" y="565" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1001.53" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1023.2" y="517" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1026.22" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="916.2" y="565" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="919.23" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="727.8" y="645" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="730.79" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (6 samples, 0.22%)</title><rect x="986.0" y="677" width="2.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="988.97" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (3 samples, 0.11%)</title><rect x="929.7" y="677" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="932.65" y="687.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;00000000000100c0&gt; (1 samples, 0.04%)</title><rect x="939.2" y="645" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="942.19" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="1011.5" y="629" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1014.53" y="639.5" ></text>
</g>
<g >
<title>0x00007fb487ecf1f0 (1 samples, 0.04%)</title><rect x="95.8" y="789" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="98.77" y="799.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010100&gt; (1 samples, 0.04%)</title><rect x="900.6" y="565" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="903.63" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="834.4" y="629" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="837.35" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (5 samples, 0.18%)</title><rect x="870.7" y="629" width="2.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="873.74" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (6 samples, 0.22%)</title><rect x="832.2" y="709" width="2.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="835.19" y="719.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (1 samples, 0.04%)</title><rect x="1188.7" y="789" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.70" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="116.1" y="661" width="0.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="119.13" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.15%)</title><rect x="1018.0" y="501" width="1.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1021.02" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (2 samples, 0.07%)</title><rect x="917.5" y="565" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="920.53" y="575.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="116.6" y="725" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="119.56" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_attach(__gnu_debug::_Safe_sequence_base*) (1 samples, 0.04%)</title><rect x="909.3" y="565" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="912.30" y="575.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="846.0" y="693" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="849.05" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.11%)</title><rect x="929.7" y="581" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="932.65" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (7 samples, 0.26%)</title><rect x="912.3" y="613" width="3.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="915.33" y="623.5" ></text>
</g>
<g >
<title>tc_malloc (2 samples, 0.07%)</title><rect x="1189.1" y="789" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1192.13" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="1024.1" y="373" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1027.09" y="383.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (2 samples, 0.07%)</title><rect x="978.2" y="725" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="981.17" y="735.5" ></text>
</g>
<g >
<title>free (1 samples, 0.04%)</title><rect x="1017.6" y="677" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1020.59" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.11%)</title><rect x="905.4" y="565" width="1.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="908.40" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Sequence_traits&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_S_size(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="864.7" y="597" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="867.68" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="878.1" y="597" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="881.11" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="115.7" y="693" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="118.70" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::~_Safe_container() (2 samples, 0.07%)</title><rect x="749.9" y="677" width="0.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="752.88" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="869.0" y="629" width="1.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="872.01" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_Safe_sequence_base(__gnu_debug::_Safe_sequence_base const&amp;)&lt;00000000000176b0&gt; (1 samples, 0.04%)</title><rect x="855.6" y="661" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="858.58" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="630.3" y="613" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="633.32" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="869.0" y="645" width="1.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="872.01" y="655.5" ></text>
</g>
<g >
<title>0x00007fb487eb98f3 (1 samples, 0.04%)</title><rect x="17.8" y="773" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="20.80" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (5 samples, 0.18%)</title><rect x="944.0" y="661" width="2.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="946.95" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="645" width="3.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1022.76" y="655.5" ></text>
</g>
<g >
<title>write (1 samples, 0.04%)</title><rect x="104.0" y="773" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="107.00" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (7 samples, 0.26%)</title><rect x="879.0" y="613" width="3.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="881.97" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (3 samples, 0.11%)</title><rect x="735.6" y="597" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="738.59" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (1 samples, 0.04%)</title><rect x="1023.2" y="485" width="0.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1026.22" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="894.1" y="549" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="897.13" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()[inline] (1 samples, 0.04%)</title><rect x="11.3" y="757" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="14.30" y="767.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (15 samples, 0.55%)</title><rect x="886.8" y="613" width="6.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="889.77" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (4 samples, 0.15%)</title><rect x="1004.6" y="677" width="1.7" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1007.60" y="687.5" ></text>
</g>
<g >
<title>0x00007fb4878af954 (2 samples, 0.07%)</title><rect x="76.3" y="789" width="0.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="79.28" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (5 samples, 0.18%)</title><rect x="1007.2" y="645" width="2.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1010.20" y="655.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.04%)</title><rect x="581.4" y="709" width="0.4" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="584.37" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(Vec2d const&amp;) (5 samples, 0.18%)</title><rect x="630.8" y="677" width="2.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="633.76" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (3 samples, 0.11%)</title><rect x="929.7" y="661" width="1.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="932.65" y="671.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (18 samples, 0.66%)</title><rect x="729.1" y="629" width="7.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="732.09" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (4 samples, 0.15%)</title><rect x="1018.0" y="613" width="1.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1021.02" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="116.6" y="709" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="119.56" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="869.0" y="613" width="1.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="872.01" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.04%)</title><rect x="921.0" y="549" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="923.99" y="559.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007c5f0&gt; (10 samples, 0.37%)</title><rect x="560.6" y="677" width="4.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="563.58" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="914.1" y="581" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="917.06" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (1 samples, 0.04%)</title><rect x="960.4" y="725" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="963.41" y="735.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="867.7" y="613" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="870.71" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.18%)</title><rect x="615.6" y="677" width="2.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="618.59" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.18%)</title><rect x="1017.6" y="709" width="2.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1020.59" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="795.4" y="645" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="798.37" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (15 samples, 0.55%)</title><rect x="671.9" y="661" width="6.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="674.91" y="671.5" ></text>
</g>
<g >
<title>parse_printf_format@@GLIBC_2.2.5&lt;0000000000056320&gt; (1 samples, 0.04%)</title><rect x="1129.8" y="773" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1132.79" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="115.7" y="677" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="118.70" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="864.2" y="645" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="867.24" y="655.5" ></text>
</g>
<g >
<title>get_safe_base_mutex[inline] (1 samples, 0.04%)</title><rect x="897.6" y="565" width="0.4" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="900.60" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="909.3" y="581" width="1.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="912.30" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="918.4" y="565" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="921.39" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt;* std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt;::operator()&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;&gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; const&amp;) const (1 samples, 0.04%)</title><rect x="113.1" y="645" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="116.10" y="655.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (7 samples, 0.26%)</title><rect x="687.1" y="677" width="3.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="690.07" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="864.2" y="613" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="867.24" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="863.8" y="629" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="866.81" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="822.7" y="629" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="825.66" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="116.1" y="709" width="0.5" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="119.13" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="924.0" y="565" width="0.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="927.02" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (4 samples, 0.15%)</title><rect x="1018.0" y="597" width="1.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1021.02" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (7 samples, 0.26%)</title><rect x="969.9" y="677" width="3.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="972.94" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt;(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*) (1 samples, 0.04%)</title><rect x="1023.2" y="613" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1026.22" y="623.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="898.9" y="549" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="901.90" y="559.5" ></text>
</g>
<g >
<title>XInstallColormap&lt;000000000002ce60&gt; (1 samples, 0.04%)</title><rect x="18.2" y="773" width="0.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="21.23" y="783.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="868.1" y="597" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="871.14" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012af0&gt; (5 samples, 0.18%)</title><rect x="939.2" y="661" width="2.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="942.19" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="116.1" y="693" width="0.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="119.13" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::vectorIntersectPlane(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, Vec3d&amp;, float&amp;)&lt;000000000007e940&gt; (9 samples, 0.33%)</title><rect x="662.4" y="677" width="3.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="665.38" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (3 samples, 0.11%)</title><rect x="927.5" y="581" width="1.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="930.49" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (3 samples, 0.11%)</title><rect x="953.5" y="677" width="1.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="956.48" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (21 samples, 0.77%)</title><rect x="960.8" y="645" width="9.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="963.84" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (2 samples, 0.07%)</title><rect x="811.8" y="645" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="814.83" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="874.2" y="533" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="877.21" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::allocate(std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;&amp;, unsigned long)[inline] (1 samples, 0.04%)</title><rect x="118.7" y="629" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="121.73" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_debug::_BeforeBeginHelper&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_S_Is&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::forward_iterator_tag&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="906.7" y="565" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="909.70" y="575.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000062970&gt; (15 samples, 0.55%)</title><rect x="251.7" y="677" width="6.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="254.72" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="581.8" y="709" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="584.81" y="719.5" ></text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e560&gt; (1 samples, 0.04%)</title><rect x="640.7" y="677" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="643.72" y="687.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000054470&gt; (2 samples, 0.07%)</title><rect x="1024.1" y="549" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1027.09" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.15%)</title><rect x="966.9" y="549" width="1.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="969.91" y="559.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (14 samples, 0.51%)</title><rect x="448.8" y="661" width="6.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="451.82" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="913.6" y="565" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="916.63" y="575.5" ></text>
</g>
<g >
<title>free (4 samples, 0.15%)</title><rect x="753.3" y="613" width="1.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="756.35" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base()&lt;0000000000018840&gt; (1 samples, 0.04%)</title><rect x="877.7" y="581" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="880.67" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (6 samples, 0.22%)</title><rect x="732.1" y="597" width="2.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="735.12" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (5 samples, 0.18%)</title><rect x="832.6" y="693" width="2.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="835.62" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (5 samples, 0.18%)</title><rect x="714.8" y="581" width="2.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="717.79" y="591.5" ></text>
</g>
<g >
<title>I_SDL_Texture_Blit::inPixelRange(unsigned short, unsigned short)&lt;000000000005c9b0&gt; (3 samples, 0.11%)</title><rect x="165.5" y="661" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="168.51" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="822.7" y="613" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="825.66" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012af0&gt; (4 samples, 0.15%)</title><rect x="984.2" y="661" width="1.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="987.24" y="671.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (1 samples, 0.04%)</title><rect x="914.1" y="597" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="917.06" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (2 samples, 0.07%)</title><rect x="821.4" y="645" width="0.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="824.36" y="655.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="915.4" y="613" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="918.36" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="979.0" y="709" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="982.04" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (10 samples, 0.37%)</title><rect x="796.2" y="709" width="4.4" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="799.23" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="822.7" y="709" width="0.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="825.66" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="645" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1027.09" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="914.9" y="565" width="0.5" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="917.93" y="575.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;)&lt;000000000007e2a0&gt; (1 samples, 0.04%)</title><rect x="816.2" y="709" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="819.16" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Vec3d const&amp;, Vec3d const&amp;, Vec3d const&amp;, Vec2d const&amp;, Vec2d const&amp;, Vec2d const&amp;, int const&amp;, SDL_Color, float, std::shared_ptr&lt;TexturePNG&gt;) (4 samples, 0.15%)</title><rect x="569.7" y="693" width="1.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="572.68" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;ITriangleRasterizer&gt;::~shared_ptr() (3 samples, 0.11%)</title><rect x="583.5" y="709" width="1.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="586.54" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="892.8" y="565" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="895.83" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="894.6" y="533" width="0.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="897.57" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="678.0" y="645" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="680.97" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.18%)</title><rect x="1012.8" y="613" width="2.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1015.83" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="116.6" y="645" width="0.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="119.56" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="667.6" y="677" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="670.58" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::at(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="115.3" y="725" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="118.26" y="735.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="912.3" y="581" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="915.33" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="865.5" y="629" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="868.54" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (8 samples, 0.29%)</title><rect x="848.2" y="661" width="3.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="851.22" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.15%)</title><rect x="673.2" y="613" width="1.7" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="676.21" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (21 samples, 0.77%)</title><rect x="960.8" y="709" width="9.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="963.84" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="954.8" y="549" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="957.78" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="786.3" y="677" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="789.27" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="867.7" y="581" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="870.71" y="591.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="864.2" y="597" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="867.24" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="999.0" y="565" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1001.96" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="928.8" y="549" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="931.79" y="559.5" ></text>
</g>
<g >
<title>0x4d554a202020201f (1 samples, 0.04%)</title><rect x="102.7" y="789" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="105.70" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (1 samples, 0.04%)</title><rect x="909.7" y="565" width="0.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="912.73" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (12 samples, 0.44%)</title><rect x="712.2" y="645" width="5.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="715.20" y="655.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (2 samples, 0.07%)</title><rect x="959.5" y="741" width="0.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="962.54" y="751.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (18 samples, 0.66%)</title><rect x="856.0" y="693" width="7.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="859.01" y="703.5" ></text>
</g>
<g >
<title>InGame_Action_Updater::update()&lt;000000000000f410&gt; (9 samples, 0.33%)</title><rect x="113.5" y="741" width="3.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="116.53" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="897.2" y="613" width="1.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="900.17" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1024.1" y="405" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1027.09" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.04%)</title><rect x="834.8" y="693" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="837.79" y="703.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010100&gt; (1 samples, 0.04%)</title><rect x="675.8" y="629" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="678.81" y="639.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007c740&gt; (6 samples, 0.22%)</title><rect x="335.8" y="661" width="2.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="338.76" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="931.4" y="645" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="934.39" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Camera, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="834.8" y="677" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="837.79" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (73 samples, 2.68%)</title><rect x="707.0" y="677" width="31.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="710.00" y="687.5" >st..</text>
</g>
<g >
<title>Clipper::getClippedTrisAgainstFrustum(Triangle&amp;)&lt;000000000005dca0&gt; (400 samples, 14.68%)</title><rect x="591.8" y="709" width="173.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="594.77" y="719.5" >Clipper::getClippedTri..</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.11%)</title><rect x="574.9" y="645" width="1.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="577.88" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.18%)</title><rect x="782.4" y="693" width="2.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="785.37" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (4 samples, 0.15%)</title><rect x="939.6" y="645" width="1.8" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="942.62" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="898.5" y="613" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="901.47" y="623.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="882.0" y="613" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="885.00" y="623.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::operator=(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="117.9" y="709" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="120.86" y="719.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="112.7" y="789" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="115.67" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (3 samples, 0.11%)</title><rect x="948.7" y="725" width="1.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="951.72" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (5 samples, 0.18%)</title><rect x="932.3" y="565" width="2.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="935.25" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TexturemapRasterizer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy() (1 samples, 0.04%)</title><rect x="584.4" y="645" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="587.41" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (8 samples, 0.29%)</title><rect x="935.3" y="725" width="3.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="938.29" y="735.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (5 samples, 0.18%)</title><rect x="893.3" y="613" width="2.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="896.27" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000062090&gt; (509 samples, 18.69%)</title><rect x="127.0" y="693" width="220.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="129.96" y="703.5" >TexturemapRasterizer::drawFla..</text>
</g>
<g >
<title>_dl_find_dso_for_object@@GLIBC_PRIVATE&lt;000000000000ba70&gt; (1 samples, 0.04%)</title><rect x="1127.6" y="789" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1130.62" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (5 samples, 0.18%)</title><rect x="813.1" y="709" width="2.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="816.13" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="668.4" y="645" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="671.44" y="655.5" ></text>
</g>
<g >
<title>TrianglePipeline::zSortFunction(Triangle, Triangle)&lt;00000000000673e0&gt; (1 samples, 0.04%)</title><rect x="895.4" y="613" width="0.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="898.43" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (11 samples, 0.40%)</title><rect x="929.7" y="693" width="4.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="932.65" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="834.4" y="549" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="837.35" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (4 samples, 0.15%)</title><rect x="1007.6" y="565" width="1.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1010.63" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="925.3" y="581" width="0.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="928.32" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="917.1" y="517" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="920.09" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (2 samples, 0.07%)</title><rect x="696.6" y="661" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="699.60" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_node_allocator() (1 samples, 0.04%)</title><rect x="118.3" y="629" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="121.30" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1024.1" y="229" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1027.09" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::deallocate(std::allocator&lt;SDL_Color&gt;&amp;, SDL_Color*, unsigned long)[inline] (2 samples, 0.07%)</title><rect x="1024.1" y="133" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1027.09" y="143.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="858.6" y="581" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="861.61" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::get() const (1 samples, 0.04%)</title><rect x="582.7" y="677" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="585.67" y="687.5" ></text>
</g>
<g >
<title>__nptl_death_event@@GLIBC_PRIVATE&lt;00000000000893f0&gt; (202 samples, 7.42%)</title><rect x="1040.1" y="789" width="87.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1043.12" y="799.5" >__nptl_dea..</text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="783.2" y="677" width="1.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="786.24" y="687.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;000000000007e780&gt; (12 samples, 0.44%)</title><rect x="800.6" y="709" width="5.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="803.57" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (19 samples, 0.70%)</title><rect x="996.4" y="597" width="8.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="999.37" y="607.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="667.1" y="661" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="670.14" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.07%)</title><rect x="734.7" y="597" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="737.72" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (7 samples, 0.26%)</title><rect x="955.6" y="629" width="3.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="958.65" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.04%)</title><rect x="869.4" y="597" width="0.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="872.44" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.15%)</title><rect x="956.9" y="565" width="1.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="959.95" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="1015.9" y="741" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1018.86" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (6 samples, 0.22%)</title><rect x="679.7" y="661" width="2.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="682.71" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.04%)</title><rect x="977.7" y="709" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="980.74" y="719.5" ></text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt; (2,105 samples, 77.28%)</title><rect x="113.1" y="789" width="911.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="116.10" y="799.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000027c40&gt;</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="929.2" y="549" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="932.22" y="559.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="873.8" y="565" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="876.77" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (10 samples, 0.37%)</title><rect x="723.0" y="629" width="4.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="726.02" y="639.5" ></text>
</g>
<g >
<title>0x564f4d202020201f (1 samples, 0.04%)</title><rect x="104.4" y="789" width="0.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="107.43" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt;[inline] (1 samples, 0.04%)</title><rect x="11.3" y="725" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.30" y="735.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000690e0&gt; (3 samples, 0.11%)</title><rect x="929.7" y="597" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="932.65" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="737.3" y="613" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="740.32" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~_Vector_base() (2 samples, 0.07%)</title><rect x="1024.1" y="165" width="0.9" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1027.09" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="862.1" y="517" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="865.08" y="527.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="700.5" y="629" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="703.50" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (9 samples, 0.33%)</title><rect x="692.3" y="645" width="3.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="695.27" y="655.5" ></text>
</g>
<g >
<title>SDL_Color* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, SDL_Color&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*, std::allocator&lt;SDL_Color&gt;&amp;) (3 samples, 0.11%)</title><rect x="1020.2" y="389" width="1.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1023.19" y="399.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (35 samples, 1.28%)</title><rect x="749.4" y="693" width="15.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="752.45" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="917.1" y="501" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="920.09" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;Mesh_Pipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (2 samples, 0.07%)</title><rect x="1024.1" y="677" width="0.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1027.09" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge()&lt;0000000000026670&gt; (1 samples, 0.04%)</title><rect x="1024.5" y="101" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1027.52" y="111.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (6 samples, 0.22%)</title><rect x="698.3" y="677" width="2.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="701.33" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.04%)</title><rect x="834.4" y="677" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="837.35" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="684.5" y="693" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="687.47" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="834.4" y="533" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="837.35" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="875.1" y="597" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="878.07" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.11%)</title><rect x="819.2" y="677" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="822.19" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (4 samples, 0.15%)</title><rect x="876.8" y="613" width="1.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="879.81" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="969.9" y="581" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="972.94" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (2 samples, 0.07%)</title><rect x="111.8" y="789" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="114.80" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="875.1" y="613" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="878.07" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::operator=(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="113.1" y="709" width="0.4" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="116.10" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (1 samples, 0.04%)</title><rect x="955.2" y="629" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="958.21" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005ec50&gt; (7 samples, 0.26%)</title><rect x="989.9" y="725" width="3.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="992.87" y="735.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="16.9" y="773" width="0.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="19.93" y="783.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="928.4" y="549" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="931.36" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::_Vector_impl(std::allocator&lt;Triangle&gt; const&amp;) (2 samples, 0.07%)</title><rect x="829.6" y="661" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="832.59" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_unlink()[inline] (1 samples, 0.04%)</title><rect x="15.6" y="757" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="18.63" y="767.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (9 samples, 0.33%)</title><rect x="847.8" y="677" width="3.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="850.78" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (1 samples, 0.04%)</title><rect x="979.0" y="677" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="982.04" y="687.5" ></text>
</g>
<g >
<title>Input_Parser::scanInput()&lt;00000000000305a0&gt; (4 samples, 0.15%)</title><rect x="117.4" y="741" width="1.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="120.43" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (3 samples, 0.11%)</title><rect x="876.8" y="597" width="1.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="879.81" y="607.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e350&gt; (8 samples, 0.29%)</title><rect x="791.5" y="693" width="3.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="794.47" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (10 samples, 0.37%)</title><rect x="697.5" y="693" width="4.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="700.47" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::clipTriangleWithPlane(Vec3d, Vec3d, Triangle&amp;, Triangle&amp;, Triangle&amp;)&lt;000000000007eb30&gt; (106 samples, 3.89%)</title><rect x="623.4" y="693" width="45.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="626.39" y="703.5" >Vect..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;::__normal_iterator(Mesh* const&amp;) (1 samples, 0.04%)</title><rect x="979.0" y="645" width="0.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="982.04" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (9 samples, 0.33%)</title><rect x="878.5" y="629" width="3.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="881.54" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (2 samples, 0.07%)</title><rect x="831.3" y="677" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="834.32" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="1018.5" y="485" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1021.46" y="495.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (3 samples, 0.11%)</title><rect x="953.5" y="725" width="1.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="956.48" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="927.1" y="517" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="930.06" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.15%)</title><rect x="971.2" y="549" width="1.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="974.24" y="559.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::erase(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="1016.3" y="741" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1019.29" y="751.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::deallocate(SDL_Color*, unsigned long) (1 samples, 0.04%)</title><rect x="1024.5" y="117" width="0.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1027.52" y="127.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (6 samples, 0.22%)</title><rect x="970.4" y="565" width="2.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="973.37" y="575.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;0000000000046a30&gt; (3 samples, 0.11%)</title><rect x="565.3" y="677" width="1.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="568.35" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (7 samples, 0.26%)</title><rect x="969.9" y="709" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="972.94" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="923.6" y="533" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="926.59" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (1 samples, 0.04%)</title><rect x="582.7" y="693" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="585.67" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="904.5" y="581" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="907.53" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (18 samples, 0.66%)</title><rect x="996.4" y="581" width="7.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="999.37" y="591.5" ></text>
</g>
<g >
<title>Engine_3D::engine_update()&lt;0000000000022aa0&gt; (2,093 samples, 76.84%)</title><rect x="113.1" y="757" width="906.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="116.10" y="767.5" >Engine_3D::engine_update()&lt;0000000000022aa0&gt;</text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (1 samples, 0.04%)</title><rect x="917.5" y="549" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="920.53" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="835.7" y="645" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="838.65" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="920.1" y="533" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="923.12" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="617.3" y="629" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="620.33" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Mesh*&gt;(Mesh*, Mesh*) (2 samples, 0.07%)</title><rect x="1024.1" y="581" width="0.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1027.09" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (4 samples, 0.15%)</title><rect x="699.2" y="645" width="1.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="702.20" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_realloc_insert&lt;Triangle const&amp;&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle const&amp;) (31 samples, 1.14%)</title><rect x="995.9" y="693" width="13.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="998.93" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="805.3" y="677" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="808.33" y="687.5" ></text>
</g>
<g >
<title>0x00007fb3ffffffff (1 samples, 0.04%)</title><rect x="75.4" y="789" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="78.41" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="906.7" y="613" width="0.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="909.70" y="623.5" ></text>
</g>
<g >
<title>0x0000562204c319df (1 samples, 0.04%)</title><rect x="19.1" y="789" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="22.10" y="799.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007cb70&gt; (2 samples, 0.07%)</title><rect x="627.7" y="677" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="630.72" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;Triangle, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(Triangle&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (3 samples, 0.11%)</title><rect x="867.7" y="629" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="870.71" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (2 samples, 0.07%)</title><rect x="833.5" y="661" width="0.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="836.49" y="671.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (6 samples, 0.22%)</title><rect x="617.8" y="693" width="2.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="620.76" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="967.3" y="501" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="970.34" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::~_Vector_impl() (7 samples, 0.26%)</title><rect x="755.1" y="645" width="3.0" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="758.08" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="670.2" y="645" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="673.18" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="901.1" y="565" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="904.06" y="575.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (18 samples, 0.66%)</title><rect x="856.0" y="645" width="7.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="859.01" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (6 samples, 0.22%)</title><rect x="1006.8" y="677" width="2.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1009.76" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.04%)</title><rect x="1015.4" y="725" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1018.43" y="735.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="911.5" y="533" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="914.46" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (3 samples, 0.11%)</title><rect x="679.7" y="645" width="1.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="682.71" y="655.5" ></text>
</g>
<g >
<title>Triangle::setTrianglePoint(int, Vec3d const&amp;)&lt;000000000007c4a0&gt; (1 samples, 0.04%)</title><rect x="786.7" y="709" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="789.70" y="719.5" ></text>
</g>
<g >
<title>_XlcGetCSValues&lt;0000000000052d90&gt; (1 samples, 0.04%)</title><rect x="107.5" y="789" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="110.47" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (1 samples, 0.04%)</title><rect x="898.9" y="581" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="901.90" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (7 samples, 0.26%)</title><rect x="882.4" y="629" width="3.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="885.44" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::allocator&lt;Triangle&gt;&amp;)[inline] (7 samples, 0.26%)</title><rect x="931.4" y="677" width="3.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="934.39" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="916.7" y="597" width="0.8" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="919.66" y="607.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="823.1" y="629" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="826.09" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (3 samples, 0.11%)</title><rect x="1002.9" y="549" width="1.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1005.86" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (21 samples, 0.77%)</title><rect x="960.8" y="677" width="9.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="963.84" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (2 samples, 0.07%)</title><rect x="921.4" y="581" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="924.42" y="591.5" ></text>
</g>
<g >
<title>0x00007fb487ba956c (1 samples, 0.04%)</title><rect x="92.3" y="789" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="95.31" y="799.5" ></text>
</g>
<g >
<title>SDL_DYNAPI_entry (35 samples, 1.28%)</title><rect x="149.5" y="677" width="15.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="152.49" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.11%)</title><rect x="922.7" y="549" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="925.72" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (50 samples, 1.84%)</title><rect x="993.8" y="725" width="21.6" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="996.77" y="735.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="971.7" y="533" width="1.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="974.67" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (7 samples, 0.26%)</title><rect x="848.6" y="645" width="3.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="851.65" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="907.1" y="581" width="0.5" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="910.13" y="591.5" ></text>
</g>
<g >
<title>SDL_Texture_LineBlit::setXY_Start(unsigned short, unsigned short)&lt;000000000005ce40&gt; (2 samples, 0.07%)</title><rect x="123.1" y="693" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="126.06" y="703.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks()&lt;00000000000dfc20&gt; (1 samples, 0.04%)</title><rect x="1023.7" y="693" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1026.66" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (2 samples, 0.07%)</title><rect x="780.2" y="677" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="783.21" y="687.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.07%)</title><rect x="947.0" y="693" width="0.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="949.98" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (7 samples, 0.26%)</title><rect x="882.4" y="613" width="3.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="885.44" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="697.9" y="677" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="700.90" y="687.5" ></text>
</g>
<g >
<title>all (2,724 samples, 100%)</title><rect x="10.0" y="805" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::min&lt;unsigned long&gt;(unsigned long const&amp;, unsigned long const&amp;) (2 samples, 0.07%)</title><rect x="722.2" y="597" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="725.16" y="607.5" ></text>
</g>
<g >
<title>0x00007fb4878af970 (1 samples, 0.04%)</title><rect x="85.8" y="789" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="88.81" y="799.5" ></text>
</g>
<g >
<title>OBJ::assembleChunks()&lt;0000000000052a00&gt; (8 samples, 0.29%)</title><rect x="1019.8" y="693" width="3.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1022.76" y="703.5" ></text>
</g>
<g >
<title>Vec3d::toThousandths()&lt;000000000007db00&gt; (2 samples, 0.07%)</title><rect x="577.0" y="693" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="580.04" y="703.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (3 samples, 0.11%)</title><rect x="905.4" y="613" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="908.40" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (12 samples, 0.44%)</title><rect x="759.4" y="629" width="5.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="762.41" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;, std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;, std::forward_iterator_tag&gt;::operator++(int) (1 samples, 0.04%)</title><rect x="114.8" y="709" width="0.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="117.83" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (1 samples, 0.04%)</title><rect x="908.9" y="629" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="911.86" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (4 samples, 0.15%)</title><rect x="669.7" y="677" width="1.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="672.74" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="924.9" y="549" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="927.89" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (5 samples, 0.18%)</title><rect x="932.3" y="629" width="2.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="935.25" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (3 samples, 0.11%)</title><rect x="781.1" y="709" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="784.07" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="784.1" y="629" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="787.10" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.07%)</title><rect x="916.7" y="533" width="0.8" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="919.66" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="920.6" y="485" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="923.56" y="495.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="900.6" y="613" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="903.63" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="576.2" y="693" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="579.17" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="603.5" y="661" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="606.47" y="671.5" ></text>
</g>
<g >
<title>Renderer::projectTriangle3d(Triangle&amp;)&lt;0000000000064e30&gt; (580 samples, 21.29%)</title><rect x="584.8" y="725" width="251.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="587.84" y="735.5" >Renderer::projectTriangle3d(Trian..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (13 samples, 0.48%)</title><rect x="984.2" y="693" width="5.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="987.24" y="703.5" ></text>
</g>
<g >
<title>0x0000562204c3a36f (2 samples, 0.07%)</title><rect x="19.5" y="789" width="0.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="22.53" y="799.5" ></text>
</g>
<g >
<title>write (2 samples, 0.07%)</title><rect x="103.1" y="773" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="106.14" y="783.5" ></text>
</g>
<g >
<title>VectorMathService::crossProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e5c0&gt; (1 samples, 0.04%)</title><rect x="789.3" y="693" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="792.30" y="703.5" ></text>
</g>
<g >
<title>0x00007fb487922450 (1 samples, 0.04%)</title><rect x="90.6" y="789" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="93.57" y="799.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (4 samples, 0.15%)</title><rect x="912.3" y="597" width="1.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="915.33" y="607.5" ></text>
</g>
<g >
<title>__xpg_strerror_r@@GLIBC_2.3.4&lt;00000000000a6f60&gt; (1 samples, 0.04%)</title><rect x="74.1" y="773" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="77.11" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, TexturePNG&amp;&gt;(std::_Sp_alloc_shared_tag&lt;std::allocator&lt;void&gt; &gt;, TexturePNG&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="629" width="3.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1022.76" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="823.1" y="613" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="826.09" y="623.5" ></text>
</g>
<g >
<title>TexturePNG::TexturePNG(TexturePNG const&amp;)&lt;000000000003dd30&gt; (8 samples, 0.29%)</title><rect x="1019.8" y="549" width="3.4" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1022.76" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="944.0" y="645" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="946.95" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="570.5" y="613" width="0.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="573.54" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange(void**, void**, int)&lt;00000000000277c0&gt; (4 samples, 0.15%)</title><rect x="1021.5" y="293" width="1.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1024.49" y="303.5" ></text>
</g>
<g >
<title>__lll_lock_wake_private@@GLIBC_PRIVATE&lt;0000000000089730&gt; (17 samples, 0.62%)</title><rect x="1032.8" y="789" width="7.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1035.75" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (9 samples, 0.33%)</title><rect x="760.7" y="613" width="3.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="763.71" y="623.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000062810&gt; (104 samples, 3.82%)</title><rect x="293.3" y="677" width="45.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="296.30" y="687.5" >Text..</text>
</g>
<g >
<title>0x00005622179d68bf (1 samples, 0.04%)</title><rect x="75.0" y="789" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="77.98" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (28 samples, 1.03%)</title><rect x="896.7" y="645" width="12.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="899.73" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="916.7" y="581" width="0.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="919.66" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="854.7" y="661" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="857.71" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1023.2" y="533" width="0.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1026.22" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="795.4" y="613" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="798.37" y="623.5" ></text>
</g>
<g >
<title>__poll@@GLIBC_2.2.5&lt;0000000000102f20&gt; (15 samples, 0.55%)</title><rect x="20.8" y="773" width="6.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="23.83" y="783.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (18 samples, 0.66%)</title><rect x="856.0" y="629" width="7.8" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="859.01" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="921.4" y="517" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="924.42" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (10 samples, 0.37%)</title><rect x="678.4" y="693" width="4.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="681.41" y="703.5" ></text>
</g>
<g >
<title>XGetGeometry&lt;000000000001fca0&gt; (1 samples, 0.04%)</title><rect x="19.5" y="773" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="22.53" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="578.3" y="629" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="581.34" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.11%)</title><rect x="574.9" y="661" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="577.88" y="671.5" ></text>
</g>
<g >
<title>TexturePNG::~TexturePNG()&lt;000000000003d940&gt; (2 samples, 0.07%)</title><rect x="1024.1" y="309" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1027.09" y="319.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.26%)</title><rect x="955.6" y="661" width="3.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="958.65" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.11%)</title><rect x="905.4" y="597" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="908.40" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="865.1" y="629" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="868.11" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (2 samples, 0.07%)</title><rect x="674.9" y="629" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="677.94" y="639.5" ></text>
</g>
<g >
<title>void std::__sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (152 samples, 5.58%)</title><rect x="863.8" y="693" width="65.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="866.81" y="703.5" >void st..</text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (10 samples, 0.37%)</title><rect x="824.8" y="661" width="4.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="827.82" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="967.3" y="517" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="970.34" y="527.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (37 samples, 1.36%)</title><rect x="765.0" y="709" width="16.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="768.04" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (1 samples, 0.04%)</title><rect x="829.6" y="645" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="832.59" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017e90&gt; (5 samples, 0.18%)</title><rect x="693.1" y="629" width="2.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="696.14" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::~_Safe_sequence() (2 samples, 0.07%)</title><rect x="749.9" y="661" width="0.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="752.88" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.18%)</title><rect x="1000.3" y="549" width="2.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1003.26" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="735.2" y="565" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="738.15" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (1 samples, 0.04%)</title><rect x="931.0" y="677" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="933.95" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::~_Alloc_hider() (1 samples, 0.04%)</title><rect x="116.6" y="613" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="119.56" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="579.6" y="693" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="582.64" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (6 samples, 0.22%)</title><rect x="617.8" y="645" width="2.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="620.76" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.04%)</title><rect x="822.2" y="645" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="825.22" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="916.2" y="597" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="919.23" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.11%)</title><rect x="953.5" y="565" width="1.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="956.48" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="927.1" y="533" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="930.06" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (6 samples, 0.22%)</title><rect x="617.8" y="661" width="2.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="620.76" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (1 samples, 0.04%)</title><rect x="955.2" y="693" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="958.21" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (1 samples, 0.04%)</title><rect x="692.7" y="629" width="0.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="695.70" y="639.5" ></text>
</g>
<g >
<title>write (11 samples, 0.40%)</title><rect x="97.9" y="773" width="4.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="100.94" y="783.5" ></text>
</g>
<g >
<title>Triangle::getUVPoint(int)&lt;000000000007cb90&gt; (2 samples, 0.07%)</title><rect x="628.6" y="677" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="631.59" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="979.0" y="661" width="0.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="982.04" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="895.0" y="517" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="898.00" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator=(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="117.9" y="677" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="120.86" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="905.8" y="517" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="908.83" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000129c0&gt; (1 samples, 0.04%)</title><rect x="866.8" y="581" width="0.5" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="869.84" y="591.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.04%)</title><rect x="19.1" y="773" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="22.10" y="783.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (2 samples, 0.07%)</title><rect x="719.1" y="645" width="0.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="722.13" y="655.5" ></text>
</g>
<g >
<title>SDL_Texture_LineBlit::setXY_Start(unsigned short, unsigned short)&lt;000000000005ce40&gt; (3 samples, 0.11%)</title><rect x="165.5" y="677" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="168.51" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="926.6" y="549" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="929.62" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.26%)</title><rect x="955.6" y="677" width="3.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="958.65" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="689.7" y="661" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="692.67" y="671.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000046a50&gt; (1 samples, 0.04%)</title><rect x="249.6" y="661" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="252.55" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="857.7" y="581" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="860.75" y="591.5" ></text>
</g>
<g >
<title>0x00007fb487b225fc (1 samples, 0.04%)</title><rect x="91.9" y="789" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="94.87" y="799.5" ></text>
</g>
<g >
<title>Triangle::getColor()&lt;000000000007c570&gt; (1 samples, 0.04%)</title><rect x="579.2" y="709" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="582.21" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="890.7" y="565" width="1.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="893.67" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (24 samples, 0.88%)</title><rect x="607.4" y="693" width="10.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="610.36" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;)[inline] (1 samples, 0.04%)</title><rect x="116.6" y="693" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="119.56" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (4 samples, 0.15%)</title><rect x="1004.6" y="661" width="1.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1007.60" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.07%)</title><rect x="916.7" y="549" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="919.66" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="916.7" y="565" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="919.66" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="874.2" y="549" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="877.21" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.11%)</title><rect x="953.5" y="581" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="956.48" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.07%)</title><rect x="885.5" y="629" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="888.47" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base() (3 samples, 0.11%)</title><rect x="748.1" y="661" width="1.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="751.15" y="671.5" ></text>
</g>
<g >
<title>XGetEventData&lt;0000000000026930&gt; (1 samples, 0.04%)</title><rect x="105.3" y="773" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="108.30" y="783.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="904.5" y="565" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="907.53" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012af0&gt; (2 samples, 0.07%)</title><rect x="879.4" y="581" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="882.41" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="930.1" y="565" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="933.09" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="835.2" y="693" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="838.22" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (4 samples, 0.15%)</title><rect x="669.7" y="693" width="1.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="672.74" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (18 samples, 0.66%)</title><rect x="939.2" y="693" width="7.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="942.19" y="703.5" ></text>
</g>
<g >
<title>main&lt;000000000000a8d0&gt; (2,105 samples, 77.28%)</title><rect x="113.1" y="773" width="911.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="116.10" y="783.5" >main&lt;000000000000a8d0&gt;</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="575.3" y="613" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="578.31" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="810.5" y="709" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="813.53" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;, std::__false_type) (1 samples, 0.04%)</title><rect x="1021.1" y="309" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1024.06" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (2 samples, 0.07%)</title><rect x="736.0" y="581" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="739.02" y="591.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::rdbuf() const[inline] (1 samples, 0.04%)</title><rect x="1188.7" y="773" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.70" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (15 samples, 0.55%)</title><rect x="758.1" y="661" width="6.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="761.11" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="995.9" y="597" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="998.93" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl::_Vector_impl() (2 samples, 0.07%)</title><rect x="748.6" y="645" width="0.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="751.58" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="121.3" y="677" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="124.33" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="629" width="0.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1027.09" y="639.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (8 samples, 0.29%)</title><rect x="1019.8" y="469" width="3.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1022.76" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_single_threaded()[inline] (1 samples, 0.04%)</title><rect x="968.2" y="501" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="971.21" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (7 samples, 0.26%)</title><rect x="955.6" y="709" width="3.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="958.65" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="936.2" y="677" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="939.15" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="197" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1027.09" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.07%)</title><rect x="904.5" y="549" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="907.53" y="559.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (4 samples, 0.15%)</title><rect x="736.9" y="645" width="1.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="739.89" y="655.5" ></text>
</g>
<g >
<title>Triangle::setColor(SDL_Color)&lt;000000000007c620&gt; (1 samples, 0.04%)</title><rect x="785.0" y="709" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="787.97" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (2 samples, 0.07%)</title><rect x="708.3" y="645" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="711.30" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="927.1" y="469" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="930.06" y="479.5" ></text>
</g>
<g >
<title>0x00007fb4878af96b (1 samples, 0.04%)</title><rect x="83.2" y="789" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="86.21" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (3 samples, 0.11%)</title><rect x="707.9" y="661" width="1.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="710.86" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (4 samples, 0.15%)</title><rect x="893.7" y="581" width="1.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="896.70" y="591.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (18 samples, 0.66%)</title><rect x="729.1" y="645" width="7.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="732.09" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1019.3" y="469" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1022.32" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans(void*)&lt;0000000000025f00&gt; (1 samples, 0.04%)</title><rect x="1024.5" y="37" width="0.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1027.52" y="47.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (2 samples, 0.07%)</title><rect x="875.9" y="597" width="0.9" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="878.94" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator=(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="113.1" y="693" width="0.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="116.10" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.11%)</title><rect x="894.1" y="565" width="1.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="897.13" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.07%)</title><rect x="875.9" y="613" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="878.94" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="955.2" y="709" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="958.21" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="795.8" y="693" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="798.80" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.04%)</title><rect x="977.7" y="693" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="980.74" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="865.1" y="597" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="868.11" y="607.5" ></text>
</g>
<g >
<title>0x0000000004a00007 (1 samples, 0.04%)</title><rect x="10.0" y="789" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (4 samples, 0.15%)</title><rect x="465.7" y="661" width="1.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="468.71" y="671.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010100&gt; (1 samples, 0.04%)</title><rect x="918.0" y="549" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="920.96" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.04%)</title><rect x="110.5" y="789" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="113.50" y="799.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="792.8" y="677" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="795.77" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="817.9" y="677" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="820.89" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (11 samples, 0.40%)</title><rect x="929.7" y="709" width="4.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="932.65" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.07%)</title><rect x="700.9" y="677" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="703.93" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="928.8" y="533" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="931.79" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;)[inline] (1 samples, 0.04%)</title><rect x="1023.2" y="645" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1026.22" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_get_mutex()&lt;00000000000dd920&gt; (1 samples, 0.04%)</title><rect x="885.0" y="597" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="888.04" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (3 samples, 0.11%)</title><rect x="642.5" y="661" width="1.3" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="645.45" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000062810&gt; (6 samples, 0.22%)</title><rect x="567.1" y="693" width="2.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="570.08" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="1008.1" y="549" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1011.06" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFT_Scanline_prep(Triangle&amp;)&lt;0000000000062460&gt; (19 samples, 0.70%)</title><rect x="459.2" y="677" width="8.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="462.21" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="619.9" y="597" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="622.93" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (11 samples, 0.40%)</title><rect x="771.5" y="693" width="4.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="774.54" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.22%)</title><rect x="924.9" y="597" width="2.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="927.89" y="607.5" ></text>
</g>
<g >
<title>operator*(Vec3d const&amp;, float const&amp;)&lt;000000000007e2a0&gt; (1 samples, 0.04%)</title><rect x="952.6" y="725" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="955.61" y="735.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (16 samples, 0.59%)</title><rect x="690.5" y="693" width="7.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="693.54" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_get_Tp_allocator() (1 samples, 0.04%)</title><rect x="720.4" y="645" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="723.43" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::max_size() const (3 samples, 0.11%)</title><rect x="721.7" y="629" width="1.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="724.73" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (4 samples, 0.15%)</title><rect x="986.4" y="661" width="1.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="989.40" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (1 samples, 0.04%)</title><rect x="960.4" y="693" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="963.41" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (5 samples, 0.18%)</title><rect x="1007.2" y="629" width="2.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1010.20" y="639.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="895.9" y="613" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="898.87" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="786.3" y="693" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="789.27" y="703.5" ></text>
</g>
<g >
<title>operator+(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007d290&gt; (1 samples, 0.04%)</title><rect x="577.9" y="693" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="580.91" y="703.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (2 samples, 0.07%)</title><rect x="164.6" y="677" width="0.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="167.65" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="1024.1" y="709" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1027.09" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="834.4" y="645" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="837.35" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (4 samples, 0.15%)</title><rect x="1002.4" y="565" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1005.43" y="575.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="951.3" y="709" width="0.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="954.31" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (1 samples, 0.04%)</title><rect x="880.3" y="597" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="883.27" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.18%)</title><rect x="932.3" y="581" width="2.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="935.25" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (20 samples, 0.73%)</title><rect x="939.2" y="709" width="8.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="942.19" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle const* const&amp;) (1 samples, 0.04%)</title><rect x="830.9" y="661" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="833.89" y="671.5" ></text>
</g>
<g >
<title>0x00007fb4878c0beb (1 samples, 0.04%)</title><rect x="90.1" y="789" width="0.5" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="93.14" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="668.4" y="629" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="671.44" y="639.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="955.2" y="613" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="958.21" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="1004.2" y="581" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1007.16" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="869.9" y="597" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="872.88" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="570.5" y="597" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="573.54" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (3 samples, 0.11%)</title><rect x="854.3" y="725" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="857.28" y="735.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="781.5" y="693" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="784.51" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="682.3" y="677" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="685.31" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.07%)</title><rect x="677.1" y="613" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="680.11" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (6 samples, 0.22%)</title><rect x="617.8" y="677" width="2.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="620.76" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="865.1" y="645" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="868.11" y="655.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="1024.1" y="725" width="0.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1027.09" y="735.5" ></text>
</g>
<g >
<title>void std::__unguarded_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (64 samples, 2.35%)</title><rect x="869.0" y="661" width="27.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="872.01" y="671.5" >v..</text>
</g>
<g >
<title>void std::_Construct&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (7 samples, 0.26%)</title><rect x="1020.2" y="437" width="3.0" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1023.19" y="447.5" ></text>
</g>
<g >
<title>0x00007fb487bdb850 (1 samples, 0.04%)</title><rect x="92.7" y="789" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="95.74" y="799.5" ></text>
</g>
<g >
<title>_XAllocIDs&lt;000000000003e9a0&gt; (1 samples, 0.04%)</title><rect x="106.6" y="789" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="109.60" y="799.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (6 samples, 0.22%)</title><rect x="818.3" y="709" width="2.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="821.33" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="908.4" y="581" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="911.43" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (2 samples, 0.07%)</title><rect x="900.6" y="581" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="903.63" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="905.4" y="549" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="908.40" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="784.1" y="661" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="787.10" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.11%)</title><rect x="854.3" y="693" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="857.28" y="703.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (14 samples, 0.51%)</title><rect x="1009.4" y="677" width="6.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1012.36" y="687.5" ></text>
</g>
<g >
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="952.2" y="725" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="955.18" y="735.5" ></text>
</g>
<g >
<title>0x00007fb4878af95c (1 samples, 0.04%)</title><rect x="79.7" y="789" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="82.74" y="799.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;00000000000100b0&gt; (1 samples, 0.04%)</title><rect x="675.4" y="613" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="678.37" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (6 samples, 0.22%)</title><rect x="604.8" y="661" width="2.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="607.77" y="671.5" ></text>
</g>
<g >
<title>Triangle::setUVPoint(int, Vec2d const&amp;)&lt;000000000007c4e0&gt; (2 samples, 0.07%)</title><rect x="787.1" y="709" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="790.14" y="719.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_move_if_noexcept_a&lt;Triangle*, Triangle*, std::allocator&lt;Triangle&gt; &gt;(Triangle*, Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (20 samples, 0.73%)</title><rect x="995.9" y="677" width="8.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="998.93" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="928.4" y="517" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="931.36" y="527.5" ></text>
</g>
<g >
<title>VectorMathService::MultiplyMatrixVector(Mat4x4 const&amp;, Vec3d&amp;)&lt;000000000007e780&gt; (1 samples, 0.04%)</title><rect x="934.9" y="725" width="0.4" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="937.85" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.18%)</title><rect x="966.5" y="581" width="2.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="969.48" y="591.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="121.3" y="693" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="124.33" y="703.5" ></text>
</g>
<g >
<title>free (1 samples, 0.04%)</title><rect x="720.0" y="613" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="722.99" y="623.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (18 samples, 0.66%)</title><rect x="856.0" y="613" width="7.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="859.01" y="623.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.26%)</title><rect x="969.9" y="645" width="3.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="972.94" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="576.6" y="677" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="579.61" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (10 samples, 0.37%)</title><rect x="824.8" y="677" width="4.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="827.82" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="677.5" y="597" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="680.54" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;SDL_Color&gt; const&amp;) (4 samples, 0.15%)</title><rect x="1021.5" y="389" width="1.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1024.49" y="399.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (1 samples, 0.04%)</title><rect x="960.4" y="709" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="963.41" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.11%)</title><rect x="819.2" y="693" width="1.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="822.19" y="703.5" ></text>
</g>
<g >
<title>0x00007fb4878af95f (3 samples, 0.11%)</title><rect x="80.2" y="789" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="83.18" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="908.0" y="565" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="911.00" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (2 samples, 0.07%)</title><rect x="914.5" y="597" width="0.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="917.49" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006c540&gt; (1 samples, 0.04%)</title><rect x="924.5" y="613" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="927.46" y="623.5" ></text>
</g>
<g >
<title>_XimLocalFilter&lt;000000000006c8b0&gt; (1 samples, 0.04%)</title><rect x="20.4" y="773" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="23.40" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (8 samples, 0.29%)</title><rect x="678.8" y="677" width="3.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="681.84" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_deallocate(Triangle*, unsigned long) (1 samples, 0.04%)</title><rect x="1006.3" y="677" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1009.33" y="687.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007c5b0&gt; (2 samples, 0.07%)</title><rect x="579.6" y="709" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="582.64" y="719.5" ></text>
</g>
<g >
<title>0x0000562205706bff (1 samples, 0.04%)</title><rect x="73.7" y="789" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="76.68" y="799.5" ></text>
</g>
<g >
<title>0x0000562205677fff (122 samples, 4.48%)</title><rect x="20.8" y="789" width="52.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="23.83" y="799.5" >0x000..</text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (20 samples, 0.73%)</title><rect x="995.9" y="645" width="8.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="998.93" y="655.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007ada0&gt; (1 samples, 0.04%)</title><rect x="663.2" y="629" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="666.25" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (3 samples, 0.11%)</title><rect x="862.5" y="581" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="865.51" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (7 samples, 0.26%)</title><rect x="955.6" y="613" width="3.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="958.65" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (9 samples, 0.33%)</title><rect x="776.3" y="693" width="3.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="779.31" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="914.1" y="517" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="917.06" y="527.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="706.6" y="677" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="709.56" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (6 samples, 0.22%)</title><rect x="826.6" y="629" width="2.6" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="829.56" y="639.5" ></text>
</g>
<g >
<title>_dl_mcount@@GLIBC_2.2.5&lt;000000000000dda0&gt; (1 samples, 0.04%)</title><rect x="1127.6" y="773" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1130.62" y="783.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (32 samples, 1.17%)</title><rect x="750.7" y="677" width="13.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="753.75" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;ITriangleRasterizer&gt;::shared_ptr&lt;TexturemapRasterizer, void&gt;(TexturemapRasterizer*) (1 samples, 0.04%)</title><rect x="583.1" y="709" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="586.11" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="728.2" y="629" width="0.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="731.22" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="795.4" y="661" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="798.37" y="671.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to(char const&amp;) (1 samples, 0.04%)</title><rect x="1023.2" y="421" width="0.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1026.22" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="866.8" y="597" width="0.5" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="869.84" y="607.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007cb70&gt; (1 samples, 0.04%)</title><rect x="580.5" y="709" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="583.51" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt; &gt;::_M_node_allocator() (1 samples, 0.04%)</title><rect x="113.1" y="629" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="116.10" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (5 samples, 0.18%)</title><rect x="932.3" y="613" width="2.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="935.25" y="623.5" ></text>
</g>
<g >
<title>SDL_GetRGB&lt;0000000000042e30&gt; (6 samples, 0.22%)</title><rect x="379.1" y="677" width="2.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="382.07" y="687.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007c740&gt; (13 samples, 0.48%)</title><rect x="554.9" y="677" width="5.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="557.95" y="687.5" ></text>
</g>
<g >
<title>Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000065cd0&gt; (1,940 samples, 71.22%)</title><rect x="119.2" y="741" width="840.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="122.16" y="751.5" >Renderer::refreshScreen(std::shared_ptr&lt;TrianglePipeline&gt;)&lt;0000000000065cd0&gt;</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (13 samples, 0.48%)</title><rect x="918.8" y="597" width="5.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="921.83" y="607.5" ></text>
</g>
<g >
<title>0x00007fb4878af979 (2 samples, 0.07%)</title><rect x="86.7" y="789" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="89.67" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="824.4" y="661" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="827.39" y="671.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007e710&gt; (2 samples, 0.07%)</title><rect x="662.8" y="661" width="0.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="665.81" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_before_begin() const (1 samples, 0.04%)</title><rect x="906.7" y="581" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="909.70" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_can_compare(__gnu_debug::_Safe_iterator_base const&amp;) const&lt;00000000000dd910&gt; (2 samples, 0.07%)</title><rect x="947.8" y="725" width="0.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="950.85" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.18%)</title><rect x="872.9" y="613" width="2.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="875.91" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (5 samples, 0.18%)</title><rect x="990.7" y="709" width="2.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="993.73" y="719.5" ></text>
</g>
<g >
<title>write (1 samples, 0.04%)</title><rect x="104.4" y="773" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="107.43" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.11%)</title><rect x="583.5" y="693" width="1.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="586.54" y="703.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000046570&gt; (176 samples, 6.46%)</title><rect x="166.8" y="677" width="76.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="169.81" y="687.5" >TextureP..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="989.4" y="661" width="0.5" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="992.43" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::allocate(std::allocator&lt;Triangle&gt;&amp;, unsigned long)[inline] (2 samples, 0.07%)</title><rect x="719.1" y="629" width="0.9" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="722.13" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="738.6" y="677" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="741.62" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (16 samples, 0.59%)</title><rect x="671.5" y="693" width="6.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="674.48" y="703.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007ada0&gt; (6 samples, 0.22%)</title><rect x="659.8" y="645" width="2.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="662.78" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (7 samples, 0.26%)</title><rect x="969.9" y="661" width="3.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="972.94" y="671.5" ></text>
</g>
<g >
<title>0x00007fb487ee3361 (1 samples, 0.04%)</title><rect x="96.2" y="789" width="0.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="99.20" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="993.3" y="725" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="996.33" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_move_assign(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;, std::integral_constant&lt;bool, true&gt;) (1 samples, 0.04%)</title><rect x="954.8" y="693" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="957.78" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="927.9" y="565" width="0.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="930.92" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (1 samples, 0.04%)</title><rect x="75.4" y="773" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="78.41" y="783.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::operator=(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;&amp;&amp;) (1 samples, 0.04%)</title><rect x="954.8" y="725" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="957.78" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (3 samples, 0.11%)</title><rect x="629.5" y="661" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="632.46" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::clear() (3 samples, 0.11%)</title><rect x="953.5" y="709" width="1.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="956.48" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (1 samples, 0.04%)</title><rect x="18.7" y="773" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="21.66" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="911.9" y="597" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="914.89" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach()&lt;00000000000dd780&gt; (4 samples, 0.15%)</title><rect x="108.8" y="789" width="1.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="111.77" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (4 samples, 0.15%)</title><rect x="974.7" y="709" width="1.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="977.71" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="866.8" y="613" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="869.84" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="868.6" y="581" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="871.58" y="591.5" ></text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e560&gt; (6 samples, 0.22%)</title><rect x="643.8" y="661" width="2.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="646.75" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (19 samples, 0.70%)</title><rect x="916.2" y="613" width="8.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="919.23" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="934.4" y="725" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="937.42" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="764.6" y="693" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="767.61" y="703.5" ></text>
</g>
<g >
<title>SDL_Color* std::copy&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (3 samples, 0.11%)</title><rect x="1020.2" y="341" width="1.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1023.19" y="351.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="578.3" y="661" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="581.34" y="671.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000046a50&gt; (2 samples, 0.07%)</title><rect x="241.3" y="661" width="0.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="244.32" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (2 samples, 0.07%)</title><rect x="900.6" y="597" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="903.63" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="835.2" y="661" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="838.22" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.11%)</title><rect x="730.8" y="597" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="733.82" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="914.9" y="549" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="917.93" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="834.4" y="581" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="837.35" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.11%)</title><rect x="905.4" y="581" width="1.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="908.40" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_create_storage(unsigned long) (1 samples, 0.04%)</title><rect x="829.2" y="661" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="832.16" y="671.5" ></text>
</g>
<g >
<title>Mesh::Mesh(Mesh const&amp;)&lt;000000000005b620&gt; (21 samples, 0.77%)</title><rect x="960.8" y="725" width="9.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="963.84" y="735.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007e710&gt; (4 samples, 0.15%)</title><rect x="789.7" y="693" width="1.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="792.74" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="914.1" y="501" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="917.06" y="511.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1023.2" y="661" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1026.22" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (2 samples, 0.07%)</title><rect x="993.8" y="677" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="996.77" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (6 samples, 0.22%)</title><rect x="1012.4" y="629" width="2.6" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1015.39" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (7 samples, 0.26%)</title><rect x="955.6" y="645" width="3.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="958.65" y="655.5" ></text>
</g>
<g >
<title>0x00007fb4878af956 (3 samples, 0.11%)</title><rect x="77.1" y="789" width="1.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="80.14" y="799.5" ></text>
</g>
<g >
<title>OBJ::split_OBJ_Chunks()&lt;0000000000051780&gt; (1 samples, 0.04%)</title><rect x="1023.2" y="693" width="0.5" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1026.22" y="703.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (7 samples, 0.26%)</title><rect x="841.7" y="709" width="3.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="844.72" y="719.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.07%)</title><rect x="976.9" y="661" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="979.87" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="868.6" y="597" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="871.58" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="501" width="3.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1022.76" y="511.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="907.6" y="597" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="910.56" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (2 samples, 0.07%)</title><rect x="728.2" y="645" width="0.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="731.22" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="868.6" y="613" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="871.58" y="623.5" ></text>
</g>
<g >
<title>void std::__new_allocator&lt;Triangle&gt;::construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;)[inline] (2 samples, 0.07%)</title><rect x="822.7" y="661" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="825.66" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_a2&lt;false, Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (3 samples, 0.11%)</title><rect x="929.7" y="629" width="1.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="932.65" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="834.4" y="597" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="837.35" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="866.8" y="629" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="869.84" y="639.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt; &gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="118.3" y="677" width="0.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="121.30" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)&lt;00000000000dd7f0&gt; (1 samples, 0.04%)</title><rect x="877.2" y="581" width="0.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="880.24" y="591.5" ></text>
</g>
<g >
<title>0x00007fb4878af962 (1 samples, 0.04%)</title><rect x="81.5" y="789" width="0.4" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="84.48" y="799.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.11%)</title><rect x="600.9" y="677" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="603.87" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="859.0" y="565" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="862.05" y="575.5" ></text>
</g>
<g >
<title>0x00007fb487e3b320 (1 samples, 0.04%)</title><rect x="95.3" y="789" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="98.34" y="799.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock(pthread_mutex_t*)&lt;0000000000010100&gt; (1 samples, 0.04%)</title><rect x="988.1" y="661" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="991.14" y="671.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="564.9" y="677" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="567.91" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (6 samples, 0.22%)</title><rect x="620.4" y="693" width="2.6" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="623.36" y="703.5" ></text>
</g>
<g >
<title>0x00007fb487ec57c8 (1 samples, 0.04%)</title><rect x="75.0" y="773" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="77.98" y="783.5" ></text>
</g>
<g >
<title>void std::sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, bool (*)(Triangle, Triangle)) (152 samples, 5.58%)</title><rect x="863.8" y="709" width="65.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="866.81" y="719.5" >void st..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;Camera, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.04%)</title><rect x="958.7" y="725" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="961.68" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (13 samples, 0.48%)</title><rect x="984.2" y="709" width="5.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="987.24" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="937.9" y="709" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="940.89" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (16 samples, 0.59%)</title><rect x="909.3" y="645" width="6.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="912.30" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="116.1" y="677" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="119.13" y="687.5" ></text>
</g>
<g >
<title>Triangle::getTrianglePoint(int)&lt;000000000007cb70&gt; (1 samples, 0.04%)</title><rect x="853.8" y="725" width="0.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="856.85" y="735.5" ></text>
</g>
<g >
<title>void std::__insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (12 samples, 0.44%)</title><rect x="863.8" y="661" width="5.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="866.81" y="671.5" ></text>
</g>
<g >
<title>Triangle const* std::__make_move_if_noexcept_iterator&lt;Triangle, Triangle const*&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="713.5" y="629" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="716.49" y="639.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e350&gt; (1 samples, 0.04%)</title><rect x="665.8" y="661" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="668.84" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (11 samples, 0.40%)</title><rect x="846.9" y="709" width="4.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="849.92" y="719.5" ></text>
</g>
<g >
<title>operator/(Vec3d const&amp;, float const&amp;)&lt;000000000007ddd0&gt; (1 samples, 0.04%)</title><rect x="953.0" y="725" width="0.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="956.05" y="735.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007c5f0&gt; (11 samples, 0.40%)</title><rect x="340.1" y="677" width="4.8" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="343.09" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;__gnu_debug::_Distance_precision&gt;::type&gt;::__type&gt; std::make_pair&lt;unsigned long, __gnu_debug::_Distance_precision&gt;(unsigned long&amp;&amp;, __gnu_debug::_Distance_precision&amp;&amp;) (1 samples, 0.04%)</title><rect x="864.7" y="581" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="867.68" y="591.5" ></text>
</g>
<g >
<title>std::ceil(float)&lt;0000000000046a50&gt; (5 samples, 0.18%)</title><rect x="454.9" y="661" width="2.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="457.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, false, true&gt;::_Node_iterator(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, true&gt;*) (1 samples, 0.04%)</title><rect x="115.7" y="661" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="118.70" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="116.6" y="677" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="119.56" y="687.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt;(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="117.9" y="661" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="120.86" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="834.4" y="517" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="837.35" y="527.5" ></text>
</g>
<g >
<title>void std::__move_median_to_first&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (1 samples, 0.04%)</title><rect x="915.8" y="629" width="0.4" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="918.79" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (2 samples, 0.07%)</title><rect x="926.6" y="565" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="929.62" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (3 samples, 0.11%)</title><rect x="971.7" y="517" width="1.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="974.67" y="527.5" ></text>
</g>
<g >
<title>writev@@GLIBC_2.2.5&lt;0000000000110470&gt; (105 samples, 3.85%)</title><rect x="28.2" y="773" width="45.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="31.19" y="783.5" >writ..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="899.8" y="565" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="902.77" y="575.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="898.0" y="581" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="901.03" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (2 samples, 0.07%)</title><rect x="906.7" y="597" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="909.70" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="686.6" y="677" width="0.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="689.64" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.04%)</title><rect x="955.2" y="597" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="958.21" y="607.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (20 samples, 0.73%)</title><rect x="960.8" y="597" width="8.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="963.84" y="607.5" ></text>
</g>
<g >
<title>TrianglePipeline::TrianglePipeline() (1 samples, 0.04%)</title><rect x="960.4" y="741" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="963.41" y="751.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move_a1&lt;false, Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (3 samples, 0.11%)</title><rect x="929.7" y="645" width="1.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="932.65" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="786.3" y="629" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="789.27" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh*, Mesh&gt;(Mesh*, Mesh*, std::allocator&lt;Mesh&gt;&amp;)[inline] (2 samples, 0.07%)</title><rect x="1024.1" y="613" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1027.09" y="623.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (8 samples, 0.29%)</title><rect x="772.8" y="677" width="3.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="775.84" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="871.6" y="613" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="874.61" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (4 samples, 0.15%)</title><rect x="820.9" y="677" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="823.93" y="687.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatBottomTri(Triangle&amp;)&lt;0000000000062090&gt; (1 samples, 0.04%)</title><rect x="121.8" y="709" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="124.76" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local() const (1 samples, 0.04%)</title><rect x="1023.2" y="453" width="0.5" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1026.22" y="463.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (21 samples, 0.77%)</title><rect x="960.8" y="661" width="9.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="963.84" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="1008.1" y="533" width="1.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1011.06" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_M_decrementable() const (2 samples, 0.07%)</title><rect x="880.7" y="597" width="0.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="883.70" y="607.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (7 samples, 0.26%)</title><rect x="713.9" y="613" width="3.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="716.93" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012af0&gt; (6 samples, 0.22%)</title><rect x="672.3" y="629" width="2.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="675.34" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="866.4" y="629" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="869.41" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.07%)</title><rect x="780.2" y="693" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="783.21" y="703.5" ></text>
</g>
<g >
<title>Triangle::setTexture(std::shared_ptr&lt;TexturePNG&gt;)&lt;000000000007c520&gt; (1 samples, 0.04%)</title><rect x="786.3" y="709" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="789.27" y="719.5" ></text>
</g>
<g >
<title>0x00005622056584df (1 samples, 0.04%)</title><rect x="20.4" y="789" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="23.40" y="799.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (1 samples, 0.04%)</title><rect x="915.8" y="613" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="918.79" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (4 samples, 0.15%)</title><rect x="898.9" y="613" width="1.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="901.90" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (3 samples, 0.11%)</title><rect x="674.9" y="645" width="1.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="677.94" y="655.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::~Mesh_Pipeline() (2 samples, 0.07%)</title><rect x="1024.1" y="661" width="0.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1027.09" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;) (3 samples, 0.11%)</title><rect x="770.2" y="693" width="1.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="773.24" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; const&amp;&gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; const&amp;) (2 samples, 0.07%)</title><rect x="118.3" y="645" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="121.30" y="655.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007c740&gt; (4 samples, 0.15%)</title><rect x="338.4" y="677" width="1.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="341.36" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="989.0" y="661" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="992.00" y="671.5" ></text>
</g>
<g >
<title>TrianglePipeline::orderPipelineByZ()&lt;00000000000672f0&gt; (152 samples, 5.58%)</title><rect x="863.8" y="725" width="65.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="866.81" y="735.5" >Triangl..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_get_mutex()&lt;00000000000dd920&gt; (1 samples, 0.04%)</title><rect x="812.7" y="677" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="815.69" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="827.0" y="581" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="829.99" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.18%)</title><rect x="889.8" y="581" width="2.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="892.80" y="591.5" ></text>
</g>
<g >
<title>bool __gnu_debug::_BeforeBeginHelper&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_S_Is&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::forward_iterator_tag&gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="937.5" y="693" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="940.45" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_detach_single()&lt;00000000000dd700&gt; (2 samples, 0.07%)</title><rect x="10.4" y="773" width="0.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.43" y="783.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007e6b0&gt; (2 samples, 0.07%)</title><rect x="790.6" y="677" width="0.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="793.60" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.07%)</title><rect x="885.5" y="613" width="0.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="888.47" y="623.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;00000000000100c0&gt; (1 samples, 0.04%)</title><rect x="883.3" y="549" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="886.30" y="559.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG*, TexturePNG&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="565" width="3.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1022.76" y="575.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000062730&gt; (77 samples, 2.83%)</title><rect x="475.7" y="677" width="33.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="478.68" y="687.5" >Te..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="924.9" y="581" width="0.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="927.89" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt; (1 samples, 0.04%)</title><rect x="897.6" y="581" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="900.60" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.11%)</title><rect x="953.5" y="597" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="956.48" y="607.5" ></text>
</g>
<g >
<title>VectorMathService::dotProduct(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e560&gt; (1 samples, 0.04%)</title><rect x="805.8" y="709" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="808.76" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (2 samples, 0.07%)</title><rect x="811.8" y="661" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="814.83" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDimPixel(Triangle&amp;)&lt;0000000000062810&gt; (106 samples, 3.89%)</title><rect x="509.0" y="677" width="45.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="512.03" y="687.5" >Text..</text>
</g>
<g >
<title>_XReply&lt;0000000000046120&gt; (1 samples, 0.04%)</title><rect x="107.0" y="789" width="0.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="110.03" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (1 samples, 0.04%)</title><rect x="1015.0" y="629" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1017.99" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.18%)</title><rect x="966.5" y="565" width="2.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="969.48" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="917.5" y="581" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="920.53" y="591.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5&lt;00000000000a78b0&gt; (1 samples, 0.04%)</title><rect x="94.5" y="773" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="97.47" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (1 samples, 0.04%)</title><rect x="954.8" y="661" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="957.78" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="602.6" y="677" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="605.60" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="668.4" y="661" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="671.44" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.11%)</title><rect x="1001.1" y="517" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1004.13" y="527.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (1 samples, 0.04%)</title><rect x="908.4" y="597" width="0.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="911.43" y="607.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.11%)</title><rect x="953.5" y="645" width="1.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="956.48" y="655.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="903.2" y="597" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="906.23" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (4 samples, 0.15%)</title><rect x="793.2" y="677" width="1.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="796.20" y="687.5" ></text>
</g>
<g >
<title>_dl_rtld_di_serinfo@@GLIBC_PRIVATE&lt;0000000000008fa0&gt; (1 samples, 0.04%)</title><rect x="1128.1" y="789" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1131.05" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="904.5" y="517" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="907.53" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="976.9" y="629" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="979.87" y="639.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (4 samples, 0.15%)</title><rect x="1018.0" y="549" width="1.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1021.02" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (13 samples, 0.48%)</title><rect x="901.9" y="629" width="5.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="904.93" y="639.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (1 samples, 0.04%)</title><rect x="955.2" y="645" width="0.4" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="958.21" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (2 samples, 0.07%)</title><rect x="992.0" y="693" width="0.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="995.03" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Mesh&gt;(Mesh*) (2 samples, 0.07%)</title><rect x="1024.1" y="565" width="0.9" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1027.09" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (5 samples, 0.18%)</title><rect x="1017.6" y="693" width="2.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1020.59" y="703.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="870.3" y="629" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="873.31" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.07%)</title><rect x="570.5" y="677" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="573.54" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (20 samples, 0.73%)</title><rect x="995.9" y="613" width="8.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="998.93" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1023.2" y="565" width="0.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1026.22" y="575.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (2 samples, 0.07%)</title><rect x="681.4" y="645" width="0.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="684.44" y="655.5" ></text>
</g>
<g >
<title>tc_malloc (1 samples, 0.04%)</title><rect x="20.0" y="773" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="22.96" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="957.8" y="533" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="960.81" y="543.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (2 samples, 0.07%)</title><rect x="794.9" y="709" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="797.93" y="719.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007e6b0&gt; (1 samples, 0.04%)</title><rect x="663.2" y="645" width="0.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="666.25" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="115.3" y="709" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="118.26" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="899.3" y="549" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="902.33" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::uninitialized_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="717.0" y="629" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="719.96" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="930.5" y="501" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="933.52" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="921.4" y="485" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="924.42" y="495.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="954.8" y="645" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="957.78" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (2 samples, 0.07%)</title><rect x="1024.1" y="245" width="0.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1027.09" y="255.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturemapRasterizer*&gt;(TexturemapRasterizer*, std::integral_constant&lt;bool, false&gt;) (1 samples, 0.04%)</title><rect x="583.1" y="677" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="586.11" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (4 samples, 0.15%)</title><rect x="898.9" y="597" width="1.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="901.90" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (2 samples, 0.07%)</title><rect x="968.6" y="565" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="971.64" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="570.5" y="661" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="573.54" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="921.4" y="501" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="924.42" y="511.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;00000000000100b0&gt; (1 samples, 0.04%)</title><rect x="672.3" y="613" width="0.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="675.34" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (3 samples, 0.11%)</title><rect x="1008.1" y="517" width="1.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1011.06" y="527.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (3 samples, 0.11%)</title><rect x="994.6" y="709" width="1.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="997.63" y="719.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;0000000000046a30&gt; (3 samples, 0.11%)</title><rect x="346.2" y="677" width="1.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="349.15" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_get_mutex()&lt;00000000000dd3c0&gt;[inline] (1 samples, 0.04%)</title><rect x="112.2" y="773" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="115.23" y="783.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (2 samples, 0.07%)</title><rect x="981.2" y="677" width="0.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="984.20" y="687.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (7 samples, 0.26%)</title><rect x="1020.2" y="421" width="3.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1023.19" y="431.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (9 samples, 0.33%)</title><rect x="979.9" y="709" width="3.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="982.90" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (5 samples, 0.18%)</title><rect x="922.3" y="581" width="2.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="925.29" y="591.5" ></text>
</g>
<g >
<title>IAction_Updater::numberOfActiveCommands(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt; const&amp;) const&lt;000000000000d310&gt; (1 samples, 0.04%)</title><rect x="114.8" y="725" width="0.5" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="117.83" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="578.3" y="645" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="581.34" y="655.5" ></text>
</g>
<g >
<title>I_SDL_Texture_Blit::inPixelRange(unsigned short, unsigned short)&lt;000000000005c9b0&gt; (3 samples, 0.11%)</title><rect x="382.1" y="661" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="385.11" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector(__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="824.4" y="693" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="827.39" y="703.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (1 samples, 0.04%)</title><rect x="714.4" y="597" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="717.36" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (8 samples, 0.29%)</title><rect x="1019.8" y="453" width="3.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1022.76" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="1017.2" y="677" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1020.16" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="976.4" y="677" width="1.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="979.44" y="687.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a2&lt;false, SDL_Color const*, SDL_Color*&gt;(SDL_Color const*, SDL_Color const*, SDL_Color*) (1 samples, 0.04%)</title><rect x="1020.6" y="293" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1023.62" y="303.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (1 samples, 0.04%)</title><rect x="915.8" y="597" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="918.79" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (19 samples, 0.70%)</title><rect x="824.0" y="709" width="8.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="826.96" y="719.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (1 samples, 0.04%)</title><rect x="834.4" y="613" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="837.35" y="623.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (4 samples, 0.15%)</title><rect x="747.7" y="677" width="1.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="750.72" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (3 samples, 0.11%)</title><rect x="988.6" y="677" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="991.57" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (4 samples, 0.15%)</title><rect x="932.7" y="549" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="935.69" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="116.6" y="661" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="119.56" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1017.2" y="709" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1020.16" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="976.9" y="645" width="0.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="979.87" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (4 samples, 0.15%)</title><rect x="932.7" y="533" width="1.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="935.69" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (6 samples, 0.22%)</title><rect x="931.8" y="645" width="2.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="934.82" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="617.3" y="597" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="620.33" y="607.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range_aux&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::input_iterator_tag) (1 samples, 0.04%)</title><rect x="1021.1" y="293" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1024.06" y="303.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (14 samples, 0.51%)</title><rect x="1009.4" y="693" width="6.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1012.36" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1024.1" y="421" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1027.09" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="835.2" y="677" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="838.22" y="687.5" ></text>
</g>
<g >
<title>void std::__final_insertion_sort&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (76 samples, 2.79%)</title><rect x="863.8" y="677" width="32.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="866.81" y="687.5" >vo..</text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.07%)</title><rect x="945.2" y="645" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="948.25" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="786.3" y="661" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="789.27" y="671.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000690e0&gt; (3 samples, 0.11%)</title><rect x="629.5" y="677" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="632.46" y="687.5" ></text>
</g>
<g >
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="829.2" y="613" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="832.16" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (9 samples, 0.33%)</title><rect x="760.7" y="549" width="3.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="763.71" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="945.7" y="629" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="948.68" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.18%)</title><rect x="932.3" y="597" width="2.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="935.25" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange(void*, void*, int)&lt;00000000000262b0&gt; (1 samples, 0.04%)</title><rect x="1024.5" y="69" width="0.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1027.52" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="930.5" y="517" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="933.52" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;TexturemapRasterizer, void&gt;(TexturemapRasterizer*) (1 samples, 0.04%)</title><rect x="583.1" y="693" width="0.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="586.11" y="703.5" ></text>
</g>
<g >
<title>TexturePNG::getPixelAtSurfaceUV(float const&amp;, float const&amp;, SDL_Color&amp;)&lt;0000000000046570&gt; (6 samples, 0.22%)</title><rect x="123.9" y="693" width="2.6" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="126.93" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (5 samples, 0.18%)</title><rect x="844.8" y="709" width="2.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="847.75" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*, Triangle&gt;(Triangle*, Triangle*, std::allocator&lt;Triangle&gt;&amp;)[inline] (7 samples, 0.26%)</title><rect x="955.6" y="693" width="3.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="958.65" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineUV(Triangle&amp;)&lt;0000000000062730&gt; (81 samples, 2.97%)</title><rect x="258.2" y="677" width="35.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="261.22" y="687.5" >Te..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::size() const (1 samples, 0.04%)</title><rect x="115.3" y="693" width="0.4" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="118.26" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="866.8" y="549" width="0.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="869.84" y="559.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*&gt;(__gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const*, std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; &gt;, std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;*) (8 samples, 0.29%)</title><rect x="1019.8" y="485" width="3.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1022.76" y="495.5" ></text>
</g>
<g >
<title>0x000000018a308000 (1 samples, 0.04%)</title><rect x="17.8" y="789" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="20.80" y="799.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;Triangle&gt;::~__new_allocator() (1 samples, 0.04%)</title><rect x="833.9" y="629" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="836.92" y="639.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator&lt; &lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="901.5" y="613" width="0.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="904.50" y="623.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="944.4" y="645" width="0.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="947.38" y="655.5" ></text>
</g>
<g >
<title>0x00005621ffffffff (1 samples, 0.04%)</title><rect x="18.7" y="789" width="0.4" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="21.66" y="799.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;0000000000046a30&gt; (5 samples, 0.18%)</title><rect x="457.0" y="661" width="2.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="460.05" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="917.5" y="597" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="920.53" y="607.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="665.8" y="645" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="668.84" y="655.5" ></text>
</g>
<g >
<title>0x00007fb488bb8094 (1 samples, 0.04%)</title><rect x="97.1" y="789" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="100.07" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="910.6" y="581" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="913.59" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="786.3" y="613" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="789.27" y="623.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (2 samples, 0.07%)</title><rect x="570.5" y="629" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="573.54" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="795.4" y="629" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="798.37" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="911.0" y="581" width="0.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="914.03" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (86 samples, 3.16%)</title><rect x="701.8" y="693" width="37.3" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="704.80" y="703.5" >std..</text>
</g>
<g >
<title>0x00005622060925ff (1 samples, 0.04%)</title><rect x="74.5" y="789" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="77.54" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="671.0" y="629" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="674.04" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (1 samples, 0.04%)</title><rect x="1006.8" y="645" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1009.76" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (3 samples, 0.11%)</title><rect x="982.5" y="677" width="1.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="985.50" y="687.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;00000000001128d0&gt; (2 samples, 0.07%)</title><rect x="27.3" y="773" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="30.33" y="783.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="978.6" y="709" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="981.60" y="719.5" ></text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (8 samples, 0.29%)</title><rect x="865.5" y="645" width="3.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="868.54" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (3 samples, 0.11%)</title><rect x="982.5" y="661" width="1.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="985.50" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (2 samples, 0.07%)</title><rect x="968.6" y="581" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="971.64" y="591.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::destroy&lt;TexturePNG&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*)[inline] (2 samples, 0.07%)</title><rect x="1024.1" y="341" width="0.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1027.09" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (6 samples, 0.22%)</title><rect x="762.0" y="533" width="2.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="765.01" y="543.5" ></text>
</g>
<g >
<title>Triangle::setID(int)&lt;000000000007c550&gt; (2 samples, 0.07%)</title><rect x="785.4" y="709" width="0.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="788.40" y="719.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (6 samples, 0.22%)</title><rect x="826.6" y="597" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="829.56" y="607.5" ></text>
</g>
<g >
<title>Triangle::getTextureRawPtr()&lt;000000000007c5f0&gt; (8 samples, 0.29%)</title><rect x="571.4" y="693" width="3.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="574.41" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="1001.1" y="501" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1004.13" y="511.5" ></text>
</g>
<g >
<title>free (2 samples, 0.07%)</title><rect x="583.5" y="645" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="586.54" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="879.8" y="565" width="0.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="882.84" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;(std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*) (1 samples, 0.04%)</title><rect x="1023.2" y="597" width="0.5" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1026.22" y="607.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (5 samples, 0.18%)</title><rect x="1007.2" y="613" width="2.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1010.20" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (9 samples, 0.33%)</title><rect x="692.3" y="661" width="3.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="695.27" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_check_len(unsigned long, char const*) const (15 samples, 0.55%)</title><rect x="720.9" y="645" width="6.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="723.86" y="655.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (6 samples, 0.22%)</title><rect x="924.9" y="613" width="2.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="927.89" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.11%)</title><rect x="854.3" y="709" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="857.28" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt;, true&gt; &gt;, true&gt;::_M_get() (1 samples, 0.04%)</title><rect x="113.1" y="613" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="116.10" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="924.9" y="565" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="927.89" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="987.3" y="645" width="0.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="990.27" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (3 samples, 0.11%)</title><rect x="1001.1" y="485" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1004.13" y="495.5" ></text>
</g>
<g >
<title>Triangle* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (21 samples, 0.77%)</title><rect x="960.8" y="629" width="9.1" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="963.84" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="1002.4" y="549" width="0.5" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1005.43" y="559.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000062920&gt; (4 samples, 0.15%)</title><rect x="250.0" y="677" width="1.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="252.99" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="914.1" y="533" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="917.06" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1024.1" y="485" width="0.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1027.09" y="495.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000690e0&gt; (5 samples, 0.18%)</title><rect x="872.9" y="629" width="2.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="875.91" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.11%)</title><rect x="936.2" y="693" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="939.15" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="928.8" y="581" width="0.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="931.79" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (6 samples, 0.22%)</title><rect x="1012.4" y="645" width="2.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1015.39" y="655.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (1 samples, 0.04%)</title><rect x="875.1" y="629" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="878.07" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (2 samples, 0.07%)</title><rect x="814.4" y="693" width="0.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="817.43" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::operator=(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="117.9" y="693" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="120.86" y="703.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007e6b0&gt; (8 samples, 0.29%)</title><rect x="658.9" y="661" width="3.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="661.91" y="671.5" ></text>
</g>
<g >
<title>0x00007fb4878af980 (3 samples, 0.11%)</title><rect x="88.8" y="789" width="1.3" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="91.84" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="854.7" y="677" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="857.71" y="687.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (3 samples, 0.11%)</title><rect x="804.5" y="693" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="807.46" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::scanlineDetermineDist()&lt;0000000000062920&gt; (3 samples, 0.11%)</title><rect x="467.4" y="677" width="1.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="470.44" y="687.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="866.4" y="613" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="869.41" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="919.7" y="565" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="922.69" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="927.1" y="501" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="930.06" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="888.1" y="597" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="891.07" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::push_back(Triangle const&amp;) (45 samples, 1.65%)</title><rect x="995.9" y="709" width="19.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="998.93" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::base() const (1 samples, 0.04%)</title><rect x="669.3" y="693" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="672.31" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="943.5" y="661" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="946.52" y="671.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (20 samples, 0.73%)</title><rect x="995.9" y="629" width="8.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="998.93" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017e90&gt; (1 samples, 0.04%)</title><rect x="700.1" y="629" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="703.07" y="639.5" ></text>
</g>
<g >
<title>0x00007fb487da886f (1 samples, 0.04%)</title><rect x="93.2" y="789" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="96.17" y="799.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (14 samples, 0.51%)</title><rect x="1009.4" y="661" width="6.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1012.36" y="671.5" ></text>
</g>
<g >
<title>Engine_3D::load_meshes()&lt;00000000000228e0&gt; (10 samples, 0.37%)</title><rect x="1019.8" y="757" width="4.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1022.76" y="767.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator--() (2 samples, 0.07%)</title><rect x="900.6" y="629" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="903.63" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="578.3" y="677" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="581.34" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="602.2" y="677" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="605.17" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="862.1" y="501" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="865.08" y="511.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (1 samples, 0.04%)</title><rect x="576.6" y="693" width="0.4" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="579.61" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.07%)</title><rect x="344.0" y="661" width="0.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="346.99" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="905.4" y="533" width="1.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="908.40" y="543.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_create_storage(unsigned long) (4 samples, 0.15%)</title><rect x="1021.5" y="373" width="1.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1024.49" y="383.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.11%)</title><rect x="610.8" y="677" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="613.83" y="687.5" ></text>
</g>
<g >
<title>Engine_3D::~Engine_3D() (2 samples, 0.07%)</title><rect x="1024.1" y="757" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1027.09" y="767.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="872.5" y="581" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="875.47" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, Triangle&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (18 samples, 0.66%)</title><rect x="856.0" y="677" width="7.8" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="859.01" y="687.5" ></text>
</g>
<g >
<title>0x00007fb487dc14e6 (1 samples, 0.04%)</title><rect x="93.6" y="789" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="96.60" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(Vec3d const&amp;) (18 samples, 0.66%)</title><rect x="632.9" y="677" width="7.8" height="15.0" fill="rgb(210,25,5)" rx="2" ry="2" />
<text  x="635.92" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (7 samples, 0.26%)</title><rect x="980.8" y="693" width="3.0" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="983.77" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="1023.2" y="501" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1026.22" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.11%)</title><rect x="768.9" y="693" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="771.94" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (54 samples, 1.98%)</title><rect x="1150.1" y="789" width="23.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1153.15" y="799.5" >p..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::_Safe_iterator(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt; const&amp;) (1 samples, 0.04%)</title><rect x="916.2" y="581" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="919.23" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="921.4" y="565" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="924.42" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_erase_at_end(Triangle*) (3 samples, 0.11%)</title><rect x="953.5" y="693" width="1.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="956.48" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (2 samples, 0.07%)</title><rect x="936.6" y="661" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="939.59" y="671.5" ></text>
</g>
<g >
<title>SDL_Texture_LineBlit::setXY_Start(unsigned short, unsigned short)&lt;000000000005ce40&gt; (4 samples, 0.15%)</title><rect x="381.7" y="677" width="1.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="384.67" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.11%)</title><rect x="583.5" y="661" width="1.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="586.54" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (1 samples, 0.04%)</title><rect x="946.1" y="661" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="949.12" y="671.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (1 samples, 0.04%)</title><rect x="665.4" y="645" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="668.41" y="655.5" ></text>
</g>
<g >
<title>pthread_getspecific@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1149.7" y="789" width="0.4" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="1152.71" y="799.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="737.8" y="597" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="740.75" y="607.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (21 samples, 0.77%)</title><rect x="960.8" y="693" width="9.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="963.84" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (4 samples, 0.15%)</title><rect x="820.9" y="709" width="1.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="823.93" y="719.5" ></text>
</g>
<g >
<title>0x00007fb4878c46a4 (1 samples, 0.04%)</title><rect x="74.5" y="773" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="77.54" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr() (2 samples, 0.07%)</title><rect x="892.4" y="581" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="895.40" y="591.5" ></text>
</g>
<g >
<title>getpid (1 samples, 0.04%)</title><rect x="1128.5" y="789" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1131.49" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&amp;)&lt;00000000000129c0&gt; (6 samples, 0.22%)</title><rect x="939.2" y="677" width="2.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="942.19" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::operator!=(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;)&lt;000000000005ec50&gt; (2 samples, 0.07%)</title><rect x="815.3" y="709" width="0.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="818.29" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (4 samples, 0.15%)</title><rect x="1018.0" y="581" width="1.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1021.02" y="591.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="974.3" y="709" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="977.27" y="719.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="622.1" y="677" width="0.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="625.09" y="687.5" ></text>
</g>
<g >
<title>parse_printf_format@@GLIBC_2.2.5&lt;0000000000056320&gt; (1 samples, 0.04%)</title><rect x="1129.8" y="789" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1132.79" y="799.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans(void*)&lt;0000000000026020&gt; (1 samples, 0.04%)</title><rect x="1024.5" y="53" width="0.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1027.52" y="63.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::unordered_map(std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="118.3" y="709" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="121.30" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_allocate(unsigned long) (4 samples, 0.15%)</title><rect x="1021.5" y="357" width="1.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1024.49" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="794.9" y="677" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="797.93" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_begin() const (2 samples, 0.07%)</title><rect x="880.7" y="581" width="0.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="883.70" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="915.4" y="581" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="918.36" y="591.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void&gt; &gt;::construct&lt;TexturePNG, TexturePNG&amp;&gt;(std::allocator&lt;void&gt;&amp;, TexturePNG*, TexturePNG&amp;)[inline] (8 samples, 0.29%)</title><rect x="1019.8" y="581" width="3.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1022.76" y="591.5" ></text>
</g>
<g >
<title>Mesh::~Mesh()&lt;0000000000054470&gt; (7 samples, 0.26%)</title><rect x="969.9" y="725" width="3.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="972.94" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="811.8" y="693" width="1.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="814.83" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (3 samples, 0.11%)</title><rect x="670.2" y="661" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="673.18" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (4 samples, 0.15%)</title><rect x="1018.0" y="629" width="1.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1021.02" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="908.4" y="533" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="911.43" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (4 samples, 0.15%)</title><rect x="676.2" y="629" width="1.8" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="679.24" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (17 samples, 0.62%)</title><rect x="824.8" y="693" width="7.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="827.82" y="703.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::capacity() const (2 samples, 0.07%)</title><rect x="993.8" y="693" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="996.77" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;TexturemapRasterizer*&gt;(TexturemapRasterizer*) (1 samples, 0.04%)</title><rect x="583.1" y="661" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="586.11" y="671.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="672.8" y="613" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="675.78" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (3 samples, 0.11%)</title><rect x="668.0" y="677" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="671.01" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator--() (1 samples, 0.04%)</title><rect x="927.5" y="533" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="930.49" y="543.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (3 samples, 0.11%)</title><rect x="922.7" y="565" width="1.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="925.72" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="918.4" y="581" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="921.39" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (5 samples, 0.18%)</title><rect x="1007.2" y="597" width="2.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1010.20" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="918.4" y="597" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="921.39" y="607.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000690e0&gt; (1 samples, 0.04%)</title><rect x="908.0" y="597" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="911.00" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (21 samples, 0.77%)</title><rect x="938.8" y="725" width="9.0" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="941.75" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;ITriangleRasterizer, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator-&gt;() const (1 samples, 0.04%)</title><rect x="582.7" y="709" width="0.4" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="585.67" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (13 samples, 0.48%)</title><rect x="984.2" y="725" width="5.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="987.24" y="735.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.04%)</title><rect x="867.3" y="629" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="870.28" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::base() const (1 samples, 0.04%)</title><rect x="870.3" y="613" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="873.31" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="914.1" y="565" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="917.06" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (2 samples, 0.07%)</title><rect x="836.1" y="725" width="0.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="839.09" y="735.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (3 samples, 0.11%)</title><rect x="907.6" y="629" width="1.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="910.56" y="639.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (3 samples, 0.11%)</title><rect x="827.9" y="565" width="1.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="830.86" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (3 samples, 0.11%)</title><rect x="811.8" y="709" width="1.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="814.83" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (3 samples, 0.11%)</title><rect x="953.5" y="661" width="1.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="956.48" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base()&lt;0000000000015d30&gt; (1 samples, 0.04%)</title><rect x="918.4" y="549" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="921.39" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="982.1" y="677" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="985.07" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose() (1 samples, 0.04%)</title><rect x="1023.2" y="469" width="0.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1026.22" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="891.5" y="549" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="894.53" y="559.5" ></text>
</g>
<g >
<title>Renderer::cartesianToScreen(Vec2d)&lt;0000000000064760&gt; (1 samples, 0.04%)</title><rect x="120.5" y="709" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="123.46" y="719.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base()&lt;0000000000016800&gt; (1 samples, 0.04%)</title><rect x="750.3" y="645" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="753.32" y="655.5" ></text>
</g>
<g >
<title>0x000000382d465454 (1 samples, 0.04%)</title><rect x="18.2" y="789" width="0.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="21.23" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (1 samples, 0.04%)</title><rect x="880.3" y="581" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="883.27" y="591.5" ></text>
</g>
<g >
<title>Triangle* std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (3 samples, 0.11%)</title><rect x="929.7" y="613" width="1.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="932.65" y="623.5" ></text>
</g>
<g >
<title>nonVectorMathService::FastInvSqrt(float)&lt;000000000007ada0&gt; (4 samples, 0.15%)</title><rect x="808.8" y="677" width="1.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="811.80" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (1 samples, 0.04%)</title><rect x="959.1" y="725" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="962.11" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="853.4" y="677" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="856.41" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.15%)</title><rect x="873.3" y="581" width="1.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="876.34" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_dereferenceable() const (1 samples, 0.04%)</title><rect x="914.9" y="581" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="917.93" y="591.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (2 samples, 0.07%)</title><rect x="899.3" y="581" width="0.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="902.33" y="591.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (6 samples, 0.22%)</title><rect x="918.8" y="581" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="921.83" y="591.5" ></text>
</g>
<g >
<title>std::floor(float)&lt;0000000000046a30&gt; (2 samples, 0.07%)</title><rect x="242.2" y="661" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="245.19" y="671.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (76 samples, 2.79%)</title><rect x="896.7" y="677" width="33.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="899.73" y="687.5" >vo..</text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="920.6" y="501" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="923.56" y="511.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (4 samples, 0.15%)</title><rect x="613.9" y="661" width="1.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="616.86" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000062970&gt; (1 samples, 0.04%)</title><rect x="566.6" y="693" width="0.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="569.64" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::operator+(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; const&amp;, long)&lt;000000000006c540&gt; (1 samples, 0.04%)</title><rect x="908.9" y="645" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="911.86" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;Mesh_Pipeline&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="1024.1" y="741" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1027.09" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (7 samples, 0.26%)</title><rect x="955.6" y="597" width="3.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="958.65" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1023.2" y="677" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1026.22" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="920.6" y="533" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="923.56" y="543.5" ></text>
</g>
<g >
<title>std::allocator&lt;Triangle&gt;::~allocator()[inline] (2 samples, 0.07%)</title><rect x="833.5" y="645" width="0.9" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="836.49" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::enable_if&lt;!is_array&lt;TexturePNG&gt;::value, TexturePNG&gt;::type&gt; std::make_shared&lt;TexturePNG, TexturePNG&amp;&gt;(TexturePNG&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="661" width="3.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1022.76" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="872.5" y="597" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="875.47" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (3 samples, 0.11%)</title><rect x="976.4" y="693" width="1.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="979.44" y="703.5" ></text>
</g>
<g >
<title>TrianglePipeline::getTrianglePipeline()&lt;0000000000067420&gt; (19 samples, 0.70%)</title><rect x="855.6" y="725" width="8.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="858.58" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.18%)</title><rect x="872.9" y="597" width="2.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="875.91" y="607.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (19 samples, 0.70%)</title><rect x="855.6" y="709" width="8.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="858.58" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="1017.2" y="661" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1020.16" y="671.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;Triangle&gt; const&amp;) (3 samples, 0.11%)</title><rect x="829.2" y="677" width="1.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="832.16" y="687.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy_a&lt;Triangle const*, Triangle*, Triangle&gt;(Triangle const*, Triangle const*, Triangle*, std::allocator&lt;Triangle&gt;&amp;) (7 samples, 0.26%)</title><rect x="713.9" y="629" width="3.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="716.93" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="923.2" y="533" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="926.16" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**)&lt;0000000000027760&gt; (4 samples, 0.15%)</title><rect x="1021.5" y="277" width="1.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1024.49" y="287.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;Triangle const*, Triangle*&gt;(Triangle const*, Triangle const*, Triangle*) (5 samples, 0.18%)</title><rect x="714.8" y="597" width="2.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="717.79" y="607.5" ></text>
</g>
<g >
<title>operator+(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007d290&gt; (1 samples, 0.04%)</title><rect x="667.1" y="677" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="670.14" y="687.5" ></text>
</g>
<g >
<title>OBJ::buildMesh(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&lt;0000000000051130&gt; (10 samples, 0.37%)</title><rect x="1019.8" y="709" width="4.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1022.76" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="1014.1" y="565" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1017.13" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (1 samples, 0.04%)</title><rect x="898.9" y="565" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="901.90" y="575.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt;::operator=(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="113.1" y="725" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="116.10" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (2 samples, 0.07%)</title><rect x="822.7" y="677" width="0.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="825.66" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (2 samples, 0.07%)</title><rect x="819.6" y="661" width="0.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="822.63" y="671.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (1 samples, 0.04%)</title><rect x="823.5" y="709" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="826.52" y="719.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="1023.2" y="581" width="0.5" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1026.22" y="591.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::unordered_map(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="118.3" y="725" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="121.30" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base(__gnu_debug::_Safe_sequence_base const*, bool)&lt;0000000000017e90&gt; (1 samples, 0.04%)</title><rect x="820.1" y="645" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="823.06" y="655.5" ></text>
</g>
<g >
<title>__gthread_active_p()&lt;00000000000100b0&gt; (1 samples, 0.04%)</title><rect x="986.8" y="645" width="0.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="989.84" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="779.8" y="677" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="782.77" y="687.5" ></text>
</g>
<g >
<title>bool __gnu_debug::__valid_range&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_debug::_Distance_traits&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, std::__is_integer&lt;__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::__type&gt;::__type&amp;) (1 samples, 0.04%)</title><rect x="1021.1" y="325" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1024.06" y="335.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;00000000000100c0&gt; (1 samples, 0.04%)</title><rect x="984.2" y="645" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="987.24" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (1 samples, 0.04%)</title><rect x="820.5" y="693" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="823.49" y="703.5" ></text>
</g>
<g >
<title>Event_Scanner::scanInput()&lt;000000000002c3d0&gt; (2 samples, 0.07%)</title><rect x="117.4" y="725" width="0.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="120.43" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="781.9" y="693" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="784.94" y="703.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d(float const&amp;, float const&amp;, float const&amp;) (4 samples, 0.15%)</title><rect x="816.6" y="693" width="1.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="819.59" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long)[inline] (4 samples, 0.15%)</title><rect x="753.3" y="629" width="1.8" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="756.35" y="639.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::texelDetermineAlphaX()&lt;0000000000062970&gt; (16 samples, 0.59%)</title><rect x="468.7" y="677" width="7.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="471.74" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="983.8" y="709" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="986.80" y="719.5" ></text>
</g>
<g >
<title>__xpg_basename@@GLIBC_2.2.5&lt;000000000004f840&gt; (1 samples, 0.04%)</title><rect x="1129.8" y="757" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1132.79" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="928.4" y="533" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="931.36" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;TexturePNG, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_Sp_counted_ptr_inplace&lt;TexturePNG&amp;&gt;(std::allocator&lt;void&gt;, TexturePNG&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="597" width="3.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1022.76" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_incrementable() const (4 samples, 0.15%)</title><rect x="676.2" y="645" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="679.24" y="655.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (3 samples, 0.11%)</title><rect x="984.7" y="645" width="1.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="987.67" y="655.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::size() const (9 samples, 0.33%)</title><rect x="702.7" y="661" width="3.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="705.67" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (6 samples, 0.22%)</title><rect x="859.9" y="581" width="2.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="862.91" y="591.5" ></text>
</g>
<g >
<title>0x504d554a2020201f (2 samples, 0.07%)</title><rect x="103.1" y="789" width="0.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="106.14" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.11%)</title><rect x="1013.7" y="597" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1016.69" y="607.5" ></text>
</g>
<g >
<title>0x00007fb4878af965 (1 samples, 0.04%)</title><rect x="81.9" y="789" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="84.91" y="799.5" ></text>
</g>
<g >
<title>free (1 samples, 0.04%)</title><rect x="10.0" y="773" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (9 samples, 0.33%)</title><rect x="760.7" y="565" width="3.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="763.71" y="575.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr(std::__shared_ptr&lt;Mesh_Pipeline, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1017.2" y="725" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1020.16" y="735.5" ></text>
</g>
<g >
<title>XFree&lt;0000000000042c50&gt; (1 samples, 0.04%)</title><rect x="105.7" y="789" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="108.73" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="794.9" y="693" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="797.93" y="703.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFlatTopTri(Triangle&amp;)&lt;0000000000061ee0&gt; (506 samples, 18.58%)</title><rect x="347.5" y="693" width="219.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="350.45" y="703.5" >TexturemapRasterizer::drawFl..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="575.3" y="629" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="578.31" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::begin() (3 samples, 0.11%)</title><rect x="696.2" y="677" width="1.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="699.17" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_seq() const (1 samples, 0.04%)</title><rect x="995.1" y="693" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="998.07" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (3 samples, 0.11%)</title><rect x="967.3" y="533" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="970.34" y="543.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (1 samples, 0.04%)</title><rect x="249.1" y="661" width="0.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="252.12" y="671.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (2 samples, 0.07%)</title><rect x="569.7" y="661" width="0.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="572.68" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (2 samples, 0.07%)</title><rect x="1024.1" y="693" width="0.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1027.09" y="703.5" ></text>
</g>
<g >
<title>IAction_Updater::AddRangeInputMap(std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, float, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, float&gt; &gt; &gt; const&amp;, bool)&lt;000000000000d2c0&gt; (1 samples, 0.04%)</title><rect x="113.1" y="741" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="116.10" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (1 samples, 0.04%)</title><rect x="930.5" y="533" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="933.52" y="543.5" ></text>
</g>
<g >
<title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;Triangle&gt; &gt;, std::is_move_constructible&lt;Triangle&gt;, std::is_move_assignable&lt;Triangle&gt; &gt;::value, void&gt;::type std::swap&lt;Triangle&gt;(Triangle&amp;, Triangle&amp;) (3 samples, 0.11%)</title><rect x="907.6" y="613" width="1.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="910.56" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="900.2" y="581" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="903.20" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;) (2 samples, 0.07%)</title><rect x="118.3" y="693" width="0.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="121.30" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::~_Sp_counted_base() (1 samples, 0.04%)</title><rect x="584.4" y="629" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="587.41" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition_pivot&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (29 samples, 1.06%)</title><rect x="896.7" y="661" width="12.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="899.73" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (4 samples, 0.15%)</title><rect x="762.9" y="517" width="1.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="765.88" y="527.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="578.3" y="693" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="581.34" y="703.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_vector() (20 samples, 0.73%)</title><rect x="739.1" y="677" width="8.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="742.05" y="687.5" ></text>
</g>
<g >
<title>Triangle::getTexture()&lt;000000000007c5b0&gt; (5 samples, 0.18%)</title><rect x="782.4" y="709" width="2.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="785.37" y="719.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="888.9" y="597" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="891.94" y="607.5" ></text>
</g>
<g >
<title>recvmsg@@GLIBC_2.2.5&lt;00000000001128d0&gt; (6 samples, 0.22%)</title><rect x="1186.1" y="789" width="2.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1189.10" y="799.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="533" width="0.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1027.09" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::get() const (5 samples, 0.18%)</title><rect x="562.7" y="661" width="2.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="565.75" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; std::__unguarded_partition&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (15 samples, 0.55%)</title><rect x="909.3" y="629" width="6.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="912.30" y="639.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (1 samples, 0.04%)</title><rect x="896.3" y="613" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="899.30" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (3 samples, 0.11%)</title><rect x="1013.7" y="581" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1016.69" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle&gt;(Triangle*) (4 samples, 0.15%)</title><rect x="1018.0" y="565" width="1.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1021.02" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt;::vector(std::__cxx1998::vector&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;, std::allocator&lt;std::__debug::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt; &gt; const&amp;) (8 samples, 0.29%)</title><rect x="1019.8" y="517" width="3.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1022.76" y="527.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="954.8" y="629" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="957.78" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="908.0" y="581" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="911.00" y="591.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (4 samples, 0.15%)</title><rect x="1018.0" y="645" width="1.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1021.02" y="655.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d(Vec2d const&amp;) (1 samples, 0.04%)</title><rect x="120.5" y="693" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="123.46" y="703.5" ></text>
</g>
<g >
<title>0x00007fb477bf7042 (1 samples, 0.04%)</title><rect x="75.8" y="789" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="78.84" y="799.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (1 samples, 0.04%)</title><rect x="1020.6" y="277" width="0.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1023.62" y="287.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007e710&gt; (10 samples, 0.37%)</title><rect x="806.2" y="709" width="4.3" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="809.20" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (7 samples, 0.26%)</title><rect x="955.6" y="581" width="3.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="958.65" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;Triangle&gt;::allocator(std::allocator&lt;Triangle&gt; const&amp;)[inline] (1 samples, 0.04%)</title><rect x="830.0" y="645" width="0.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="833.02" y="655.5" ></text>
</g>
<g >
<title>0x0000562205b4a08f (1 samples, 0.04%)</title><rect x="74.1" y="789" width="0.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="77.11" y="799.5" ></text>
</g>
<g >
<title>VectorMathService::getSignedShortestDist(Vec3d&amp;, Vec3d&amp;, Vec3d&amp;)&lt;000000000007ea70&gt; (40 samples, 1.47%)</title><rect x="641.2" y="677" width="17.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="644.15" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="978.6" y="677" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="981.60" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (6 samples, 0.22%)</title><rect x="1006.8" y="661" width="2.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1009.76" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (39 samples, 1.43%)</title><rect x="837.0" y="725" width="16.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="839.95" y="735.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.04%)</title><rect x="11.3" y="773" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="14.30" y="783.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;::operator()&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;) (4 samples, 0.15%)</title><rect x="925.8" y="581" width="1.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="928.76" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_S_max_size(std::allocator&lt;Triangle&gt; const&amp;) (3 samples, 0.11%)</title><rect x="721.7" y="613" width="1.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="724.73" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (2 samples, 0.07%)</title><rect x="578.3" y="613" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="581.34" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;* std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::operator()&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; const&amp;&gt;(std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; const&amp;) const (2 samples, 0.07%)</title><rect x="118.3" y="661" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="121.30" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (5 samples, 0.18%)</title><rect x="860.3" y="565" width="2.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="863.35" y="575.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (29 samples, 1.06%)</title><rect x="1173.5" y="789" width="12.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1176.54" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (2 samples, 0.07%)</title><rect x="835.2" y="709" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="838.22" y="719.5" ></text>
</g>
<g >
<title>operator*(float const&amp;, Vec3d const&amp;)&lt;000000000007e1f0&gt; (2 samples, 0.07%)</title><rect x="663.7" y="661" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="666.68" y="671.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="786.3" y="645" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="789.27" y="655.5" ></text>
</g>
<g >
<title>XSetTextProperty&lt;000000000003cca0&gt; (1 samples, 0.04%)</title><rect x="106.2" y="789" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="109.17" y="799.5" ></text>
</g>
<g >
<title>TrianglePipeline::~TrianglePipeline()&lt;0000000000026520&gt; (4 samples, 0.15%)</title><rect x="1018.0" y="661" width="1.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1021.02" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::__normal_iterator(Triangle* const&amp;) (1 samples, 0.04%)</title><rect x="701.4" y="661" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="704.37" y="671.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;Triangle, Triangle const&amp;&gt;(Triangle*, Triangle const&amp;) (6 samples, 0.22%)</title><rect x="826.6" y="613" width="2.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="829.56" y="623.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (11 samples, 0.40%)</title><rect x="924.9" y="629" width="4.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="927.89" y="639.5" ></text>
</g>
<g >
<title>VectorMathService::getInverseVectorLength(Vec3d const&amp;)&lt;000000000007e6b0&gt; (25 samples, 0.92%)</title><rect x="647.7" y="645" width="10.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="650.65" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (2 samples, 0.07%)</title><rect x="861.6" y="549" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="864.64" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__scoped_lock::~__scoped_lock()&lt;0000000000012ac0&gt; (1 samples, 0.04%)</title><rect x="911.5" y="565" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="914.46" y="575.5" ></text>
</g>
<g >
<title>0x00007fb48795580b (1 samples, 0.04%)</title><rect x="91.0" y="789" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="94.01" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="855.1" y="645" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="858.15" y="655.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TrianglePipeline&gt;::~shared_ptr() (5 samples, 0.18%)</title><rect x="1017.6" y="741" width="2.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1020.59" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="630.3" y="597" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="633.32" y="607.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*&gt;(__gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;SDL_Color const*, std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; &gt;, SDL_Color*) (1 samples, 0.04%)</title><rect x="1020.6" y="325" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1023.62" y="335.5" ></text>
</g>
<g >
<title>__gnu_internal::get_mutex(unsigned char)&lt;00000000000e0e80&gt; (1 samples, 0.04%)</title><rect x="885.9" y="581" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="888.90" y="591.5" ></text>
</g>
<g >
<title>SDL_Color* std::__copy_move_a1&lt;false, SDL_Color const*, SDL_Color*&gt;(SDL_Color const*, SDL_Color const*, SDL_Color*) (1 samples, 0.04%)</title><rect x="1020.6" y="309" width="0.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1023.62" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="1017.2" y="693" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1020.16" y="703.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_Vector_impl_data::_Vector_impl_data() (1 samples, 0.04%)</title><rect x="749.0" y="629" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="752.02" y="639.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::construct&lt;Triangle, Triangle const&amp;&gt;(std::allocator&lt;Triangle&gt;&amp;, Triangle*, Triangle const&amp;)[inline] (4 samples, 0.15%)</title><rect x="736.9" y="661" width="1.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="739.89" y="671.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawFB_Scanline_prep(Triangle&amp;)&lt;0000000000062a60&gt; (14 samples, 0.51%)</title><rect x="243.9" y="677" width="6.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="246.92" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Triangle&gt; &gt;::deallocate(std::allocator&lt;Triangle&gt;&amp;, Triangle*, unsigned long)[inline] (1 samples, 0.04%)</title><rect x="1006.3" y="661" width="0.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1009.33" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data() const (1 samples, 0.04%)</title><rect x="1023.2" y="437" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1026.22" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (6 samples, 0.22%)</title><rect x="849.1" y="629" width="2.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="852.08" y="639.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (2 samples, 0.07%)</title><rect x="1024.1" y="517" width="0.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1027.09" y="527.5" ></text>
</g>
<g >
<title>Triangle::operator=(Triangle const&amp;)&lt;00000000000690e0&gt; (1 samples, 0.04%)</title><rect x="866.0" y="629" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="868.98" y="639.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (5 samples, 0.18%)</title><rect x="927.5" y="613" width="2.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="930.49" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (3 samples, 0.11%)</title><rect x="892.0" y="597" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="894.97" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (1 samples, 0.04%)</title><rect x="914.1" y="549" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="917.06" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator--() (1 samples, 0.04%)</title><rect x="927.5" y="549" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="930.49" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="979.0" y="693" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="982.04" y="703.5" ></text>
</g>
<g >
<title>std::__debug::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::erase(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="115.7" y="725" width="0.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="118.70" y="735.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="795.8" y="709" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="798.80" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (2 samples, 0.07%)</title><rect x="920.1" y="565" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="923.12" y="575.5" ></text>
</g>
<g >
<title>operator-(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007e350&gt; (4 samples, 0.15%)</title><rect x="816.6" y="709" width="1.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="819.59" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="892.0" y="581" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="894.97" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (1 samples, 0.04%)</title><rect x="954.8" y="581" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="957.78" y="591.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::TexturemapRasterizer(SDL_Renderer*, SDL_Texture_LineBlit*) (2 samples, 0.07%)</title><rect x="120.9" y="709" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="123.90" y="719.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt;(double) (1 samples, 0.04%)</title><rect x="117.0" y="725" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="120.00" y="735.5" ></text>
</g>
<g >
<title>VectorMathService::getUnitVector(Vec3d&amp;)&lt;000000000007e710&gt; (28 samples, 1.03%)</title><rect x="646.4" y="661" width="12.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="649.35" y="671.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (3 samples, 0.11%)</title><rect x="883.7" y="549" width="1.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="886.74" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (1 samples, 0.04%)</title><rect x="728.7" y="613" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="731.66" y="623.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (2 samples, 0.07%)</title><rect x="913.2" y="581" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="916.19" y="591.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (2 samples, 0.07%)</title><rect x="344.9" y="677" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="347.85" y="687.5" ></text>
</g>
<g >
<title>operator+(Vec2d const&amp;, Vec2d const&amp;)&lt;000000000007d290&gt; (1 samples, 0.04%)</title><rect x="582.2" y="709" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="585.24" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TrianglePipeline, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (5 samples, 0.18%)</title><rect x="1017.6" y="725" width="2.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1020.59" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SDL_Color&gt; &gt;::allocate(std::allocator&lt;SDL_Color&gt;&amp;, unsigned long)[inline] (4 samples, 0.15%)</title><rect x="1021.5" y="341" width="1.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1024.49" y="351.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;) (7 samples, 0.26%)</title><rect x="931.4" y="661" width="3.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="934.39" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="921.4" y="533" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="924.42" y="543.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (1 samples, 0.04%)</title><rect x="954.8" y="597" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="957.78" y="607.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (1 samples, 0.04%)</title><rect x="978.6" y="693" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="981.60" y="703.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (2 samples, 0.07%)</title><rect x="16.1" y="773" width="0.8" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="19.06" y="783.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector() (24 samples, 0.88%)</title><rect x="739.1" y="693" width="10.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="742.05" y="703.5" ></text>
</g>
<g >
<title>0x00007fb487deb3b3 (1 samples, 0.04%)</title><rect x="94.5" y="789" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="97.47" y="799.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="915.4" y="565" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="918.36" y="575.5" ></text>
</g>
<g >
<title>Mesh_Pipeline::Add_OBJ_Mesh_to_Pipeline(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Vec3d, Vec3d)&lt;0000000000073090&gt; (10 samples, 0.37%)</title><rect x="1019.8" y="741" width="4.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1022.76" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::shared_ptr() (5 samples, 0.18%)</title><rect x="851.7" y="709" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="854.68" y="719.5" ></text>
</g>
<g >
<title>void std::__introsort_loop&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (2 samples, 0.07%)</title><rect x="928.8" y="597" width="0.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="931.79" y="607.5" ></text>
</g>
<g >
<title>TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060fd0&gt; (1,055 samples, 38.73%)</title><rect x="122.2" y="709" width="457.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="125.20" y="719.5" >TexturemapRasterizer::drawTriangle(Triangle&amp;)&lt;0000000000060fd0&gt;</text>
</g>
<g >
<title>void std::__unguarded_linear_insert&lt;__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt; &gt;(__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool (*)(Triangle, Triangle)&gt;) (60 samples, 2.20%)</title><rect x="870.7" y="645" width="26.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="873.74" y="655.5" >v..</text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::bidirectional_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="911.0" y="597" width="0.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="914.03" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::~_Safe_iterator() (1 samples, 0.04%)</title><rect x="814.9" y="677" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="817.86" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;TrianglePipeline*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() (4 samples, 0.15%)</title><rect x="1018.0" y="677" width="1.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1021.02" y="687.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (1 samples, 0.04%)</title><rect x="794.5" y="661" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="797.50" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.15%)</title><rect x="1000.7" y="533" width="1.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1003.70" y="543.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="823.1" y="597" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="826.09" y="607.5" ></text>
</g>
<g >
<title>0x00007fb488b4c66a (1 samples, 0.04%)</title><rect x="96.6" y="789" width="0.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="99.64" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="619.9" y="613" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="622.93" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Mesh*, std::__cxx1998::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt; &gt;, std::__debug::vector&lt;Mesh, std::allocator&lt;Mesh&gt; &gt;, std::random_access_iterator_tag&gt;::operator++() (1 samples, 0.04%)</title><rect x="979.0" y="725" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="982.04" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (2 samples, 0.07%)</title><rect x="957.8" y="549" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="960.81" y="559.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="929.7" y="565" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="932.65" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator++() (2 samples, 0.07%)</title><rect x="811.8" y="677" width="0.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="814.83" y="687.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="448.4" y="661" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="451.38" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_vector&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_M_update_guaranteed_capacity() (9 samples, 0.33%)</title><rect x="702.7" y="677" width="3.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="705.67" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (3 samples, 0.11%)</title><rect x="953.5" y="613" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="956.48" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="855.1" y="629" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="858.15" y="639.5" ></text>
</g>
<g >
<title>operator+(Vec3d const&amp;, Vec3d const&amp;)&lt;000000000007df30&gt; (3 samples, 0.11%)</title><rect x="664.5" y="661" width="1.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="667.54" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator_base::_M_singular() const&lt;00000000000dd840&gt; (1 samples, 0.04%)</title><rect x="938.3" y="709" width="0.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="941.32" y="719.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.07%)</title><rect x="670.6" y="645" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="673.61" y="655.5" ></text>
</g>
<g >
<title>0x00007fb4878af95a (3 samples, 0.11%)</title><rect x="78.4" y="789" width="1.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="81.44" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() const (2 samples, 0.07%)</title><rect x="830.5" y="677" width="0.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="833.46" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (1 samples, 0.04%)</title><rect x="116.6" y="629" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="119.56" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="812.3" y="629" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="815.26" y="639.5" ></text>
</g>
<g >
<title>__glDispatchCheckMultithreaded&lt;0000000000042ff0&gt; (1 samples, 0.04%)</title><rect x="108.3" y="789" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="111.33" y="799.5" ></text>
</g>
<g >
<title>std::__cxx1998::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, IAction*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IAction*&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="115.7" y="709" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="118.70" y="719.5" ></text>
</g>
<g >
<title>0x00007fb4878af97c (3 samples, 0.11%)</title><rect x="87.5" y="789" width="1.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="90.54" y="799.5" ></text>
</g>
<g >
<title>f64xsubf128@@GLIBC_2.28&lt;0000000000071480&gt; (13 samples, 0.48%)</title><rect x="235.7" y="661" width="5.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="238.69" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_is_end() const (1 samples, 0.04%)</title><rect x="869.4" y="581" width="0.5" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="872.44" y="591.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::vector(std::__cxx1998::vector&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt; const&amp;) (7 samples, 0.26%)</title><rect x="1020.2" y="405" width="3.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1023.19" y="415.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (3 samples, 0.11%)</title><rect x="821.4" y="661" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="824.36" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::lock()&lt;0000000000012af0&gt; (4 samples, 0.15%)</title><rect x="883.3" y="565" width="1.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="886.30" y="575.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::~vector() (1 samples, 0.04%)</title><rect x="954.8" y="677" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="957.78" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (1 samples, 0.04%)</title><rect x="872.5" y="613" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="875.47" y="623.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::operator*() const (11 samples, 0.40%)</title><rect x="979.5" y="725" width="4.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="982.47" y="735.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::_M_allocate(unsigned long) (1 samples, 0.04%)</title><rect x="829.2" y="645" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="832.16" y="655.5" ></text>
</g>
<g >
<title>__nss_database_lookup@GLIBC_2.2.5&lt;0000000000157730&gt; (2 samples, 0.07%)</title><rect x="666.3" y="677" width="0.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="669.28" y="687.5" ></text>
</g>
<g >
<title>free (1 samples, 0.04%)</title><rect x="97.5" y="773" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="100.50" y="783.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.11%)</title><rect x="583.5" y="677" width="1.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="586.54" y="687.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_attach(__gnu_debug::_Safe_iterator_base*, bool)&lt;00000000000dd5b0&gt; (1 samples, 0.04%)</title><rect x="910.2" y="565" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="913.16" y="575.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt;::_Safe_container(__gnu_debug::_Safe_container&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::allocator&lt;Triangle&gt;, __gnu_debug::_Safe_sequence, true&gt; const&amp;) (1 samples, 0.04%)</title><rect x="855.6" y="693" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="858.58" y="703.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long))&lt;0000000000027940&gt; (4 samples, 0.15%)</title><rect x="1021.5" y="309" width="1.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1024.49" y="319.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::_Safe_sequence(__gnu_debug::_Safe_sequence&lt;std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="855.6" y="677" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="858.58" y="687.5" ></text>
</g>
<g >
<title>std::__cxx1998::_Vector_base&lt;SDL_Color, std::allocator&lt;SDL_Color&gt; &gt;::_M_deallocate(SDL_Color*, unsigned long) (2 samples, 0.07%)</title><rect x="1024.1" y="149" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1027.09" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int)[inline] (1 samples, 0.04%)</title><rect x="927.1" y="485" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="930.06" y="495.5" ></text>
</g>
<g >
<title>_init&lt;000000000000a000&gt; (1 samples, 0.04%)</title><rect x="992.9" y="725" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="995.90" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy() (1 samples, 0.04%)</title><rect x="862.1" y="533" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="865.08" y="543.5" ></text>
</g>
<g >
<title>Vec2d::Vec2d() (7 samples, 0.26%)</title><rect x="637.7" y="661" width="3.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="640.69" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add(int volatile*, int)[inline] (1 samples, 0.04%)</title><rect x="784.1" y="613" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="787.10" y="623.5" ></text>
</g>
<g >
<title>std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::vector(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="955.2" y="725" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="958.21" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt; const&amp;) (4 samples, 0.15%)</title><rect x="616.0" y="661" width="1.8" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="619.03" y="671.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_distance_to_end() const (1 samples, 0.04%)</title><rect x="864.7" y="613" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="867.68" y="623.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock(pthread_mutex_t*)&lt;00000000000100c0&gt; (1 samples, 0.04%)</title><rect x="941.4" y="661" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="944.35" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (2 samples, 0.07%)</title><rect x="1024.1" y="389" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1027.09" y="399.5" ></text>
</g>
<g >
<title>TrianglePipeline::setPipelineFromTriangles(std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;)&lt;00000000000672d0&gt; (11 samples, 0.40%)</title><rect x="929.7" y="725" width="4.7" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="932.65" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()[inline] (1 samples, 0.04%)</title><rect x="11.3" y="741" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="14.30" y="751.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::forward_iterator_tag&gt;::_M_get_sequence() const (1 samples, 0.04%)</title><rect x="869.4" y="565" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="872.44" y="575.5" ></text>
</g>
<g >
<title>Renderer::drawFilledTriangle2d(Triangle)&lt;00000000000647f0&gt; (1,074 samples, 39.43%)</title><rect x="119.6" y="725" width="465.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="122.60" y="735.5" >Renderer::drawFilledTriangle2d(Triangle)&lt;00000000000647f0&gt;</text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::operator=(std::shared_ptr&lt;TexturePNG&gt; const&amp;) (5 samples, 0.18%)</title><rect x="1000.3" y="565" width="2.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1003.26" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::operator=(std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt; const&amp;) (1 samples, 0.04%)</title><rect x="930.5" y="549" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="933.52" y="559.5" ></text>
</g>
<g >
<title>Triangle* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*&gt;(__gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;Triangle const*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, Triangle*) (10 samples, 0.37%)</title><rect x="824.8" y="645" width="4.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="827.82" y="655.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2&lt;000000000008b550&gt; (45 samples, 1.65%)</title><rect x="1130.2" y="789" width="19.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1133.22" y="799.5" ></text>
</g>
<g >
<title>Vec3d::Vec3d() (1 samples, 0.04%)</title><rect x="865.1" y="613" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="868.11" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_single_threaded()[inline] (2 samples, 0.07%)</title><rect x="575.3" y="597" width="0.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="578.31" y="607.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_iterator&lt;__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, std::__debug::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;, std::random_access_iterator_tag&gt;::_Safe_iterator(__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;, __gnu_debug::_Safe_sequence_base const*) (11 samples, 0.40%)</title><rect x="691.4" y="677" width="4.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="694.40" y="687.5" ></text>
</g>
<g >
<title>Triangle::~Triangle()&lt;00000000000267e0&gt; (7 samples, 0.26%)</title><rect x="969.9" y="613" width="3.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="972.94" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count() (1 samples, 0.04%)</title><rect x="969.1" y="549" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="972.07" y="559.5" ></text>
</g>
<g >
<title>std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt;::end() (2 samples, 0.07%)</title><rect x="936.6" y="677" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="939.59" y="687.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;TexturePNG&gt;::~shared_ptr() (7 samples, 0.26%)</title><rect x="969.9" y="597" width="3.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="972.94" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="880.3" y="565" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="883.27" y="575.5" ></text>
</g>
<g >
<title>Triangle::Triangle(Triangle const&amp;) (2 samples, 0.07%)</title><rect x="822.7" y="645" width="0.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="825.66" y="655.5" ></text>
</g>
<g >
<title>Triangle::getLightDimAmount()&lt;000000000007c740&gt; (5 samples, 0.18%)</title><rect x="552.8" y="661" width="2.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="555.78" y="671.5" ></text>
</g>
<g >
<title>Triangle::Triangle() (26 samples, 0.95%)</title><rect x="596.1" y="693" width="11.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="599.10" y="703.5" ></text>
</g>
<g >
<title>0x525453202020201f (1 samples, 0.04%)</title><rect x="104.0" y="789" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="107.00" y="799.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;)[inline] (1 samples, 0.04%)</title><rect x="1023.2" y="549" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1026.22" y="559.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;SDL_Color&gt;::allocate(unsigned long, void const*) (4 samples, 0.15%)</title><rect x="1021.5" y="325" width="1.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1024.49" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__mutex::unlock()&lt;0000000000012c90&gt; (1 samples, 0.04%)</title><rect x="911.5" y="549" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="914.46" y="559.5" ></text>
</g>
<g >
<title>__gnu_debug::_Safe_sequence_base::_M_detach_all()&lt;00000000000dd670&gt; (1 samples, 0.04%)</title><rect x="749.9" y="645" width="0.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="752.88" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Triangle*, std::__cxx1998::vector&lt;Triangle, std::allocator&lt;Triangle&gt; &gt; &gt;::operator++() (1 samples, 0.04%)</title><rect x="931.8" y="629" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="934.82" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;Triangle*&gt;(Triangle*, Triangle*) (2 samples, 0.07%)</title><rect x="1024.1" y="469" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1027.09" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;TexturePNG, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (2 samples, 0.07%)</title><rect x="921.4" y="549" width="0.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="924.42" y="559.5" ></text>
</g>
</g>
</svg>
